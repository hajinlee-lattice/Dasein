<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.latticeengines</groupId>
    <artifactId>le-web-parent</artifactId>
    <packaging>pom</packaging>
    <version>4.2.2-SNAPSHOT</version>
    <description>Parent of all lattice engine web projects.</description>

    <parent>
        <groupId>com.latticeengines</groupId>
        <artifactId>le-parent</artifactId>
        <version>4.2.2-SNAPSHOT</version>
        <relativePath>pom.xml</relativePath>
    </parent>

    <properties>
        <jetty.dir>main</jetty.dir>
        <jetty.stop.port>10999</jetty.stop.port>
        <jetty.use.test.cp>false</jetty.use.test.cp>
    </properties>

    <profiles>
        <profile>
            <id>jetty</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-maven-plugin</artifactId>
                        <version>${jetty.version}</version>
                        <configuration>
                            <httpConnector>
                                <port>${jetty.port}</port>
                            </httpConnector>
                            <webAppConfig>
                                <extraClasspath>${env.HADOOP_CONF_DIR};${env.JAVA_HOME}/lib/tools.jar
                                </extraClasspath>
                            </webAppConfig>
                            <systemProperties>
                                <systemProperty>
                                    <name>log4j.configuration</name>
                                    <value>file:///${project.basedir}/src/${jetty.dir}/resources/log4j.properties</value>
                                </systemProperty>
                                <systemProperty>
                                    <name>com.latticeengines.registerBootstrappers</name>
                                    <value>true</value>
                                </systemProperty>
                            </systemProperties>
                            <webXml>${basedir}/src/${jetty.dir}/webapp/WEB-INF/web.xml</webXml>
                            <webAppSourceDirectory>${basedir}/src/${jetty.dir}/webapp</webAppSourceDirectory>
                            <useTestClasspath>${jetty.use.test.cp}</useTestClasspath>
                            <scanIntervalSeconds>0</scanIntervalSeconds>
                            <stopPort>${jetty.stop.port}</stopPort>
                            <stopKey>STOP</stopKey>
                            <stopWait>10</stopWait>
                            <daemon>true</daemon>
                            </configuration>
                        <executions>
                            <execution>
                                <id>start-jetty</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <scanIntervalSeconds>0</scanIntervalSeconds>
                                    <daemon>true</daemon>
                                    <waitForChild>false</waitForChild>
                                    <jvmArgs>${jacoco.agent.itArgLine}</jvmArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-jetty</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.ow2.asm</groupId>
                                <artifactId>asm</artifactId>
                                <version>5.0.2</version>
                            </dependency>
                            <dependency>
                                <groupId>org.ow2.asm</groupId>
                                <artifactId>asm-commons</artifactId>
                                <version>5.0.2</version>
                            </dependency>
                            <dependency>
                                <groupId>com.sun.mail</groupId>
                                <artifactId>javax.mail</artifactId>
                                <version>${javax.mail.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven.war.version}</version>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <LE-SCM-Revision>${buildNumber}</LE-SCM-Revision>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
        </plugins>

        <defaultGoal>install</defaultGoal>
        <pluginManagement>
            <plugins>
                <!-- The Jetty Maven plugin is useful for rapid development and testing. You can add
                    it to any webapp project that is structured according to the usual Maven defaults. The plugin can then
                    periodically scan your project for changes and automatically redeploy the webapp if any are found. This
                    makes the development cycle more productive by eliminating the build and deploy steps: you use your IDE
                    to make changes to the project, and the running web container automatically picks them up, allowing you
                    to test them straight away. To run - mvn jetty:run -->
                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>${jetty.version}</version>
                    <executions>
                        <execution>
                            <id>start-jetty</id>
                            <phase>process-test-classes</phase>
                            <goals>
                                <goal>start</goal>
                            </goals>
                            <configuration>
                                <scanIntervalSeconds>10</scanIntervalSeconds>
                                <daemon>true</daemon>
                            </configuration>
                        </execution>
                        <execution>
                            <id>stop-jetty</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>stop</goal>
                            </goals>
                            <configuration>
                                <stopPort>9001</stopPort>
                                <stopKey>secret</stopKey>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <dependencies>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>jsr250-api</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- Spring Framework Dependencies -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>

    </dependencies>

</project>
