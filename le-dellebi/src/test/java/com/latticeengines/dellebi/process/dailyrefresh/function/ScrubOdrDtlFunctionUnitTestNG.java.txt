package com.latticeengines.dellebi.process.dailyrefresh.function;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapred.FileSplit;
import org.apache.hadoop.mapred.Reporter;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.testng.PowerMockTestCase;
import org.testng.annotations.Test;

import cascading.flow.hadoop.HadoopFlowProcess;
import cascading.operation.FunctionCall;
import cascading.tap.hadoop.io.MultiInputSplit;
import cascading.tuple.Fields;
import cascading.tuple.Tuple;
import cascading.tuple.TupleEntry;
import cascading.tuple.TupleEntryCollector;

@PrepareForTest({ScrubOdrDtlFunction.class})
public class ScrubOdrDtlFunctionUnitTestNG extends PowerMockTestCase {

    @Test(groups = "unit")
    public void operate() throws Exception {

        Tuple mockTuple = mock(Tuple.class);
        PowerMockito.whenNew(Tuple.class).withNoArguments().thenReturn(mockTuple);

        Fields fields = new Fields("#ORD_NUM");
        HadoopFlowProcess mockHadoopFlowProcess = mock(HadoopFlowProcess.class);
        Reporter mockReporter = mock(Reporter.class);
        MultiInputSplit mockMultiInputSplit = mock(MultiInputSplit.class);
        
        FunctionCall mockFunctionCall = mock(FunctionCall.class);
        FileSplit mockFileSplit = mock(FileSplit.class);
        Path mockPath = mock(Path.class);
        TupleEntry argument = mock(TupleEntry.class);
        TupleEntryCollector mockTupleEntryCollector= mock(TupleEntryCollector.class);

        ScrubOdrDtlFunction function = new ScrubOdrDtlFunction(fields);        
        
        when(mockHadoopFlowProcess.getReporter()).thenReturn(mockReporter);
        when(mockReporter.getInputSplit()).thenReturn(mockMultiInputSplit);
        when(mockMultiInputSplit.getWrappedInputSplit()).thenReturn(mockFileSplit);
        
        when(mockFileSplit.getPath()).thenReturn(mockPath);
        when(mockPath.getName()).thenReturn("tgt_lat_order_detail_global_1_00000000_000000.zip");
        when(mockFunctionCall.getArguments()).thenReturn(argument);     
        
        when(argument.size()).thenReturn(1);
        when(mockFunctionCall.getOutputCollector()).thenReturn(mockTupleEntryCollector);
        
        function.operate(mockHadoopFlowProcess, mockFunctionCall);  
        verify(mockTuple).add("tgt_lat_order_detail_global_1_00000000_000000.zip");
        verify(mockTuple).add("0");

    }

}
