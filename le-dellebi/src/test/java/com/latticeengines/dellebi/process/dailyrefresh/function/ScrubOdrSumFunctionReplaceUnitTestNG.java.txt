package com.latticeengines.dellebi.process.dailyrefresh.function;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.testng.PowerMockTestCase;
import org.testng.annotations.Test;

import cascading.flow.FlowProcess;
import cascading.operation.FunctionCall;
import cascading.tuple.Fields;
import cascading.tuple.Tuple;
import cascading.tuple.TupleEntry;
import cascading.tuple.TupleEntryCollector;

@PrepareForTest({ScrubOdrSumFunctionReplace.class})
public class ScrubOdrSumFunctionReplaceUnitTestNG  extends PowerMockTestCase {
    
    @Test(groups = "unit")
    public void testProcess() throws Exception {
        
        FunctionCall mockFunctionCall = mock(FunctionCall.class);
        FlowProcess mockFlowProcess = mock(FlowProcess.class);
        Fields fields = new Fields("#ORD_NUM");       
        ScrubOdrSumFunctionReplace function = new ScrubOdrSumFunctionReplace(fields);   
        TupleEntryCollector mockTupleEntryCollector= mock(TupleEntryCollector.class);
        
        TupleEntry argument = mock(TupleEntry.class);
        when(mockFunctionCall.getArguments()).thenReturn(argument);
        when(argument.getString("SRC_LCL_CHNL_CD")).thenReturn("24128suffix");
        when(argument.getString("REF_LCL_CHNL_CD")).thenReturn("22738suffix");
        when(argument.getString("CNCL_DT")).thenReturn("01/30/2015 00:00:00");
        when(mockFunctionCall.getOutputCollector()).thenReturn(mockTupleEntryCollector);
        
        Tuple mockTuple = mock(Tuple.class);
        PowerMockito.whenNew(Tuple.class).withNoArguments().thenReturn(mockTuple);        
        
        function.operate(mockFlowProcess, mockFunctionCall); 
        verify(mockTuple).add("24128");
        verify(mockTuple).add("22738");       
        verify(mockTuple).add("2015-01-30");  
    }

}
