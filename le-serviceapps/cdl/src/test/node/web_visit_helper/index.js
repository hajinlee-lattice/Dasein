#!/usr/bin/env node

const cmd = require('commander');
const fs = require('fs-extra');
const path = require('path');
const rawToDaily = require('./raw-to-daily');
const dailyDiff = require('./daily-diff');
const dailyToJson = require('./daily-to-json');
const dailyToStats = require('./daily-to-stats');

const Constants = {
    CLI_VERSION : '0.0.1',
};

cmd.version(Constants.CLI_VERSION);

// raw stream table to daily json
cmd.command('raw-to-daily')
    .description('Produce expected daily aggregation (in json format) from raw stream data')
    .option('-f, --format <format>', 'Input format, "csv" means single csv file and "avro" means avro directory')
    .option('-s, --src <src>', 'Source path, either a file/directory depends on format')
    .option('-d, --dst <dst>', 'Destination path, either a file/directory depends on format')
    .option('-D, --dim-path <dimPath>', 'Dimension metadata json file')
    .action(async (env, option) => {
        await rawToDaily({
            format: env.format || 'avro',
            src: env.src,
            dst: env.dst,
            dimPath: env.dimPath
        });
    });

// daily agg table to daily json
cmd.command('daily-to-json')
    .description('Transform daily aggregation from avro table to json format')
    .option('-s, --src <src>', 'Daily aggreated table path (avro directory)')
    .option('-d, --dst <dst>', 'Daily aggregate json file path')
    .action(async (env, option) => await dailyToJson(env.src, env.dst));

// diff between daily json generated by daily-to-json (result from app) & raw-to-daily (expected)
cmd.command('daily-diff')
    .description('Diff between two daily aggregation json files')
    .option('-r, --result <result>', 'Daily aggregate json file path (generated from daily-to-json)')
    .option('-e, --expected <expected>', 'Expected daily aggregate json (generated from raw-to-daily)')
    .action((env, option) => dailyDiff(env.result, env.expected));

// calculate metrics from daily json generated by raw-to-daily (can also be daily-to-json but won't have record level tracking)
cmd.command('daily-to-stats')
    .description('Calculate metrics from daily aggregation json file')
    .option('-s, --src <src>', 'Daily aggregate json file path (generated from raw-to-daily)')
    .option('-d, --dst <dst>', 'Destination directory (default will be daily json filename)')
    .option('-S, --start-date <startDate>', 'Start date string (inclusive), format yyyy-MM-dd')
    .option('-E, --end-date <endDate>', 'End date string (inclusive), format yyyy-MM-dd')
    .action(async (env, option) => dailyToStats(env.src, env.startDate, env.endDate, env.dst));

// calculate metrics from raw stream table (avro files)
cmd.command('raw-to-stats')
    .description('Calculate metrics from raw stream data (avro table)')
    .option('-s, --src <src>', 'Source path for raw stream avro directory')
    .option('-D, --dim-path <dimPath>', 'Dimension metadata json file')
    .option('-t, --tmp <tmp>', 'Tmp directory for all intermediate files')
    .option('-d, --dst <dst>', 'Destination stats/records directory')
    .option('-S, --start-date <startDate>', 'Start date string (inclusive), format yyyy-MM-dd')
    .option('-E, --end-date <endDate>', 'End date string (inclusive), format yyyy-MM-dd')
    .action(async (env, option) => {
        env.tmp = env.tmp || `./tmp/${randDirname()}`;
        console.log(`Source daily dir: ${env.src}, Dimension metadata dir: ${env.dimPath}, Tmp dir: ${env.tmp}, Destination dir: ${env.dst}`);
        fs.emptyDirSync(env.tmp);

        let dailyPath = path.join(env.tmp, 'daily_expected.json');
        await rawToDaily({
            format: 'avro',
            src: env.src,
            dst: dailyPath,
            dimPath: env.dimPath
        });

        dailyToStats(dailyPath, env.startDate, env.endDate, env.dst);
    });

// init command
cmd.parse(process.argv);

/* helpers */

function randDirname() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}
