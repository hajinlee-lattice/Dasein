package com.latticeengines.dataflow.runtime.cascading.cdl;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.latticeengines.domain.exposed.scoringapi.FitFunctionParameters;

public class FittedConversionRateCalculatorImplUnitTestNG {
    @Test(groups = "unit")
    void testFit() {
        // alpha, beta, gamma, maxRate
        // -63472.8123838 730757.154341 100000 0.544117647059
        FitFunctionParameters params =
            new FitFunctionParameters(-63472.8123838, 730757.154341, 100000, 0.544117647059, "v1");
        FittedConversionRateCalculatorImpl converter =
            new FittedConversionRateCalculatorImpl(params);
        double[] expectedResults = {
            0.00074322302073113382,
            0.00079192160699467469,
            0.00084381114944182423,
            0.00089910073765562583,
            0.00095801316250755425,
            0.0010207858133463527,
            0.0010876716350254644,
            0.0011589401471202431,
            0.0012348785301820296,
            0.0013157927824548115,
            0.0014020089539915023,
            0.0014938744595613023,
            0.0015917594790725163,
            0.0016960584501224418,
            0.0018071916556662699,
            0.001925606919552864,
            0.0020517814102674653,
            0.0021862235643002725,
            0.0023294751340830317,
            0.0024821133732497043,
            0.0026447533596625113,
            0.0028180504780456884,
            0.0030027030583316149,
            0.0031994551899452738,
            0.0034090997221766185,
            0.0036324814584033889,
            0.003870500559716526,
            0.004124116173693025,
            0.0043943502993521975,
            0.0046822919057815842,
            0.0049891013206590472,
            0.0053160149063578022,
            0.0056643500431396354,
            0.0060355104363064961,
            0.0064309917749642538,
            0.006852387759097237,
            0.0073013965230720977,
            0.0077798274758310504,
            0.0082896085978309691,
            0.0088327942086883059,
            0.0094115732429565797,
            0.010028278079994634,
            0.010685393931755664,
            0.011385568869368335,
            0.012131624491035191,
            0.012926567288887407,
            0.013773600776891623,
            0.014676138385070987,
            0.015637817229296559,
            0.01666251277092284,
            0.017754354418716874,
            0.018917742191415267,
            0.020157364435048824,
            0.021478216725632091,
            0.02288562200025443,
            0.024385252009475219,
            0.025983150175545852,
            0.027685755951810373,
            0.029499930765758225,
            0.031432985680911206,
            0.033492710859182165,
            0.035687406961162009,
            0.038025918583382542,
            0.040517669933081688,
            0.043172702780736504,
            0.046001716947906973,
            0.049016113431944557,
            0.052228040332693952,
            0.055650441852459764,
            0.059297110417646091,
            0.063182742324129196,
            0.067322996893051976,
            0.071734559660320121,
            0.076435209557304637,
            0.081443890630810381,
            0.086780788334948261,
            0.092467410919519627,
            0.098526676107600727,
            0.10498300347456546,
            0.11186241283298488,
            0.11919262913606402,
            0.12700319420924386,
            0.13532558583126328,
            0.1441933445403355,
            0.1536422089259033,
            0.16371025955873872,
            0.17443807253606783,
            0.18586888300526486,
            0.19804875944384187,
            0.21102678927009927,
            0.22485527675161582,
            0.23958995379574116,
            0.25529020460556495,
            0.27201930494176019,
            0.28984467720330437,
            0.34069927117440818,
            0.39155386514551199,
            0.44240845911661575,
            0.49326305308771962};


        for (int index = 0; index < 99; ++index) {
            int percentile = index + 1;
            double result = converter.calculate(percentile);
            double expectedResult = expectedResults[index];
            // simulate approximately equal for double numbers
            Assert.assertTrue(Math.abs(result - expectedResult) < 1e-6,
                              "result = " + result + ", expected result =" + expectedResult);
        }
    }
}
