package com.latticeengines.dataflow.runtime.cascading.cdl;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.latticeengines.domain.exposed.scoringapi.FitFunctionParameters;

public class FittedConversionRateCalculatorImplUnitTestNG {
    @Test(groups = "unit")
    void testFit() {
        // gamma, alpha, beta, maxRate
        // 100000 -79275.0694689 912687.592995 0.362745098039
        FitFunctionParameters params = new FitFunctionParameters(-79275.0694689, 912687.592995, 100000, 0.362745098039, "v1");
        FittedConversionRateCalculatorImpl converter =
            new FittedConversionRateCalculatorImpl(params);
        double[] expectedResults = {
            0.00018096456533177351,
            0.00019589290478211414,
            0.00021205274701340988,
            0.0002295456852832917,
            0.00024848169412495656,
            0.00026897982043937819,
            0.00029116893209125738,
            0.00031518852826165305,
            0.00034118961635658832,
            0.0003693356613164668,
            0.00039980361362381008,
            0.00043278502144053732,
            0.00046848723541174784,
            0.00050713471185610392,
            0.0005489704242052886,
            0.00059425739051896791,
            0.00064328032734060361,
            0.00069634743959750254,
            0.00075379235834005574,
            0.00081597623881413735,
            0.00088329003016914497,
            0.00095615693475873428,
            0.001035035067796803,
            0.0011204203386292382,
            0.0012128495676150899,
            0.0013129038628714798,
            0.0014212122718444192,
            0.0015384557383770964,
            0.0016653713831151448,
            0.0018027571376076823,
            0.0019514767625858841,
            0.0021124652769336635,
            0.0022867348392910229,
            0.0024753811083520431,
            0.0026795901355931989,
            0.0029006458196599414,
            0.003139937979843552,
            0.0033989710957521746,
            0.0036793737637942905,
            0.0039829089417761834,
            0.0043114850272979628,
            0.0046671678635453384,
            0.0050521937233884706,
            0.005468983371823802,
            0.0059201572888063032,
            0.0064085521413870753,
            0.0069372386249359893,
            0.0075095407647882816,
            0.0081290568218452836,
            0.0087996819141738843,
            0.0095256325089840884,
            0.010311472933251707,
            0.011162144077542164,
            0.012082994454570065,
            0.013079813839217797,
            0.014158869662239622,
            0.015326946426498473,
            0.016591388369493767,
            0.017960145625799697,
            0.019441824233694161,
            0.021045740239269427,
            0.02278197827311167,
            0.024661454971096647,
            0.02669598759800516,
            0.028898368374906367,
            0.031282444894497677,
            0.033863207200815412,
            0.036656882053276781,
            0.039681034948296424,
            0.042954680572959439,
            0.04649840237336695,
            0.050334481954967515,
            0.054487039242422416,
            0.058982184083701455,
            0.063848180482213468,
            0.069115624275485524,
            0.074817635547710218,
            0.080990066864078961,
            0.087671728786634234,
            0.094904633807750188,
            0.10273426057403046,
            0.11120983992242592,
            0.12038466436024481,
            0.13031642317349609,
            0.14106756523638597,
            0.15270569170854464,
            0.16530398103784516,
            0.17894164917860564,
            0.19370444769836359,
            0.20968520297341761,
            0.22698439999328973,
            0.24571081405989875,
            0.26598219499294395,
            0.28792600737841573,
            0.31168023216647722,
            0.31065893484902679,
            0.3096376375315763,
            0.30861634021412587,
            0.30759504289667539};

        for (int index = 0; index < 99; ++index) {
            int percentile = index + 1;
            double result = converter.calculate(percentile);
            double expectedResult = expectedResults[index];
            // simulate approximately equal for double numbers
            Assert.assertTrue(Math.abs(result - expectedResult) < 1e-7,
                              "result = " + result + ", expected result =" + expectedResult);
        }
    }
}
