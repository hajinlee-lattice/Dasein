USE `PLS_MultiTenant`;

CREATE PROCEDURE `Update_SEGEMENT_EXPORT_OBJECT_TYPES`()
    BEGIN
		UPDATE PLS_MultiTenant.WORKFLOW_JOB
		SET `INPUT_CONTEXT` = JSON_REPLACE(
				`INPUT_CONTEXT`,
				'$.EXPORT_OBJECT_TYPE',
				'Enriched Accounts'
		)
		WHERE TYPE = 'segmentExportWorkflow'
		AND JSON_EXTRACT (`INPUT_CONTEXT`, '$.EXPORT_OBJECT_TYPE') = 'Accounts';

		UPDATE PLS_MultiTenant.WORKFLOW_JOB
		SET `INPUT_CONTEXT` = JSON_REPLACE(
				`INPUT_CONTEXT`,
				'$.EXPORT_OBJECT_TYPE',
				'Enriched Contacts (No Account Attributes)'
		)
		WHERE TYPE = 'segmentExportWorkflow'
		AND JSON_EXTRACT (`INPUT_CONTEXT`, '$.EXPORT_OBJECT_TYPE') = 'Contacts';

		UPDATE PLS_MultiTenant.WORKFLOW_JOB
		SET `INPUT_CONTEXT` = JSON_REPLACE(
				`INPUT_CONTEXT`,
				'$.EXPORT_OBJECT_TYPE',
				'Enriched Contacts with Account Attributes'
		)
		WHERE TYPE = 'segmentExportWorkflow'
		AND JSON_EXTRACT (`INPUT_CONTEXT`, '$.EXPORT_OBJECT_TYPE') = 'Accounts and Contacts';
    END;

CREATE PROCEDURE `Update_CDL_BUSINESS_CALENDAR`()
  BEGIN
  END;
//
DELIMITER

CREATE PROCEDURE `UpdatePLSTables`()
  BEGIN
	ALTER TABLE `PLS_MultiTenant`.`TENANT` ADD COLUMN `EXPIRED_TIME` bigint DEFAULT NULL;
	ALTER TABLE `PLS_MultiTenant`.`WORKFLOW_JOB`
    ADD COLUMN `ERROR_CATEGORY` VARCHAR(255) NULL DEFAULT 'UNKNOWN' AFTER `FK_TENANT_ID`;
    ALTER TABLE `PLS_MultiTenant`.`PLAY_LAUNCH` ADD COLUMN `FOLDER_NAME` VARCHAR(255);


    ALTER TABLE `PLS_MultiTenant`.`MODEL_SUMMARY` ADD COLUMN `NORMALIZATION_RATIO` double precision DEFAULT NULL;
    ALTER TABLE `PLS_MultiTenant`.`MODEL_SUMMARY` ADD COLUMN `AVERAGE_REVENUE_TEST_DATASET` double precision DEFAULT NULL;

    ALTER TABLE `PLS_MultiTenant`.`DATAFEED_TASK` ADD COLUMN `S3_IMPORT_STATUS` VARCHAR(30);
    UPDATE `PLS_MultiTenant`.`DATAFEED_TASK` SET `S3_IMPORT_STATUS`='Active';

    ALTER TABLE `PLS_MultiTenant`.`METADATA_DATA_COLLECTION_STATUS` ADD COLUMN `CREATION_TIME` datetime not null default '1970-01-01 00:00:00'
    ALTER TABLE `PLS_MultiTenant`.`METADATA_DATA_COLLECTION_STATUS` ADD COLUMN `UPDATE_TIME` datetime not null default '1970-01-01 00:00:00'
    drop table if exists `METADATA_DATA_COLLECTION_STATUS_HISTORY`;
    create table `METADATA_DATA_COLLECTION_STATUS_HISTORY` (`PID` bigint not null auto_increment, `CREATION_TIME` datetime not null, `Detail` JSON, `TENANT_NAME` varchar(255) not null, `UPDATE_TIME` datetime not null, primary key (`PID`)) engine=InnoDB;

  END;
//
DELIMITER;

CREATE PROCEDURE `CreateS3ImportMessageTable`()
  BEGIN
    CREATE TABLE `ATLAS_S3_IMPORT_MESSAGE`
      (
         `PID`         BIGINT NOT NULL auto_increment,
         `BUCKET`      VARCHAR(255),
         `CREATED`     DATETIME NOT NULL,
         `HOST_URL`    VARCHAR(255) NOT NULL,
         `KEY`         VARCHAR(255) NOT NULL,
         `UPDATED`     DATETIME NOT NULL,
         `FK_DROP_BOX` BIGINT NOT NULL,
         PRIMARY KEY (`PID`)
      )
    engine=innodb;

    ALTER TABLE `ATLAS_S3_IMPORT_MESSAGE`
      ADD CONSTRAINT UX_KEY UNIQUE (`KEY`);

    ALTER TABLE `ATLAS_S3_IMPORT_MESSAGE`
      ADD CONSTRAINT `FK_ATLASS3IMPORTMESSAGE_FKDROPBOX_ATLASDROPBOX` FOREIGN KEY (
      `FK_DROP_BOX`) REFERENCES `ATLAS_DROPBOX` (`PID`) ON DELETE CASCADE;


  END;
//
DELIMITER;

CREATE PROCEDURE `CreateDataCollectionArtifactTable`()
  BEGIN
  END;
//
DELIMITER ;

CREATE PROCEDURE `UpdateWorkflowJobTable`()
  BEGIN
  END;
//
DELIMITER;


CREATE PROCEDURE `CreateDropBoxTable`()
  BEGIN
  END;
//
DELIMITER;

CREATE PROCEDURE `CreateDataIntegrationMonitoringTable`()
  BEGIN
  END;
//
DELIMITER;

CREATE PROCEDURE `CreateDataIntegrationMessageTable`()
  BEGIN
  END;
//
DELIMITER;

CALL `Update_SEGEMENT_EXPORT_OBJECT_TYPES`();

CALL `Update_CDL_BUSINESS_CALENDAR`();
CALL `CreateDataIntegrationMonitoringTable`();
CALL `CreateDataIntegrationMessageTable`();
