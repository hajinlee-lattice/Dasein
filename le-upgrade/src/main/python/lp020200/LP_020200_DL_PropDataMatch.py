#
# $LastChangedBy: mwilson $
# $LastChangedDate: 2015-11-13 14:56:48 +0800 (Fri, 13 Nov 2015) $
# $Rev: 70934 $
#

from lxml import etree
from appsequence import Applicability, StepBase


class LP_020200_DL_PropDataMatch(StepBase):
  name = 'LP_020200_DL_PropDataMatch'
  description = 'Separate into 2 LGs fro the Load Group:PropDataMatch'
  version = '$Rev: 70934 $'

  def __init__(self, forceApply=False):
    super(LP_020200_DL_PropDataMatch, self).__init__(forceApply)

  def getApplicability(self, appseq):

    lgm = appseq.getLoadGroupMgr()
    if lgm.hasLoadGroup('PropDataMatch_Step1') and lgm.hasLoadGroup('PropDataMatch_Step2'):
      return Applicability.alreadyAppliedPass
    return Applicability.canApply

  def apply(self, appseq):

    success = False

    lgm = appseq.getLoadGroupMgr()
    type = appseq.getText('template_type')

    lgm.createLoadGroup('PropDataMatch_Step1', 'OperationalProcess\Standard', 'PropDataMatch_Step1', True, False)
    step1xml = ''
    if type == 'MKTO':
      step1xml = '''
    <group name="PropDataMatch_Step1" alias="PropDataMatch_Step1" w="Workspace" type="1" scheduleType="0" allowUserChangeScheduleType="False" visibleForEndUser="True" threshold="10000" launchExpiredDays="7" createdBy="VZhao@Lattice-Engines.com" path="OperationalProcess\Standard" autoGenerated="False" validationValidMinutes="120" autoClearOnFailure="False" mergeRulesSaved="True" ng="False">
      <schemas />
      <visiDBConfigurationWithMacros />
      <targetQueries />
      <targetQuerySequences />
      <rdss />
      <validationExtracts />
      <ces />
      <extractQueries>
        <extractQuery qw="Workspace" queryName="Q_Map_LeadID_PropDataID" queryAlias="Q_Map_LeadID_PropDataID" sw="Workspace" schemaName="Map_LeadID_PropDataID" at="False" ucm="True">
          <schemas />
          <specs />
          <cms>
            <cm qcn="MKTO_LeadRecord_ID" itcn="MKTO_LeadRecord_ID" />
            <cm qcn="MKTO_LeadRecord_PropDataID" itcn="MKTO_LeadRecord_PropDataID" />
            <cm qcn="Company" itcn="Company" />
            <cm qcn="City" itcn="City" />
            <cm qcn="State" itcn="State" />
            <cm qcn="Country" itcn="Country" />
          </cms>
        </extractQuery>
      </extractQueries>
      <extractQuerySequences />
      <leafExtracts />
      <launchExtracts />
      <jobs />
      <pdmatches>
        <pdmatch n="PD" sw="Workspace" rw="Workspace" cn="SQL_PropDataForScoring" mfc="2" ntr="1" st="2" so="PD" ad="True" isdlu="True">
          <scs>
            <c vcn="Time_OfSubmission_MatchToPD" mcn="Time_OfSubmission_MatchToPD" ismatch="False" />
            <c vcn="MKTO_LeadRecord_PropDataID" mcn="MKTO_LeadRecord_PropDataID" ismatch="False" />
            <c vcn="Email_PD" mcn="Domain" ismatch="True" />
            <c vcn="Company" mcn="Name" ismatch="True" />
            <c vcn="City" mcn="City" ismatch="True" />
            <c vcn="State" mcn="State" ismatch="True" />
            <c vcn="Country" mcn="Country" ismatch="True" />
          </scs>
          <luos>
            <luo n="DerivedColumns" />
          </luos>
        </pdmatch>
      </pdmatches>
      <leadscroings />
      <lssbardins />
      <lssbardouts />
      <lds />
      <ecs />
      <gCs />
    </group>'''

    elif type == 'ELQ':
      step1xml = '''
    <group name="PropDataMatch_Step1" alias="PropDataMatch_Step1" w="Workspace" type="1" scheduleType="0" allowUserChangeScheduleType="False" visibleForEndUser="True" threshold="10000" launchExpiredDays="7" createdBy="VZhao@Lattice-Engines.com" path="OperationalProcess\Standard" autoGenerated="False" validationValidMinutes="120" autoClearOnFailure="False" mergeRulesSaved="True" ng="False">
      <schemas />
      <visiDBConfigurationWithMacros />
      <targetQueries />
      <targetQuerySequences />
      <rdss />
      <validationExtracts />
      <ces />
      <extractQueries>
        <extractQuery qw="Workspace" queryName="Q_Map_ContactID_PropDataID" queryAlias="Q_Map_ContactID_PropDataID" sw="Workspace" schemaName="Map_ContactID_PropDataID" at="False" ucm="True">
          <schemas />
          <specs />
          <cms>
            <cm qcn="ELQ_Contact_ContactID" itcn="ELQ_Contact_ContactID" />
            <cm qcn="ELQ_Contact_PropDataID" itcn="ELQ_Contact_PropDataID" />
            <cm qcn="C_Company" itcn="C_Company" />
            <cm qcn="C_City" itcn="C_City" />
            <cm qcn="C_State_Prov" itcn="C_State_Prov" />
            <cm qcn="C_Country" itcn="C_Country" />
          </cms>
        </extractQuery>
      </extractQueries>
      <extractQuerySequences />
      <leafExtracts />
      <launchExtracts />
      <jobs />
      <pdmatches>
        <pdmatch n="PD" sw="Workspace" rw="Workspace" cn="SQL_PropDataForScoring" mfc="2" ntr="1" st="2" so="PD" ad="True" isdlu="True">
          <scs>
            <c vcn="Time_OfSubmission_MatchToPD" mcn="Time_OfSubmission_MatchToPD" ismatch="False" />
            <c vcn="ELQ_Contact_PropDataID" mcn="ELQ_Contact_PropDataID" ismatch="False" />
            <c vcn="Email_PD" mcn="Domain" ismatch="True" />
            <c vcn="Company" mcn="Name" ismatch="True" />
            <c vcn="City" mcn="City" ismatch="True" />
            <c vcn="State" mcn="State" ismatch="True" />
            <c vcn="Country" mcn="Country" ismatch="True" />
          </scs>
          <luos>
            <luo n="DerivedColumns" />
          </luos>
        </pdmatch>
      </pdmatches>
      <leadscroings />
      <lssbardins />
      <lssbardouts />
      <lds />
      <ecs />
      <gCs />
    </group>'''

    else:
      step1xml = '''
    <group name="PropDataMatch_Step1" alias="PropDataMatch_Step1" w="Workspace" type="1" scheduleType="0" allowUserChangeScheduleType="False" visibleForEndUser="True" threshold="10000" launchExpiredDays="7" createdBy="VZhao@Lattice-Engines.com" path="OperationalProcess\Standard" autoGenerated="False" validationValidMinutes="120" autoClearOnFailure="False" mergeRulesSaved="True" ng="False">
      <schemas />
      <visiDBConfigurationWithMacros />
      <targetQueries />
      <targetQuerySequences />
      <rdss />
      <validationExtracts />
      <ces />
      <extractQueries>
        <extractQuery qw="Workspace" queryName="Q_Map_Lead_Contact_ID_PropDataID" queryAlias="Q_Map_Lead_Contact_ID_PropDataID" sw="Workspace" schemaName="Map_Lead_Contact_ID_PropDataID" at="False" ucm="True">
          <schemas />
          <specs />
          <cms>
            <cm qcn="SFDC_Lead_Contact_ID" itcn="SFDC_Lead_Contact_ID" />
            <cm qcn="SFDC_Lead_Contact_PropDataID" itcn="SFDC_Lead_Contact_PropDataID" />
            <cm qcn="SFDC_Company" itcn="SFDC_Company" />
            <cm qcn="SFDC_City" itcn="SFDC_City" />
            <cm qcn="SFDC_State" itcn="SFDC_State" />
            <cm qcn="SFDC_Country" itcn="SFDC_Country" />
          </cms>
        </extractQuery>
      </extractQueries>
      <extractQuerySequences />
      <leafExtracts />
      <launchExtracts />
      <jobs />
      <pdmatches>
        <pdmatch n="PD" sw="Workspace" rw="Workspace" cn="SQL_PropDataForScoring" mfc="2" ntr="1" st="2" so="PD" ad="True" isdlu="True">
          <scs>
            <c vcn="Time_OfSubmission_MatchedToPD" mcn="Time_OfSubmission_MatchedToPD " ismatch="False" />
            <c vcn="SFDC_Lead_Contact_PropDataID" mcn="SFDC_Lead_Contact_PropDataID" ismatch="False" />
            <c vcn="Domain_PD" mcn="Domain" ismatch="True" />
            <c vcn="Company" mcn="Name" ismatch="True" />
            <c vcn="City" mcn="City" ismatch="True" />
            <c vcn="State" mcn="State" ismatch="True" />
            <c vcn="Country" mcn="Country" ismatch="True" />
          </scs>
          <luos>
            <luo n="DerivedColumns" />
          </luos>
        </pdmatch>
      </pdmatches>
      <leadscroings />
      <lssbardins />
      <lssbardouts />
      <lds />
      <ecs />
      <gCs />
    </group>'''
    lgm.setLoadGroup(step1xml)

    lgm.createLoadGroup('PropDataMatch_Step2', 'OperationalProcess\Standard', 'PropDataMatch_Step2', True, False)

    step2xml = ''
    if type == 'MKTO':
      step2xml = '''<extractQueries>
        <extractQuery qw="Workspace" queryName="Q_Timestamp_MatchToPD" queryAlias="Q_Timestamp_MatchToPD" sw="Workspace" schemaName="Timestamp_MatchToPD" at="False" ucm="True">
          <schemas />
          <specs />
          <cms>
            <cm qcn="MKTO_LeadRecord_ID" itcn="MKTO_LeadRecord_ID" />
            <cm qcn="Time_OfSubmission_MatchToPD" itcn="Time_OfSubmission_MatchToPD" />
          </cms>
        </extractQuery>
      </extractQueries>'''

    elif type == 'ELQ':
      step2xml = '''<extractQueries>
        <extractQuery qw="Workspace" queryName="Q_Timestamp_MatchToPD" queryAlias="Q_Timestamp_MatchToPD" sw="Workspace" schemaName="Timestamp_MatchToPD" at="False" ucm="True">
          <schemas />
          <specs />
          <cms>
            <cm qcn="ELQ_Contact_ContactID" itcn="ELQ_Contact_ContactID" />
            <cm qcn="Time_OfSubmission_MatchToPD" itcn="Time_OfSubmission_MatchToPD" />
          </cms>
        </extractQuery>
      </extractQueries>'''

    else:
      step2xml = '''<extractQueries>
        <extractQuery qw="Workspace" queryName="Q_Timestamp_MatchToPD" queryAlias="Q_Timestamp_MatchToPD" sw="Workspace" schemaName="Timestamp_MatchToPD" at="False" ucm="True">
          <schemas />
          <specs />
          <cms>
            <cm qcn="SFDC_Lead_Contact_ID" itcn="SFDC_Lead_Contact_ID" />
            <cm qcn="Time_OfSubmission_MatchToPD" itcn="Time_OfSubmission_MatchToPD" />
          </cms>
        </extractQuery>
      </extractQueries>'''

    lgm.setLoadGroupFunctionality('PropDataMatch_Step2', step2xml)

    ptld = etree.fromstring(lgm.getLoadGroup('PropDataMatch').encode('ascii', 'xmlcharrefreplace'))

    ptld.set('ng', 'True')
    lgm.setLoadGroup(etree.tostring(ptld))
    ngsxml = '<ngs><ng n="PropDataMatch_Step1"/><ng n="PropDataMatch_Step2"/></ngs>'
    lgm.setLoadGroupFunctionality('PropDataMatch', ngsxml)

    ptld_2 = etree.fromstring(lgm.getLoadGroup('ModelBuild_PropDataMatch').encode('ascii', 'xmlcharrefreplace'))

    ptld_2.set('ng', 'True')
    lgm.setLoadGroup(etree.tostring(ptld_2))
    ngsxml2 = '<ngs><ng n="PropDataMatch"/></ngs>'
    lgm.setLoadGroupFunctionality('ModelBuild_PropDataMatch', ngsxml2)

    success = True

    return success
