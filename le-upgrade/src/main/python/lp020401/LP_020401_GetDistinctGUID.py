
#
# $LastChangedBy: lyan $
# $LastChangedDate: 2015-11-19 19:51:40 +0800 (Thu, 19 Nov 2015) $
# $Rev: 71042 $
#

from liaison import *
from appsequence import Applicability, StepBase
import re

Adhoc_PullGUIID = '''
    <group name="Adhoc_PullGUIID" alias="Adhoc_PullGUIID" w="Workspace" type="1" scheduleType="0" allowUserChangeScheduleType="False" visibleForEndUser="True" threshold="10000" launchExpiredDays="7" createdBy="lyan@lattice-engines.com" path="Adhoc" autoGenerated="False" validationValidMinutes="120" autoClearOnFailure="False" mergeRulesSaved="True" ng="False">
      <schemas />
      <visiDBConfigurationWithMacros />
      <targetQueries>
        <targetQuery w="Workspace" t="2" name="Q_Get_Model_GUID_InDateRange" alias="Q_Get_Model_GUID_InDateRange" isc="False" threshold="10000" fsTableName="Tenant_Model_GUID_Map" sourceType="1" jobType="20" ignoreOptionsValue="0" exportToDestDirectly="True" exportRule="4" fileExt="bcp" rowTerminator="\\0\\r" columnTerminator="\\0" edts="False" destType="SQL" destDataProvider="SQL_LeadValidation_DataProvider" cto="1" vs="False" mins="5" maxs="100">
          <schemas />
          <specs />
          <fsColumnMappings>
            <fsColumnMapping queryColumnName="TenantName" fsColumnName="TenantName" formatter="" type="0" ignoreType="0" ignoreOptions="0" formatColumnName="False" charsToFormat="" />
            <fsColumnMapping queryColumnName="Model_GUID" fsColumnName="Model_GUID" formatter="" type="0" ignoreType="0" ignoreOptions="0" formatColumnName="False" charsToFormat="" />
          </fsColumnMappings>
          <excludeColumns />
          <validationQueries />
          <constantRows />
          <kcs>
            <kc n="Model_GUID" />
          </kcs>
          <fut dn="" d="" n="" iet="False" iets="False" t="1" />
        </targetQuery>
      </targetQueries>
      <targetQuerySequences>
        <sequence w="Workspace" queryName="Q_Get_Model_GUID_InDateRange" sequence="1" />
      </targetQuerySequences>
      <gvqs />
      <rdss />
      <validationExtracts />
      <ces />
      <extractQueries />
      <extractQuerySequences />
      <leafExtracts />
      <launchExtracts />
      <jobs />
      <pdmatches />
      <leadscroings />
      <lssbardins />
      <lssbardouts />
      <lds />
      <ecs />
      <gCs />
    </group> '''


Q_Get_Model_GUID_InDateRange = '''
SpecLatticeNamedElements((SpecLatticeNamedElement(
	SpecLatticeQuery(
		LatticeAddressSetPushforward(
			LatticeAddressExpressionFromLAS(
				LatticeAddressSetMeet(
					(
						LatticeAddressSetPi(
							LatticeAddressExpressionAtomic(
								LatticeAddressAtomicIdentifier(
									ContainerElementName("Bard_LeadScoreHistory")
								)
							)
						),
						LatticeAddressSetFcn(
							LatticeFunctionExpression(
								LatticeFunctionOperatorIdentifier("AND"),
								LatticeFunctionExpression(
									LatticeFunctionOperatorIdentifier("GreaterOrEqual"),
									LatticeFunctionExpressionTransform(
										LatticeFunctionIdentifier(
											ContainerElementNameTableQualifiedName(
												LatticeSourceTableIdentifier(
													ContainerElementName("Bard_LeadScoreHistory")
												),
												ContainerElementName("ScoreDate")
											)
										),
										LatticeAddressSetPi(
											LatticeAddressExpressionAtomic(
												LatticeAddressAtomicIdentifier(
													ContainerElementName("Bard_LeadScoreHistory")
												)
											)
										),
										FunctionAggregationSelectWhere(
											FunctionAggregationOperator("Max"),
											LatticeFunctionIdentifier(
												ContainerElementNameTableQualifiedName(
													LatticeSourceTableIdentifier(
														ContainerElementName("Bard_LeadScoreHistory")
													),
													ContainerElementName("ScoreDate")
												)
											)
										)
									),
									LatticeFunctionExpressionConstant(
										"2015/12/14",
										DataTypeDateTime
									)
								),
								LatticeFunctionExpression(
									LatticeFunctionOperatorIdentifier("LessOrEqual"),
									LatticeFunctionExpressionTransform(
										LatticeFunctionIdentifier(
											ContainerElementNameTableQualifiedName(
												LatticeSourceTableIdentifier(
													ContainerElementName("Bard_LeadScoreHistory")
												),
												ContainerElementName("ScoreDate")
											)
										),
										LatticeAddressSetPi(
											LatticeAddressExpressionAtomic(
												LatticeAddressAtomicIdentifier(
													ContainerElementName("Bard_LeadScoreHistory")
												)
											)
										),
										FunctionAggregationSelectWhere(
											FunctionAggregationOperator("Max"),
											LatticeFunctionIdentifier(
												ContainerElementNameTableQualifiedName(
													LatticeSourceTableIdentifier(
														ContainerElementName("Bard_LeadScoreHistory")
													),
													ContainerElementName("ScoreDate")
												)
											)
										)
									),
									LatticeFunctionExpressionConstant(
										"2016/03/18",
										DataTypeDateTime
									)
								)
							),
							LatticeAddressSetIdentifier(
								ContainerElementName("Alias_AllLeadID")
							)
						)
					)
				)
			),
			LatticeAddressSetMeet(
				(
					LatticeAddressSetPi(
						LatticeAddressExpressionAtomic(
							LatticeAddressAtomicIdentifier(
								ContainerElementName("Bard_LeadScoreHistory")
							)
						)
					),
					LatticeAddressSetFcn(
						LatticeFunctionExpression(
							LatticeFunctionOperatorIdentifier("AND"),
							LatticeFunctionExpression(
								LatticeFunctionOperatorIdentifier("GreaterOrEqual"),
								LatticeFunctionExpressionTransform(
									LatticeFunctionIdentifier(
										ContainerElementNameTableQualifiedName(
											LatticeSourceTableIdentifier(
												ContainerElementName("Bard_LeadScoreHistory")
											),
											ContainerElementName("ScoreDate")
										)
									),
									LatticeAddressSetPi(
										LatticeAddressExpressionAtomic(
											LatticeAddressAtomicIdentifier(
												ContainerElementName("Bard_LeadScoreHistory")
											)
										)
									),
									FunctionAggregationSelectWhere(
										FunctionAggregationOperator("Max"),
										LatticeFunctionIdentifier(
											ContainerElementNameTableQualifiedName(
												LatticeSourceTableIdentifier(
													ContainerElementName("Bard_LeadScoreHistory")
												),
												ContainerElementName("ScoreDate")
											)
										)
									)
								),
								LatticeFunctionExpressionConstant(
									"2015/12/14",
									DataTypeDateTime
								)
							),
							LatticeFunctionExpression(
								LatticeFunctionOperatorIdentifier("LessOrEqual"),
								LatticeFunctionExpressionTransform(
									LatticeFunctionIdentifier(
										ContainerElementNameTableQualifiedName(
											LatticeSourceTableIdentifier(
												ContainerElementName("Bard_LeadScoreHistory")
											),
											ContainerElementName("ScoreDate")
										)
									),
									LatticeAddressSetPi(
										LatticeAddressExpressionAtomic(
											LatticeAddressAtomicIdentifier(
												ContainerElementName("Bard_LeadScoreHistory")
											)
										)
									),
									FunctionAggregationSelectWhere(
										FunctionAggregationOperator("Max"),
										LatticeFunctionIdentifier(
											ContainerElementNameTableQualifiedName(
												LatticeSourceTableIdentifier(
													ContainerElementName("Bard_LeadScoreHistory")
												),
												ContainerElementName("ScoreDate")
											)
										)
									)
								),
								LatticeFunctionExpressionConstant(
									"2016/03/18",
									DataTypeDateTime
								)
							)
						),
						LatticeAddressSetIdentifier(
							ContainerElementName("Alias_AllLeadID")
						)
					)
				)
			),
			LatticeAddressExpressionMeet(
				(
					LatticeAddressExpressionAtomic(
						LatticeAddressAtomicFTOA(
							LatticeFunctionIdentifier(
								ContainerElementNameTableQualifiedName(
									LatticeSourceTableIdentifier(
										ContainerElementName("Bard_LeadScoreHistory")
									),
									ContainerElementName("Play_Display_Name")
								)
							),
							LatticeAddressSetFromFcnSupport(
								LatticeFunctionIdentifier(
									ContainerElementNameTableQualifiedName(
										LatticeSourceTableIdentifier(
											ContainerElementName("Bard_LeadScoreHistory")
										),
										ContainerElementName("Play_Display_Name")
									)
								)
							)
						)
					)
				)
			)
		),
		SpecQueryNamedFunctions(
			SpecQueryNamedFunctionExpression(
				ContainerElementName("Model_GUID"),
				LatticeFunctionIdentifierAddressAtomic(
					LatticeAddressAtomicFTOA(
						LatticeFunctionIdentifier(
							ContainerElementNameTableQualifiedName(
								LatticeSourceTableIdentifier(
									ContainerElementName("Bard_LeadScoreHistory")
								),
								ContainerElementName("Play_Display_Name")
							)
						),
						LatticeAddressSetFromFcnSupport(
							LatticeFunctionIdentifier(
								ContainerElementNameTableQualifiedName(
									LatticeSourceTableIdentifier(
										ContainerElementName("Bard_LeadScoreHistory")
									),
									ContainerElementName("Play_Display_Name")
								)
							)
						)
					)
				)
			)
			SpecQueryNamedFunctionEntityFunctionBoundary
			SpecQueryNamedFunctionExpression(
				ContainerElementName("TenantName"),
				LatticeFunctionIdentifier(
					ContainerElementName("Const_TenantName")
				)
			)
		),
		SpecQueryResultSetAll
	),
	ContainerElementName("Q_Get_Model_GUID_InDateRange")
)))
'''

Const_TenantName = '''
SpecLatticeNamedElements((SpecLatticeNamedElement(
	SpecLatticeFunction(
		LatticeFunctionExpressionConstantScalar(
			"UnknownTenantName",
			DataTypeVarChar(Length_TenantName)
		),
		DataTypeUnknown,
		SpecFunctionTypeMetric,
		SpecFunctionSourceTypeCalculation,
		SpecDefaultValueNull,
		SpecDescription("")
	),
	ContainerElementName("Const_TenantName")
)))
'''

class LP_020401_GetDistinctGUID( StepBase ):

  name        = 'LP_020401_GetDistinctGUID'
  description = 'Get the distinctGUID'
  version     = '$Rev: 71042 $'
  didTenantNameSetted = False


  def __init__( self, forceApply = False ):
    super( LP_020401_GetDistinctGUID, self ).__init__( forceApply )


  def getApplicability( self, appseq ):
    lgm = appseq.getLoadGroupMgr()
    conn_mgr = appseq.getConnectionMgr()
    customer_id = appseq.getText('customer_id')
    tenantNameSpec = appseq.getConnectionMgr().getNamedExpression( 'Const_TenantName' )
    defn = tenantNameSpec.Object().definition()
    c = re.search( 'LatticeFunctionExpressionConstantScalar\(\"(.*?)\"', defn )
    if c:
      tenantName = c.group(1)
      if tenantName != 'Unknown':
        self.didTenantNameSetted = True
      return Applicability.canApply
    return Applicability.cannotApplyPass


  def apply( self, appseq ):
    conn_mgr = appseq.getConnectionMgr()
    lgm = appseq.getLoadGroupMgr()
    type = appseq.getText('template_type')
    xml_lg = ''
    spec = ''

    customer_id = appseq.getText('customer_id')
    if self.didTenantNameSetted == False:
      print ' customer_id = '+ customer_id
      spec = Const_TenantName
      length_tenantName = len(customer_id)
      spec = spec.replace('UnknownTenantName', customer_id)
      spec = spec.replace('Length_TenantName', str(length_tenantName))

      conn_mgr.setSpec('Const_TenantName', spec)

    xml_lg = Adhoc_PullGUIID
    spec = Q_Get_Model_GUID_InDateRange
    lgm.setLoadGroup( xml_lg )
    conn_mgr.setSpec('Q_Get_Model_GUID_InDateRange', spec)
    return True