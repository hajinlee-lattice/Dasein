/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../common/app/directives/ArcChartDirective.js":
/*!*****************************************************!*\
  !*** ../common/app/directives/ArcChartDirective.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.directives.charts.ArcChartDirective', []).directive('arcChart', ["$window", function ($window) {
    return {
        restrict: 'EA',
        scope: {},
        link: function link(scope, element, attrs) {
            var chartSize = attrs.chartSize;
            var color = attrs.chartColor;
            var value = attrs.chartValue;
            var total = attrs.chartTotal;
            var label = attrs.chartLabel;
            // Browser onresize event
            window.onresize = function () {
                scope.$apply();
            };

            // Watch for resize event
            scope.$watch(function () {
                return angular.element($window)[0].innerWidth;
            }, function () {
                scope.render();
            });

            scope.render = function () {

                var twoPi = 2 * Math.PI;
                $(element[0]).empty();
                var svg = d3.select(element[0]).append("svg").attr("width", chartSize).attr("height", chartSize).append("g").attr("transform", "translate(" + chartSize / 2 + "," + chartSize / 2 + ")");
                var arc = d3.svg.arc().startAngle(0).innerRadius(chartSize / 2 - 2).outerRadius(chartSize / 2);

                // Add the background arc, from 0 to 100% (Ï„).
                var background = svg.append("path").datum({ endAngle: twoPi }).style("fill", "#DDDDDD").attr("d", arc);

                // Add the foreground arc
                var foreground = svg.append("path").datum({ endAngle: 0 }).style("fill", color).attr("d", arc);

                function arcTween(transition, newAngle) {
                    transition.attrTween("d", function (d) {
                        var interpolate = d3.interpolate(d.endAngle, newAngle);
                        return function (t) {
                            d.endAngle = interpolate(t);
                            return arc(d);
                        };
                    });
                }

                foreground.transition().duration(1000).call(arcTween, value / total * twoPi);

                // Add value to the middle of the arc
                svg.append("text").attr("class", "arc-chart-value").style("fill", "#555555").attr("font-size", "12px").attr("dx", "-0.55em").attr("dy", ".37em").text(value);
            };
        }
    };
}]);

/***/ }),

/***/ "../common/app/directives/bar-chart.component.js":
/*!*******************************************************!*\
  !*** ../common/app/directives/bar-chart.component.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.explorer.attributetile.bar.chart', []).directive('barChart', function () {
    return {
        restrict: 'E',
        scope: {
            vm: '=?',
            bktlist: '=',
            callback: '&?',
            config: '=',
            statcount: '=?',
            enrichment: '=?'

        },
        templateUrl: '/components/charts/bar-chart.component.html',
        controller: ["$scope", "$filter", "$timeout", function controller($scope, $filter, $timeout) {

            /**
             * Return the number with decimals truncated to the maxDigits.
             * If not provided the maxDigits is 1
             * @param {*} value 
             * @param {number} maxDigits
             */
            function getTruncatedValue(value, maxDigits) {
                var numb = Number(value);
                var max = maxDigits ? maxDigits : 1;
                var ret = parseFloat(numb.toFixed(max));
                return ret;
            }

            function getHighestStat(stats, fieldName) {
                var highest = 0;
                if (stats) {
                    stats.forEach(function (stat) {
                        if (stat[fieldName] > highest) {
                            highest = Number(stat[fieldName]);
                        }
                    });
                }
                return highest;
            }
            function getHighestRounded() {
                var decimal = getRoundedNumber($scope.highest % 1, 1);
                var ret = $scope.highest;
                var add = 0;
                if (decimal > 0 && decimal > 0.5) {
                    add = 1 - decimal;
                } else if (decimal > 0 && decimal < 0.5) {
                    add = 0.5 - decimal;
                }
                ret = $scope.highest + add;
                ret = getRoundedNumber(ret, 1);
                return ret;
            }

            function getHorizontalPercentage(stat, field, limit) {
                var number = stat[field];

                if (number && $scope.highest) {
                    var percentage = number / $scope.highest * 100;

                    if (typeof limit != 'undefined') {
                        percentage = percentage.toFixed(limit);
                    }
                    return Number(percentage) + '%';
                }
                return 0;
            }

            function getHorizontalPercentageSubDec(stat, field, limit) {
                // var max = Math.ceil($scope.highest);
                var max = Number(Math.round($scope.highest * 2) / 2);
                if (max < $scope.highest) {
                    max = Number(Math.round(max));
                }
                var val = stat[field];
                if (max && val) {
                    val = Number(val);
                    var percentage = val * 100 / max;
                    return Number(percentage) + '%';
                }
                return 0;
            }

            /**
             * Sort the data by sortBy value in the config object
             */
            function sortData() {
                if ($scope.bktlist == undefined) {
                    $scope.bktlist = [];
                }
                var field = $scope.sortBy;
                if (field.startsWith('-')) {
                    field = field.substring(1, field.length);
                }
                $scope.bktlist.sort(function (item1, item2) {
                    var sortBy = field;
                    if (item1[sortBy] < item2[sortBy]) return -1;
                    if (item1[sortBy] > item2[sortBy]) return 1;
                    return 0;
                });
                if ($scope.sortBy.startsWith('-')) {
                    $scope.bktlist.reverse();
                }
            }

            function onlyTopN() {
                $scope.bktlist = $filter('limitTo')($scope.bktlist, $scope.top);
            }

            /**
             * Return the column to use to draw the chart
             */
            function getColumnForGraph() {
                for (var i = 0; i < $scope.columns.length; i++) {
                    if ($scope.columns[i].chart != undefined && $scope.columns[i].chart === true) {
                        return $scope.columns[i];
                    }
                }
                return null;
            }

            function validateConfig() {
                if ($scope.config == undefined) {
                    $scope.config = {
                        'data': {},
                        'chart': {},
                        'vlines': {},
                        'columns': {}
                    };
                }
                if (!$scope.config.data) {
                    $scope.config.data = {};
                }
                if (!$scope.config.chart) {
                    $scope.config.chart = {};
                }
                if (!$scope.config.vlines) {
                    $scope.config.vlines = {};
                }
                if (!$scope.config.columns) {
                    $scope.config.columns = {};
                }
            }

            function getRoundedNumber(value, decimal) {
                var rounded = Number(Math.round(value + 'e' + decimal) + 'e-' + decimal);
                return rounded;
            }

            function validateData() {
                if ($scope.bktlist == undefined) {
                    $scope.bktlist = [];
                }
                $scope.bktlist.forEach(function (element) {
                    if (element.lift) {
                        element.lift = getRoundedNumber(element.lift, $scope.decimal);
                    }
                });
            }

            /**
             * configuration:
             * top: max number of rows
             * bktlist: bucket list which containes data 
             * color: color for the rows
             * showfield: name field to show
             */

            $scope.$watch('bktlist', function () {
                if ($scope.bktlist.length > 0) {
                    $scope.init();
                }
            });

            $scope.init = function () {

                /************************************* Config ************************************************/
                validateConfig();

                /************************Data config ***********************/
                $scope.tosort = $scope.config.data.tosort == undefined ? false : $scope.config.data.tosort;
                $scope.sortBy = $scope.config.data.sortBy !== undefined ? $scope.config.data.sortBy : '-Cnt';
                $scope.trimData = $scope.config.data.trim !== undefined ? $scope.config.data.trim : false;
                $scope.top = $scope.config.data.top !== undefined ? $scope.config.data.top : 6;
                $scope.decimal = $scope.config.data.decimal !== undefined ? $scope.config.data.decimal : 1;
                /***********************************************************/

                /************************** Chart Config ***********************/
                $scope.header = $scope.config.chart.header !== undefined ? $scope.config.chart.header : 'Header';
                $scope.emptymsg = $scope.config.chart.emptymsg !== undefined ? $scope.config.chart.emptymsg || 'No Stats' : 'No Stats';
                $scope.color = $scope.config.chart.color !== undefined ? $scope.config.chart.color : '#D0D1D0';
                $scope.usecolor = $scope.config.chart.usecolor !== undefined ? Boolean($scope.config.chart.usecolor) : true;
                $scope.mousehover = $scope.config.chart.mousehover !== undefined ? $scope.config.chart.mousehover : false;
                $scope.hovercolor = $scope.config.chart.hovercolor !== undefined ? $scope.config.chart.hovercolor : $scope.color;
                $scope.chartType = $scope.config.chart.type !== undefined ? $scope.config.chart.type : 'decimal';
                $scope.showVLines = $scope.config.chart.showVLines !== undefined ? Boolean($scope.config.chart.showVLines) : false;
                $scope.maxVLines = $scope.config.chart.maxVLines !== undefined ? $scope.config.chart.maxVLines : 3;
                $scope.showstatcount = $scope.config.chart.showstatcount !== undefined ? $scope.config.chart.showstatcount : false;

                /***************************************************************/
                /**************************** Columns Config ***********************************/
                $scope.columns = $scope.config.columns ? $scope.config.columns : [];

                /*********************************************************************************************/

                /****************************** V Lines Config ******************************************/
                $scope.vlinesSuffix = $scope.config.vlines.suffix !== undefined ? $scope.config.vlines.suffix : '';

                /****************************************************************************************/

                $scope.bktlist = $scope.bktlist !== undefined ? $scope.bktlist : [];
                if ($scope.tosort) {
                    sortData();
                }
                if ($scope.trimData && $scope.bktlist.length > $scope.top) {
                    onlyTopN();
                }
                //*****************************************/

                // console.log($scope.bktlist);
                validateData();

                $scope.highest = 0;
                var column = getColumnForGraph();
                if (column !== null) {
                    $scope.highest = getHighestStat($scope.bktlist, column.field);
                    $scope.highest = getHighestRounded();
                }
                // console.log('Highest ', $scope.highest);
            };

            $scope.init();

            /**
             * Return the columns after the chart
             * each column can have the following config
             *  field: 'Lift',
             *  label: 'Lifts',
             *  type: 'string',
             *  suffix: 'x',
             *  chart: true
             */
            $scope.getColumns = function () {
                return $scope.columns;
            };

            /**
             * Return the value of the specific cell based on the type of the column
             * If the type is 'string' the suffix is appended
             * @param {*} stat 
             * @param {*} column 
             */
            $scope.getValue = function (stat, column) {
                var numb = 0;
                var ret = 0;
                switch (column.type) {
                    case 'number':
                        {
                            return getTruncatedValue(stat[column.field]);
                        }
                    case 'string':
                        {
                            return getTruncatedValue(stat[column.field]) + column.suffix;
                        }
                    default:
                        {
                            return getTruncatedValue(stat[column.field]);
                        }
                }
            };

            /**
             * Return the value showVLines fron the config object. 
             * If not set return false
             */
            $scope.showVerticalLines = function () {
                return $scope.showVLines;
            };

            $scope.getBarColor = function (stat) {
                if ($scope.usecolor == true || $scope.getStatCount(stat) > 0) {
                    return $scope.color;
                } else {
                    return '#939393';
                }
            };

            $scope.getMouseOverColor = function () {
                if ($scope.mousehover) {
                    return $scope.hovercolor;
                } else {
                    return $scope.color;;
                }
            };

            $scope.getHorizontalPercentage = function (stat, limit) {
                var column = getColumnForGraph();
                if (column == null) {
                    return 0;
                }
                switch ($scope.chartType) {
                    case 'decimal':
                        {
                            return getHorizontalPercentageSubDec(stat, column.field, limit);
                        }
                    default:
                        {
                            return getHorizontalPercentage(stat, column.field, limit);
                        }
                }
            };

            $scope.getVerticalLines = function () {
                if (!$scope.bktlist || $scope.bktlist.length == 0) {
                    return [];
                }
                if ($scope.vertcalLines === undefined) {
                    var lines = [];
                    var max = $scope.highest; //getMaxRounded();
                    if (max > 0) {
                        if ($scope.bktlist.length == 1) {
                            lines.push({
                                'perc': Number(100 / 2) + '%',
                                'label': max / 2 + $scope.vlinesSuffix
                            });
                            lines.push({
                                'perc': 100 + '%',
                                'label': max + $scope.vlinesSuffix
                            });
                        } else {
                            var intervallRange = Number(max / $scope.maxVLines);

                            for (var u = 0; u < $scope.maxVLines; u++) {
                                var val = intervallRange * (u + 1);
                                val = Number(Math.round(val * 2) / 2);
                                val = val.toFixed(1);
                                var per = 100 * val / max;
                                lines.push({
                                    'perc': per + '%',
                                    'label': val + $scope.vlinesSuffix
                                });
                            }
                        }
                    }
                    $scope.vertcalLines = lines;
                }
                return $scope.vertcalLines;
            };

            $scope.getStatCount = function (stat) {
                if ($scope.vm) {
                    var count = $scope.vm.getAttributeRules($scope.enrichment, stat).length;
                    return count;
                } else {
                    return 0;
                }
            };

            /**
             * Clicked on the single row of the chart
             * @param {*} stat 
             */
            $scope.clicked = function (stat) {
                if ($scope.callback) {
                    $scope.callback()(stat, $scope.enrichment);
                }
            };
        }]
    };
});

/***/ }),

/***/ "../common/app/directives/barchart.directive.js":
/*!******************************************************!*\
  !*** ../common/app/directives/barchart.directive.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.directives.barchart', []).directive('barchart', function () {
    return {
        restrict: 'E',
        templateUrl: '/components/charts/barchart.component.html',
        scope: {
            data: '=',
            ratings: '='
        },
        link: function link(scope, element, attrs, ctrl) {

            scope.isRatingsChart = scope.ratings || false;

            // console.log(scope.data);

            var data = scope.data,
                index = null,
                max = Math.max.apply(Math, data.map(function (o) {
                return o.count;
            }));

            data.forEach(function (bucket) {
                bucket.height = bucket.count / max * 100;
            });

            if (scope.isRatingsChart) {
                data.forEach(function (bucket) {
                    if (bucket.bucket === 'A+') {

                        for (var i = 0; i < data.length; i += 1) {
                            if (data[i].bucket === "A+") {
                                var index = i;
                            }
                        }

                        if (index === 0) return;
                        if (index > 0) {
                            data.splice(index, 1);
                        }

                        data.unshift(bucket);
                    }
                });
            }
        }
    };
});

/***/ }),

/***/ "../common/app/directives/chips.directive.js":
/*!***************************************************!*\
  !*** ../common/app/directives/chips.directive.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('mainApp.appCommon.directives.chips', []).directive('chips', function () {
    return {
        restrict: 'E',
        templateUrl: '/components/ai/chips.component.html',
        scope: {
            placeholder: '@',
            datasource: '=',
            callback: '&callbackFunction',
            singleSelection: '=',
            id: '@',
            displayname: '@',
            model: '@',
            queryscope: '@',
            showicon: '@',
            initialvalue: '='
        },
        link: function link(scope, element, attrs, ctrl) {
            scope.showClass = '';
            scope.chips = {};
            scope.positionInQueryList = 0;
            scope.query = '';
            scope.filteredItems = [];
            scope.mouseOut = true;
            scope.blur = true;
            scope.showQueryList = false;
            scope.displayName = scope.displayname;
            scope.queryItems = scope.datasource;
            scope.queryScope = scope.queryscope;
            scope.isSelectionDone = false;
            scope.showIcon = scope.showicon;

            scope.sortList = function (objA, objB) {
                var a = objA[scope.displayname];
                var b = objB[scope.displayname];
                a = a.toLowerCase();
                b = b.toLowerCase();

                if (a > b) {
                    return 1;
                } else if (a < b) {
                    return -1;
                } else if (a === b) {
                    return 0;
                }
            };

            scope.filterFunction = function (item) {
                return item[scope.queryScope].toLowerCase().includes(scope.query.toLowerCase()) ? true : false;
            };

            scope.getDisplayName = function (item) {
                if (item) {
                    return item[scope.displayName];
                }
            };

            scope.isSelectionDone = function () {
                if (scope.singleSelection) {
                    if (Object.keys(scope.chips).length > 0) {
                        return true;
                    } else {
                        return false;
                    }
                }
            };

            scope.isRowSelected = function (index) {

                if (index == scope.positionInQueryList) {
                    return true;
                } else {
                    return false;
                }
            };
            scope.blurText = function () {
                if (scope.mouseOut && scope.blur) {
                    scope.showQueryList = false;
                }
                scope.blur = true;
            };

            scope.showQueryResult = function () {
                if (scope.query.length > 0) {
                    scope.showQueryList = true;
                } else {
                    scope.positionInQueryList = 0;
                    scope.showQueryList = false;
                }
                return scope.showQueryList;
            };
            scope.queryKeyPressed = function (keyEvent) {
                scope.blur = false;
                if (scope.query.length > 0) {
                    scope.showQueryList = true;
                }
                if (('Backspace' === keyEvent.key || 'Delete' === keyEvent.key) && scope.query.length === 0) {
                    scope.mouseOverRow = false;
                    scope.blur = true;
                    scope.clearPositionInQueryList();
                    scope.showQueryList = false;
                }
                if ('ArrowDown' === keyEvent.key && scope.query.length > 0) {
                    keyEvent.preventDefault();
                    var items = scope.filteredItems;
                    var l = items.length;
                    if (scope.positionInQueryList < scope.filteredItems.length - 1) {
                        scope.positionInQueryList = scope.positionInQueryList + 1;
                    }
                }
                if ('ArrowUp' === keyEvent.key && scope.query.length > 0) {
                    keyEvent.preventDefault();
                    if (scope.positionInQueryList > 0) {
                        scope.positionInQueryList = scope.positionInQueryList - 1;
                    }
                }
                if (keyEvent.key === 'Enter' && scope.query.length > 0) {
                    scope.chooseItem(scope.filteredItems[scope.positionInQueryList]);
                    scope.positionInQueryList = -1;
                }
            };

            scope.callCallback = function () {
                if (_typeof(scope.callback) != undefined) {
                    scope.callback({ args: Object.values(scope.chips) });
                }
            };

            scope.setListVisibility = function (visible) {
                scope.showQueryList = visible;
            };

            scope.chooseItem = function (item) {
                if (item) {
                    if (scope.singleSelection) {
                        scope.chips = {};
                    }
                    if (scope.chips[item[scope.id]] === undefined) {
                        scope.chips[item[scope.id]] = item;
                    }
                    if (scope.singleSelection) {
                        scope.query = '';
                    }

                    scope.callCallback();
                    if (scope.singleSelection) {
                        scope.setListVisibility(false);
                    }
                }

                // console.log(scope.chips);
            };
            scope.removeItem = function (val) {
                delete scope.chips[val[scope.id]];
                scope.callCallback();
            };

            scope.hoverIn = function () {
                scope.showQueryList = true;
                scope.mouseOverRow = true;
                scope.clearPositionInQueryList();
            };
            scope.hoverOut = function () {
                scope.mouseOverRow = false;
                if (scope.blur) {
                    scope.clearPositionInQueryList();
                    scope.showQueryList = false;
                }
            };

            scope.clearPositionInQueryList = function () {
                scope.positionInQueryList = -1;
            };
            scope.clearQuery = function () {
                scope.query = '';
            };
            if (scope.queryItems && scope.queryItems.length > 0) {
                scope.queryItems = scope.queryItems.sort(scope.sortList);
            }
            if (scope.initialvalue != undefined || scope.initialvalue != null) {

                var initialvalues = [];
                if (Array.isArray(scope.initialvalue)) {
                    initialvalues = scope.initialvalue;
                } else {
                    var segmentName = scope.initialvalue.name;
                    initialvalues.push(segmentName);
                }

                var array1 = scope.datasource;
                var array2 = initialvalues;
                var array = array2.map(function (e) {
                    var f = array1.find(function (a) {
                        return a[scope.id] == e;
                    });
                    scope.chooseItem(f);
                });
            }
        }
    };
});

/***/ }),

/***/ "../common/app/directives/directives.index.js":
/*!****************************************************!*\
  !*** ../common/app/directives/directives.index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__(/*! ./chips.directive */ "../common/app/directives/chips.directive.js");

__webpack_require__(/*! ./bar-chart.component */ "../common/app/directives/bar-chart.component.js");

__webpack_require__(/*! ./barchart.directive */ "../common/app/directives/barchart.directive.js");

__webpack_require__(/*! ./formOnChange.directive */ "../common/app/directives/formOnChange.directive.js");

__webpack_require__(/*! ./ngQtipDirective */ "../common/app/directives/ngQtipDirective.js");

__webpack_require__(/*! ./helperMarkDirective */ "../common/app/directives/helperMarkDirective.js");

__webpack_require__(/*! ./input-selection.directive */ "../common/app/directives/input-selection.directive.js");

__webpack_require__(/*! ./ngEnterDirective */ "../common/app/directives/ngEnterDirective.js");

__webpack_require__(/*! ./ArcChartDirective */ "../common/app/directives/ArcChartDirective.js");

console.log("Directive module");
// import angular from "angular";

exports.default = angular.module("com.le.common.directive", ["mainApp.appCommon.directives.chips", 'common.datacloud.explorer.attributetile.bar.chart', 'mainApp.appCommon.directives.barchart', 'mainApp.appCommon.directives.formOnChange', 'mainApp.appCommon.directives.ngQtipDirective', 'mainApp.appCommon.directives.helperMarkDirective', 'mainApp.appCommon.directives.input.selection', 'mainApp.appCommon.directives.ngEnterDirective', 'mainApp.appCommon.directives.charts.ArcChartDirective']);

/***/ }),

/***/ "../common/app/directives/formOnChange.directive.js":
/*!**********************************************************!*\
  !*** ../common/app/directives/formOnChange.directive.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.directives.formOnChange', []).directive('formOnChange', ["$parse", "$interpolate", function ($parse, $interpolate) {
  return {
    require: "form",
    link: function link(scope, element, attrs, form) {
      var callback = $parse(attrs.formOnChange);
      element.on("change", function () {
        callback(scope);
      });
    }
  };
}]);

/***/ }),

/***/ "../common/app/directives/helperMarkDirective.js":
/*!*******************************************************!*\
  !*** ../common/app/directives/helperMarkDirective.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.directives.helperMarkDirective', ['mainApp.appCommon.directives.ngQtipDirective']).directive('helperMark', function () {
    return {
        restrict: 'E',
        scope: { help: '@' },
        template: '<span class="has-tooltip" ng-qtip title="{{help}}"><i class="fa fa-question-circle"></i></span>'
    };
});

/***/ }),

/***/ "../common/app/directives/input-selection.directive.js":
/*!*************************************************************!*\
  !*** ../common/app/directives/input-selection.directive.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.directives.input.selection', []).directive('optionSpinner', function () {
    return {
        restrict: 'E',
        templateUrl: '/components/ai/input-selection.component.html',
        scope: { label: '@', hideInput: '@', hideOptions: '@', options: '=' },
        link: function link(scope, element, attrs, ctrl) {
            scope.title = '';
            scope.showTitle = true;
            scope.showInput = true;
            scope.showOptions = true;
            if (scope.label && scope.label !== '') {
                scope.title = scope.label;
            } else {
                scope.showTitle = false;
            }
            if (!scope.options) {
                scope.options = [];
            }
            if (scope.hideInput === true) {
                scope.showInput = false;
            }
            if (scope.hideOptions === true) {
                scope.showOptions = false;
            }
            if (!scope.options) {
                scope.options = [];
            }
        }
    };
});

/***/ }),

/***/ "../common/app/directives/ngEnterDirective.js":
/*!****************************************************!*\
  !*** ../common/app/directives/ngEnterDirective.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.directives.ngEnterDirective', []).directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEnter);
                });

                event.preventDefault();
            }
        });
    };
});

/***/ }),

/***/ "../common/app/directives/ngQtipDirective.js":
/*!***************************************************!*\
  !*** ../common/app/directives/ngQtipDirective.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.directives.ngQtipDirective', []).directive('ngQtip', function () {
    return {
        restrict: 'A',
        link: function link(scope, element, attrs) {
            return $(element).qtip({
                content: attrs.title,
                style: 'qtip-bootstrap'
            });
        }
    };
});

/***/ }),

/***/ "../common/app/http/error.js":
/*!***********************************!*\
  !*** ../common/app/http/error.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NOT_FOUND = exports.NOT_FOUND = 404;

var Error = function () {
  function Error() {
    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 404;
    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var fullMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

    _classCallCheck(this, Error);

    this.status = status;
    this.msg = msg;
    this.fullMessage = fullMessage;
  }

  _createClass(Error, [{
    key: "getStatus",
    value: function getStatus() {
      return this.status;
    }
  }, {
    key: "getMsg",
    value: function getMsg() {
      return this.msg;
    }
  }, {
    key: "getFullMessage",
    value: function getFullMessage() {
      return this.fullMessage;
    }
  }]);

  return Error;
}();

exports.default = Error;

/***/ }),

/***/ "../common/app/http/http-service.js":
/*!******************************************!*\
  !*** ../common/app/http/http-service.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _network = __webpack_require__(/*! ../../network.vendor */ "../common/network.vendor.js");

var _messagingService = __webpack_require__(/*! ../utilities/messaging-service */ "../common/app/utilities/messaging-service.js");

var _messagingService2 = _interopRequireDefault(_messagingService);

var _response = __webpack_require__(/*! ./response */ "../common/app/http/response.js");

var _response2 = _interopRequireDefault(_response);

var _error = __webpack_require__(/*! ./error */ "../common/app/http/error.js");

var _error2 = _interopRequireDefault(_error);

var _observables = __webpack_require__(/*! ./observables */ "../common/app/http/observables.js");

var _observables2 = _interopRequireDefault(_observables);

var _message = __webpack_require__(/*! ../utilities/message */ "../common/app/utilities/message.js");

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var http = void 0;

var observables = void 0;

/**
 *
 * @param {*} axiosObj
 * @param {*} obj
 */
var setParams = function setParams(axiosObj, obj) {
  if (obj) {
    Object.keys(obj).forEach(function (key) {
      axiosObj[key] = obj[key];
    });
  }
};
var init = function init() {
  if (!http) {
    http = _network.axios;
    observables = new _observables2.default();
  }
};

/**
 * http service
 */
var httpService = {
  /**
   * Set up headeer for all the requests
   */
  setUpHeader: function setUpHeader(headerObj) {
    setParams(http.defaults.headers.common, headerObj);
  },
  unsubscribeObservable: function unsubscribeObservable(observer) {
    observables.removeObservable(observer.getName());
  },
  get: function get(url, observer, headers) {
    var observable = _network.Observable.create(function (obs) {
      http.get(url, { headers: headers ? headers : {} }).then(function (response) {
        var resp = new _response2.default(response, response.status, response.statusText, response.data);
        // if(response && response.data && response.data.UIAction){
        _messagingService2.default.sendMessage(new _message2.default(response, "", "", "", ""));
        // }
        obs.next(resp);
        obs.complete();
      }).catch(function (error) {
        var respoError = new _error2.default(error.response.status, error.response.statusText, error.message);
        _messagingService2.default.sendMessage(new _message2.default(error.response, _message.BANNER, _message.ERROR, respoError.getMsg(), url + " " + respoError.getFullMessage()));
        if (obs.error) {
          obs.error(respoError);
        }
        obs.complete();
      });
    }).subscribe(observer);
    observables.addObservable(observer.getName(), observable);
  },

  post: function post(url, body, observer) {
    var observable = _network.Observable.create(function (obs) {
      http.post(url, body).then(function (response) {
        var resp = new _response2.default(response, response.status, response.statusText, response.data);
        // if(response && response.data && response.data.UIAction){
        _messagingService2.default.sendMessage(new _message2.default(response, "", "", "", ""));
        // }
        obs.next(resp);
        obs.complete();
      }).catch(function (error) {
        var respoError = new _error2.default(error.response.status, error.response.statusText, error.message);
        _messagingService2.default.sendMessage(new _message2.default(error.response, _message.BANNER, _message.ERROR, respoError.getMsg(), url + " " + respoError.getFullMessage()));
        if (obs.error) {
          obs.error(respoError);
        }
        obs.complete();
      });
    }).subscribe(observer);
    observables.addObservable(observer.getName(), observable);
  },
  put: function put(url, body, observer) {
    var observable = _network.Observable.create(function (obs) {
      http.put(url, body).then(function (response) {
        var resp = new _response2.default(response, response.status, response.statusText, response.data);
        _messagingService2.default.sendMessage(new _message2.default(response, "", "", "", ""));
        obs.next(resp);
        obs.complete();
      }).catch(function (error) {
        var respoError = new _error2.default(error.response.status, error.response.statusText, error.message);
        _messagingService2.default.sendMessage(new _message2.default(error.response, _message.BANNER, _message.ERROR, respoError.getMsg(), url + " " + respoError.getFullMessage()));
        if (obs.error) {
          obs.error(respoError);
        }
        obs.complete();
      });
    }).subscribe(observer);
    observables.addObservable(observer.getName(), observable);
  }
};
init();

exports.default = httpService;

/***/ }),

/***/ "../common/app/http/observables.js":
/*!*****************************************!*\
  !*** ../common/app/http/observables.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Observables = function () {
    function Observables() {
        _classCallCheck(this, Observables);

        this.observables = {};
    }

    _createClass(Observables, [{
        key: "addObservable",
        value: function addObservable(name, observable) {
            if (!this.observables[name]) {
                this.observables[name] = observable;
            }
        }
    }, {
        key: "removeObservable",
        value: function removeObservable(name) {
            if (this.observables[name]) {
                this.observables[name].unsubscribe();
                delete this.observables[name];
            }
        }
    }]);

    return Observables;
}();

exports.default = Observables;

/***/ }),

/***/ "../common/app/http/observer.js":
/*!**************************************!*\
  !*** ../common/app/http/observer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class for the creation of the Observer
 */
var Observer = function () {
  function Observer(next, error) {
    _classCallCheck(this, Observer);

    this.name = new Date().getMilliseconds();
    if (next) {
      this.next = next;
    } else {
      this.next = function (response) {
        console.log("Observable with next method not implemented", response);
      };
    }
    if (error) {
      this.error = error;
    } else {
      this.error = function (error) {
        // console.log('Observable with error method not implemented', error);
      };
    }
  }

  _createClass(Observer, [{
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }]);

  return Observer;
}();

exports.default = Observer;

/***/ }),

/***/ "../common/app/http/response.js":
/*!**************************************!*\
  !*** ../common/app/http/response.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SUCCESS = exports.SUCCESS = 200;

var Response = function () {
  function Response(xhrResponse) {
    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
    var msg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    _classCallCheck(this, Response);

    this.xhrResponse = xhrResponse;
    this.status = status;
    this.msg = msg;
    this.data = data;
  }

  _createClass(Response, [{
    key: "getXhrResponse",
    value: function getXhrResponse() {
      return this.xhrResponse;
    }
  }, {
    key: "getStatus",
    value: function getStatus() {
      return this.status;
    }
  }, {
    key: "getMsg",
    value: function getMsg() {
      return this.msg;
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.data;
    }
  }]);

  return Response;
}();

exports.default = Response;

/***/ }),

/***/ "../common/app/services/ConfigService.js":
/*!***********************************************!*\
  !*** ../common/app/services/ConfigService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.config.services.ConfigService', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.URLUtility', 'mainApp.core.services.SessionService']).service('ConfigService', ["$http", "$q", "BrowserStorageUtility", "ResourceUtility", "URLUtility", "SessionService", function ($http, $q, BrowserStorageUtility, ResourceUtility, URLUtility, SessionService) {
    this.GetCurrentTopology = function () {
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;

        var credentialUrl = "/pls/config/topology?tenantId=" + tenant;
        var result;
        $http({
            method: "GET",
            url: credentialUrl
        }).success(function (data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data.Topology,
                    resultErrors: null
                };
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: data.errorMsg
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var errorMessage;
            if (data != null && data !== "") {
                errorMessage = data.errorMsg;
            } else {
                errorMessage = ResourceUtility.getString("SYSTEM_ERROR");
            }

            result = {
                success: false,
                resultObj: null,
                resultErrors: errorMessage
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetCurrentCredentials = function (topologyType, isProduction) {
        isProduction = typeof isProduction !== 'undefined' ? isProduction : true;
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;

        var credentialUrl = "/pls/credentials/" + topologyType + "?tenantId=" + tenant;
        if (topologyType === "sfdc") {
            credentialUrl += "&isProduction=" + isProduction;
        }
        var result;
        $http({
            method: "GET",
            url: credentialUrl
        }).success(function (data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: data.errorMsg
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString("SYSTEM_ERROR")
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    //If a user forgets their password, this will reset it and notify them
    this.ValidateApiCredentials = function (topologyType, apiObj, isProduction) {
        if (apiObj == null) {
            return null;
        }
        isProduction = typeof isProduction !== 'undefined' ? isProduction : true;
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;
        var credentialUrl = "/pls/credentials/" + topologyType + "/?tenantId=" + tenant;
        if (topologyType === "sfdc") {
            credentialUrl += "&isProduction=" + isProduction;
        }
        var result;
        $http({
            method: "POST",
            url: credentialUrl,
            data: JSON.stringify(apiObj),
            timeout: 60000
        }).success(function (data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            } else {
                SessionService.HandleResponseErrors(data, status);
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString("VALIDATE_CREDENTIALS_FAILURE")
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var errorMessage;
            if (status === 0) {
                errorMessage = ResourceUtility.getString("VALIDATE_CREDENTIALS_TIMEOUT");
            } else if (data.errorCode === "LEDP_18030") {
                errorMessage = ResourceUtility.getString("VALIDATE_CREDENTIALS_FAILURE");
            } else {
                errorMessage = ResourceUtility.getString("SYSTEM_ERROR");
                console.error(data.errorMsg);
            }
            result = {
                success: false,
                resultObj: null,
                resultErrors: errorMessage
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "../common/app/services/FeatureFlagService.js":
/*!****************************************************!*\
  !*** ../common/app/services/FeatureFlagService.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.core.services.FeatureFlagService', ['mainApp.core.utilities.RightsUtility', 'mainApp.core.utilities.BrowserStorageUtility']).service('FeatureFlagService', ["$q", "$http", "BrowserStorageUtility", "RightsUtility", function ($q, $http, BrowserStorageUtility, RightsUtility) {

    this.GetAllFlags = function (ApiHost) {
        var deferred = $q.defer();
        GetAllFlagsAsync(deferred, ApiHost);
        return deferred.promise;
    };

    this.FlagIsEnabled = GetFlag;

    /**
     * @return {boolean}
     */
    this.UserIs = function (levels) {
        var sessionDoc = BrowserStorageUtility.getClientSession(),
            levels = levels || '',
            levelsAr = levels.split(',');
        return levelsAr.includes(sessionDoc.AccessLevel);
    };

    var products = {
        CG: "Customer Growth"
    };

    // =======================================================
    // flag schema/hash ==> must in sync with backend schema
    // =======================================================
    var flags = {
        // ===================================
        // BEGIN: flags governed by user level
        // ===================================
        VIEW_SAMPLE_LEADS: 'View_Sample_Leads',
        VIEW_REFINE_CLONE: 'View_Refine_Clone',
        EDIT_REFINE_CLONE: 'Edit_Refine_Clone',
        VIEW_REMODEL: 'View_Remodel',
        CHANGE_MODEL_NAME: 'ChangeModelNames',
        DELETE_MODEL: 'DeleteModels',
        REVIEW_MODEL: 'ReviewModel',
        UPLOAD_JSON: 'UploadSummaryJson',
        USER_MGMT_PAGE: 'UserManagementPage',
        ADD_USER: 'AddUsers',
        CHANGE_USER_ACCESS: 'ChangeUserAccess',
        DELETE_USER: 'DeleteUsers',
        ADMIN_PAGE: 'AdminPage',
        MODEL_HISTORY_PAGE: 'ModelCreationHistoryPage',
        JOBS_PAGE: 'JobsPage',
        MARKETO_SETTINGS_PAGE: 'MarketoSettingsPage',
        API_CONSOLE_PAGE: 'APIConsolePage',
        // ===================================
        // END: flags governed by user level
        // ===================================

        // ====================
        // BEGIN: product flags
        // ====================
        // These are actually product flag (whether the customer has purchased the product or not)
        ENABLE_CDL: 'EnableCdl',
        // ====================
        // END: product flags
        // ====================

        // ================
        // BEGIN: LP2 flags
        // ================
        ADMIN_ALERTS_TAB: 'AdminAlertsTab',
        SETUP_PAGE: 'SetupPage',
        DEPLOYMENT_WIZARD_PAGE: 'DeploymentWizardPage',
        SYSTEM_SETUP_PAGE: 'SystemSetupPage',
        ACTIVATE_MODEL_PAGE: 'ActivateModelPage',
        LEAD_ENRICHMENT_PAGE: 'LeadEnrichmentPage',
        // ================
        // END: LP2 flags
        // ================

        REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE: 'RedirectToDeploymentWizardPage',
        ALLOW_PIVOT_FILE: 'AllowPivotFile',
        ENABLE_INTERNAL_ENRICHMENT_ATTRIBUTES: 'EnableInternalEnrichmentAttributes',
        LATTICE_INSIGHTS: 'LatticeInsights',
        VDB_MIGRATION: 'VDBMigration',
        SCORE_EXTERNAL_FILE: 'ScoreExternalFile',
        ENABLE_CROSS_SELL_MODELING: 'EnableCrossSellModeling',
        ENABLE_FILE_IMPORT: 'EnableFileImport',
        ENABLE_PRODUCT_BUNDLE_IMPORT: 'EnableProductBundleImport',
        ENABLE_PRODUCT_HIERARCHY_IMPORT: 'EnableProductHierarchyImport',
        ENABLE_PRODUCT_PURCHASE_IMPORT: 'EnableProductPurchaseImport',
        PLAYBOOK_MODULE: 'PlaybookModule',
        LAUNCH_PLAY_TO_MAP_SYSTEM: 'LaunchPlayToMapSystem',

        //TODO: deprecated flags
        CAMPAIGNS_PAGE: 'EnableCampaignUI',
        USE_ELOQUA_SETTINGS: 'UseEloquaSettings',
        USE_MARKETO_SETTINGS: 'UseMarketoSettings',
        USE_SALESFORCE_SETTINGS: 'UseSalesforceSettings',
        LATTICE_MARKETO_PAGE: 'EnableLatticeMarketoCredentialPage',
        ENABLE_FUZZY_MATCH: 'EnableFuzzyMatch',
        ENABLE_DATA_PROFILING_V2: 'EnableDataProfilingV2'
    };

    this.Flags = function () {
        return flags;
    };

    var flagValues = {};
    var purchasedProducts = [];

    function GetAllFlagsAsync(promise, ApiHost) {
        // feature flag cached
        if (Object.keys(flagValues).length > 0) {
            promise.resolve(flagValues);
            return;
        }

        var url = (ApiHost === '/ulysses' ? '/ulysses' : '/pls') + '/tenantconfig';

        $http({
            method: 'GET',
            url: url
        }).success(function (data) {
            for (var key in data['FeatureFlags']) {
                flagValues[key] = data['FeatureFlags'][key];
            }

            purchasedProducts = data['Products'];

            SetDeprecatedFlags();

            // product flags
            SetFlag(flags.ENABLE_CDL, GetProduct(products.CG));

            // update user-level flags
            if (ApiHost !== '/ulysses') {
                UpdateFlagsBasedOnRights();
            }

            promise.resolve(flagValues);
        }).error(function () {
            // if cannot get feature flags from backend
            SetFlag(flags.ALLOW_PIVOT_FILE, false);
            SetFlag(flags.ENABLE_INTERNAL_ENRICHMENT_ATTRIBUTES, false);
            SetFlag(flags.REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE, false);

            SetDeprecatedFlags();

            // LP2
            SetFlag(flags.ADMIN_ALERTS_TAB, false);
            SetFlag(flags.SETUP_PAGE, false);
            SetFlag(flags.ACTIVATE_MODEL_PAGE, false);
            SetFlag(flags.SYSTEM_SETUP_PAGE, false);
            SetFlag(flags.DEPLOYMENT_WIZARD_PAGE, false);
            SetFlag(flags.LEAD_ENRICHMENT_PAGE, false);

            // product flags
            SetFlag(flags.ENABLE_CDL, false);

            // update user-level flags
            if (ApiHost !== '/ulysses') {
                UpdateFlagsBasedOnRights();
            }

            promise.resolve(flagValues);
        });
    }

    function SetDeprecatedFlags() {
        SetFlag(flags.CAMPAIGNS_PAGE, false);
        SetFlag(flags.USE_SALESFORCE_SETTINGS, true);
        SetFlag(flags.USE_MARKETO_SETTINGS, true);
        SetFlag(flags.USE_ELOQUA_SETTINGS, true);
        SetFlag(flags.LATTICE_MARKETO_PAGE, true);
        SetFlag(flags.ENABLE_FUZZY_MATCH, true);
        SetFlag(flags.ENABLE_DATA_PROFILING_V2, true);
    }

    function SetFlag(flag, value) {
        flagValues[flag] = value;
    }
    function UpdateFlag(flag, value) {
        SetFlagUsingBooleanAnd(flag, value);
    }
    function SetFlagUsingBooleanAnd(flag, value) {
        if (flagValues.hasOwnProperty(flag)) {
            SetFlag(flag, flagValues[flag] && value);
        } else {
            SetFlag(flag, value);
        }
    }

    /**
     * @return {boolean}
     */
    function GetFlag(flag) {
        return flagValues[flag] || false;
    }

    /**
     * @return {boolean}
     */
    function GetProduct(product) {
        return purchasedProducts.includes(product) || false;
    }

    function UpdateFlagsBasedOnRights() {

        UpdateFlag(flags.VIEW_SAMPLE_LEADS, RightsUtility.currentUserMay("View", "Sample_Leads"));
        UpdateFlag(flags.VIEW_REFINE_CLONE, RightsUtility.currentUserMay("View", "Refine_Clone"));
        UpdateFlag(flags.EDIT_REFINE_CLONE, RightsUtility.currentUserMay("Edit", "Refine_Clone"));

        UpdateFlag(flags.VIEW_REMODEL, RightsUtility.currentUserMay("View", "Remodel"));

        UpdateFlag(flags.CHANGE_MODEL_NAME, RightsUtility.currentUserMay("Edit", "Models"));
        UpdateFlag(flags.DELETE_MODEL, RightsUtility.currentUserMay("Edit", "Models"));
        UpdateFlag(flags.REVIEW_MODEL, false);
        UpdateFlag(flags.UPLOAD_JSON, RightsUtility.currentUserMay("Create", "Models"));

        UpdateFlag(flags.USER_MGMT_PAGE, RightsUtility.currentUserMay("View", "Users"));
        UpdateFlag(flags.ADD_USER, RightsUtility.currentUserMay("Edit", "Users"));
        UpdateFlag(flags.CHANGE_USER_ACCESS, RightsUtility.currentUserMay("Edit", "Users"));
        UpdateFlag(flags.DELETE_USER, RightsUtility.currentUserMay("Edit", "Users"));

        UpdateFlag(flags.ADMIN_PAGE, RightsUtility.currentUserMay("View", "Reporting"));
        UpdateFlag(flags.ADMIN_ALERTS_TAB, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.MODEL_HISTORY_PAGE, RightsUtility.currentUserMay("View", "Reporting"));
        UpdateFlag(flags.SYSTEM_SETUP_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.ACTIVATE_MODEL_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));

        UpdateFlag(flags.SETUP_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.DEPLOYMENT_WIZARD_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.LEAD_ENRICHMENT_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));

        UpdateFlag(flags.JOBS_PAGE, RightsUtility.currentUserMay("View", "Jobs"));
        UpdateFlag(flags.MARKETO_SETTINGS_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.API_CONSOLE_PAGE, RightsUtility.currentUserMay("Create", "Oauth2Token"));
    }
}]);

/***/ }),

/***/ "../common/app/services/HelpService.js":
/*!*********************************************!*\
  !*** ../common/app/services/HelpService.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.core.services.HelpService', ['mainApp.appCommon.utilities.URLUtility']).service('HelpService', ["URLUtility", function (URLUtility) {

    /*
    * Navigates to the Privacy Policy web page.
    */
    this.OpenPrivacyPolicy = function () {
        URLUtility.OpenNewWindow("./help/PrivacyPolicy.html");
    };
}]);

/***/ }),

/***/ "../common/app/services/LoginService.js":
/*!**********************************************!*\
  !*** ../common/app/services/LoginService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.login.services.LoginService', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.services.SessionService']).service('LoginService', ["$http", "$q", "$location", "$window", "BrowserStorageUtility", "ResourceUtility", "StringUtility", "SessionService", function ($http, $q, $location, $window, BrowserStorageUtility, ResourceUtility, StringUtility, SessionService) {

    this.Login = function (username, password) {
        var deferred = $q.defer();

        var passwordHash = CryptoJS.SHA256(password);
        var httpHeaders = {};
        var params = JSON.stringify({ Username: username, Password: passwordHash.toString() });

        $http({
            method: 'POST',
            url: '/pls/login',
            data: params,
            headers: {
                'ErrorDisplayMethod': 'none'
            }
        }).then(function onSuccess(response) {
            // console.log('BACK Again');
            var result = response.data;
            if (result != null && result !== "" && result.Success == true) {
                BrowserStorageUtility.setTokenDocument(result.Uniqueness + "." + result.Randomness);
                result.Result.UserName = username;
                result.Result.FirstName = result.FirstName;
                result.Result.LastName = result.LastName;
                BrowserStorageUtility.setLoginDocument(result.Result);
                deferred.resolve(result);
            } else {
                var errors = result.Errors;
                var result = {
                    Success: false,
                    errorMessage: errors[0]
                };
                deferred.resolve(result.errorMessage);
            }
        }, function onError(response) {

            var result = {
                Success: false,
                errorMessage: ResourceUtility.getString('LOGIN_UNKNOWN_ERROR')
            };

            if (response.data && response.data.errorCode === 'LEDP_18001') {
                result.errorMessage = ResourceUtility.getString('DEFAULT_LOGIN_ERROR_TEXT');
            }
            deferred.resolve(result.errorMessage);
        });

        return deferred.promise;
    };

    this.SamlLogin = function (sessionDocument) {
        var deferred = $q.defer();
        var result = sessionDocument;
        if (result != null && result !== "") {
            result.Ticket.AuthenticationRoute = result.AuthenticationRoute; //FIXME this is just here until backend starts passing it

            BrowserStorageUtility.setTokenDocument(result.Ticket.Uniqueness + "." + result.Ticket.Randomness);
            deferred.resolve(result);
            BrowserStorageUtility.setLoginDocument(result.Ticket); // with normal LoginService.login ^ this is result.Result, here it's result.Ticket and result.Result is what attach would use
        }
        deferred.resolve(result);

        return deferred.promise;
    };

    this.PostToJwt = function (params) {
        var deferred = $q.defer();

        console.log(params);

        $http({
            method: 'POST',
            url: '/pls/jwt/handle_request',
            data: {
                'requestParameters': params
            },
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(function onSuccess(data, status, headers, config) {
            deferred.resolve(data.data);
        }, function onError(data, status, headers, config) {
            SessionService.HandleResponseErrors(data.data, status);
            deferred.resolve(data.data);
        });
        return deferred.promise;
    };

    this.SSOLogin = function (tenantName, params) {
        var deferred = $q.defer();

        console.log(params);

        $http({
            method: 'POST',
            url: '/pls/saml/splogin',
            data: {
                'requestParameters': params,
                'tenantDeploymentId': tenantName
            },
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(function onSuccess(data) {
            console.log(data.data);
            deferred.resolve(data.data);
        }, function onError(data, status, headers, config) {
            SessionService.HandleResponseErrors(data.data, status);
            deferred.resolve(data.data);
        });
        return deferred.promise;
    };

    this.GetSessionDocument = function (tenant, username) {
        if (tenant == null) {
            return null;
        }

        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/attach',
            data: angular.toJson(tenant)
        }).then(function onSuccess(d, status, headers, config) {
            var data = d.data;
            var result = false;

            if (data != null && data.Success === true) {
                BrowserStorageUtility.setSessionDocument(data.Result);
                data.Result.User.Tenant = tenant;
                result = data;

                BrowserStorageUtility.setClientSession(data.Result.User, function () {
                    BrowserStorageUtility.setHistory(username, tenant);

                    deferred.resolve(result);
                });
            }

            if (result.Result.User.AccessLevel === null) {
                status = 401;
                SessionService.HandleResponseErrors(data, status);
                deferred.resolve(result);
            }
        }, function onError(data, status, headers, config) {
            SessionService.HandleResponseErrors(data.data, status);
            deferred.resolve(data.data);
        });
        return deferred.promise;
    };

    // If a user forgets their password, this will reset it and notify them
    this.ResetPassword = function (username) {
        if (username == null) {
            return null;
        }
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: "/pls/forgotpassword/",
            data: { Username: username, Product: "Lead Prioritization", HostPort: this.getHostPort() },
            headers: { "Content-Type": "application/json" }
        }).then(function onSuccess(data, status, headers, config) {
            var result = { Success: false };
            if (data.data === true || data.data === 'true') {
                result.Success = true;
            } else {
                SessionService.HandleResponseErrors(data.data, status);
            }
            deferred.resolve(result);
        }, function onError(data, status, headers, config) {
            var result = { Success: false, Error: data.data };
            deferred.resolve(result);
        });
        return deferred.promise;
    };

    this.Logout = function (params) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            data: '',
            url: '/pls/logout',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(function onSuccess(data, status, headers, config) {
            if (data != null && data.data.Success === true) {
                BrowserStorageUtility.clear(false);
                ResourceUtility.clearResourceStrings();

                var loginDocument = BrowserStorageUtility.getLoginDocument(),
                    authenticationRoute = loginDocument && loginDocument.AuthenticationRoute ? loginDocument.AuthenticationRoute : null,
                    tenantId = BrowserStorageUtility.getClientSession() && BrowserStorageUtility.getClientSession().Tenant && BrowserStorageUtility.getClientSession().Tenant.Identifier ? BrowserStorageUtility.getClientSession().Tenant.Identifier : null;

                var paramString = params ? '?' + Object.keys(params).map(function (k) {
                    return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);
                }).join('&') : '';

                setTimeout(function () {
                    if (authenticationRoute === 'SSO') {
                        $window.open('/login/saml/' + tenantId + '/logout' + paramString, '_self');
                    } else {
                        $window.open('/login/logout' + paramString, '_self');
                    }
                }, 300);
            } else {
                SessionService.HandleResponseErrors(data.data, status);
            }
            deferred.resolve(data);
        }, function onError(data, status, headers, config) {
            deferred.resolve(data.data);
        });

        return deferred.promise;
    };

    this.ChangePassword = function (oldPassword, newPassword, confirmNewPassword) {
        var deferred = $q.defer();

        if (StringUtility.IsEmptyString(oldPassword) || StringUtility.IsEmptyString(newPassword) || StringUtility.IsEmptyString(confirmNewPassword)) {
            deferred.resolve(null);
            return deferred.promise;
        }

        var creds = {
            OldPassword: CryptoJS.SHA256(oldPassword).toString(),
            NewPassword: CryptoJS.SHA256(newPassword).toString()
        };

        var username = BrowserStorageUtility.getLoginDocument().UserName;
        $http({
            method: 'PUT',
            url: '/pls/password/' + username + '/',
            data: creds,
            headers: {
                "Content-Type": "application/json"
            }
        }).then(function onSuccess(data, status, headers, config) {
            var result = {
                Success: true,
                Status: status
            };

            if (!data.data.Success) {
                result.Success = false;
            }

            deferred.resolve(result);
        }, function onError(data, status, headers, config) {
            var result = {
                Success: false,
                Status: status
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.getHostPort = function () {
        var host = $location.host();
        var protocal = $location.protocol();
        var port = $location.port();
        if (port == 80) {
            return protocal + "://" + host;
        } else {
            return protocal + "://" + host + ":" + port;
        }
    };
}]);

/***/ }),

/***/ "../common/app/services/MetadataService.js":
/*!*************************************************!*\
  !*** ../common/app/services/MetadataService.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.setup.services.MetadataService', ['mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.services.SessionService']).service('MetadataService', ["$http", "$q", "_", "BrowserStorageUtility", "RightsUtility", "ResourceUtility", "SessionService", function ($http, $q, _, BrowserStorageUtility, RightsUtility, ResourceUtility, SessionService) {

    this.GetFields = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/vdbmetadata/fields?' + new Date().getTime(),
            headers: {
                'Content-Type': "application/json"
            }
        }).success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = data.Result;
            } else {
                result.ResultErrors = ResourceUtility.getString('SETUP_MANAGE_FIELDS_GET_FIELDS_ERROR');
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GET_FIELDS_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.UpdateField = function (field) {
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: '/pls/vdbmetadata/fields/' + field.ColumnName,
            headers: {
                'Content-Type': "application/json"
            },
            data: field
        }).success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = data.Result;
            } else {
                result.ResultErrors = ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELD_ERROR');
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELD_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.UpdateFields = function (fields) {
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: '/pls/vdbmetadata/fields',
            headers: {
                'Content-Type': "application/json"
            },
            data: fields
        }).success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = data.Result;
            } else {
                result.ResultErrors = ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELDS_ERROR');
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELD_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "../common/app/services/ResourceStringsService.js":
/*!********************************************************!*\
  !*** ../common/app/services/ResourceStringsService.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.core.services.ResourceStringsService', ['mainApp.appCommon.utilities.URLUtility', 'mainApp.appCommon.utilities.ResourceUtility']).service('ResourceStringsService', ["$http", "$q", "URLUtility", "ResourceUtility", function ($http, $q, URLUtility, ResourceUtility) {

    this.DefaultLocale = "en-US";

    this.GetExternalResourceStringsForLocale = function (locale) {
        if (locale == null) {
            locale = this.DefaultLocale;
        }

        var webAddress = "assets/resources/" + locale + "/" + "ResourceStringsExternal.txt";
        return getResourceStringsAtWebAddress(webAddress);
    };

    this.GetInternalResourceStringsForLocale = function (locale) {
        if (locale == null) {
            locale = this.DefaultLocale;
        }

        var webAddress = "assets/resources/" + locale + "/" + "ResourceStrings.txt";
        return getResourceStringsAtWebAddress(webAddress);
    };

    function getResourceStringsAtWebAddress(webAddress) {
        var deferred = $q.defer();

        if (ResourceUtility.resourceStringsInitialized) {
            deferred.resolve(ResourceUtility.configStrings);
        } else {
            $http({
                method: 'GET',
                url: webAddress
            }).then(function (data, status, headers, config) {
                data = data.data;

                if (data === null) {
                    return;
                }

                var resourceStrings = {};
                var result = data.split("\r\n");

                for (var x = 0; x < result.length; x++) {
                    if (result[x] !== "") {
                        var resourceString = result[x].split("=");
                        resourceStrings[resourceString[0]] = resourceString[1];
                    }
                }

                ResourceUtility.configStrings = resourceStrings;
                ResourceUtility.resourceStringsInitialized = true;

                deferred.resolve(true);
            });
        }

        return deferred.promise;
    }
}]);

/***/ }),

/***/ "../common/app/services/SessionService.js":
/*!************************************************!*\
  !*** ../common/app/services/SessionService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.core.services.SessionService', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.ResourceUtility']).service('SessionService', ["BrowserStorageUtility", "ResourceUtility", function (BrowserStorageUtility, ResourceUtility) {

    this.ClearSession = function () {
        BrowserStorageUtility.clear(false);
        ResourceUtility.clearResourceStrings();
        window.location.reload();
    };

    this.HandleResponseErrors = function (data, status) {
        if (status === 401) {
            this.ClearSession();
        }
    };
}]);

/***/ }),

/***/ "../common/app/services/services.index.js":
/*!************************************************!*\
  !*** ../common/app/services/services.index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__(/*! ./ConfigService */ "../common/app/services/ConfigService.js");

__webpack_require__(/*! ../utilities/BrowserStorageUtility */ "../common/app/utilities/BrowserStorageUtility.js");

__webpack_require__(/*! ../utilities/ResourceUtility */ "../common/app/utilities/ResourceUtility.js");

__webpack_require__(/*! ../utilities/URLUtility */ "../common/app/utilities/URLUtility.js");

__webpack_require__(/*! ./SessionService */ "../common/app/services/SessionService.js");

__webpack_require__(/*! ./FeatureFlagService */ "../common/app/services/FeatureFlagService.js");

__webpack_require__(/*! ../utilities/RightsUtility */ "../common/app/utilities/RightsUtility.js");

__webpack_require__(/*! ./HelpService */ "../common/app/services/HelpService.js");

__webpack_require__(/*! ./LoginService */ "../common/app/services/LoginService.js");

__webpack_require__(/*! ../utilities/UnderscoreUtility */ "../common/app/utilities/UnderscoreUtility.js");

__webpack_require__(/*! ../utilities/StringUtility */ "../common/app/utilities/StringUtility.js");

__webpack_require__(/*! ./MetadataService */ "../common/app/services/MetadataService.js");

__webpack_require__(/*! ./ResourceStringsService */ "../common/app/services/ResourceStringsService.js");

console.log("Services module");
// import angular from "angular";s
exports.default = angular.module("com.le.common.services", ["mainApp.config.services.ConfigService", 'mainApp.core.services.FeatureFlagService', 'mainApp.core.services.HelpService', 'mainApp.login.services.LoginService', 'mainApp.setup.services.MetadataService', 'mainApp.core.services.ResourceStringsService', 'mainApp.core.services.SessionService']);

/***/ }),

/***/ "../common/app/utilities/AuthorizationUtility.js":
/*!*******************************************************!*\
  !*** ../common/app/utilities/AuthorizationUtility.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.core.utilities.AuthorizationUtility', []).service('AuthorizationUtility', ["$q", "$state", "$stateParams", "$rootScope", "BrowserStorageUtility", "FeatureFlagService", function ($q, $state, $stateParams, $rootScope, BrowserStorageUtility, FeatureFlagService) {
    var AuthorizationUtility = this,
        flags = FeatureFlagService.Flags();

    this.init = function () {
        this.ClientSession = BrowserStorageUtility.getClientSession();
        this.clientAccessLevel = this.ClientSession.AccessLevel;

        //common access level groupings
        this.allAccessLevels = ['EXTERNAL_USER', 'EXTERNAL_ADMIN', 'INTERNAL_USER', 'INTERNAL_ADMIN', 'SUPER_ADMIN'];
        this.excludeExternalUser = ['EXTERNAL_ADMIN', 'INTERNAL_USER', 'INTERNAL_ADMIN', 'SUPER_ADMIN'];
        this.admins = ['EXTERNAL_ADMIN', 'INTERNAL_ADMIN', 'SUPER_ADMIN'];
    };

    this.redirectIfNotAuthorized = function (accessLevels, featureFlags, redirectTo, params) {
        if (!this.checkAccessLevel(accessLevels) || !this.checkFeatureFlags(featureFlags)) {
            console.error('Unauthorized Access');
            $state.go(redirectTo, params);
        }
    };

    this.checkAccessLevel = function (accessLevels) {
        if (accessLevels != []) {
            return accessLevels.indexOf(this.clientAccessLevel) >= 0;
        } else {
            console.warn('Access levels are not defined');
        }
    };

    this.checkFeatureFlags = function (featureFlags) {
        if (featureFlags != {}) {
            for (var flag in featureFlags) {
                if (FeatureFlagService.FlagIsEnabled(flag) != featureFlags[flag]) {
                    return false;
                }
            }
            return true;
        } else {
            console.warn('Feature flags are not defined');
        }
    };

    this.clear = function () {
        this.init();
    };

    this.init();
}]);

/***/ }),

/***/ "../common/app/utilities/BrowserStorageUtility.js":
/*!********************************************************!*\
  !*** ../common/app/utilities/BrowserStorageUtility.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('mainApp.core.utilities.BrowserStorageUtility', []).service('BrowserStorageUtility', function () {

    this.CacheTimeout = 28800000; // 8 hours in Milliseconds

    this._tokenDocumentStorageKey = "GriotTokenDocument";
    this._tokenDocument = null; // document containing the authentication token

    this._loginDocumentStorageKey = "GriotLoginDocument";
    this._loginDocument = null; // document containing basic information about the Bard deployment

    this._sessionDocumentStorageKey = "GriotSessionDocument";
    this._sessionDocument = null; // actual session object

    this._clientSessionStorageKey = "GriotClientSession";
    this._clientSession = null; // actual client session object

    this._currentTabStorageKey = "GriotCurrentTab";
    this._currentTab = null; // currently selected tab in the main header

    this._configDocumentStorageKey = "GriotConfigDocument";
    this._configDocument = null; // actual client session object

    this._widgetConfigDocumentStorageKey = "GriotWidgetConfigDocument";
    this._widgetConfigDocument = null; // actual client session object

    this._featureFlagsDocumentStorageKey = "GriotFeatureFlagsDocument";
    this._featureFlagsDocument = null; // actual client session object

    this._sessionLastActiveTimestampStorageKey = "GriotSessionLastActiveTimestamp";
    this._sessionShouldShowJobCompleteMessage = "GriotSessionShowJobCompleteMessage";

    this._OAuthAccessTokenStorageKey = "GriotOAuthAccessToken";
    this._OAuthAccessToken = null; // actual client session object

    this.setSessionLastActiveTimestamp = function (timeStamp) {
        $.jStorage.set(this._sessionLastActiveTimestampStorageKey, timeStamp);
    };

    this.getSessionLastActiveTimestamp = function () {
        $.jStorage.reInit();
        return $.jStorage.get(this._sessionLastActiveTimestampStorageKey);
    };

    this.setSessionShouldShowJobCompleteMessage = function (shouldShow) {
        $.jStorage.set(this._sessionShouldShowJobCompleteMessage, shouldShow);
    };

    this.getSessionShouldShowJobCompleteMessage = function () {
        return $.jStorage.get(this._sessionShouldShowJobCompleteMessage);
    };

    this.setTokenDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_tokenDocument", "_tokenDocumentStorageKey");
    };

    this.getTokenDocument = function () {
        return this._getProperty("_tokenDocument", "_tokenDocumentStorageKey");
    };

    this.setLoginDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_loginDocument", "_loginDocumentStorageKey");
    };

    this.getLoginDocument = function () {
        return this._getProperty("_loginDocument", "_loginDocumentStorageKey");
    };

    this.setFeatureFlagsDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_featureFlagsDocument", "_featureFlagsDocumentStorageKey");
    };

    this.getFeatureFlagsDocument = function () {
        var featureFlags = this._getProperty("_featureFlagsDocument", "_featureFlagsDocumentStorageKey");
        return featureFlags || {};
    };

    this.setSessionDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_sessionDocument", "_sessionDocumentStorageKey");
    };

    this.getSessionDocument = function () {
        return this._getProperty("_sessionDocument", "_sessionDocumentStorageKey");
    };

    this.clearSessionDocument = function (successHandler) {
        this._setProperty(null, successHandler, "_sessionDocument", "_sessionDocumentStorageKey");
    };

    this.setClientSession = function (data, successHandler) {
        if (data != null && data.AvailableRights != null) {
            var availableRightsDictionary = {};

            $.each(data.AvailableRights, function (key, availableRight) {
                availableRightsDictionary[availableRight.Key] = availableRight.Value;
            });

            data.availableRightsDictionary = availableRightsDictionary;
        }

        this._setProperty(data, successHandler, "_clientSession", "_clientSessionStorageKey");
    };

    this.getClientSession = function () {
        return this._getProperty("_clientSession", "_clientSessionStorageKey");
    };

    this.clearClientSession = function (successHandler) {
        this._setProperty(null, successHandler, "_clientSession", "_clientSessionStorageKey");
    };

    this.setCurrentTab = function (data, successHandler) {
        this._setProperty(data, successHandler, "_currentTab", "_currentTabStorageKey");
    };

    this.getCurrentTab = function () {
        return this._getProperty("_currentTab", "_currentTabStorageKey");
    };

    this.setConfigDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_configDocument", "_configDocumentStorageKey");
    };

    this.getConfigDocument = function () {
        return this._getProperty("_configDocument", "_configDocumentStorageKey");
    };

    this.setWidgetConfigDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_widgetConfigDocument", "_widgetConfigDocumentStorageKey");
    };

    this.getWidgetConfigDocument = function () {
        return this._getProperty("_widgetConfigDocument", "_widgetConfigDocumentStorageKey");
    };

    this.setOAuthAccessToken = function (data, successHandler) {
        this._setProperty(data, successHandler, "_OAuthAccessToken", "_OAuthAccessTokenStorageKey");
    };

    this.getOAuthAccessToken = function () {
        return this._getProperty("_OAuthAccessToken", "_OAuthAccessTokenStorageKey");
    };

    this.clearOAuthAccessToken = function (successHandler) {
        this._setProperty(null, successHandler, "_OAuthAccessToken", "_OAuthAccessTokenStorageKey");
    };

    // Helper method to set a property
    // by adding it to local storage and then calling a success handler.
    this._setProperty = function (data, successHandler, propStorageObjName, propStorageKeyName) {
        if (this[propStorageKeyName]) {
            if (data != null && typeof data != 'string') {
                data.Timestamp = new Date().getTime() + this.CacheTimeout;
            } else {
                $.jStorage.deleteKey(this[propStorageKeyName]);
            }
            $.jStorage.set(this[propStorageKeyName], data);
            this[propStorageObjName] = data;
            if (successHandler && typeof successHandler === "function") {
                successHandler();
            }
        }
    };

    // Helper method to get a property
    // by grabbing it from local storage.
    this._getProperty = function (propStorageObjName, propStorageKeyName) {
        if (propStorageObjName && propStorageKeyName) {
            if (this[propStorageObjName] == null) {
                $.jStorage.reInit();
                var fromStorage = $.jStorage.get(this[propStorageKeyName]);
                this[propStorageObjName] = fromStorage || null;
            }
            return this[propStorageObjName];
        } else {
            return null;
        }
    };

    this.getHistory = function (username, currentTenant) {
        var LatticeSettings = $.jStorage.get("LatticeSettings"),
            username = username || '',
            currentTenant = currentTenant || '',
            values = {},
            result = [],
            history = [],
            login,
            tenants,
            all;

        if (LatticeSettings) {
            login = LatticeSettings.Login || {};
            tenants = login.TenantsList || {};
            all = tenants.History || {};
            history = _typeof(all[username]) == 'object' ? all[username] : [];
        }

        for (var i = 0, item, val, exists; i < history.length; i++) {
            item = history[i];
            val = item['DisplayName'];
            exists = values[val];

            values[val] = true;

            if (!exists && (!currentTenant || item['DisplayName'] != currentTenant)) {
                result.push(item);
            }
        }

        return result;
    };

    this.setHistory = function (username, tenant) {
        if (!username) {
            return;
        }

        var LatticeSettings = $.jStorage.get("LatticeSettings") || {};

        if (!LatticeSettings.Login) {
            LatticeSettings.Login = {};
        }

        if (!LatticeSettings.Login.TenantsList) {
            LatticeSettings.Login.TenantsList = {};
        }

        if (!LatticeSettings.Login.TenantsList.History) {
            LatticeSettings.Login.TenantsList.History = {};
        }

        if (!tenant) {
            LatticeSettings.Login.TenantsList.History[username] = [];
        } else if (!LatticeSettings.Login.TenantsList.History[username]) {
            LatticeSettings.Login.TenantsList.History[username] = [tenant];
        } else {
            LatticeSettings.Login.TenantsList.History[username].unshift(tenant);
        }

        $.jStorage.set("LatticeSettings", LatticeSettings);
    };

    this.clearHistory = function (username) {
        this.setHistory(username);
    };

    //This method will be used to clear out stored data on logout 
    //and possibly reset system cache
    this.clear = function (keepAuthentication) {
        var ClientSession, LatticeSettings;

        keepAuthentication = typeof keepAuthentication === 'boolean' ? keepAuthentication : false;

        if (keepAuthentication) {
            ClientSession = this.getClientSession();
        }

        // cross-application cross-login settings
        LatticeSettings = $.jStorage.get("LatticeSettings");

        $.jStorage.flush();

        if (keepAuthentication) {
            this.setClientSession(ClientSession);
        }

        $.jStorage.set("LatticeSettings", LatticeSettings);
    };
});

/***/ }),

/***/ "../common/app/utilities/DateTimeFormatUtility.js":
/*!********************************************************!*\
  !*** ../common/app/utilities/DateTimeFormatUtility.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.DateTimeFormatUtility', []).service('DateTimeFormatUtility', function () {

    this.OneDayInMS = 86400000;
    /*
    * Formats date according to specified format type..
    * @param {jsonDate} date in JSON format "/Date(XXXXXXXXXX-XXXX)/".
    * @param {formatType} format to find in the list of formats.
    */
    this.FormatJsonDateCSharpFormat = function (jsonDate, formatType) {
        var datetime = this.ParseJsonDate(jsonDate);
        var dtformat = this.ConvertCSharpFormat(formatType);
        if (datetime == null || isNaN(datetime) || dtformat == null) {
            return "";
        }

        return dateFormat(new Date(datetime), dtformat);
    };

    /*
    * Formats date according to specified format type..
    * @param {jsonDate} date in JSON format "/Date(XXXXXXXXXX)/".
    * @param {formatType} format to find in the list of formats.
    */
    this.FormatCSharpDate = function (jsonDate, formatType) {
        var datetime = this.ConvertCSharpDateTimeOffsetToJSDate(jsonDate);
        var dtformat = this.ConvertCSharpFormat(formatType);
        if (datetime == null || isNaN(datetime) || dtformat == null) {
            return "";
        }

        return dateFormat(new Date(datetime), dtformat);
    };

    this.ConvertCSharpDateTimeOffsetToJSDate = function (csDate) {
        if (csDate == null || csDate.DateTime == null || csDate.OffsetMinutes == null) {
            return null;
        }
        //DateTime will look like "/Date(XXXXXXXXXX)/"
        var csDateTime = csDate.DateTime;
        var startParenIndex = csDateTime.indexOf("(");
        var endParenIndex = csDateTime.indexOf(")");
        if (startParenIndex === -1 || endParenIndex === -1) {
            return null;
        }

        var dateTimeInt = parseInt(csDateTime.substring(startParenIndex + 1, endParenIndex));
        if (dateTimeInt == null || isNaN(dateTimeInt)) {
            return null;
        }

        return new Date(dateTimeInt);
    };

    this.CalculateDaysBetweenDates = function (startDate, endDate) {
        if (startDate == null || endDate == null) {
            return null;
        }

        var timeInMS = endDate.getTime() - startDate.getTime();

        return Math.floor(timeInMS / this.OneDayInMS);
    };

    /*
    * Extract and return date in milliseconds.
    * @param {jsonDate} date in JSON format "/Date(XXXXXXXXXX-XXXX)/".
    */
    this.ParseJsonDate = function (jsonDate) {
        // extract date portion
        var txt = $.trim(jsonDate);
        if (txt.length === 0) {
            return null;
        }
        var start = txt.indexOf("(");
        var end = txt.indexOf("-");
        if (start == -1 || end == -1 || start >= end) {
            return null;
        }
        var dt = txt.substring(start + 1, end);

        return Number(dt);
    };

    /*
     * Converts a JavaScript Date to the DateTimeOffset format that C# expects,
     * i.e.: for sending datetimeoffsets from the front end to the back end.
     * @param {jsDate}: Javascript Date object
     */
    this.ConvertJSDateToCSharpDateTimeOffset = function (jsDate, isEndDate) {
        if (!(jsDate instanceof Date)) {
            return jsDate;
        }

        // For an End Date, set its time to absolute latest
        // so that comparisons will also account for things on that day (DEF-5695)
        if (isEndDate === true) {
            jsDate.setHours(23, 59, 59, 999);
        } else if (isEndDate === false) {
            // Start Date - set its time to absolute earliest
            jsDate.setHours(0, 0, 0, 0);
        }

        var utcMsec = jsDate.getTime(); // milliseconds since 1970/01/01
        var cSharpDateTimeOffset = {
            DateTime: '/Date(' + utcMsec + ')/',
            OffsetMinutes: -1 * jsDate.getTimezoneOffset() // js does utc minus local, so need to negate
        };
        return cSharpDateTimeOffset;
    };

    /*
     * Convert a simple Date representation from C# (e.g. {Year:2013, Month:9, Day:1})
     * to a JavaScript Date object.
     */
    this.ConvertCSharpSimpleDateToJSDate = function (simpleDate) {
        var jsDate = new Date(simpleDate.Year, simpleDate.Month - 1, // JavaScript months go from 0-11
        simpleDate.Day);
        return jsDate;
    };

    /*
     * Converts minutes into an object with hours and minutes
     */
    this.MinutesToHoursAndMinutes = function (minutes) {
        if (isNaN(minutes)) {
            return null;
        }

        var toReturn = {};
        toReturn.Hours = parseInt(minutes / 60);
        toReturn.Minutes = minutes % 60;
        return toReturn;
    };

    /*
    * Extract datetime format and converts it to the JavaScript format expected by date.format.js.
    * @param {formatType} format to find in the list of formats.
    */
    //TODO:pierce Whoever is using this needs to change the paramaters to not require BrowserStorage
    this.ConvertCSharpFormat = function (formatType, dateTimeFormatList) {

        // Bard has no getAppModelDoc, so return some default
        if (dateTimeFormatList == null) {
            return "m/d/yyyy h:MM tt Z";
        }

        var dateFormatValue = null;
        for (var i = 0; i < dateFormatList.length; i++) {
            if (dateFormatList[i].Key == formatType) {
                dateFormatValue = dateFormatList[i].Value;
                break;
            }
        }
        if (dateFormatValue == null || dateFormatValue.length === 0) {
            return null;
        }
        // replace all lower case 'm' with upper case 'M' to convert minutes format;
        // replace all 'M' to 'm' for month conversion;
        // replace 'z','zz','zzz' with single 'o'
        // replace 'K' with 'Z'
        var str = dateFormatValue.split('');

        for (i = 0; i < str.length; i++) {
            switch (str[i]) {
                case 'M':
                    str[i] = 'm';break;
                case 'm':
                    str[i] = 'M';break;
                case 'z':
                    str[i] = 'o';
                    // see if more than one z
                    for (var j = i + 1; j < str.length; j++) {
                        if (str[j] == 'z') {
                            str[j] = '';
                        }
                    }
                    break;
                case 'K':
                    str[i] = 'Z';break;
                default:
                    break;
            }
        }
        dateFormatValue = str.join('');
        return dateFormatValue;
    };

    /* return right now in the format requested*/

    this.Now = function (formatType) {

        var dtformat = this.ConvertCSharpFormat(formatType);
        if (dtformat == null) {
            return "";
        }

        return dateFormat(new Date(), dtformat);
    };

    this.FormatStringDate = function (dateString, includeTime) {
        includeTime = includeTime != null && typeof includeTime === "boolean" ? includeTime : false;
        if (dateString == null || dateString === "") {
            return "";
        }

        var dateObj = new Date(dateString);
        if (dateObj == "Invalid Date") {
            return "";
        }

        if (includeTime) {
            return dateObj.toLocaleDateString() + " " + dateObj.toLocaleTimeString();
        } else {
            return dateObj.toLocaleDateString();
        }
    };

    this.FormatEpochDate = function (dateString) {
        if (dateString == null || dateString === "") {
            return "";
        }

        if (isNaN(dateString)) {
            return "";
        }

        var epochTime = parseInt(dateString) * 1000;
        var dateObj = new Date();
        dateObj.setTime(epochTime);

        return dateObj.toUTCString();
    };

    this.FormatShortDate = function (dateString) {
        return dateFormat(new Date(dateString), "m/d/yyyy");
    };
});

/***/ }),

/***/ "../common/app/utilities/NavUtility.js":
/*!*********************************************!*\
  !*** ../common/app/utilities/NavUtility.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.core.utilities.NavUtility', []).service('NavUtility', function () {

    // Hash Constants
    this.MANAGE_CREDENTIALS_HASH = "/ManageCredentials";
    this.UPDATE_PASSWORD_HASH = "/UpdatePassword";
    this.USER_MANAGEMENT_HASH = "/UserManagement";
    this.MODEL_LIST_HASH = "/ModelList";
    this.MODEL_DETAIL_HASH = "/ModelDetail";
    this.MODEL_CREATION_HISTORY_HASH = "/ModelCreationHistory";
    this.ACTIVATE_MODEL = "/ActivateModel";
    this.SETUP_HASH = "/ManageFields";
    this.DEPLOYMENT_WIZARD_HASH = "/DeploymentWizard";

    // Navigation Event Constants
    this.MANAGE_CREDENTIALS_NAV_EVENT = "ManageCredentialsNavEvent";
    this.UPDATE_PASSWORD_NAV_EVENT = "UpdatePasswordNavEvent";
    this.USER_MANAGEMENT_NAV_EVENT = "UserManagementNavEvent";
    this.MODEL_LIST_NAV_EVENT = "ModelListNavEvent";
    this.MODEL_DETAIL_NAV_EVENT = "ModelDetailNavEvent";
    this.MODEL_CREATION_HISTORY_NAV_EVENT = "ModelCreationHistoryNavEvent";
    this.SETUP_NAV_EVENT = "SetupNavEvent";
    this.LOAD_FIELDS_NAV_EVENT = "LoadFieldsEvent";
    this.DEPLOYMENT_WIZARD_NAV_EVENT = "DeploymentWizardNavEvent";
    this.LEAD_ENRICHMENT_NAV_EVENT = "LeadEnrichment";
    this.MAP_LATTICE_SCHEMA_FIELD_EVENT = "MapLatticeSchemaField";
    this.MANAGE_FIELDS_ADVANCED_SETTINGS_EVENT = "ManageFieldsAdvancedSettingsEvent";

    // General Event Constants
    this.SYSTEM_CONFIGURED_COMPLETE_EVENT = "SystemConfiguredCompleteEvent";
});

/***/ }),

/***/ "../common/app/utilities/NumberUtility.js":
/*!************************************************!*\
  !*** ../common/app/utilities/NumberUtility.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.NumberUtility', []).service('NumberUtility', function () {

    /**
     * [AbbreviateLargeNumber Given a number, will return the abbreviationiated version (e.g. 14000 becomes 14k)]
     * @param {[type]} number         an integer
     * @param {[type]} decimal_places an integer
     * return: a string
     */
    this.AbbreviateLargeNumber = function (number, decimal_places, abbreviations) {
        if (number == null || typeof number != "number") {
            return null;
        }

        decimal_places = decimal_places != null && typeof decimal_places === 'number' ? decimal_places : 2;
        decimal_places = Math.pow(10, decimal_places);

        var abbreviation = abbreviations || ["K", "M", "B", "T"];

        for (var i = abbreviation.length - 1; i >= 0; i--) {
            var size = Math.pow(10, (i + 1) * 3);

            if (size <= number) {
                number = Math.round(number * decimal_places / size) / decimal_places;

                if (number == 1000 && i < abbreviation.length - 1) {
                    number = 1;
                    i++;
                }

                number += abbreviation[i];

                break;
            }
        }
        return number;
    };

    /**
     * make a percentage form a total
     * MakePercentage(10, 100, '%', 0) = 10%
     * MakePercentage(10, 100, null, 2) = 10.00
     * ...
     */

    this.MakePercentage = function (number, total, suffix, limit) {
        var suffix = suffix || '',
            percentage = 0;

        if (number && total) {
            percentage = number / total * 100;

            if (typeof limit != 'undefined') {
                percentage = percentage.toFixed(limit);
            }

            return percentage + suffix;
        }

        return 0;
    };

    this.PadNumber = function (number, width, charcter) {
        var charcter = charcter || '0',
            number = number + '';

        return number.length >= width ? number : new Array(width - number.length + 1).join(charcter) + number;
    };
});

/***/ }),

/***/ "../common/app/utilities/PasswordUtility.js":
/*!**************************************************!*\
  !*** ../common/app/utilities/PasswordUtility.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.core.utilities.PasswordUtility', ['mainApp.appCommon.utilities.ResourceUtility']).service('PasswordUtility', ["ResourceUtility", function (ResourceUtility) {

    this.validPassword = function (password) {
        var result = {
            Valid: true,
            ErrorMsg: null
        };

        if (password.length < 8) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        var uppercase = /[A-Z]/;
        if (!uppercase.test(password)) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        var lowercase = /[a-z]/;
        if (!lowercase.test(password)) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        var number = /[0-9]/;
        if (!number.test(password)) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        return result;
    };
}]);

/***/ }),

/***/ "../common/app/utilities/ResourceUtility.js":
/*!**************************************************!*\
  !*** ../common/app/utilities/ResourceUtility.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.ResourceUtility', []).service('ResourceUtility', function () {

    this.DefaultLocale = "en-US";

    // key for config resource string object in local storage
    this.configStringsStorageKey = "ConfigStrings";
    this.configStringsKeyValueStorageKey = "ConfigStringKeyValues";
    this.configStringsLocaleStorageKey = "ConfigStringsLocale";

    // in memory dictionary of config resource string keys and values
    this.configStrings = null;

    // Indicator that somebody accessed the app without going through the proper channel
    this.resourceStringsInitialized = false;

    //This is needed for Flex so it can create it's StringLocator instance
    this.keyValuePairs = [];

    // get a config resource string value given its key
    this.getString = function (key, replacements) {
        if (this.configStrings == null) {
            this.populateConfigStrings();
        }
        var toReturn = this.configStrings[key] || key;
        if (replacements) {
            toReturn = this.replaceTokens(toReturn, replacements);
        }
        return toReturn;
    };

    this.clearResourceStrings = function () {
        $.jStorage.set(this.configStringsStorageKey, null);
        $.jStorage.set(this.configStringsKeyValueStorageKey, null);
        $.jStorage.set(this.configStringsLocaleStorageKey, null);
    };

    this.getResourceStrings = function () {
        return $.jStorage.get(this.configStringsStorageKey);
    };

    this.getResourceStringKeyValues = function () {
        return $.jStorage.get(this.configStringsKeyValueStorageKey);
    };

    this.setCurrentLocale = function (localeName) {
        $.jStorage.set(this.configStringsLocaleStorageKey, localeName);
    };

    this.getCurrentLocale = function () {
        return $.jStorage.get(this.configStringsLocaleStorageKey);
    };

    this.replaceTokens = function (key, replacements) {
        for (var i = 0; i < replacements.length; i++) {
            while (key.indexOf("{" + i + "}") != -1) {
                key = key.replace("{" + i + "}", replacements[i]);
            }
        }
        return key;
    };
    // populate in memory config resource strings dictionary from local storage
    this.populateConfigStrings = function () {
        var configStringsFromStorage = $.jStorage.get(this.configStringsStorageKey);

        this.configStrings = configStringsFromStorage || {};
    };

    // store a list of config resource string objects in local storage
    // set the config resource strings, e.g. if updating a subset for another locale
    // data should be a list of objects with "key" and a "value" properties
    this.storeStringList = function (stringList, successHandler) {
        //check if there is already anything in memory
        if (this.configStrings == null) {
            this.populateConfigStrings();
        }

        if (stringList != null) {
            for (var i = 0; i < stringList.length; i++) {
                var curPair = stringList[i];
                var curKey = curPair.Key;
                var curValue = curPair.Value;

                this.keyValuePairs.push(curPair);
                this.configStrings[curKey] = curValue;
            }
            this.resourceStringsInitialized = true;
        }

        // store updated set of strings back into local storage
        $.jStorage.set(this.configStringsStorageKey, this.configStrings);

        $.jStorage.set(this.configStringsKeyValueStorageKey, this.keyValuePairs);

        $(document).trigger('configStringsLoadedEvent');

        if (successHandler != null) {
            successHandler();
        }
    };

    //Preloads an image and return the preloaded image object
    this.PreloadImage = function (el, callback) {
        var img = new Image();
        img.onload = function () {
            callback(img);
        };
        img.src = el.attr("src");
    };

    this.SetBrowserTitle = function () {
        document.title = this.getString("BROWSER_TITLE");
    };
});

/***/ }),

/***/ "../common/app/utilities/RightsUtility.js":
/*!************************************************!*\
  !*** ../common/app/utilities/RightsUtility.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var app = angular.module('mainApp.core.utilities.RightsUtility', ['mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.utilities.BrowserStorageUtility']);

app.service('RightsUtility', ["_", "BrowserStorageUtility", function (_, BrowserStorageUtility) {

    this.accessLevel = {
        EXTERNAL_USER: { name: 'EXTERNAL_USER', ordinal: 0 },
        EXTERNAL_ADMIN: { name: 'EXTERNAL_ADMIN', ordinal: 1 },
        INTERNAL_USER: { name: 'INTERNAL_USER', ordinal: 2 },
        INTERNAL_ADMIN: { name: 'INTERNAL_ADMIN', ordinal: 3 },
        SUPER_ADMIN: { name: 'SUPER_ADMIN', ordinal: 4 }
    };

    this.getAccessLevel = function (s) {
        return _.findWhere(this.accessLevel, { name: s });
    };

    this.may = function (rightsDict, operation, category) {
        if (rightsDict.hasOwnProperty("PLS_" + category)) {
            var rights = rightsDict["PLS_" + category];
            return rights['May' + operation];
        }
        return false;
    };

    this.currentUserMay = function (operation, category) {
        var clientSession = BrowserStorageUtility.getClientSession();
        return this.may(clientSession.AvailableRights, operation, category);
    };
}]);

/***/ }),

/***/ "../common/app/utilities/SegmentsUtility.js":
/*!**************************************************!*\
  !*** ../common/app/utilities/SegmentsUtility.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.SegmentsUtility', []).service('SegmentsUtility', function () {

    this.PropertyBag = function (name, segment) {
        var property = '';
        if (segment && segment.segment_properties) {
            var segment_properties = segment.segment_properties;
            for (var i in segment_properties) {
                var property = segment_properties[i],
                    metadata = property.metadataSegmentProperty || {};
                if (metadata && metadata.option && metadata.option === name) {
                    return metadata.value || '';
                }
            }
        }
    };
});

/***/ }),

/***/ "../common/app/utilities/StringUtility.js":
/*!************************************************!*\
  !*** ../common/app/utilities/StringUtility.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.StringUtility', []).service('StringUtility', function () {

    this.IsEmptyString = function (stringToCheck) {
        var isEmpty = true;
        if (stringToCheck != null && stringToCheck.trim() !== "") {
            isEmpty = false;
        }
        return isEmpty;
    };

    this.AddCommas = function (stringToChange) {
        if (stringToChange == null) {
            return null;
        }
        var parts = stringToChange.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    };

    this.SubstituteAllSpecialCharsWithDashes = function (stringToChange) {
        stringToChange = stringToChange.trim();
        return stringToChange.replace(/[^a-zA-Z0-9]/g, '-');
    };

    this.SubstituteAllSpecialCharsWithSpaces = function (stringToChange) {
        stringToChange = stringToChange.trim();
        return stringToChange.replace(/[^a-zA-Z0-9]/g, ' ');
    };

    this.Title = function (stringToChange) {
        return stringToChange.replace(/(^|\s)[a-z]/g, function (c) {
            return c.toUpperCase();
        });
    };
}).filter('title', ["StringUtility", function (StringUtility) {
    return function (input) {
        return StringUtility.Title(input);
    };
}]);

/***/ }),

/***/ "../common/app/utilities/TimestampIntervalUtility.js":
/*!***********************************************************!*\
  !*** ../common/app/utilities/TimestampIntervalUtility.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.TimestampIntervalUtility', []).service('TimestampIntervalUtility', function () {
    this.getDays = function (timestamp) {
        if (!timestamp) {
            return false;
        }

        var MILLISECOND_PER_DAY = 24 * 60 * 60 * 1000;
        var numDaysAgoPasswordLastModified = Math.floor((Date.now() - timestamp) / MILLISECOND_PER_DAY);

        return numDaysAgoPasswordLastModified;
    };
    this.getDateNinetyDaysAway = function (timestamp) {
        if (!timestamp) {
            return false;
        }
        var MILLISECOND_PER_DAY = 24 * 60 * 60 * 1000;
        var dateTimeNinetyDaysAway = timestamp + MILLISECOND_PER_DAY * 90;
        return dateTimeNinetyDaysAway;
    };
    this.isTimestampFartherThanNinetyDaysAgo = function (timestamp) {
        return this.getDays(timestamp) >= 90;
    };
    this.timeAgo = function (to_timestamp, from_timestamp, in_seconds) {
        var to = in_seconds ? new Date(to_timestamp * 1000) : new Date(to_timestamp),
            from = from_timestamp ? in_seconds ? new Date(to_timestamp * 1000) : new Date(to_timestamp) : new Date(),
            diff = (from - to) / 1000,
            units = [{ name: "second", limit: 60, in_seconds: 1 }, { name: "minute", limit: 3600, in_seconds: 60 }, { name: "hour", limit: 86400, in_seconds: 3600 }, { name: "day", limit: 604800, in_seconds: 86400 }, { name: "week", limit: 2629743, in_seconds: 604800 }, { name: "month", limit: 31556926, in_seconds: 2629743 }, { name: "year", limit: null, in_seconds: 31556926 }];

        if (diff < 5) {
            return "now";
        }

        var i = 0,
            unit;
        while (unit = units[i++]) {
            if (diff < unit.limit || !unit.limit) {
                var diff = Math.floor(diff / unit.in_seconds);
                return diff + " " + unit.name + (diff > 1 ? "s" : "") + " ago";
            }
        };
    };
});

/***/ }),

/***/ "../common/app/utilities/URLUtility.js":
/*!*********************************************!*\
  !*** ../common/app/utilities/URLUtility.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.URLUtility', []).service('URLUtility', function () {
    /**
    * Returns the location of the web server based on the main page
    */
    this.GetWebServerAddress = function (mainPage) {
        if (mainPage == null) {
            return null;
        }
        var pathname = location.pathname;
        var pageIndex = pathname.indexOf(mainPage);

        if (pageIndex != -1) {
            pathname = pathname.substring(0, pageIndex);
        } else {
            pathname = pathname.substring(0, pathname.length - 1);
        }

        return location.protocol + "//" + location.host + pathname;
    };

    this.GetBaseUrl = function () {
        return location.protocol + "//" + location.host + location.pathname;
    };

    this.GetUrlQueryStrings = function (url) {
        if (url == null) {
            return "";
        }
        var result = "";

        //First remove the hash if it is found
        var hashIndex = url.indexOf("#");
        if (hashIndex != -1) {
            url = url.substring(0, hashIndex);
        }

        //Find the beginning of the query string and remove everything before it
        var qIndex = url.indexOf("?");
        if (qIndex != -1) {
            result = url.substring(qIndex, url.length);
        }
        return result;
    };

    this.GetUrlWithQueryStrings = function (baseUrl) {
        if (baseUrl == null) {
            return null;
        }
        var url = this.HandleProtocol(baseUrl);
        var queryStringParameters = this.GetUrlQueryStrings(window.location.href);
        if (queryStringParameters != null && queryStringParameters != "?") {
            url += queryStringParameters;
        }
        return url;
    };

    this.RemoveQueryStringParameter = function (url, parameter) {
        var urlHash = "";
        var hashIndex = url.indexOf("#");
        var qIndex = url.indexOf('?');

        if (hashIndex > -1) {
            if (hashIndex < qIndex) {
                // hash is before the query string parameters
                urlHash = url.substring(hashIndex, qIndex);
            } else {
                // hash is at the end
                urlHash = url.substring(hashIndex);
                url = url.replace(urlHash, "");
            }
        }

        var urlparts = url.split('?');

        if (urlparts.length >= 2) {
            var prefix = encodeURIComponent(parameter) + '=';
            var pars = urlparts[1].split(/[&;]/g);
            for (var i = pars.length; i-- > 0;) {
                // reverse iteration as may be destructive
                if (pars[i].lastIndexOf(prefix, 0) !== -1) // idiom for string.startsWith
                    pars.splice(i, 1);
            }if (pars.length === 0) {
                url = urlparts[0];
            } else {
                url = urlparts[0] + '?' + pars.join('&');
            }
        }

        if (hashIndex > -1 && hashIndex < qIndex) {
            return url;
        } else {
            return url + urlHash;
        }
    };

    this.OpenWindow = function (url, location) {
        if (url == null || location == null) {
            return;
        }
        window.open(url, location);
    };

    this.OpenNewWindow = function (url) {
        this.OpenWindow(url, '_blank');
    };

    this.OpenPostWindow = function (target, url, data, fetchType) {
        var content = this.ConstructPostContent(url, data, fetchType);
        var win = window.open("about:blank", target);
        if (win) {
            win.document.write(content);
        }

        return win;
    };

    this.OpenPostIframe = function (target, url, data, fetchType) {
        var content = this.ConstructPostContent(url, data, fetchType);
        $("#" + target).html(content);
    };

    this.ConstructPostContent = function (url, data, fetchType) {
        fetchType = typeof fetchType !== 'undefined' ? fetchType : 'POST';
        var content = "<!DOCTYPE html><html><head></head><body>";
        content += "<form id=\"postForm\" method='" + fetchType + "' action='" + url + "'>";
        $.each(data, function (name, value) {
            content += "<input type='hidden' name='" + name + "' value='" + value + "'></input>";
        });
        content += "</form>";
        content += "<script type='text/javascript'>document.getElementById(\"postForm\").submit();</script>";
        content += "</body></html>";

        return content;
    };

    this.GetQueryStringValue = function (key, keepHash) {
        keepHash = typeof keepHash === 'boolean' ? keepHash : false;
        var result = null;
        var payload = window.location.href;
        var qIndex = payload.indexOf("?");
        if (qIndex != -1) {
            var queryString = payload.substring(qIndex + 1);

            var pair = null;
            var params = queryString.split("&");
            for (i = 0; i < params.length; i++) {

                pair = params[i].split("=");

                if (pair.length == 2 && pair[0] == key) {
                    result = pair[1];
                    break;
                }
            }
        }

        //cleanup: if the result contains a hash "#"
        //remove the hash and anything after
        if (result != null && !keepHash) {
            var hashIndex = result.indexOf("#");
            if (hashIndex != -1) {
                result = result.substring(0, hashIndex);
            }
        }

        return result != null ? this.Decode(result) : null;
    };

    this.Decode = function (value) {
        var result = value;

        var matches = result.match(new RegExp("%..", "gi"));
        if (matches != null) {
            for (i = 0; i < matches.length; i++) {
                var charCode = parseInt("0x" + matches[i].substring(1));
                var character = String.fromCharCode(charCode);
                result = result.replace(matches[i], character);
            }
        }

        return result;
    };

    this.HandleProtocol = function (url) {
        if (url == null) {
            return null;
        }
        var httpIncluded = url.indexOf("http://") === 0;
        var httpsIncluded = url.indexOf("https://") === 0;
        if (httpIncluded || httpsIncluded) {
            return url;
        } else {
            return location.protocol + "//" + url;
        }
    };
});

/***/ }),

/***/ "../common/app/utilities/UnderscoreUtility.js":
/*!****************************************************!*\
  !*** ../common/app/utilities/UnderscoreUtility.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.UnderscoreUtility', []).factory('_', function () {
    return window._; // assumes underscore has already been loaded on the page
});

/***/ }),

/***/ "../common/app/utilities/message.js":
/*!******************************************!*\
  !*** ../common/app/utilities/message.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MODAL = exports.MODAL = 'modal';
var BANNER = exports.BANNER = 'banner';
var NOTIFICATION = exports.NOTIFICATION = 'notification';
var SUCCESS = exports.SUCCESS = 'success';
var ERROR = exports.ERROR = 'error';
var INFO = exports.INFO = 'info';
var WARNING = exports.WARNING = 'warning';

var Message = function () {
    function Message(response, position, type, message, fullMessage) {
        _classCallCheck(this, Message);

        this.response = response;
        this.position = position;
        this.type = type;
        this.message = message;
        this.fullMessage = fullMessage;
        this.errorUtility = true;
        if (!response || !response.data) {
            this.errorUtility = false;
        }
    }

    _createClass(Message, [{
        key: 'getResponse',
        value: function getResponse() {
            return this.response;
        }
    }, {
        key: 'getPosition',
        value: function getPosition() {
            return this.position;
        }
    }, {
        key: 'getType',
        value: function getType() {
            return this.type;
        }
    }, {
        key: 'getMessage',
        value: function getMessage() {
            return this.message;
        }
    }, {
        key: 'getFullMessage',
        value: function getFullMessage() {
            return this.fullMessage;
        }
    }, {
        key: 'isErrorUtility',
        value: function isErrorUtility() {
            return this.errorUtility;
        }
    }]);

    return Message;
}();

exports.default = Message;

/***/ }),

/***/ "../common/app/utilities/messaging-service.js":
/*!****************************************************!*\
  !*** ../common/app/utilities/messaging-service.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _network = __webpack_require__(/*! ../../network.vendor */ "../common/network.vendor.js");

var subject = void 0;

var init = function init() {
  if (!subject) {
    subject = new _network.Subject();
  }
};

/**
 * http service
 */
var messagingService = {

  unsubscribeObservable: function unsubscribeObservable(observer) {
    observables.removeObservable(observer.getName());
  },
  addSubscriber: function addSubscriber(observer) {
    // console.log('ADD SUB TO MESSAGING');
    subject.subscribe(observer);
  },
  removeSubscriber: function removeSubscriber(observer) {},
  sendMessage: function sendMessage(message) {
    // console.log('SENDING');
    subject.next(message);
  }

};
init();

exports.default = messagingService;

/***/ }),

/***/ "../common/app/utilities/utilities.index.js":
/*!**************************************************!*\
  !*** ../common/app/utilities/utilities.index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _jstorage = __webpack_require__(/*! jstorage */ "../common/node_modules/jstorage/jstorage.js");

var jStorage = _interopRequireWildcard(_jstorage);

__webpack_require__(/*! ./AuthorizationUtility */ "../common/app/utilities/AuthorizationUtility.js");

__webpack_require__(/*! ./BrowserStorageUtility */ "../common/app/utilities/BrowserStorageUtility.js");

__webpack_require__(/*! ./DateTimeFormatUtility */ "../common/app/utilities/DateTimeFormatUtility.js");

__webpack_require__(/*! ./NavUtility */ "../common/app/utilities/NavUtility.js");

__webpack_require__(/*! ./NumberUtility */ "../common/app/utilities/NumberUtility.js");

__webpack_require__(/*! ./ResourceUtility */ "../common/app/utilities/ResourceUtility.js");

__webpack_require__(/*! ./PasswordUtility */ "../common/app/utilities/PasswordUtility.js");

__webpack_require__(/*! ./UnderscoreUtility */ "../common/app/utilities/UnderscoreUtility.js");

__webpack_require__(/*! ./RightsUtility */ "../common/app/utilities/RightsUtility.js");

__webpack_require__(/*! ./SegmentsUtility */ "../common/app/utilities/SegmentsUtility.js");

__webpack_require__(/*! ./StringUtility */ "../common/app/utilities/StringUtility.js");

__webpack_require__(/*! ./TimestampIntervalUtility */ "../common/app/utilities/TimestampIntervalUtility.js");

__webpack_require__(/*! ./URLUtility */ "../common/app/utilities/URLUtility.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

console.log("Utilities module");
// import angular from "angular";
exports.default = angular.module("com.le.common.utilities", ['mainApp.core.utilities.AuthorizationUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.DateTimeFormatUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.appCommon.utilities.NumberUtility', 'mainApp.core.utilities.PasswordUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.appCommon.utilities.SegmentsUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.TimestampIntervalUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.appCommon.utilities.URLUtility']);

/***/ }),

/***/ "../common/assets/sass/lattice.scss":
/*!******************************************!*\
  !*** ../common/assets/sass/lattice.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../common/components/banner/banner.component.js":
/*!*******************************************************!*\
  !*** ../common/components/banner/banner.component.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.banner', []).service('Banner', ["$sce", function ($sce) {
    var Banner = this;

    this.init = function () {
        this.banners = [];
    };

    this.get = function (name) {
        if (name) {
            return this.banners.filter(function (banner) {
                return banner.name === name;
            });
        } else {
            return this.banners;
        }
    };

    this.set = function (opts) {
        opts = opts || {};

        var banner = {
            badge: 1,
            name: opts.name || "",
            show: opts.show || true,
            type: opts.type || '',
            title: opts.title || '',
            message: opts.message || ''
        };

        var old = opts.name ? this.get(opts.name) : [];

        old = old.filter(function (item) {
            return item.type == banner.type && item.title == banner.title && item.message.toString() == banner.message.toString();
        });

        if (old.length > 0) {
            old.forEach(function (item) {
                item.timestamp.push(new Date().getTime());
                item.badge++;
            });
        } else {
            banner.timestamp = [new Date().getTime()];
            this.banners.push(banner);
        }
    };

    this.reset = function (lifetime) {
        var now = Date.now();

        lifetime = lifetime || 0;

        var banners = this.banners.filter(function (banner) {
            var ts = banner.timestamp[banner.timestamp.length - 1];
            var age = now - ts;

            return age < lifetime;
        });

        this.banners.length = 0;

        banners.forEach(function (banner) {
            Banner.banners.push(banner);
        });
    };

    this.generate = function (type, opts) {
        this.set(angular.extend({
            type: type || 'info'
        }, opts));
    };

    this.error = function (opts) {
        this.generate('error', opts);
    };

    this.warning = function (opts) {
        this.generate('warning', opts);
    };

    this.success = function (opts) {
        this.generate('success', opts);
    };

    this.info = function (opts) {
        this.generate('info', opts);
    };

    this.init();
}]).directive('ngHtmlCompile', ["$compile", function ($compile) {
    return {
        restrict: 'A',
        link: function link(scope, element, attrs) {
            scope.$watch(attrs.ngHtmlCompile, function (newValue, oldValue) {
                element.html(newValue);
                $compile(element.contents())(scope);
            });
        }
    };
}]).component('bannerMessage', {
    templateUrl: '/components/banner/banner.component.html',
    controller: ["Banner", function controller(Banner) {
        var vm = this;

        vm.$onInit = function () {
            vm.banners = Banner.get();
        };

        vm.isVisible = function () {
            var visible = false;

            vm.banners.forEach(function (banner, index) {
                if (banner.show === true) {
                    visible = true;
                }
            });

            return visible;
        };

        vm.showTimeStamps = function (banner) {
            var now = Date.now();
            var times = [];

            banner.timestamp.forEach(function (ts, index) {
                var elapsed = new Date(now - ts),
                    index = index + 1,
                    secs = elapsed.getSeconds(),
                    mins = elapsed.getMinutes(),
                    time = '    Iteration ' + index + ':    now',
                    fn = function fn(num, text) {
                    return (num == 1 ? text : text + 's') + ' ';
                };

                if (mins > 0) {
                    time = '    Iteration ' + index + ':    ' + mins + fn(mins, ' minute') + secs + fn(secs, ' second') + 'ago';
                } else if (secs > 0) {
                    time = '    Iteration ' + index + ':    ' + secs + fn(secs, ' second') + 'ago';
                }

                times.push(time);
            });

            var preface = 'This banner' + (banner.name ? ' "' + banner.name + '" ' : ' ') + 'has been triggered ' + banner.badge + ' times.\n\n';

            return preface + times.join('\n');
        };
    }]
});

/***/ }),

/***/ "../common/components/components.index.js":
/*!************************************************!*\
  !*** ../common/components/components.index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./banner/banner.component */ "../common/components/banner/banner.component.js");

__webpack_require__(/*! ./exceptions/exceptions.component */ "../common/components/exceptions/exceptions.component.js");

__webpack_require__(/*! ./modal/modal.component */ "../common/components/modal/modal.component.js");

__webpack_require__(/*! ./pagination/pagination.component */ "../common/components/pagination/pagination.component.js");

__webpack_require__(/*! ./notice/notice.component */ "../common/components/notice/notice.component.js");

__webpack_require__(/*! ./timeout/session-timeout.component */ "../common/components/timeout/session-timeout.component.js");

console.log("Components module");
// import angular from "angular";

/***/ }),

/***/ "../common/components/datacloud/attributes/activate/activate.component.js":
/*!********************************************************************************!*\
  !*** ../common/components/datacloud/attributes/activate/activate.component.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* jshint -W014 */
angular.module('common.attributes.activate', []).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.attributes.activate', {
        url: '/activate/:category/:subcategory',
        params: {
            category: {
                dynamic: false,
                value: 'Intent'
            },
            subcategory: {
                dynamic: true,
                value: ''
            }
        },
        onExit: ['AttrConfigStore', function (AttrConfigStore) {
            AttrConfigStore.init();
        }],
        resolve: {
            overview: ['$q', 'AttrConfigService', function ($q, AttrConfigService) {
                var deferred = $q.defer();

                AttrConfigService.getOverview('activation').then(function (response) {
                    deferred.resolve(response.data || []);
                });

                return deferred.promise;
            }],
            config: ['$q', '$stateParams', 'AttrConfigService', 'AttrConfigStore', function ($q, $stateParams, AttrConfigService, AttrConfigStore) {
                var deferred = $q.defer();
                var category = $stateParams.category;

                AttrConfigStore.set('category', category);

                AttrConfigService.getConfig('activation', category).then(function (response) {
                    AttrConfigStore.setData('config', response.data || []);
                    deferred.resolve(response.data || []);
                });

                return deferred.promise;
            }]
        },
        views: {
            "subsummary@": "attrSubheader",
            "main@": "attrActivate"
        }
    });
}]).component('attrActivate', {
    templateUrl: '/components/datacloud/attributes/activate/activate.component.html',
    bindings: {
        overview: '<',
        config: '<'
    },
    controller: ["$q", "$timeout", "AttrConfigStore", "Banner", function controller($q, $timeout, AttrConfigStore, Banner) {
        var vm = this;

        vm.store = AttrConfigStore;
        vm.filters = vm.store.get('filters');
        vm.uiCanExit = vm.store.uiCanExit;

        // Banner.error({name: 'Test_Error', message: 'This is a test'});
        // $timeout(function() {
        //     Banner.error({name: 'Test_Error', message: 'This is a test'});
        // }, 1349);
        // $timeout(function() {
        //     Banner.error({name: 'Test_Error', message: 'This is a test'});
        // }, 14333);
        // $timeout(function() {
        //     Banner.error({name: 'Test_Error', message: 'This is a test'});
        // }, 57500);
        // $timeout(function() {
        //     Banner.error({name: 'Test_Error', message: 'This is a test'});
        // }, 117777);
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/attributes.component.js":
/*!*************************************************************************!*\
  !*** ../common/components/datacloud/attributes/attributes.component.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes', ['common.attributes.header', 'common.attributes.subheader', 'common.attributes.controls', 'common.attributes.filters', 'common.attributes.categories', 'common.attributes.list', 'common.attributes.enable', 'common.attributes.activate', 'common.attributes.edit']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.attributes', {
        url: '/attributes',
        // onEnter: function($state, SidebarStore, StateHistory) {
        //     console.log('enter home.attributes', $state.get(), StateHistory.lastFrom());
        //     SidebarStore.set([{
        //         sref: "home.attributes.activate",
        //         label: "Choose Premium",
        //         icon: "ico-analysis ico-light-gray"
        //     },{
        //         sref: "home.attributes.enable",
        //         label: "Enable and Disable",
        //         icon: "ico-analysis ico-light-gray"
        //     }], StateHistory.lastFrom().name || "home");
        // },
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Attribute Admin'
        },
        resolve: {
            tabs: [function () {
                return [{
                    sref: "home.attributes.activate",
                    label: "Activate Premium Attributes"
                }, {
                    sref: "home.attributes.enable",
                    label: "Enable & Disable Attributes"
                }, {
                    sref: "home.attributes.edit",
                    label: "Edit Name & Description"
                }];
            }]
        },
        views: {
            "summary@": "attrHeader"
        },
        redirectTo: 'home.attributes.activate'
    });
}]).component('adminAttributes', {
    templateUrl: '',
    controller: function controller() {}
});

/***/ }),

/***/ "../common/components/datacloud/attributes/attributes.index.js":
/*!*********************************************************************!*\
  !*** ../common/components/datacloud/attributes/attributes.index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./activate/activate.component */ "../common/components/datacloud/attributes/activate/activate.component.js");

__webpack_require__(/*! ./categories/categories.component */ "../common/components/datacloud/attributes/categories/categories.component.js");

__webpack_require__(/*! ./controls/controls.component */ "../common/components/datacloud/attributes/controls/controls.component.js");

__webpack_require__(/*! ./edit/edit.component */ "../common/components/datacloud/attributes/edit/edit.component.js");

__webpack_require__(/*! ./edit/filters/edit-filters.component */ "../common/components/datacloud/attributes/edit/filters/edit-filters.component.js");

__webpack_require__(/*! ./edit/list/edit-list.component */ "../common/components/datacloud/attributes/edit/list/edit-list.component.js");

__webpack_require__(/*! ./enable/enable.component */ "../common/components/datacloud/attributes/enable/enable.component.js");

__webpack_require__(/*! ./filters/filters.component */ "../common/components/datacloud/attributes/filters/filters.component.js");

__webpack_require__(/*! ./header/header.component */ "../common/components/datacloud/attributes/header/header.component.js");

__webpack_require__(/*! ./list/list.component */ "../common/components/datacloud/attributes/list/list.component.js");

__webpack_require__(/*! ./subheader/subheader.component */ "../common/components/datacloud/attributes/subheader/subheader.component.js");

__webpack_require__(/*! ./attributes.component */ "../common/components/datacloud/attributes/attributes.component.js");

__webpack_require__(/*! ./attributes.service */ "../common/components/datacloud/attributes/attributes.service.js");

/***/ }),

/***/ "../common/components/datacloud/attributes/attributes.service.js":
/*!***********************************************************************!*\
  !*** ../common/components/datacloud/attributes/attributes.service.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes').service('AttrConfigStore', ["$q", "$state", "$stateParams", "$timeout", "AttrConfigService", "DataCloudStore", "BrowserStorageUtility", "Modal", function ($q, $state, $stateParams, $timeout, AttrConfigService, DataCloudStore, BrowserStorageUtility, Modal) {
    var store = this;

    this.init = function () {
        this.filters = {
            page: 1,
            pagesize: 25,
            sortPrefix: '+',
            queryText: '',
            showFilterBy: false,
            show: {
                Selected: false,
                IsPremium: false
            },
            hide: {
                Selected: false,
                IsPremium: false
            },
            disabled: {
                Selected: false,
                IsPremium: true
            }
        };

        this.limit = -1;
        this.selected = [];
        this.start_selected = [];
        this.TotalFilteredAttrs = [];
        this.category = '';
        this.accesslevel = '';

        this.data = {
            original: {},
            config: {},
            overview: {},
            buckets: {}
        };

        this.saving = false;
    };

    this.set = function (property, value) {
        this[property] = value;
    };

    this.get = function (property) {
        return this[property];
    };

    this.setData = function (type, data) {
        this.data[type] = data;
    };

    this.getData = function (property) {
        return this.data[property];
    };

    this.getAccessRestriction = function () {
        var session = BrowserStorageUtility.getSessionDocument();

        if (session !== null || session.User !== null) {
            this.accesslevel = session.User.AccessLevel;
        }

        return this.accesslevel;
    };

    this.searchFilter = function (attr) {
        var text = store.get('filters').queryText.toLowerCase();

        if (text) {
            var SubCategory = (attr.SubCategory || '').toLowerCase();
            var DisplayName = attr.DisplayName.toLowerCase();
            var Description = (attr.Description || '').toLowerCase();

            var chkName = DisplayName.indexOf(text) >= 0;
            var chkSub = SubCategory.indexOf(text) >= 0;
            var chkDesc = Description.indexOf(text) >= 0;

            if (chkName || chkSub || chkDesc) {
                return true;
            } else if (attr.Attributes) {
                for (var i = 0; i < attr.Attributes.length; i++) {
                    var item = attr.Attributes[i];
                    var catName = item.DisplayName.toLowerCase();
                    var catDesc = (item.Description || '').toLowerCase();

                    if (catName.indexOf(text) >= 0 || catDesc.indexOf(text) >= 0) {
                        return true;
                    }
                }
            }
        } else {
            return true;
        }

        return false;
    };

    this.getFiltering = function () {
        var filters = this.get('filters'),
            obj = {};

        Object.keys(filters.show).forEach(function (property) {
            if (filters.show[property] === true) {
                obj[property] = true;
            }
        });

        Object.keys(filters.hide).forEach(function (property) {
            if (filters.hide[property] === true) {
                obj[property] = false;
            }
        });

        return obj;
    };

    this.modalCallback = function (args) {
        var modal = Modal.get(args.name);
        var ret = true;

        switch (args.action) {
            case "closedForced":
                break;

            case "cancel":
                break;

            case "ok":
                modal.waiting(true);
                modal.disableDischargeButton(true);

                store.saveConfig().then(function (result) {
                    var uiAction = result.data.uiAction;

                    if (args.name == 'AttrAdmin_Warning') {
                        Modal.modalRemoveFromDOM(modal, args);
                    }
                });

                ret = false;
                break;
        }

        return ret;
    };

    this.getSection = function () {
        var map = {
            'home.attributes.activate': 'activate',
            'home.attributes.enable': 'enable',
            'home.attributes.edit': 'edit'
        };

        return map[$state.current.name];
    };

    this.getActiveTabData = function () {
        var page = this.getSection();
        var param = page == 'activate' ? 'category' : 'section';
        var active = $stateParams[param];
        var data = this.get('data').overview;
        var tab = [];

        if (data && data.Selections) {
            tab = data.Selections.filter(function (tab) {
                return tab.DisplayName == active;
            });
        }

        return tab[0] || {};
    };

    this.getSelectedTotal = function () {
        var selected = this.selected;
        var section = this.getSection();
        var total = selected.length;
        var tab, started;

        if (section == 'enable') {
            started = this.get('start_selected');
            tab = this.getActiveTabData();

            if (tab.Selected) {
                total = tab.Selected + (total - started.length);
            }
        }

        return total;
    };

    this.getUsageLimit = function (overview, area) {
        var section = this.getSection();
        var tab = overview.Selections.filter(function (tab) {
            return tab.DisplayName == area;
        })[0];

        return tab.Limit;
    };

    this.getBucketData = function (category, subcategory) {
        var deferred = $q.defer();

        if (['Intent', 'Technology Profile'].indexOf(category) < 0) {
            deferred.resolve([]);
        } else {
            AttrConfigService.getBucketData(category, subcategory).then(function (data) {
                store.data.buckets[subcategory] = data.data;
                deferred.resolve(data);
            });
        }

        return deferred.promise;
    };

    this.isChanged = function () {
        if (!this.data.original.Entity) {
            return false;
        }

        var hasChanged = false;
        var subcategories = this.data.original.Subcategories;

        this.data.config.Subcategories.forEach(function (subcategory, index) {
            subcategory.Attributes.forEach(function (attribute, i) {
                if (subcategories[index].Attributes[i].Selected !== attribute.Selected) {
                    hasChanged = true;
                }
            });
        });

        return hasChanged;
    };

    this.generatePayload = function () {
        var original = this.get('data').original;
        var activate = this.getSection() == 'activate';
        var data = {
            Select: [],
            Deselect: []
        };

        this.data.config.Subcategories.forEach(function (subcategory, index) {
            var oSub = original.Subcategories[index];

            subcategory.Attributes.forEach(function (attr, i) {
                var oAttr = oSub.Attributes.filter(function (item) {
                    return attr.DisplayName == item.DisplayName;
                });

                if (oAttr.length === 0 || oAttr[0].Selected === attr.Selected) {
                    return;
                }

                if (attr.Selected) {
                    data.Select.push(attr.Attribute);
                } else {
                    data.Deselect.push(attr.Attribute);
                }
            });
        });

        return data;
    };

    this.saveConfig = function () {
        var deferred = $q.defer();
        var category = this.get('category');
        var activate = this.getSection() == 'activate';
        var type = activate ? 'activation' : 'usage';
        var data = this.generatePayload();
        var usage = {};

        store.set('saving', true);

        if (!activate) {
            usage.usage = $stateParams.section;
        }

        this.putConfig(type, category, usage, data).then(function (result) {
            $timeout(function () {
                if (result.status >= 200 && result.status < 300) {
                    store.setData('original', JSON.parse(JSON.stringify(store.data.config)));

                    DataCloudStore.clear();

                    ShowSpinner('Refreshing Data');
                    $state.reload();
                } else {
                    store.set('saving', false);
                }

                deferred.resolve(result);
            }, 500);
        });

        return deferred.promise;
    };

    this.putConfig = function (type, category, usage, data) {
        var deferred = $q.defer();

        AttrConfigService.putConfig(type, category, usage, data).then(function (data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    this.uiCanExit = function () {
        var isChanged = store.isChanged();

        if (!isChanged) {
            return true;
        }

        var deferred = $q.defer();

        Modal.warning({
            title: "Save before leaving?",
            message: "The changes you have made won't apply to the system until you save them.  Are you sure you want to leave the page without saving?",
            confirmtext: 'Yes, discard changes'
        }, function (opts) {
            switch (opts.action) {
                case "ok":
                    deferred.resolve(true);break;
                default:
                    deferred.reject("user cancelled action");
                    HideSpinner();
            }

            return true;
        });

        return deferred.promise;
    };

    this.init();
}]).service('AttrConfigService', ["$q", "$http", function ($q, $http) {
    this.getOverview = function (section) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/attrconfig/' + section + '/overview'
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getConfig = function (section, category, params) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/attrconfig/' + section + '/config/category/' + category,
            params: params
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getBucketData = function (category, subcategory) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/attrconfig/stats/category/' + category,
            params: {
                'subcategory': subcategory
            }
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.putConfig = function (section, category, params, data) {
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: '/pls/attrconfig/' + section + '/config/category/' + category,
            params: params,
            data: data
        }).then(function success(response) {
            deferred.resolve(response);
        }, function error(response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/attributes/categories/categories.component.js":
/*!************************************************************************************!*\
  !*** ../common/components/datacloud/attributes/categories/categories.component.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes.categories', []).component('attrCategories', {
    templateUrl: '/components/datacloud/attributes/categories/categories.component.html',
    bindings: {
        categories: '<',
        store: '<',
        callback: '&'
    },
    controller: ["$state", "$scope", "$stateParams", "StateHistory", "DataCloudStore", function controller($state, $scope, $stateParams, StateHistory, DataCloudStore) {
        var vm = this;

        vm.current = 1;
        vm.pagesize = 6;
        vm.catlength = 1;

        vm.$onInit = function () {
            vm.params = $stateParams;

            vm.category = vm.store.get('category');
            vm.catmap = vm.pruneEmptyCategories(angular.copy(vm.categories));
            vm.categories = Object.keys(vm.catmap);
            vm.catlength = vm.categories.length;

            var categoriesSortOrder = DataCloudStore.getCategoriesSortOrder();
            vm.categories = vm.categories.sort(function (a, b) {
                return categoriesSortOrder[a] - categoriesSortOrder[b];
            });

            var index = vm.categories.indexOf(vm.category) + 1;

            vm.current = Math.ceil(index / vm.pagesize);
        };

        vm.pruneEmptyCategories = function (catmap) {
            Object.keys(catmap).forEach(function (name) {
                var count = catmap[name];

                if (count === 0) {
                    delete catmap[name];
                }
            });

            return catmap;
        };

        vm.click = function (category) {
            if (!vm.params.section) {
                vm.callback({ category: category });
            } else {
                ShowSpinner('Loading ' + category + ' Data', 'div.attr-results-container');

                $state.go('.', {
                    section: vm.params.section,
                    category: category,
                    subcategory: vm.params.subcategory
                });
            }
        };

        vm.categoryIcon = function (category) {
            var path = '/assets/images/enrichments/subcategories/',
                icon;

            category = vm.subcategoryRenamer(category, '');
            icon = category + '.png';

            return path + icon;
        };

        vm.categoryClass = function (category) {
            category = 'category-' + category.toLowerCase().replace(/\s/g, "-");
            return category;
        };

        vm.subcategoryRenamer = function (string, replacement) {
            if (string) {
                replacement = replacement || '';

                return string.toLowerCase().replace(/\W+/g, replacement);
            }

            return '';
        };

        vm.getTo = function () {
            return StateHistory.lastToParams();
        };

        vm.getFrom = function () {
            return StateHistory.lastFromParams();
        };

        vm.isActive = function (category) {
            if (!vm.params.section) {
                return vm.store.get('category') == category ? true : false;
            } else {
                var x = vm.category == category;
                var y = vm.getTo().category == category;
                var z = vm.getFrom().category != category || vm.getTo().category == category;

                return (x || y) && z;
            }
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/controls/controls.component.js":
/*!********************************************************************************!*\
  !*** ../common/components/datacloud/attributes/controls/controls.component.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* jshint -W014 */
angular.module('common.attributes.controls', []).component('attrControls', {
    templateUrl: '/components/datacloud/attributes/controls/controls.component.html',
    bindings: {
        overview: '<'
    },
    controller: ["$stateParams", "AttrConfigStore", "Modal", function controller($stateParams, AttrConfigStore, Modal) {
        var vm = this;

        vm.store = AttrConfigStore;

        vm.$onInit = function () {
            vm.params = $stateParams;
            vm.section = vm.store.getSection();
            vm.data = vm.store.get('data');
            vm.filters = vm.store.get('filters');
            vm.category = vm.store.get('category');

            if (vm.section == 'enable') {
                vm.store.set('limit', vm.store.getUsageLimit(vm.overview, vm.params.section));
            } else {
                var tab = vm.overview.Selections.filter(function (tab) {
                    return tab.DisplayName == vm.category;
                })[0];

                vm.store.set('limit', tab.Limit);
            }
        };

        vm.save = function () {
            var payload = vm.store.generatePayload();

            if (vm.section == 'activate' && payload.Select.length > 0) {
                Modal.warning({
                    name: 'AttrAdmin_Warning',
                    title: "Activation",
                    message: "Once you activate these premium attributes, you won't be able to deactivate.  Contact your lattice representative to upgrade.",
                    confirmtext: "Yes, activate"
                }, vm.store.modalCallback);
            } else {
                vm.store.saveConfig();
            }
        };

        vm.getTotalAttrs = function () {
            return vm.store.get('TotalFilteredAttrs');
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/edit/edit.component.js":
/*!************************************************************************!*\
  !*** ../common/components/datacloud/attributes/edit/edit.component.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes.edit', ['common.attributes.edit.filters', 'common.attributes.edit.list']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.attributes.edit', {
        url: '/edit/:category',
        params: {
            category: {
                dynamic: false,
                value: 'My Attributes'
            }
        },
        onExit: ['AttrConfigStore', function (AttrConfigStore) {
            AttrConfigStore.init();
        }],
        resolve: {
            overview: ['$q', 'AttrConfigService', function ($q, AttrConfigService) {
                var deferred = $q.defer();

                AttrConfigService.getOverview('name').then(function (response) {
                    deferred.resolve(response.data || []);
                });

                return deferred.promise;
            }],
            config: ['$q', '$stateParams', 'AttrConfigService', 'AttrConfigStore', function ($q, $stateParams, AttrConfigService, AttrConfigStore) {
                var deferred = $q.defer();
                var category = $stateParams.category;

                AttrConfigStore.set('category', category);

                AttrConfigService.getConfig('name', category).then(function (response) {
                    AttrConfigStore.setData('config', response.data || []);
                    deferred.resolve(response.data || []);
                });

                return deferred.promise;
            }]
        },
        views: {
            "subsummary@": "attrSubheader",
            "main@": "attrEdit"
        }
    });
}]).component('attrEdit', {
    templateUrl: '/components/datacloud/attributes/edit/edit.component.html',
    bindings: {
        overview: '<',
        config: '<'
    },
    controller: ["$stateParams", "AttrConfigStore", function controller($stateParams, AttrConfigStore) {
        var vm = this;

        vm.store = AttrConfigStore;
        vm.filters = vm.store.get('filters');
        vm.uiCanExit = vm.store.uiCanExit;
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/edit/filters/edit-filters.component.js":
/*!****************************************************************************************!*\
  !*** ../common/components/datacloud/attributes/edit/filters/edit-filters.component.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes.edit.filters', []).component('attrEditFilters', {
    templateUrl: '/components/datacloud/attributes/edit/filters/edit-filters.component.html',
    bindings: {
        filters: '<'
    },
    controller: ["AttrConfigStore", function controller(AttrConfigStore) {
        var vm = this;

        vm.$onInit = function () {
            vm.section = AttrConfigStore.getSection();
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/edit/list/edit-list.component.js":
/*!**********************************************************************************!*\
  !*** ../common/components/datacloud/attributes/edit/list/edit-list.component.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes.edit.list', []).component('attrEditList', {
    templateUrl: '/components/datacloud/attributes/edit/list/edit-list.component.html',
    bindings: {
        filters: '<'
    },
    controller: ["$state", "$timeout", "AttrConfigStore", "AttrConfigService", "DataCloudStore", "Banner", function controller($state, $timeout, AttrConfigStore, AttrConfigService, DataCloudStore, Banner) {
        var vm = this;

        vm.store = AttrConfigStore;

        this.$onInit = function () {
            vm.accesslevel = vm.store.getAccessRestriction();
            vm.section = vm.store.getSection();
            vm.category = vm.store.get('category');
            vm.data = vm.store.get('data');

            vm.store.setData('original', JSON.parse(JSON.stringify(vm.data.config)));

            if (vm.isUser()) {
                vm.showImmutable();
            }
        };

        this.showImmutable = function () {
            Banner.info({
                title: "Immutable Data Notification",
                message: "Your access level has placed certain restrictions on modifications in this section."
            });
        };

        this.isUser = function () {
            var access = ['INTERNAL_USER', 'LATTICE_USER', 'EXTERNAL_USER', 'USER'];
            return access.indexOf(this.accesslevel) >= 0;
        };

        this.getResults = function () {
            return this.data.config.Attributes;
        };

        this.getPageSize = function () {
            return this.filters.pagesize;
        };

        this.isStartsDisabled = function (item) {
            if (vm.isUser()) {
                return true;
            }

            return false;
        };

        this.onBlur = function (item, name) {
            if (item.DisplayName === '') {
                item.DisplayName = item.DefaultName;
            }

            var original = vm.store.getData('original').Attributes.filter(function (attr) {
                return attr.Attribute == item.Attribute;
            });

            original = original.length > 0 ? original[0] : item;

            if (item.DisplayName != original.DisplayName || item.Description != original.Description) {
                AttrConfigService.putConfig('name', vm.category, {}, { Attributes: [item] }).then(function (result) {
                    angular.element('#' + name).addClass('saved');

                    $timeout(function () {
                        angular.element('#' + name).removeClass('saved');
                    }, 1250);

                    vm.attr_edit_form[name].$setPristine();

                    original.DisplayName = item.DisplayName;
                    original.Description = item.Description;

                    DataCloudStore.clear();
                });
            }
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/enable/enable.component.js":
/*!****************************************************************************!*\
  !*** ../common/components/datacloud/attributes/enable/enable.component.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes.enable', []).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.attributes.enable', {
        url: '/enable/:section/:category/:subcategory',
        params: {
            section: {
                dynamic: false,
                value: 'Segmentation'
            },
            category: {
                dynamic: false,
                value: ''
            },
            subcategory: {
                dynamic: true,
                value: ''
            }
        },
        onExit: ['AttrConfigStore', function (AttrConfigStore) {
            AttrConfigStore.init();
        }],
        resolve: {
            overview: ['$q', 'AttrConfigService', function ($q, AttrConfigService) {
                var deferred = $q.defer();

                AttrConfigService.getOverview('usage').then(function (response) {
                    deferred.resolve(response.data || []);
                });

                return deferred.promise;
            }],
            config: ['$q', '$state', '$stateParams', 'AttrConfigService', 'AttrConfigStore', 'overview', 'DataCloudStore', function ($q, $state, $stateParams, AttrConfigService, AttrConfigStore, overview, DataCloudStore) {
                var deferred = $q.defer();
                var section = $stateParams.section;
                var category = $stateParams.category;

                var tab = overview.Selections.filter(function (item) {
                    return item.DisplayName == section;
                });

                var categories = tab[0].Categories;

                if (!category) {
                    DataCloudStore.topCategories.some(function (key) {
                        if (key != 'Lattice Ratings' && categories[key] > 0) {
                            return category = key;
                        }
                    });
                }

                AttrConfigStore.set('category', category);
                AttrConfigStore.set('categories', categories);

                AttrConfigService.getConfig('usage', category, {
                    usage: section
                }).then(function (response) {
                    AttrConfigStore.setData('config', response.data || []);
                    deferred.resolve(response.data || []);
                });

                return deferred.promise;
            }]
        },
        views: {
            "subsummary@": "attrSubheader",
            "main@": "attrEnable"
        }
    });
}]).component('attrEnable', {
    templateUrl: '/components/datacloud/attributes/enable/enable.component.html',
    bindings: {
        overview: '<',
        config: '<'
    },
    controller: ["AttrConfigStore", function controller(AttrConfigStore) {
        var vm = this;

        vm.store = AttrConfigStore;
        vm.filters = vm.store.get('filters');
        vm.uiCanExit = vm.store.uiCanExit;

        vm.$onInit = function () {
            vm.categories = vm.store.get('categories');
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/filters/filters.component.js":
/*!******************************************************************************!*\
  !*** ../common/components/datacloud/attributes/filters/filters.component.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* jshint -W014 */
angular.module('common.attributes.filters', []).component('attrFilters', {
    templateUrl: '/components/datacloud/attributes/filters/filters.component.html',
    bindings: {
        filters: '<'
    },
    controller: ["AttrConfigStore", function controller(AttrConfigStore) {
        var vm = this;

        vm.$onInit = function () {
            vm.section = AttrConfigStore.getSection();
        };

        vm.isFilterSelected = function () {
            return vm.filters.show.Selected || vm.filters.hide.Selected || vm.filters.show.IsPremium || vm.filters.hide.IsPremium;
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/header/header.component.js":
/*!****************************************************************************!*\
  !*** ../common/components/datacloud/attributes/header/header.component.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes.header', []).component('attrHeader', {
    templateUrl: '/components/datacloud/attributes/header/header.component.html',
    bindings: {
        tabs: '<'
    },
    controller: ["$state", "$stateParams", "StateHistory", function controller($state, $stateParams, StateHistory) {
        var vm = this;

        vm.$onInit = function () {
            vm.params = $stateParams;
        };

        vm.click = function (category) {
            angular.element('div#subSummaryView').addClass('inactive-disabled');
        };

        vm.getTo = function () {
            return StateHistory.lastTo().name;
        };

        vm.getFrom = function () {
            return StateHistory.lastFrom().name;
        };

        vm.isActive = function (sref) {
            var x = $state.current.name == sref;
            var y = vm.getTo() == sref;
            var z = vm.getFrom() != sref || vm.getTo() == $state.current.name;

            return (x || y) && z;
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/list/list.component.js":
/*!************************************************************************!*\
  !*** ../common/components/datacloud/attributes/list/list.component.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* jshint -W014 */
angular.module('common.attributes.list', []).component('attrResultsList', {
    templateUrl: '/components/datacloud/attributes/list/list.component.html',
    bindings: {
        filters: '<'
    },
    controller: ["$state", "AttrConfigStore", "BrowserStorageUtility", "Banner", function controller($state, AttrConfigStore, BrowserStorageUtility, Banner) {
        var vm = this;

        vm.store = AttrConfigStore;
        vm.buckets = [];
        vm.attributes = {};
        vm.indeterminate = {};
        vm.startChecked = {};
        vm.allCheckedMap = {};
        vm.accesslevel = '';
        vm.allChecked = false;

        vm.$onInit = function () {
            vm.accesslevel = vm.store.getAccessRestriction();
            vm.section = vm.store.getSection();
            vm.category = vm.store.get('category');
            vm.data = vm.store.get('data');
            vm.buckets = vm.data.buckets;

            vm.autoDrillDown();
            vm.parseData();
            vm.countSelected();

            vm.store.setData('original', JSON.parse(JSON.stringify(vm.data.config)));

            if ((vm.isUser() || vm.isExternalAdmin()) && vm.section == 'activate') {
                vm.showImmutable();
            }
        };

        vm.showImmutable = function () {
            Banner.info({
                title: "Immutable Data Notification",
                message: "Your access level has placed certain restrictions on modifications in this section."
            });
        };

        vm.autoDrillDown = function () {
            if (vm.data.config && vm.data.config.Subcategories && vm.data.config.Subcategories.length == 1) {
                vm.go(vm.data.config.Subcategories[0].DisplayName);
            }
        };

        vm.parseData = function () {
            var total = [];

            vm.data.config.Subcategories.forEach(function (item) {
                var selected = item.Attributes.filter(function (attr) {
                    if (attr.IsPremium) {
                        vm.filters.disabled = false;
                    }

                    return attr.Selected;
                });

                selected.forEach(function (attr) {
                    vm.startChecked[attr.Attribute] = true;
                });

                item.checked = selected.length;
                item.Selected = vm.isChecked(item);

                vm.allCheckedMap[item.DisplayName] = item.checked == item.TotalAttrs;
                vm.attributes[item.DisplayName] = item.Attributes;

                total = total.concat(selected);
            });

            vm.store.set('selected', total);
            vm.store.set('start_selected', total);
        };

        vm.countSelected = function () {
            var total = [];

            Object.keys(vm.attributes).forEach(function (key) {
                var subcategory = vm.getSubcategory(key);
                var attributes = vm.attributes[key];
                var selected = [];

                attributes.forEach(function (attr, index) {
                    attr.SubCategory = key;

                    if (attr.Selected === true) {
                        selected.push(attr);
                        total.push(attr);
                    }
                });

                if (selected.length > 0 && selected.length != attributes.length) {
                    vm.indeterminate[key] = true;
                } else {
                    delete vm.indeterminate[key];
                }

                subcategory.checked = selected.length;
            });

            vm.store.set('selected', total);
            vm.data.config.Selected = vm.store.get('selected').length;
        };

        vm.getResults = function () {
            if (vm.subcategory && !vm.buckets[vm.subcategory]) {
                vm.buckets[vm.subcategory] = { Bkts: { List: [] } };
                vm.store.getBucketData(vm.category, vm.subcategory);
            }

            var ret = vm.subcategory ? vm.attributes[vm.subcategory] : vm.data.config.Subcategories;

            //console.log(vm.getPageSize(), (vm.filters.page - 1) * vm.getPageSize(), ret, filtering);
            return ret;
        };

        vm.getCount = function () {
            return vm.subcategory ? vm.getSubcategory(vm.subcategory).TotalAttrs : vm.data.config.TotalAttrs;
        };

        vm.getBuckets = function (attribute) {
            if (!vm.buckets[vm.subcategory]) {
                return [];
            }

            var bucket = vm.buckets[vm.subcategory][attribute];

            if (bucket && !bucket.Bkts) {
                bucket.Bkts = {
                    List: [{
                        Lbl: '<string>',
                        Cnt: bucket.Cnt
                    }]
                };
            }

            return bucket ? bucket.Bkts.List || [] : [];
        };

        vm.getSubcategory = function (name) {
            return vm.data.config.Subcategories.filter(function (item) {
                return item.DisplayName == name;
            })[0];
        };

        vm.back = function () {
            vm.go('');
        };

        vm.click = function (item) {
            if (item.Attributes) {
                vm.go(item.DisplayName);
            } else {
                vm.toggleSelected(item);
            }
        };

        vm.isChecked = function (item) {
            if (item.Attributes) {
                if (vm.indeterminate[item.DisplayName] === true) {
                    vm.setIndeterminate(item.DisplayName, true);

                    item.Selected = true;

                    return true;
                } else {
                    var condition = item.checked == item.TotalAttrs;

                    item.Selected = condition;

                    return item.checked == item.TotalAttrs;
                }
            } else {
                return item.Selected;
            }
        };

        vm.isAllChecked = function () {
            var subcategory, selected, total, indeterminate;

            if (!vm.subcategory) {
                selected = vm.store.get('selected').length;
                total = vm.data.config.TotalAttrs;
            } else {
                subcategory = vm.getSubcategory(vm.subcategory);
                selected = subcategory.checked;
                total = subcategory.TotalAttrs;
            }

            indeterminate = selected !== 0 && selected != total;
            vm.setIndeterminate(vm.checkboxName(), indeterminate);

            return selected !== 0;
        };

        vm.isDisabled = function (item) {
            var hasFrozen = item.HasFrozenAttrs;
            var isFrozen = item.IsFrozen;
            var overLimit = false;

            if (vm.store.get('limit') >= 0) {
                overLimit = vm.store.getSelectedTotal() >= vm.store.get('limit') && !vm.isChecked(item);
            }

            return item.Attributes ? overLimit : isFrozen || overLimit;
        };

        vm.isUser = function () {
            var access = ['INTERNAL_USER', 'LATTICE_USER', 'EXTERNAL_USER', 'USER'];
            return access.indexOf(this.accesslevel) >= 0;
        };

        vm.isInternalAdmin = function () {
            var access = ['INTERNAL_ADMIN', 'LATTICE_ADMIN', 'SUPER_ADMIN'];
            return access.indexOf(this.accesslevel) >= 0;
        };

        vm.isExternalAdmin = function () {
            var access = ['EXTERNAL_ADMIN'];
            return access.indexOf(this.accesslevel) >= 0;
        };

        vm.isStartsDisabled = function (item) {
            if (item.Attributes || vm.section == 'enable') {
                return false;
            }

            if (!item.Selected && (vm.isInternalAdmin() || vm.isExternalAdmin())) {
                return false;
            }

            if (item.Selected && vm.isInternalAdmin()) {
                return false;
            }

            if (vm.isUser()) {
                return true;
            }

            var startsDisabled = vm.startChecked[item.Attribute];

            return startsDisabled;
        };

        vm.toggleSelected = function (item) {
            if (vm.isDisabled(item) || vm.isStartsDisabled(item)) {
                return false;
            }

            if (item.Attributes) {
                vm.setIndeterminate(item.DisplayName, false);

                item.Attributes.sort(vm.sortAttributes).forEach(function (attr) {
                    if (vm.isDisabled(attr) || vm.isStartsDisabled(attr)) {
                        return;
                    }

                    attr.Selected = item.checked != item.TotalAttrs;

                    if (attr.Selected) {
                        vm.store.get('selected').push(attr);
                    }
                });
            } else {
                item.Selected = !item.Selected;
            }

            vm.countSelected();
        };

        vm.toggleAll = function () {
            if (vm.subcategory) {
                vm.allCheckedMap[vm.subcategory] = vm.allCheckedMap[vm.subcategory] !== undefined ? !vm.allCheckedMap[vm.subcategory] : false;

                vm.attributes[vm.subcategory].sort(vm.sortAttributes).forEach(function (attr) {
                    if (vm.isDisabled(attr) || vm.isStartsDisabled(attr)) {
                        return;
                    }

                    attr.Selected = vm.allCheckedMap[vm.subcategory];

                    if (attr.Selected) {
                        vm.store.get('selected').push(attr);
                    }
                });
            } else {
                vm.allChecked = !vm.allChecked;

                Object.keys(vm.attributes).sort(vm.sortSubcategories).forEach(function (key) {
                    vm.setIndeterminate(key, false);
                    vm.attributes[key].checked = vm.attributes[key].TotalAttrs;

                    vm.attributes[key].sort(vm.sortAttributes).forEach(function (attr) {
                        if (vm.isDisabled(attr) || vm.isStartsDisabled(attr)) {
                            return;
                        }

                        attr.Selected = vm.allChecked;

                        if (attr.Selected) {
                            vm.store.get('selected').push(attr);
                        }
                    });
                });
            }

            vm.countSelected();
        };

        vm.checkboxName = function () {
            return vm.subcategory ? 'check_all_' + vm.subcategory : 'all_attributes';
        };

        vm.setIndeterminate = function (checkbox, value) {
            vm.indeterminate[checkbox] = value;
            //$('[name="' + checkbox + '"]').prop('indeterminate', value);
        };

        vm.sortAttributes = function (a, b) {
            return a.Attribute.toLowerCase().localeCompare(b.Attribute.toLowerCase());
        };

        vm.sortSubcategories = function (a, b) {
            return a.toLowerCase().localeCompare(b.toLowerCase());
        };

        vm.getAttributes = function (filtered) {
            var treeroot = [];

            vm.data.config.Subcategories.forEach(function (item) {
                treeroot = item.Attributes.concat(treeroot);
            });

            vm.store.set('TotalFilteredAttrs', treeroot);

            return vm.subcategory ? filtered : treeroot;
        };

        vm.getPageSize = function () {
            return vm.filters.pagesize;
        };

        vm.getFiltering = function (root) {
            var obj = vm.store.getFiltering();

            return root || vm.subcategory ? obj : { Attributes: obj };
        };

        vm.go = function (subcategory) {
            vm.subcategory = subcategory;
            vm.filters.page = 1;

            $state.go('.', {
                subcategory: subcategory
            });
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/attributes/subheader/subheader.component.js":
/*!**********************************************************************************!*\
  !*** ../common/components/datacloud/attributes/subheader/subheader.component.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.attributes.subheader', []).component('attrSubheader', {
    templateUrl: '/components/datacloud/attributes/subheader/subheader.component.html',
    bindings: {
        overview: '<'
    },
    controller: ["$state", "$stateParams", "AttrConfigStore", "StateHistory", function controller($state, $stateParams, AttrConfigStore, StateHistory) {
        var vm = this;

        vm.store = AttrConfigStore;

        vm.$onInit = function () {
            vm.section = vm.store.getSection();
            vm.params = $stateParams;
            vm.tabs = vm.overview.Selections;

            switch (vm.section) {
                case "enable":
                    vm.supplemental = "ENABLED";break;
                case "activate":
                    vm.supplemental = "ACTIVE";break;
                default:
                    vm.supplemental = "";break;
            }

            vm.store.setData('overview', vm.overview);
        };

        vm.click = function (name) {
            ShowSpinner('Loading Attributes');

            var params = {
                activate: {
                    category: name,
                    subcategory: ''
                },
                enable: {
                    section: name,
                    category: '',
                    subcategory: ''
                },
                edit: {
                    category: name,
                    subcategory: ''
                }
            };

            $state.go('.', params[vm.section]);
        };

        vm.getTo = function () {
            return StateHistory.lastToParams();
        };

        vm.getFrom = function () {
            return StateHistory.lastFromParams();
        };

        vm.isActive = function (tab) {
            var t_c = tab.DisplayName;
            var t_l = tab.DisplayName;
            var p_c = vm.params.category;
            var p_s = vm.params.section;
            var act = vm.section == 'activate' || vm.section == 'edit';
            var key = act ? 'category' : 'section';
            var val = act ? t_c : t_l;

            var x = act ? t_c == p_c : t_l == p_s;
            var y = vm.getTo()[key] == val;
            var z = vm.getFrom()[key] != val || vm.getTo()[key] == val;

            return (x || y) && z;
        };
    }]
});

/***/ }),

/***/ "../common/components/datacloud/datacloud.index.js":
/*!*********************************************************!*\
  !*** ../common/components/datacloud/datacloud.index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./datacloud.routes */ "../common/components/datacloud/datacloud.routes.js");

__webpack_require__(/*! ./datacloud.service */ "../common/components/datacloud/datacloud.service.js");

__webpack_require__(/*! ./attributes/attributes.index */ "../common/components/datacloud/attributes/attributes.index.js");

__webpack_require__(/*! ./explorer/explore.index */ "../common/components/datacloud/explorer/explore.index.js");

__webpack_require__(/*! ./lookup/lookup.index */ "../common/components/datacloud/lookup/lookup.index.js");

__webpack_require__(/*! ./picker/picker.index */ "../common/components/datacloud/picker/picker.index.js");

__webpack_require__(/*! ./query/query.index */ "../common/components/datacloud/query/query.index.js");

__webpack_require__(/*! ./tabs/tabs.index */ "../common/components/datacloud/tabs/tabs.index.js");

/***/ }),

/***/ "../common/components/datacloud/datacloud.routes.js":
/*!**********************************************************!*\
  !*** ../common/components/datacloud/datacloud.routes.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud', ['common.datacloud.explorer', 'common.datacloud.lookup', 'common.datacloud.valuepicker', 'common.datacloud.tabs.datacloud', 'common.datacloud.tabs.mydata', 'common.datacloud.tabs.subheader', 'common.datacloud.targettabs', 'common.datacloud.query', 'common.datacloud.explorer.export']).run(["$transitions", function ($transitions) {
    var setMetadataApiContext = function setMetadataApiContext(trans, context) {
        var service = trans.injector().get('DataCloudService'),
            store = trans.injector().get('DataCloudStore'),
            to = trans.$to();

        if (service.path !== service.paths[context]) {
            service.path = service.paths[context];
            store.init();
        }
    };

    var states = {
        'home.datacloud.*': 'lattice',
        'home.segment.*': 'customer',
        'home.segments*': 'customer',
        'home.ratingsengine.*': 'customer'
    };

    Object.keys(states).forEach(function (state) {
        var context = states[state];

        $transitions.onStart({ entering: state }, function (trans) {
            setMetadataApiContext(trans, context);
        });
    });
}]).provider('DataCloudResolves', function DataCloudResolvesProvider() {
    this.$get = function DataCloudResolvesFactory() {
        return {
            "main": {
                // EnrichmentCount: ['$q', 'DataCloudStore', 'ApiHost', function($q, DataCloudStore, ApiHost) {
                //     var deferred = $q.defer();

                //     DataCloudStore.setHost(ApiHost);

                //     DataCloudStore.getCount().then(function(result) {
                //         DataCloudStore.setMetadata('enrichmentsTotal', result.data);
                //         deferred.resolve(result.data);
                //     });

                //     return deferred.promise;
                // }],
                // Enrichments: ['$q', 'DataCloudStore', 'ApiHost', 'EnrichmentCount', function($q, DataCloudStore, ApiHost, EnrichmentCount) {
                Enrichments: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                    var deferred = $q.defer();

                    DataCloudStore.setHost(ApiHost);

                    DataCloudStore.getAllEnrichmentsConcurrently().then(function (result) {
                        deferred.resolve(result);
                    });

                    return deferred.promise;
                }],
                EnrichmentTopAttributes: ['$q', 'DataCloudStore', 'ApiHost', 'Enrichments', 'CollectionStatus', 'FeatureFlagService', function ($q, DataCloudStore, ApiHost, Enrichments, CollectionStatus, FeatureFlagService) {
                    var deferred = $q.defer();

                    DataCloudStore.setHost(ApiHost);

                    var flags = FeatureFlagService.Flags();
                    var enabledCDL = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
                    var hasCollectionStatus = CollectionStatus != null && (CollectionStatus.AccountCount > 0 || CollectionStatus.ContactCount > 0);

                    if (enabledCDL && hasCollectionStatus || !enabledCDL && (Enrichments || []).length !== 0) {
                        DataCloudStore.getAllTopAttributes().then(function (result) {
                            deferred.resolve(result['Categories'] || result || {});
                        });
                    }

                    return deferred.promise;
                }],
                EnrichmentPremiumSelectMaximum: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                    var deferred = $q.defer();

                    DataCloudStore.setHost(ApiHost);

                    DataCloudStore.getPremiumSelectMaximum().then(function (result) {
                        deferred.resolve(result);
                    });

                    return deferred.promise;
                }],
                EnrichmentSelectMaximum: ['$q', 'DataCloudStore', function ($q, DataCloudStore) {
                    var deferred = $q.defer();

                    DataCloudStore.getSelectMaximum().then(function (result) {
                        deferred.resolve(result);
                    });

                    return deferred.promise;
                }],
                // below resolves are needed. Do not removed
                // override at child state when needed
                LookupResponse: [function () {
                    return { attributes: null };
                }],
                QueryRestriction: [function () {
                    return null;
                }],
                CurrentConfiguration: [function () {
                    return null;
                }],
                RatingsEngineModels: [function () {
                    return null;
                }],
                RatingsEngineStore: [function () {
                    return null;
                }]
            }
        };
    };
}).config(["$stateProvider", "DataCloudResolvesProvider", function ($stateProvider, DataCloudResolvesProvider) {
    var DataCloudResolves = DataCloudResolvesProvider.$get().main;

    $stateProvider.state('home.segments', {
        url: '/segments',
        onEnter: ["$state", "FilterService", function onEnter($state, FilterService) {
            if ([
            //'home.segment.explorer.attributes',
            'home.segment.explorer.builder'].indexOf($state.current.name) < 0) {
                // a list of states to not clear when coming from
                FilterService.clear();
            }
        }],
        params: {
            pageTitle: 'Segments',
            pageIcon: 'ico-segments',
            edit: null
        },
        resolve: angular.extend({}, DataCloudResolves, {
            SegmentsList: ['$q', 'SegmentService', 'SegmentStore', function ($q, SegmentService, SegmentStore) {
                var deferred = $q.defer();

                SegmentService.GetSegments().then(function (result) {
                    SegmentStore.setSegments(result);
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            Cube: ['$q', 'DataCloudStore', function ($q, DataCloudStore) {
                var deferred = $q.defer();

                DataCloudStore.getCube().then(function (result) {
                    if (result.data) {
                        deferred.resolve(result.data);
                    }
                });

                return deferred.promise;
            }]
        }),
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'SegmentationListController',
                controllerAs: 'vm',
                templateUrl: 'app/segments/views/SegmentationListView.html'
            }
        }
    }).state('home.datacloud', {
        url: '/datacloud',
        resolve: DataCloudResolves,
        redirectTo: 'home.datacloud.explorer'
    }).state('home.datacloud.explorer', {
        url: '/explorer/:section/:category/:subcategory',
        params: {
            pageIcon: 'ico-enrichment',
            pageTitle: 'Data Cloud Explorer',
            LoadingText: 'Loading DataCloud Attributes',
            section: 'edit',
            category: { dynamic: true, value: '' },
            subcategory: { dynamic: true, value: '' }
        },
        resolve: {
            LookupResponse: function LookupResponse() {
                return { attributes: null };
            }
        },
        views: {
            "summary@": {
                controller: 'DataCloudTabsController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/tabs/datacloud/datacloud.component.html'
            },
            "main@": {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            }
        }
    }).state('home.datacloud.insights', {
        url: '/tabs',
        params: {
            pageIcon: 'ico-enrichment',
            pageTitle: 'Data Cloud Explorer',
            LoadingText: 'Loading DataCloud Attributes',
            section: 'insights',
            category: { dynamic: true, value: '' },
            subcategory: { dynamic: true, value: '' }
        },
        resolve: {
            LookupResponse: ["$q", "LookupService", "LookupStore", "ApiHost", function LookupResponse($q, LookupService, LookupStore, ApiHost) {
                var deferred = $q.defer();

                LookupService.submit(ApiHost).then(function (data) {
                    var current = new Date().getTime();
                    var old = LookupStore.get('timestamp');

                    LookupStore.add('elapsedTime', current - old);
                    LookupStore.add('response', data);

                    deferred.resolve(data);
                });

                return deferred.promise;
            }]
        },
        views: {
            "main@": {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            }
        }
    }).state('home.segment', {
        url: '/segment/:segment',
        params: {
            section: 'segment.analysis',
            segment: 'Create',
            reload: true
        },
        onExit: ['DataCloudStore', 'QueryStore', function (DataCloudStore, QueryStore) {
            var enrichments = DataCloudStore.enrichments.filter(function (item) {
                return item.SegmentChecked;
            });

            enrichments.forEach(function (item) {
                delete item.SegmentChecked;
            });

            QueryStore.clear();
        }],
        resolve: angular.extend({}, DataCloudResolves, {
            RerouteToNoData: ['$state', '$stateParams', 'CollectionStatus', function ($state, $stateParams, CollectionStatus) {
                if (CollectionStatus && CollectionStatus.AccountCount == 0 && CollectionStatus.ContactCount == 0) {
                    $state.go('home.nodata', {
                        tenantName: $stateParams.tenantName,
                        segment: $stateParams.segment
                    });
                }
            }],
            QueryRestriction: ['$stateParams', '$state', '$q', 'QueryStore', 'SegmentStore', function ($stateParams, $state, $q, QueryStore, SegmentStore) {
                var resolveQueryRestriction = function resolveQueryRestriction() {
                    var accountRestriction = QueryStore.getAccountRestriction(),
                        contactRestriction = QueryStore.getContactRestriction();

                    deferred.resolve({
                        accountRestrictions: accountRestriction,
                        contactRestrictions: contactRestriction
                    });
                };

                var deferred = $q.defer(),
                    segmentName = $stateParams.segment,
                    modelId = $stateParams.modelId,
                    tenantName = $stateParams.tenantName;

                QueryStore.setupStore(null);

                if (segmentName === 'Create') {
                    resolveQueryRestriction();
                } else {
                    SegmentStore.getSegmentByName(segmentName).then(function (result) {
                        if (segmentName && !result) {
                            if (modelId) {
                                $state.go('home.model.segmentation', { modelId: modelId }, { notify: true, reload: true });
                            } else {
                                $state.go('home.segments', { tenantName: tenantName }, { notify: true, reload: true });
                            }
                        } else {
                            return QueryStore.setupStore(result);
                        }
                    }).then(function () {
                        resolveQueryRestriction();
                    });
                }

                return deferred.promise;
            }],
            AccountsCoverage: [function () {
                return null;
            }],
            Config: [function () {
                return null;
            }]
        }),
        views: {
            "summary@": {
                controller: 'MyDataTabsController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/tabs/mydata/mydata.component.html'
            },
            "subsummary@": {
                controller: 'SubHeaderTabsController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/tabs/subheader/subheader.component.html'
            }
        },
        redirectTo: 'home.segment.explorer'
    }).state('home.segment.explorer', {
        url: '/explorer',
        params: {
            section: 'segment.analysis'
        },
        redirectTo: 'home.segment.explorer.attributes'
    }).state('home.segment.explorer.attributes', {
        url: '/attributes/:category/:subcategory',
        params: {
            segment: 'segment.name',
            pageTitle: 'My Data',
            pageIcon: 'ico-analysis',
            section: 'segment.analysis',
            category: { dynamic: true, value: '' },
            subcategory: { dynamic: true, value: '' }
        },
        onEnter: ['$stateParams', 'SegmentStore', 'BackStore', function ($stateParams, SegmentStore, BackStore) {
            var name = $stateParams.segment;

            BackStore.setBackState('home.segments');
            if ('Create' === name) {
                BackStore.setBackLabel($stateParams.segment);
                BackStore.setHidden(true);
            } else {
                SegmentStore.getSegmentByName(name).then(function (result) {
                    BackStore.setBackLabel(result.display_name);
                    BackStore.setHidden(false);
                });
            }
        }],
        resolve: {
            LookupResponse: [function () {
                return { attributes: null };
            }]
        },
        views: {
            "main@": {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            },
            'header.back@': 'backNav'
        }
    }).state('home.nodata', {
        url: '/nodata',
        params: {
            pageTitle: 'My Data',
            pageIcon: 'ico-analysis'
        },
        views: {
            "main@": {
                controller: ["$scope", "AuthorizationUtility", "FeatureFlagService", function controller($scope, AuthorizationUtility, FeatureFlagService) {
                    var flags = FeatureFlagService.Flags();
                    var featureFlagsConfig = {};
                    featureFlagsConfig[flags.VDB_MIGRATION] = false;
                    featureFlagsConfig[flags.ENABLE_FILE_IMPORT] = true;

                    $scope.showImportButton = AuthorizationUtility.checkAccessLevel(AuthorizationUtility.excludeExternalUser) && AuthorizationUtility.checkFeatureFlags(featureFlagsConfig);
                }],
                templateUrl: '/components/datacloud/explorer/nodata/nodata.component.html'
            }
        }
    }).state('home.exportSegment', {
        url: '/export/:exportID',
        params: {
            pageTitle: 'Export Segment',
            pageIcon: 'ico-analysis',
            section: 'segment.analysis'
        },
        resolve: {
            SegmentExport: ['$q', '$stateParams', 'SegmentService', function ($q, $stateParams, SegmentService) {
                var deferred = $q.defer();

                var exportId = $stateParams.exportID;

                SegmentService.GetSegmentExportByExportId(exportId).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }]
        },
        views: {
            "main@": {
                controller: 'SegmentExportController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/segmentexport/segmentexport.component.html'
            }
        }
    });
}]);

/***/ }),

/***/ "../common/components/datacloud/datacloud.service.js":
/*!***********************************************************!*\
  !*** ../common/components/datacloud/datacloud.service.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud').filter("sortByKey", function () {
    return function (array, key) {
        if (!angular.isArray(array)) return;
        var empty = [];
        var present = array.filter(function (item) {
            if (item[key]) {
                return item;
            } else {
                empty.push(item);
            }
        });
        return present.concat(empty);
    };
}).service('DataCloudStore', ["$q", "DataCloudService", function ($q, DataCloudService) {
    var DataCloudStore = this;

    this.init = function () {
        this.enrichments = null;
        this.enrichmentsMap = {};
        this.categories = null;
        this.subcategories = {};
        this.count = null;
        this.selectedCount = null;
        this.premiumSelectMaximum = null;
        this.topAttributes = null;
        this.cube = null;
        this.ratingsEngineAttributes = [];
        this.metadata = {
            current: 1,
            currentCategory: 1,
            toggle: {
                show: {
                    nulls: false,
                    selected: false,
                    premium: false,
                    internal: false
                },
                hide: {
                    premium: false
                }
            },
            lookupMode: false,
            generalSelectLimit: 0,
            generalSelectedTotal: 0,
            premiumSelectLimit: 0,
            premiumSelectedTotal: 0,
            enrichmentsTotal: -1,
            tabSection: 'browse',
            category: null,
            subcategory: null
        };
        this.feedbackModal = {
            show: false,
            context: null
        };
        this.attributesCount = null;
        this.validFreeTextTypes = ['alpha', 'enum', 'email', 'phone', 'uri']; //PLS-8870
        this.topCategories = ['Lattice Ratings', 'Firmographics', 'My Attributes', 'Curated Account Attributes', 'Contact Attributes', 'Product Spend Profile', 'Intent', 'Website Profile', 'Technology Profile', 'Online Presence', 'Growth Trends', 'Website Keywords'];
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    var getObj = function getObj(path, obj) {
        return path.split('.').reduce(function (obj, i) {
            return obj[i];
        }, obj);
    };

    var setObj = function setObj(path, value, scope) {
        var levels = path.split('.'),
            max_level = levels.length - 1,
            target = scope;

        levels.some(function (level, i) {
            if (typeof level === 'undefined') {
                return true;
            }
            if (i === max_level) {
                target[level] = value;
            } else {
                var obj = target[level] || {};
                target[level] = obj;
                target = obj;
            }
        });
    };

    this.getMetadata = function (name) {
        return getObj(name, this.metadata);
    };

    this.setMetadata = function (name, value) {
        setObj(name, value, this.metadata);
    };

    this.setHost = function (value) {
        DataCloudService.setHost(value);
    };

    this.getPremiumSelectMaximum = function () {
        var deferred = $q.defer();
        if (DataCloudStore.premiumSelectMaximum) {
            deferred.resolve(DataCloudStore.premiumSelectMaximum);
        } else {
            DataCloudService.getPremiumSelectMaximum().then(function (response) {
                DataCloudStore.setPremiumSelectMaximum(response);
                deferred.resolve(response);
            });
        }
        return deferred.promise;
    };

    this.setPremiumSelectMaximum = function (item) {
        DataCloudStore.premiumSelectMaximum = item;
    };

    this.getSelectMaximum = function () {
        var deferred = $q.defer();
        if (DataCloudStore.selectMaximum) {
            deferred.resolve(DataCloudStore.selectMaximum);
        } else {
            DataCloudService.getSelectMaximum().then(function (response) {
                var total = response && response.data ? response.data['MaxEnrichAttributes'] : null;
                DataCloudStore.setSelectMaximum(total);
                deferred.resolve(total);
            });
        }
        return deferred.promise;
    };

    this.setSelectMaximum = function (item) {
        DataCloudStore.selectMaximum = item;
    };

    this.getCategories = function () {
        var deferred = $q.defer();
        if (this.categories) {
            deferred.resolve(this.categories);
        } else {
            DataCloudService.getCategories().then(function (response) {
                DataCloudStore.setCategories(response);
                deferred.resolve(response);
            });
        }
        return deferred.promise;
    };

    this.setCategories = function (item) {
        this.categories = item;
    };

    this.getSubcategories = function (category) {
        var deferred = $q.defer();
        if (this.subcategories[category]) {
            deferred.resolve(this.subcategories[category]);
        } else {
            DataCloudService.getSubcategories(category).then(function (response) {
                DataCloudStore.setSubcategories(category, response);
                deferred.resolve(response);
            });
        }
        return deferred.promise;
    };

    this.setSubcategories = function (category, item) {
        this.subcategories[category] = item;
    };

    this.getCategoriesSortOrder = function () {
        var categoriesIndices = {};
        this.topCategories.forEach(function (category, index) {
            categoriesIndices[category] = index;
        });
        return categoriesIndices;
    };

    this.getAllEnrichmentsConcurrently = function () {
        var deferred = $q.defer(),

        /*  
         *  Most browsers support 6 concurrent connections, older IE supports two
         *  Setting this to 5 to make room for topn call -lazarus
         */
        // concurrent does not help here, because backend cannot really paginate,
        // as it needs to gather all metadata anyway
        connections = 1;
        //item_count = Math.ceil(total_count / connections),
        //iterations = Math.ceil(total_count / item_count);

        this.concurrent_count = 0;

        if (this.enrichments /* && this.enrichments.length == total_count*/) {
                deferred.resolve(this.enrichments, true);
            } else {
            //for (var j=0; j<iterations; j++) {
            this.getEnrichments({
                //max: item_count, 
                //offset: j * item_count 
            }, true).then(function (result) {
                //DataCloudStore.concurrent_count++;

                //if (DataCloudStore.concurrent_count == iterations) {
                deferred.resolve(DataCloudStore.enrichments);
                //}
            });
            //}
        }

        return deferred.promise;
    };

    this.getEnrichments = function (opts, concatEnrichments, nocache) {
        var deferred = $q.defer(),
            nocache = nocache || false,
            ret;

        if (this.enrichments && !nocache) {
            ret = this.enrichments && this.enrichments.data ? this.enrichments.data : this.enrichments;
            DataCloudStore.setMetadata('enrichmentsTotal', ret.length);
            deferred.resolve(ret);
        } else {
            DataCloudService.getEnrichments(opts).then(function (response) {
                ret = response && response.data ? response.data : response;
                DataCloudStore.setEnrichments(ret, concatEnrichments || false);
                DataCloudStore.setMetadata('enrichmentsTotal', ret.length);
                deferred.resolve(ret);
            });
        }

        return deferred.promise;
    };

    this.setEnrichments = function (enrichments, concatEnrichments) {
        if (concatEnrichments) {
            this.enrichments = (this.enrichments || []).concat(enrichments);
        } else {
            this.enrichments = enrichments;
        }
    };

    this.setEnrichmentsMap = function (map) {
        this.enrichmentsMap = map;
    };

    this.getEnrichmentsMap = function (key) {
        return key ? this.enrichmentsMap[key] : this.enrichmentsMap;
    };

    this.updateEnrichments = function (enrichments) {
        this.enrichments = enrichments;
    };

    this.getCount = function () {
        var deferred = $q.defer();

        if (DataCloudStore.count) {
            deferred.resolve(DataCloudStore.count);
        } else {
            DataCloudService.getCount().then(function (response) {
                DataCloudStore.setCount(response);
                deferred.resolve(response);
            });
        }

        return deferred.promise;
    };

    this.setCount = function (count) {
        DataCloudStore.count = count;
    };

    this.getAttributesCount = function () {
        // This call is really a workaround for the fact that getCount() will first
        // return 0 for an empty tenant, then after a refresh, will return ~21,000. 
        var deferred = $q.defer();
        if (DataCloudStore.attributesCount) {
            deferred.resolve(DataCloudStore.attributesCount);
        } else {
            DataCloudService.getAttributesCount().then(function (response) {
                DataCloudStore.setAttributesCount(response.data);
                deferred.resolve(response);
            });
        }

        return deferred.promise;
    };

    this.setAttributesCount = function (count) {
        DataCloudStore.attributesCount = count;
    };

    this.getSelectedCount = function () {
        var deferred = $q.defer();
        if (this.selectedCount) {
            deferred.resolve(this.selectedCount);
        } else {
            DataCloudService.getSelectedCount().then(function (response) {
                deferred.resolve(response);
            });
        }
        return deferred.promise;
    };

    this.getTopAttributes = function (opts) {
        var deferred = $q.defer(),
            opts = opts || {};
        opts.category = opts.category || 'firmographics';
        opts.limit = opts.limit || 5;
        if (this.topAttributes) {
            deferred.resolve(this.topAttributes[opts.category]);
        } else {
            DataCloudService.getTopAttributes(opts).then(function (response) {
                for (var i in response.data.SubCategories) {
                    var items = response.data.SubCategories[i];
                    for (var j in items) {
                        var item = items[j],
                            attribute = _.findWhere(response.data.EnrichmentAttributes, { ColumnId: item.Attribute });
                        item.DisplayName = attribute ? attribute.DisplayName : null;
                    }
                }
                DataCloudStore.setTopAttributes(response, opts.category);
                deferred.resolve(response);
            });
        }
        return deferred.promise;
    };

    this.getAllTopAttributes = function (opts) {
        var deferred = $q.defer(),
            opts = opts || {};
        opts.max = opts.max || 5;

        if (this.topAttributes) {
            deferred.resolve(this.topAttributes);
        } else {
            var vm = this;

            DataCloudService.getAllTopAttributes(opts).then(function (response) {
                vm.topAttributes = response.data;
                deferred.resolve(vm.topAttributes);
            });
        }

        return deferred.promise;
    };

    this.setTopAttributes = function (items, category) {
        this.topAttributes = this.topAttributes || {};
        this.topAttributes[category] = items;
    };

    this.getCube = function () {
        var deferred = $q.defer();
        if (DataCloudStore.cube) {
            deferred.resolve(DataCloudStore.cube);
        } else {
            DataCloudService.getCube().then(function (response) {
                DataCloudStore.setCube(response);
                deferred.resolve(response);
            });
        }
        return deferred.promise;
    };

    this.setCube = function (cube) {
        DataCloudStore.cube = cube;
    };

    this.getFeedbackModal = function () {
        return this.feedbackModal;
    };

    this.setFeedbackModal = function (bool, obj) {
        this.feedbackModal.context = obj;
        return this.feedbackModal.show = bool;
    };

    this.sendFeedback = function (report, type) {
        var deferred = $q.defer(),
            type = type || '';

        DataCloudService.sendFeedback(report, type).then(function (response) {
            deferred.resolve(response);
        });
        return deferred.promise;
    };

    var flattenRatingsEngineAttributes = function flattenRatingsEngineAttributes(ratingsEngine) {
        return ratingsEngine && ratingsEngine[0] && ratingsEngine[0].rule && ratingsEngine[0].rule.selectedAttributes ? ratingsEngine[0].rule.selectedAttributes : [];
    };

    this.setRatingsEngineAttributes = function (attributes) {
        this.ratingsEngineAttributes = attributes;
    };

    this.getCurrentRatingsEngineAttributes = function () {
        return this.ratingsEngineAttributes;
    };

    this.getRatingsEngineAttributes = function (ratingsEngineId, ratingModelId) {
        var deferred = $q.defer();
        DataCloudService.getRatingsEngineAttributes(ratingsEngineId, ratingModelId).then(function (response) {
            DataCloudStore.setRatingsEngineAttributes(flattenRatingsEngineAttributes(response.data));
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.setSelectedRatingsEngineAttribute = function (attribute_id) {
        var index = this.ratingsEngineAttributes.indexOf(attribute_id);
        if (index >= 0) {
            this.ratingsEngineAttributes.splice(index, 1);
        } else {
            this.ratingsEngineAttributes.push(attribute_id);
        }
    };

    this.setSelectedRatingsEngineAttributes = function (attributes) {
        if (attributes) {
            attributes.forEach(function (value) {
                DataCloudStore.setSelectedRatingsEngineAttribute(value);
            });
        }
    };

    this.selectRatingsEngineAttributes = function (rating_id, rating_model_id, attributes) {
        var deferred = $q.defer();
        this.setSelectedRatingsEngineAttributes(attributes);
        DataCloudService.selectRatingsEngineAttributes(rating_id, rating_model_id, this.ratingsEngineAttributes).then(function (response) {
            DataCloudStore.setRatingsEngineAttributes(response);
            deferred.resolve(response);
        });
        return deferred.promise;
    };
}]).service('DataCloudService', ["$q", "$http", "$state", "$stateParams", "SegmentStore", function ($q, $http, $state, $stateParams, SegmentStore) {
    this.host = '/pls';
    this.paths = {
        'lattice': '/latticeinsights',
        'customer': '/datacollection'
    };

    this.path = this.paths['lattice'];

    this.setHost = function (value) {
        this.host = value;
    };

    this.inModel = function () {
        var name = $state.current.name.split('.');

        return name[1] == 'model';
    };

    this.inSegment = function () {
        return this.path == this.paths['customer'];
    };

    this.url = function (customerDataUrl, internalDataUrl) {
        return this.host + this.path + (this.inSegment() ? customerDataUrl : internalDataUrl);
    };

    this.getPremiumSelectMaximum = function () {
        var deferred = $q.defer();

        $http({
            method: 'get',
            url: this.host + '/latticeinsights/insights/premiumattributeslimitation'
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getSelectMaximum = function () {
        var deferred = $q.defer();

        $http({
            method: 'get',
            url: this.host + '/latticeinsights/insights/premiumattributeslimitationmap'
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getCount = function () {
        var deferred = $q.defer(),
            url = this.url('/attributes', '/insights') + '/count';

        $http({
            method: 'get',
            url: url
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getAttributesCount = function () {
        var deferred = $q.defer(),
            url = '/pls/datacollection/attributes/count';

        $http({
            method: 'get',
            url: url
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getSelectedCount = function () {
        var deferred = $q.defer();

        $http({
            method: 'get',
            url: this.url('/attributes', '/insights') + '/selectedattributes/count'
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getCategories = function () {
        var deferred = $q.defer();

        $http({
            method: 'get',
            url: this.url('/attributes', '/insights') + '/categories'
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getSubcategories = function (category) {
        var deferred = $q.defer();

        $http({
            method: 'get',
            url: this.url('/attributes', '/insights') + '/subcategories',
            params: {
                category: category
            }
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getEnrichments = function (opts) {
        var deferred = $q.defer(),
            opts = opts || {},
            offset = opts.offset || 0,
            max = opts.max || null,
            onlySelectedAttributes = opts.onlySelectedAttributes || null,
            url = this.url('/attributes', '/insights');

        $http({
            method: 'get',
            url: url,
            params: {
                //offset: offset,
                //max: max,
                onlySelectedAttributes: onlySelectedAttributes
            }
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.setEnrichments = function (data) {
        var deferred = $q.defer();

        $http({
            method: 'put',
            url: this.host + this.path + '/insights',
            data: data
        }).then(function (response) {
            deferred.resolve(response.data);
        }, function (response) {
            //on error
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.getAllTopAttributes = function (opts) {
        var deferred = $q.defer(),
            url = this.url('/statistics/topn?topbkt=true', '/stats/topn');

        $http({
            method: 'get',
            url: url
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getCube = function (opts) {
        var deferred = $q.defer(),
            url = this.url('/statistics/cubes', '/stats/cubes');

        // FIXME: temporary disable Cube API in Data Cloud Explorer, bad data -lazarus
        // if (url == '/pls/latticeinsights/stats/cube') { 
        //     deferred.resolve({ data: {} }); 
        //     return deferred.promise; 
        // }

        $http({
            method: 'get',
            url: url
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.setFlags = function (opts, flags) {
        var deferred = $q.defer(),
            opts = opts || {},
            fieldName = opts.fieldName || '',
            useCase = opts.useCase || 'CompanyProfile',
            flags = flags || {}; // json

        $http({
            method: 'POST',
            url: '/pls/attributes/flags/' + fieldName + '/' + useCase,
            data: flags
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.setFlag = function (opts, boolean) {
        var deferred = $q.defer(),
            opts = opts || {},
            fieldName = opts.fieldName || '',
            useCase = opts.useCase || 'CompanyProfile',
            propertyName = opts.propertyName || '',
            boolean = boolean || false;

        $http({
            method: 'POST',
            url: '/pls/attributes/flags/' + fieldName + '/' + useCase + '/' + propertyName,
            data: boolean
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.setFlagsByCategory = function (opts, flags) {
        var deferred = $q.defer(),
            opts = opts || {},
            categoryName = opts.categoryName || '',
            useCase = opts.useCase || 'CompanyProfile',
            flags = flags || {}; // json

        $http({
            method: 'POST',
            url: '/pls/attributes/categories/flags/' + useCase,
            params: {
                category: categoryName
            },
            data: flags
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.setFlagsBySubcategory = function (opts, flags) {
        var deferred = $q.defer(),
            opts = opts || {},
            categoryName = opts.categoryName || '',
            subcategoryName = opts.subcategoryName || '',
            useCase = opts.useCase || 'CompanyProfile',
            flags = flags || {}; // json

        $http({
            method: 'POST',
            url: '/pls/attributes/categories/subcategories/flags/' + useCase, //+ categoryName + '/' + subcategoryName + '/' + useCase,
            params: {
                category: categoryName,
                subcategory: subcategoryName
            },
            data: flags
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.sendFeedback = function (opts, type) {
        var deferred = $q.defer(),
            opts = opts || {},
            type = type || 'incorrectmatchedattrs'; // incorrectmatchedattrs | incorrectlookups

        $http({
            method: 'POST',
            headers: {
                'ErrorDisplayMethod': 'none'
            },
            url: this.host + '/datacloud/customerreports/' + type,
            data: opts
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.getRatingsEngineAttributes = function (ratingsEngineId, ratingModelId) {
        var deferred = $q.defer();

        $http({
            method: 'get',
            url: this.host + '/ratingengines/' + ratingsEngineId + '/ratingmodels' + (ratingModelId ? '/' + ratingModelId : '')
        }).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    var flattenRatingsEngineAttributes = function flattenRatingsEngineAttributes(ratingsEngine) {
        return ratingsEngine && ratingsEngine.rule && ratingsEngine.rule.selectedAttributes ? ratingsEngine.rule.selectedAttributes : [];
    };

    this.selectRatingsEngineAttributes = function (ratingsEngineId, ratingModelId, attributes) {
        var deferred = $q.defer(),
            save = {
            rule: {
                id: ratingsEngineId,
                selectedAttributes: attributes
            }
        };

        $http({
            method: 'POST',
            url: this.host + '/ratingengines/' + ratingsEngineId + '/ratingmodels' + (ratingModelId ? '/' + ratingModelId : ''),
            data: save
        }).then(function (response) {
            var saved_attributes = flattenRatingsEngineAttributes(response.data);
            deferred.resolve(saved_attributes);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/explorer/attributetile/attributetile.component.js":
/*!****************************************************************************************!*\
  !*** ../common/components/datacloud/explorer/attributetile/attributetile.component.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.explorer.attributetile', ['mainApp.appCommon.utilities.NumberUtility', 'common.datacloud.explorer.attributetile.bar.chart']).directive('explorerAttributeTile', function () {
    return {
        restrict: 'A',
        scope: {
            vm: '=',
            count: '=',
            enrichment: '=',
            cube: '='
        },
        controllerAs: 'vm',
        templateUrl: '/components/datacloud/explorer/attributetile/attributetile.component.html',
        controller: ["$scope", "$state", "$document", "$timeout", "$interval", "QueryStore", "DataCloudStore", "NumberUtility", "QueryTreeService", function controller($scope, $state, $document, $timeout, $interval, QueryStore, DataCloudStore, NumberUtility, QueryTreeService) {
            var vm = $scope.vm;
            angular.extend(vm, {
                enrichment: $scope.enrichment,
                cube: $scope.cube,
                bktlist: []
            });

            vm.booleanStats = function (stats) {
                var booleans = {};

                for (var i in stats) {
                    var stat = stats[i];
                    booleans[stat.Lbl] = stat;
                }

                return booleans;
            };

            vm.goToEnumPicker = function (bucket, enrichment) {
                QueryTreeService.setPickerObject({
                    item: enrichment
                    //restriction: bucket 
                });

                var entity = enrichment.Entity;
                var fieldname = enrichment.ColumnId;
                var state = '';

                switch ($state.current.name) {
                    case 'home.ratingsengine.rulesprospects.segment.attributes.rules':
                        state = 'home.ratingsengine.rulesprospects.segment.attributes.rules.picker';
                        break;
                    case 'home.ratingsengine.dashboard.segment.attributes.add':
                        state = 'home.ratingsengine.dashboard.segment.attributes.rules.picker';
                        break;
                    default:
                        state = 'home.segment.explorer.enumpicker';
                }

                $state.go(state, {
                    entity: entity,
                    fieldname: fieldname
                });
            };

            function getBarChartConfig() {
                if ($scope.barChartConfig === undefined) {

                    $scope.barChartConfig = {
                        'data': {
                            'tosort': false,
                            'sortBy': 'Cnt',
                            'trim': true,
                            'top': 5
                        },
                        'chart': {
                            'header': 'Attributes Value',
                            'emptymsg': '',
                            'usecolor': false,
                            'color': '#2E6099',
                            'mousehover': true,
                            'type': 'integer',
                            'showstatcount': true,
                            'maxVLines': 3,
                            'showVLines': false
                        },
                        'vlines': {
                            'suffix': ''
                        },
                        'columns': [{
                            'field': 'Cnt',
                            'label': 'Records',
                            'type': 'number',
                            'chart': true
                        }]
                    };
                }
                return $scope.barChartConfig;
            }

            function getBarChartLiftConfig() {
                if ($scope.barChartLiftConfig === undefined) {
                    $scope.barChartLiftConfig = {
                        'data': {
                            'tosort': false,
                            'sortBy': 'Cnt',
                            'trim': true,
                            'top': 5
                        },
                        'chart': {
                            'header': 'Attributes Value',
                            'emptymsg': '',
                            'usecolor': false,
                            'color': '#2E6099',
                            'mousehover': true,
                            'type': 'decimal',
                            'showstatcount': true,
                            'maxVLines': 3,
                            'showVLines': true
                        },
                        'vlines': {
                            'suffix': 'x'
                        },
                        'columns': [{
                            'field': 'Lift',
                            'label': 'Lifts',
                            'type': 'string',
                            'suffix': 'x',
                            'chart': true
                        }, {
                            'field': 'Cnt',
                            'label': 'Records',
                            'type': 'number',
                            'chart': false
                        }]
                    };
                }
                return $scope.barChartLiftConfig;
            }

            vm.getChartConfig = function (list) {

                vm.bktlist = [];
                if (vm.cube) {
                    vm.bktlist = vm.getData(vm.enrichment.Entity, vm.enrichment.ColumnId);
                } else {
                    DataCloudStore.getCube().then(function (result) {
                        vm.cube = result;
                        vm.bktlist = vm.getData(vm.enrichment.Entity, vm.enrichment.ColumnId);
                    });
                }

                // console.log('Request chart config on list ', list);
                if (list != null && list.length > 0 && list[0].Lift != undefined) {
                    return getBarChartLiftConfig();
                }
                return getBarChartConfig();
            };

            vm.getData = function (entity, columnId) {
                var data = vm.cube.data[entity].Stats[columnId].Bkts.List;
                return data;
            };

            vm.chartRowClicked = function (stat, enrichment) {
                // console.log('Stat clicked: ',stat, ' - Enrichment: ', enrichment);
                vm.selectSegmentAttributeRange(enrichment, stat, vm.section != 'segment.analysis');
            };
            vm.NumberUtility = NumberUtility;

            vm.getOperationLabel = function (type, bucketRestriction) {
                return QueryTreeService.getOperationLabel(type, bucketRestriction);
            };

            vm.getOperationValue = function (bucketRestriction, type) {
                return QueryTreeService.getOperationValue(bucketRestriction, type);
            };

            vm.getQuerySnippet = function (enrichment, rule, type) {
                var querySnippet = enrichment.DisplayName + ' ';
                if (vm.cube.data[enrichment.Entity].Stats[enrichment.ColumnId] && vm.cube.data[enrichment.Entity].Stats[enrichment.ColumnId].Bkts) {
                    //bucketable attributes
                    querySnippet += 'is ';
                    querySnippet += type == 'Enum' && rule.bucketRestriction.bkt.Vals && rule.bucketRestriction.bkt.Vals.length > 1 ? vm.generateBucketLabel(rule.bucketRestriction.bkt) : rule.bucketRestriction.bkt.Lbl;
                } else {
                    //non-bucketable attributes e.g. pure-string
                    querySnippet += vm.getOperationLabel('String', rule.bucketRestriction) + ' ' + vm.getOperationValue(rule.bucketRestriction, 'String');
                }
                return querySnippet;
            };

            vm.showFreeTextAttributeCard = function (enrichment) {
                return vm.cube && vm.isBktEmpty(enrichment) && DataCloudStore.validFreeTextTypes.indexOf(enrichment.FundamentalType) >= 0 && !vm.lookupMode && ['wizard.ratingsengine_segment', 'edit', 'team'].indexOf(vm.section) == -1;
            };

            vm.showInvalidAttributeCard = function (enrichment) {
                return vm.cube && vm.isBktEmpty(enrichment) && DataCloudStore.validFreeTextTypes.indexOf(enrichment.FundamentalType) == -1 && !vm.lookupMode && ['wizard.ratingsengine_segment', 'edit', 'team'].indexOf(vm.section) == -1;
            };

            vm.isBktEmpty = function (enrichment) {
                if (vm.cube && vm.cube.data && vm.cube.data[enrichment.Entity] && vm.cube.data[enrichment.Entity].Stats && vm.cube.data[enrichment.Entity].Stats[enrichment.ColumnId]) {
                    return vm.cube.data[enrichment.Entity].Stats[enrichment.ColumnId].Bkts == undefined || !vm.cube.data[enrichment.Entity].Stats[enrichment.ColumnId].Bkts.List.length;
                }
            };

            vm.NumberUtility = NumberUtility;

            vm.getBktListRating = function (enrichment) {
                return vm.cube.data[enrichment.Entity].Stats[enrichment.ColumnId].Bkts.List;
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/explorer/categorytile/categorytile.component.js":
/*!**************************************************************************************!*\
  !*** ../common/components/datacloud/explorer/categorytile/categorytile.component.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.explorer.categorytile', []).directive('explorerCategoryTile', function () {
    return {
        restrict: 'A',
        scope: {
            vm: '=',
            count: '=',
            category: '='
        },
        controllerAs: 'vm',
        templateUrl: '/components/datacloud/explorer/categorytile/categorytile.component.html',
        controller: ["$scope", "$document", "$timeout", "$interval", "DataCloudStore", "QueryStore", "moment", function controller($scope, $document, $timeout, $interval, DataCloudStore, QueryStore, moment) {
            var vm = $scope.vm;

            angular.extend(vm, {});

            vm.setCategory = function (category) {
                vm.category = category;
                DataCloudStore.setMetadata('category', category);
            };

            vm.categoryClass = function (category) {
                var category = 'category-' + category.toLowerCase().replace(/\s/g, "-");
                return category;
            };

            vm.categoryIcon = function (category) {
                var path = '/assets/images/enrichments/subcategories/',
                    category = vm.subcategoryRenamer(category, ''),
                    icon = category + '.png';

                return path + icon;
            };

            /**
             * Retrurn the path of the image starting from /assets
             * In case of category === 'latticerating' or 'productspendprofile'
             * it returns the category icon 
             * @param {*} category 
             * @param {*} subcategory 
             */
            vm.subcategoryIcon = function (category, subcategory) {
                var path = '/assets/images/enrichments/subcategories/',
                    category = vm.subcategoryRenamer(category),
                    subcategory = vm.subcategoryRenamer(subcategory),
                    icon = category + (subcategory ? '-' + subcategory : '') + '.png';

                switch (category) {
                    case 'latticeratings':
                        {
                            icon = 'latticeratings.png';
                            break;
                        }
                    case 'productspendprofile':
                        {
                            icon = 'productspendprofile.png';
                            break;
                        }
                }
                return path + icon;
            };

            vm.categoryStartFrom = function () {
                var size = vm.category ? vm.categorySize : vm.pagesize,
                    current = vm.metadata.currentCategory - 1,
                    items = vm.categoriesMenu,
                    length = items ? items.length : 0,
                    result = current * size + size > length ? length - size : current * size;

                return result < 0 ? 0 : result;
            };

            vm.categoryLimitTo = function () {
                return vm.category ? vm.categorySize : vm.pagesize;
            };

            vm.categoryOrderBy = function (category, subcategory, attr) {
                var YesCategories = ['Technology Profile', 'Website Profile', 'Product Spend Profile'];

                if (vm.section == 'segment.analysis') {
                    var order = [];

                    if (category && YesCategories.indexOf(category) >= 0) {
                        order.push(function (attribute) {
                            return attribute.TopBkt && attribute.TopBkt.Lbl == 'Yes' ? -1 : 1;
                        });
                    }

                    order = order.concat(['!TopBkt', '!ImportanceOrdering', '-ImportanceOrdering', '-TopBkt.Cnt', '-Value']);
                } else {
                    var order = !vm.showHighlighting() ? ['-ImportanceOrdering'] : ['-HighlightHighlighted', '!ImportanceOrdering', '-ImportanceOrdering'];

                    if (vm.lookupMode) {
                        order.push(function (attribute) {
                            return attribute.Value == 'Yes' ? -1 : 1;
                        });
                    }

                    order = order.concat(['-Count', '-Value']);
                }

                // if (category == 'Product Spend Profile') {
                //     console.log(category, order, subcategory, attr);
                // }

                return order;
            };

            vm.categoryClick = function (category, $event) {
                var target = angular.element($event.target),
                    currentTarget = angular.element($event.currentTarget);
                if (target.closest("[ng-click]:not(.ignore-ngclick)")[0] !== currentTarget[0]) {
                    // do nothing, user is clicking something with it's own click event
                } else {
                    var category = category || '';
                    if (vm.subcategory && vm.category == category) {
                        vm.setSubcategory('');
                        if (vm.subcategoriesExclude.indexOf(category) >= 0) {
                            // don't show subcategories
                            vm.setSubcategory(vm.subcategories[category][0]);
                        }
                    } else if (vm.category == category) {
                        vm.setSubcategory('');
                        //vm.category = '';
                    } else {
                        vm.setSubcategory('');
                        if (vm.subcategoriesExclude.indexOf(category)) {
                            vm.setSubcategory(vm.subcategories[category][0]);
                        }
                        vm.setCategory(category);

                        vm.filterEmptySubcategories();
                    }
                    vm.metadata.current = 1;
                    vm.updateStateParams();
                }
            };

            vm.getAttributeStat = function (attribute) {
                var enrichmentKey = attribute.Attribute || attribute.ColumnId,
                    index = vm.enrichmentsMap[attribute.Entity + '.' + enrichmentKey],
                    enrichment = vm.enrichments[index],
                    attributeEntity = attribute.Entity,
                    stats = vm.cube.data[attributeEntity].Stats[enrichmentKey] && vm.cube.data[attributeEntity].Stats[enrichmentKey] && vm.cube.data[attributeEntity].Stats[enrichmentKey].Bkts && vm.cube.data[attributeEntity].Stats[enrichmentKey].Bkts.List ? vm.cube.data[attributeEntity].Stats[enrichmentKey].Bkts.List : null,
                    segmentRangeKey = null;

                var stat = stats && stats.length ? stats[0] : null;

                if (stat && stat.Rng) {
                    segmentRangeKey = vm.makeSegmentsRangeKey(enrichment, stat.Rng);
                }

                if (stats && stats.length > 1) {
                    for (var i in stats) {
                        if (stats[i] && stats[i].Rng) {
                            if (vm.segmentAttributeInputRange[vm.makeSegmentsRangeKey(enrichment, stats[i].Rng)]) {
                                stat = stats[i];
                                break;
                            }
                        }
                    }
                }

                return stat;
            };

            vm.getAttributeRange = function (attribute) {
                var stat = vm.getAttributeStat(attribute),
                    range = stat && stat.Rng ? stat.Rng : {};
                return range;
            };

            vm.displayAttributeValue = function (attribute, property) {
                var property = property || 'Lbl',
                    enrichmentKey = attribute.Attribute || attribute.ColumnId,
                    attributeEntity = attribute.Entity,
                    stats = vm.cube.data[attributeEntity].Stats[enrichmentKey] && vm.cube.data[attributeEntity].Stats[enrichmentKey] && vm.cube.data[attributeEntity].Stats[enrichmentKey].Bkts && vm.cube.data[attributeEntity].Stats[enrichmentKey].Bkts.List ? vm.cube.data[attributeEntity].Stats[enrichmentKey].Bkts.List : null;

                /**
                 * sort stats by record count if there are more then 1
                 */
                if (stats && stats.length > 1) {
                    stats = _.sortBy(stats, function (item) {
                        return parseInt(item.Cnt);
                    });
                }

                var stat = vm.getAttributeStat(attribute);

                if (stat && stat[property]) {
                    if (property === 'Lift') {
                        return stat[property].toFixed(1) + 'x';
                    }
                    return stat[property];
                }
            };

            vm.generateBucketOperation = function (bkt) {
                var ret = bkt.Cmp == 'NOT_EQUAL' ? 'is not' : 'is';

                return ret;
            };

            vm.generateBucketLabel = function (bkt) {
                var bkt = QueryStore.generateBucketLabel(bkt);

                return bkt.Lbl || 'empty';
            };

            vm.getTitleTooltip = function (attribute) {
                if (attribute.Entity === 'PurchaseHistory') {
                    return attribute.Subcategory;
                }
            };

            vm.getDateMap = function (category) {
                var categoryKey = category,
                    //.toUpperCase().replace(' ','_'),
                timestamp = vm.collectionStatus && vm.collectionStatus.DateMap ? vm.collectionStatus.DateMap[categoryKey] : '',
                    lastDataRefresh = '';
                if (timestamp) {
                    lastDataRefresh = 'Last Data Refresh: ' + moment(timestamp).format('MMMM DD, YYYY');
                    return lastDataRefresh;
                }
                return lastDataRefresh;
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/explorer/companyprofile/companyprofile.component.js":
/*!******************************************************************************************!*\
  !*** ../common/components/datacloud/explorer/companyprofile/companyprofile.component.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.explorer.companyprofile', []).directive('explorerCompanyProfile', function () {
    return {
        restrict: 'A',
        scope: {
            vm: '='
        },
        templateUrl: '/components/datacloud/explorer/companyprofile/companyprofile.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "$document", "$timeout", "$interval", "DataCloudStore", function controller($scope, $document, $timeout, $interval, DataCloudStore) {
            var vm = $scope.vm;

            angular.extend(vm, {
                company_info: $scope.vm.LookupResponse.companyInfo
            });

            vm.format = function (type, value) {
                if (!vm.company_info) {
                    return false;
                }

                var value = value || '',
                    info = vm.company_info;

                switch (type) {
                    case 'address':
                        var address = [];

                        if (info.LDC_Street) {
                            address.push(info.LDC_Street);
                        }

                        if (info.LDC_City) {
                            address.push(info.LDC_City);
                        }

                        if (info.LDC_State) {
                            address.push(info.LDC_State);
                        }

                        if (info.LDC_ZipCode) {
                            address.push(info.LDC_ZipCode.substr(0, 5) + ',');
                        }

                        if (info.LE_COUNTRY) {
                            address.push(info.LE_COUNTRY);
                        }

                        return address.join(' ');

                    case 'phone':
                        if (info.LE_COMPANY_PHONE) {
                            var phone = info.LE_COMPANY_PHONE;
                            return phone.replace(/\D+/g, '').replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
                        }

                        break;

                    case 'range':
                        if (value) {
                            var range = value;
                            range = range.replace('-', ' - ');
                            return range;
                        }

                        break;
                }
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/explorer/explore.index.js":
/*!****************************************************************!*\
  !*** ../common/components/datacloud/explorer/explore.index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./explorer.component */ "../common/components/datacloud/explorer/explorer.component.js");

__webpack_require__(/*! ./explorer.utils */ "../common/components/datacloud/explorer/explorer.utils.js");

__webpack_require__(/*! ./attributetile/attributetile.component */ "../common/components/datacloud/explorer/attributetile/attributetile.component.js");

__webpack_require__(/*! ./categorytile/categorytile.component */ "../common/components/datacloud/explorer/categorytile/categorytile.component.js");

__webpack_require__(/*! ./companyprofile/companyprofile.component */ "../common/components/datacloud/explorer/companyprofile/companyprofile.component.js");

__webpack_require__(/*! ./filters/filters.component */ "../common/components/datacloud/explorer/filters/filters.component.js");

__webpack_require__(/*! ./latticeratingcard/latticeratingcard.component */ "../common/components/datacloud/explorer/latticeratingcard/latticeratingcard.component.js");

__webpack_require__(/*! ./segmentexport/segmentexport.component */ "../common/components/datacloud/explorer/segmentexport/segmentexport.component.js");

__webpack_require__(/*! ./subcategorytile/subcategorytile.component */ "../common/components/datacloud/explorer/subcategorytile/subcategorytile.component.js");

/***/ }),

/***/ "../common/components/datacloud/explorer/explorer.component.js":
/*!*********************************************************************!*\
  !*** ../common/components/datacloud/explorer/explorer.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// grid view multple of 12 (24), dynamic across
angular.module('common.datacloud.explorer', ['common.datacloud.explorer.utils', 'common.datacloud.explorer.filters', 'common.datacloud.explorer.companyprofile', 'common.datacloud.explorer.latticeratingcard', 'common.datacloud.explorer.categorytile', 'common.datacloud.explorer.subcategorytile', 'common.datacloud.explorer.attributetile', 'mainApp.core.utilities.BrowserStorageUtility']).controller('DataCloudController', ["$scope", "$filter", "$timeout", "$interval", "$window", "$document", "$q", "$state", "$stateParams", "$rootScope", "Enrichments", "ApiHost", "BrowserStorageUtility", "ResourceUtility", "FeatureFlagService", "DataCloudStore", "DataCloudService", "EnrichmentTopAttributes", "EnrichmentPremiumSelectMaximum", "EnrichmentSelectMaximum", "LookupStore", "QueryService", "QueryStore", "SegmentService", "SegmentStore", "QueryRestriction", "CurrentConfiguration", "LookupResponse", "RatingsEngineModels", "RatingsEngineStore", "QueryTreeService", "ExplorerUtils", "ConfigureAttributesStore", "Notice", function ($scope, $filter, $timeout, $interval, $window, $document, $q, $state, $stateParams, $rootScope, Enrichments, ApiHost, BrowserStorageUtility, ResourceUtility, FeatureFlagService, DataCloudStore, DataCloudService, EnrichmentTopAttributes, EnrichmentPremiumSelectMaximum, EnrichmentSelectMaximum, LookupStore, QueryService, QueryStore, SegmentService, SegmentStore, QueryRestriction, CurrentConfiguration, LookupResponse, RatingsEngineModels, RatingsEngineStore, QueryTreeService, ExplorerUtils, ConfigureAttributesStore, Notice) {
    var vm = this,
        flags = FeatureFlagService.Flags();

    angular.extend(vm, {
        debug: window.location.search.indexOf('debug=1') > 0,
        label: {
            total: 'Total',
            premium: 'Premium',
            button_download: 'Download All',
            button_download_selected: 'Download Selected',
            button_save: 'Save Changes',
            button_select: 'Enrichment Disabled',
            button_selected: 'Enrichment Enabled',
            button_deselect: 'Enrichment Enabled',
            button_import_data: 'Import Data',
            deselected_messsage: 'Attribute will be turned off for enrichment',
            categories_see_all: 'See All Categories',
            categories_select_all: 'All Categories',
            premiumTotalSelectError: 'Premium attribute limit reached',
            generalTotalSelectError: 'Attribute limit reached',
            insufficientUserRights: 'Lattice Insights are disabled',
            no_results: 'No attributes were found',
            saved_alert: 'Your changes have been saved.',
            saved_error: 'Your changes could not be saved.',
            saving_alert: 'Your changes are being saved. <i class="fa fa-cog fa-spin fa-fw"></i>',
            changed_alert: 'No changes will be saved until you press the \'Save\' button.',
            disabled_alert: 'You have disabled an attribute.'
        },
        highlightMetadata: {
            categories: {}
        },
        EnrichmentPremiumSelectMaximum: EnrichmentPremiumSelectMaximum,
        EnrichmentSelectMaximum: EnrichmentSelectMaximum,
        lookupMode: LookupResponse && LookupResponse.attributes !== null,
        lookupFiltered: LookupResponse.attributes,
        LookupResponse: LookupStore.response,
        no_lookup_results_message: false,
        hasCompanyInfo: LookupStore.response && LookupStore.response.companyInfo ? Object.keys(LookupStore.response.companyInfo).length : 0,
        count: LookupResponse.attributes ? Object.keys(LookupResponse.attributes).length : (Enrichments || []).length,
        show_internal_filter: FeatureFlagService.FlagIsEnabled(flags.ENABLE_INTERNAL_ENRICHMENT_ATTRIBUTES) && $stateParams.section != 'insights' && $stateParams.section != 'team',
        show_lattice_insights: FeatureFlagService.FlagIsEnabled(flags.LATTICE_INSIGHTS),
        show_segmentation: FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL),
        enabledManualSave: false,
        enrichmentsObj: {}, // by Category
        enrichmentsMap: {}, // by ColumnId, value is enrichments[] index
        enrichments: [],
        subcategoriesList: [],
        status_alert: {},
        _subcategories: [],
        subcategories: [],
        subcategoriesExclude: [],
        categories: [],
        topAttributes: [],
        cube: null,
        selected_categories: {},
        metadata: DataCloudStore.metadata,
        authToken: BrowserStorageUtility.getTokenDocument(),
        userSelectedCount: 0,
        selectDisabled: 1,
        saveDisabled: 1,
        selectedCount: 0,
        section: $stateParams.section,
        category: $stateParams.category,
        subcategory: $stateParams.subcategory,
        openHighlighter: {},
        categoryCounts: {},
        TileTableItems: {},
        workingBuckets: CurrentConfiguration,
        pagesize: 24,
        categorySize: 7,
        addBucketTreeRoot: null,
        feedbackModal: DataCloudStore.getFeedbackModal(),
        stateParams: $stateParams,
        segment: $stateParams.segment,
        inWizard: false,
        datacollectionPrecheck: null,
        datacollectionPrechecking: false,
        collectionStatus: null
    });

    DataCloudStore.setMetadata('lookupMode', vm.lookupMode);

    function getDatacollectionPrecheck() {
        vm.datacollectionPrechecking = true; // spinner
        ConfigureAttributesStore.getPrecheck().then(function (result) {
            vm.datacollectionPrecheck = result;
            vm.datacollectionPrechecking = false;
        });
    }

    vm.init = function () {
        // leo();
        if (['segment.analysis'].indexOf(vm.section) != -1) {
            // only run on 'my data' page
            getDatacollectionPrecheck();
        }

        if ($state.current.name === 'home.ratingsengine.dashboard.segment.attributes.add' || $state.current.name === 'home.ratingsengine.rulesprospects.segment.attributes.add') {
            vm.mode = 'dashboardrules';
        }

        if (vm.section == 'wizard.ratingsengine_segment' && QueryStore.getAddBucketTreeRoot()) {
            //            vm.section = 'segment.analysis';
            vm.inWizard = true;
        }
        if ($state.current.name === 'home.ratingsengine.dashboard.segment.attributes.add') {
            vm.inWizard = false;
        }

        QueryStore.setSegmentEnabled = false;

        if (vm.section == 'insights' && !vm.show_lattice_insights) {
            vm.statusMessage(vm.label.insufficientUserRights, { wait: 0, special: 'nohtml' });
            return false;
        }

        if (vm.lookupMode && vm.LookupResponse.errorCode) {
            $state.go('home.datacloud.explorer');
        }

        DataCloudStore.getCube().then(function (result) {
            vm.cube = result;
        });

        vm.processCategories();
        vm.processEnrichments(Enrichments, true);
        vm.generateTree(true);

        if (vm.lookupMode && _typeof(vm.lookupFiltered) === 'object' && (Object.keys(vm.lookupFiltered).length < 1 || LookupStore.hideLookupResponse(LookupResponse))) {
            vm.no_lookup_results_message = true;
        }

        if (vm.section === 'segment.analysis') {
            // vm.setCurrentRestrictionForSaveButton();
            vm.metadataSegments = QueryRestriction;
        }

        // for Advanced Query Builder
        vm.addBucketTreeRoot = QueryStore.getAddBucketTreeRoot();

        $scope.$on("$destroy", function () {
            delete (vm.addBucketTreeRoot = QueryStore.setAddBucketTreeRoot(null));
        });

        DataCloudStore.setFeedbackModal(false);

        if (vm.section == 'segment.analysis') {
            QueryStore.getCollectionStatus().then(function (result) {
                vm.collectionStatus = result;
            });
        }

        DataCloudStore.setMetadata('current', 1);
    };

    /* some rules that might hide the page */
    vm.hidePage = function () {
        if (vm.lookupMode && _typeof(vm.lookupMode) === 'object' && Object.keys(vm.lookupFiltered).length < 1) {
            return true;
        }

        if (vm.section == 'insights' || vm.section == 'team') {
            if (vm.show_lattice_insights) {
                return false;
            }

            return true;
        }

        return false;
    };

    vm.relanding = function () {
        vm.TileTableItems = {};

        if (vm.metadataSegments || QueryRestriction) {
            getExplorerSegments(vm.enrichments);
        }
    };

    vm.filter = function (items, property, value, debug) {
        if (property.indexOf('.') > -1) {
            var propsList = property.split('.');
            var walkObject = function walkObject(obj, j) {
                if (obj && j) {
                    return obj[j];
                }
            };

            for (var i = 0, result = [], item; i < items.length; i++) {
                item = propsList.reduce(walkObject, items[i]);

                if (typeof item != 'undefined' && item == value) {
                    result.push(items[i]);
                }
            }
        } else {
            var result = items.filter(function (item) {
                return item[property] == value;
            });
        }

        if (debug) {
            // console.log('prop:', property, 'value:', value, 'items:', items, 'result:', result);
        }

        return result;
    };

    vm.closeHighlighterButtons = function (index) {
        var index = index || '';

        for (var i in vm.openHighlighter) {
            if (vm.openHighlighter[i].open) {
                vm.openHighlighter[i].open = false;

                if (!index) {
                    if (!$scope.$$phase) {
                        // this is bad but short term hack
                        $scope.$digest(); // this works, but at what cost?! -- this also breaks because of the $digest in filters.component.js document click.  this needs much better solution.
                    }
                }
            }
        }
    };

    vm.setSubcategory = function (subcategory) {
        vm.subcategory = subcategory;
        DataCloudStore.setMetadata('subcategory', subcategory);
    };

    vm.getAttributes = function (category) {
        var attributes = vm.enrichmentsObj[category];
        // console.log('*******************************************');
        // console.log(attributes);
        // console.log('*******************************************');

        var subcategory = DataCloudStore.getMetadata('subcategory');
        var ret = [];
        for (var i = 0; i < attributes.length; i++) {
            if (attributes[i].Subcategory === subcategory) {
                ret.push(attributes[i]);
            }
        }
        return ret;
    };

    vm.subcategoryRenamer = function (string, replacement) {
        if (string) {
            var replacement = replacement || '';

            return string.toLowerCase().replace(/\W+/g, replacement);
        }

        return '';
    };

    vm.checkEmptyCategory = function (category, count, isEnabled) {
        if (vm.category && !vm.categoryCount(vm.category) && count && isEnabled) {
            vm.setCategory(category);
        }
        return false;
    };

    vm.updateStateParams = function () {
        $state.go('.', {
            category: vm.category,
            subcategory: vm.subcategory
        });
    };

    var stopNumbersInterval = function stopNumbersInterval() {
        if (numbersInterval) {
            $interval.cancel(numbersInterval);
            vm.placeholderTotal = null;
        }
    };

    vm.processEnrichments = function (enrichments) {
        if (vm.lookupFiltered !== null) {
            for (var i = 0, _enrichments = []; i < enrichments.length; i++) {
                if (vm.lookupFiltered && vm.lookupFiltered[enrichments[i].ColumnId]) {
                    _enrichments.push(enrichments[i]);
                }
            }
        } else {
            var _enrichments = enrichments;
        }

        for (var i = 0, enrichment; i < _enrichments.length; i++) {
            enrichment = _enrichments[i];

            if (!enrichment) {
                continue;
            }

            if (!vm.enrichmentsObj[enrichment.Category]) {
                vm.enrichmentsObj[enrichment.Category] = [];
            }

            if (enrichment.IsInternal !== true) {
                enrichment.IsInternal = false;
            }

            vm.enrichmentsMap[enrichment.Entity + '.' + enrichment.ColumnId] = vm.enrichments.length;
            vm.enrichmentsObj[enrichment.Category].push(enrichment);
            vm.enrichments.push(enrichment);
        }

        DataCloudStore.setEnrichments(vm.enrichments);

        vm.hasSaved = vm.filter(vm.enrichments, 'IsDirty', true).length;

        var selectedTotal = vm.filter(vm.enrichments, 'IsSelected', true),
            EligibleEnrichments = vm.filter(vm.enrichments, 'IsInternal', false),
            DisabledForSalesTeamTotal = vm.filter(EligibleEnrichments, 'AttributeFlagsMap.CompanyProfile.hidden', true),
            EnabledForSalesTeamTotal = EligibleEnrichments.length - DisabledForSalesTeamTotal.length;

        if (vm.lookupMode) {
            LookupStore.add('count', vm.enrichments.length);
        } else {
            DataCloudStore.setMetadata('generalSelectedTotal', selectedTotal.length);
            DataCloudStore.setMetadata('premiumSelectedTotal', vm.filter(selectedTotal, 'IsPremium', true).length);
            DataCloudStore.setMetadata('enabledForSalesTeamTotal', EnabledForSalesTeamTotal);
        }

        vm.generalSelectedTotal = DataCloudStore.getMetadata('generalSelectedTotal');
        vm.premiumSelectedTotal = DataCloudStore.getMetadata('premiumSelectedTotal');
    };

    vm.generateTree = function (isComplete) {
        var timestamp = new Date().getTime();
        var obj = {};

        vm.enrichments.forEach(function (item, index) {
            var category = item.Category;
            var subcategory = item.Subcategory;

            if (!obj[category]) {
                obj[category] = {};
            }

            if (!obj[category][subcategory]) {
                obj[category][subcategory] = [];
            }

            if (vm.lookupMode && vm.lookupFiltered[item.ColumnId]) {
                item.AttributeValue = vm.lookupFiltered[item.ColumnId];
            }

            item.HighlightState = highlightOptionsInitState(item);
            item.HighlightHidden = item.AttributeFlagsMap && item.AttributeFlagsMap.CompanyProfile && item.AttributeFlagsMap.CompanyProfile.hidden === true ? true : false;
            item.HighlightHighlighted = item.AttributeFlagsMap && item.AttributeFlagsMap.CompanyProfile && item.AttributeFlagsMap.CompanyProfile.highlighted ? item.AttributeFlagsMap.CompanyProfile.highlighted : false;

            if (vm.section == 'wizard.ratingsengine_segment') {
                item.IsRatingsEngineAttribute = ratingsEngineAttributeState(item);
            }

            obj[category][subcategory].push(index);
        });

        var timestamp2 = new Date().getTime();
        // console.info('generateTree();\t\t\t', (timestamp2 - timestamp) + 'ms');

        if (isComplete) {
            vm.categories.forEach(function (category, item) {
                if (obj[category]) {
                    getEnrichmentSubcategories(category, Object.keys(obj[category]));
                }
            });

            if (vm.section === 'wizard.ratingsengine_segment' || vm.section === 'dashboard.rules') {
                var SelectedForRatingsEngine = vm.filter(vm.enrichments, 'IsRatingsEngineAttribute', true);
                DataCloudStore.setMetadata('selectedForRatingsEngine', SelectedForRatingsEngine.length);
                RatingsEngineStore.setValidation('attributes', SelectedForRatingsEngine.length > 0);
            }

            getTopAttributes();
            getHighlightMetadata();

            if (vm.metadataSegments || QueryRestriction) {
                getExplorerSegments(vm.enrichments);
            }
        }
    };

    var getEnrichmentSubcategories = function getEnrichmentSubcategories(category, subcategories) {
        vm._subcategories[category] = subcategories;
        vm.subcategories[category] = subcategories;

        if (subcategories.length <= 1) {
            vm.subcategoriesExclude.push(category);
        }

        vm.filterEmptySubcategories();
    };

    vm.removeFromArray = function (array, item) {
        if (array && item) {
            var index = array.indexOf(item);
            if (index > -1) {
                array.splice(index, 1);
            }
        }
    };

    vm.filterEmptySubcategories = function () {
        if (vm._subcategories[vm.category]) {
            for (var i = 0, newCategories = []; i < vm._subcategories[vm.category].length; i++) {
                var subcategory = vm._subcategories[vm.category][i];

                if (vm.subcategoryCount(vm.category, subcategory) > 0) {
                    newCategories.push(subcategory);
                }
            }

            if (newCategories.length <= 1) {
                addUniqueToArray(vm.subcategoriesExclude, vm.category);
                vm.setSubcategory(newCategories[0]);
                vm.updateStateParams();
            } else {
                if (vm.subcategoriesExclude.indexOf(vm.category)) {
                    vm.setSubcategory('');
                    vm.updateStateParams();
                }

                vm.removeFromArray(vm.subcategoriesExclude, vm.category);
            }

            vm.subcategories[vm.category] = newCategories;
        }
    };

    var addUniqueToArray = function addUniqueToArray(array, item) {
        if (array && item && !array.indexOf(item)) {
            array.push(item);
        }
    };

    var breakOnFirstEncounter = function breakOnFirstEncounter(items, property, value, returnObj) {
        for (var i = 0, item; i < items.length; i++) {
            if (value === null) {
                if (typeof items[i][property] !== 'undefined') {
                    if (returnObj) {
                        return items[i];
                    }

                    return true;
                }
            }

            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                if (_typeof(items[i][property]) === 'object' && items[i][property] !== null) {
                    if (returnObj) {
                        return items[i];
                    }

                    return true;
                }
            }

            if (items[i][property] == value) {
                if (returnObj) {
                    return items[i];
                }

                return true;
            };
        }

        if (returnObj) {
            return null;
        }

        return false;
    };

    var getHighlightMetadata = function getHighlightMetadata() {
        var timestamp = new Date().getTime();
        //console.log(vm.categories);
        vm.categories.forEach(function (category) {
            if (vm.enrichmentsObj && vm.enrichmentsObj[category]) {
                vm.highlightMetadata.categories[category] = {};

                var items = vm.enrichmentsObj[category],
                    disabled = breakOnFirstEncounter(items, 'HighlightHidden', true),
                    enabled = breakOnFirstEncounter(items, 'HighlightHidden', false),
                    dirty = breakOnFirstEncounter(items, 'AttributeFlagsMap', {});

                vm.highlightMetadata.categories[category].enabled = enabled ? 1 : 0;
                vm.highlightMetadata.categories[category].disabled = disabled ? 1 : 0;
                vm.highlightMetadata.categories[category].dirty = dirty ? 1 : 0;

                if (vm.subcategories[category] && vm.subcategories[category].length > 1) {
                    vm.highlightMetadata.categories[category].subcategories = {};

                    vm.subcategories[category].forEach(function (subcategory) {
                        vm.highlightMetadata.categories[category].subcategories[subcategory] = {};

                        var items = vm.filter(vm.enrichmentsObj[category], 'Subcategory', subcategory),
                            disabled = breakOnFirstEncounter(items, 'HighlightHidden', true),
                            enabled = breakOnFirstEncounter(items, 'HighlightHidden', false),
                            dirty = breakOnFirstEncounter(items, 'AttributeFlagsMap', {});

                        vm.highlightMetadata.categories[category].subcategories[subcategory].enabled = enabled ? 1 : 0;
                        vm.highlightMetadata.categories[category].subcategories[subcategory].disabled = disabled ? 1 : 0;
                        vm.highlightMetadata.categories[category].subcategories[subcategory].dirty = dirty ? 1 : 0;
                    });
                }
            }
        });

        var timestamp2 = new Date().getTime();
        // console.info('getHighlightMetadata():\t ' + (timestamp2 - timestamp) + 'ms');
    };

    vm.highlightTypes = {
        enabled: 'Enabled for Sales Team',
        disabled: 'Disabled for Sales Team',
        highlighted: 'Highlight for Sales Team'
    };

    vm.highlightTypesCategory = {
        enabled: vm.highlightTypes.enabled,
        disabled: vm.highlightTypes.disabled
    };

    vm.showHighlighting = function () {
        return vm.section == 'team' || vm.section == 'insights' || vm.section == 'lookup';
    };

    vm.highlightTypesCategoryLabel = function (category, subcategory) {
        var category = category || '',
            subcategory = subcategory || '',
            metadata = {},
            type = 'enabled',
            label = vm.highlightTypesCategory[type];

        if (category) {
            metadata = vm.highlightMetadata.categories[category];
            if (subcategory && vm.highlightMetadata.categories[category].subcategories) {
                metadata = vm.highlightMetadata.categories[category].subcategories[subcategory];
            }
        }

        if (metadata) {
            if (metadata.enabled && metadata.disabled) {
                type = 'dirty';
                label = 'Some Enabled for Sales Team';
            } else if (!metadata.enabled) {
                type = 'disabled';
                label = vm.highlightTypesCategory[type];
            }
        }

        return {
            type: type,
            label: label
        };
    };

    var highlightOptionsInitState = function highlightOptionsInitState(enrichment) {
        var ret = { type: 'enabled', label: '', highlighted: false, enabled: false };

        if (!enrichment.AttributeFlagsMap || !enrichment.AttributeFlagsMap.CompanyProfile) {
            ret.type = 'enabled';
            ret.label = vm.highlightTypes[ret.type];
            ret.enabled = true;

            return ret;
        }

        ret.enabled = !enrichment.AttributeFlagsMap.CompanyProfile.hidden;
        ret.dirty = false;

        if (enrichment.AttributeFlagsMap.CompanyProfile.hidden === true) {
            ret.type = 'disabled';
            ret.enabled = false;
            ret.dirty = true;
        }

        if (enrichment.AttributeFlagsMap.CompanyProfile.hidden === false) {
            ret.type = 'enabled';
            ret.enabled = true;
            ret.dirty = true;
        }

        if (enrichment.AttributeFlagsMap.CompanyProfile.highlighted === true) {
            ret.type = 'highlighted';
            ret.highlighted = true;
            ret.enabled = true;
            ret.dirty = true;
        }

        if (ret.type) {
            ret.label = vm.highlightTypes[ret.type];
        }

        return ret;
    };

    var getRatingsEngineRule = function getRatingsEngineRule(RatingsEngineModels) {
        var data = RatingsEngineModels,
            rule = data && data.rule ? data.rule : {},
            rule = rule || {};
        return rule;
    };

    var ratingsEngineAttributeState = function ratingsEngineAttributeState(item) {
        var rule = getRatingsEngineRule(RatingsEngineModels),
            ratingsEngineAttributes = rule.selectedAttributes || [];

        if (ratingsEngineAttributes.indexOf(item.Entity + '.' + item.ColumnId) >= 0) {
            return true;
        }

        return false;
    };

    vm.getArray = function (number) {
        return new Array(number);
    };

    var getFlags = function getFlags(opts) {
        var deferred = $q.defer();

        DataCloudStore.getFlags(opts).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    var setFlags = function setFlags(opts, flags) {
        var deferred = $q.defer();

        DataCloudService.setFlags(opts, flags).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    vm.setFlags = function (type, enrichment) {
        if (type === enrichment.HighlightState.type) {
            return false;
        }

        var flags = {
            "hidden": true,
            "highlighted": false
        },
            label = vm.highlightTypes[type] || 'unknown type',
            enabled = false,
            opts = {
            fieldName: enrichment.ColumnId
        };

        if (type === 'highlighted') {
            flags.hidden = false;
            flags.highlighted = true;
        } else if (type === 'enabled') {
            flags.hidden = false;
        } else if (type === 'disabled') {
            flags.hidden = true;
            flags.highlighted = false;
        }
        vm.statusMessage(vm.label.saving_alert, { wait: 0 });

        setFlags(opts, flags).then(function () {
            vm.statusMessage(vm.label.saved_alert, { type: 'saved' });
            vm.closeHighlighterButtons();

            enrichment.HighlightState = { type: type, label: label, enabled: !flags.hidden, highlighted: flags.highlighted };
            enrichment.HighlightHidden = flags.hidden;
            enrichment.HighlightHighlighted = flags.highlighted;

            vm.enrichments.find(function (i) {
                return i.ColumnId === enrichment.ColumnId;
            }).AttributeFlagsMap = {
                CompanyProfile: flags
            };
            DataCloudStore.updateEnrichments(vm.enrichments);

            var EligibleEnrichments = vm.filter(vm.enrichments, 'IsInternal', false),
                DisabledForSalesTeamTotal = vm.filter(EligibleEnrichments, 'HighlightHidden', true),
                EnabledForSalesTeamTotal = EligibleEnrichments.length - DisabledForSalesTeamTotal.length;

            DataCloudStore.setMetadata('enabledForSalesTeamTotal', EnabledForSalesTeamTotal);
            getHighlightMetadata();
            vm.TileTableItems = {};
        });
    };

    var setFlagsByCategory = function setFlagsByCategory(opts, flags) {
        var deferred = $q.defer();

        if (opts.subcategoryName) {
            DataCloudService.setFlagsBySubcategory(opts, flags).then(function (result) {
                deferred.resolve(result);
            });
        } else if (opts.categoryName) {
            DataCloudService.setFlagsByCategory(opts, flags).then(function (result) {
                deferred.resolve(result);
            });
        }

        return deferred.promise;
    };

    vm.setFlagsByCategory = function (type, category, subcategory) {
        var opts = {
            categoryName: category,
            subcategoryName: subcategory
        },
            flags = {
            hidden: type === 'enabled' ? false : true
        },
            settings_changed = vm.highlightTypesCategoryLabel(category, subcategory).type !== type;

        if (!settings_changed) {
            return false;
        }

        if (!vm.highlightMetadata.categories[category][type]) {
            var changed = true;
        }

        if (type === 'disabled') {
            flags.highlighted = false;
        }

        vm.statusMessage(vm.label.saving_alert, { wait: 0 });

        setFlagsByCategory(opts, flags).then(function () {
            vm.statusMessage(vm.label.saved_alert, { type: 'saved' });
            vm.closeHighlighterButtons();
            var enrichments = vm.filter(vm.enrichments, 'Category', category);

            if (subcategory) {
                enrichments = vm.filter(enrichments, 'Subcategory', subcategory);
            }

            for (var i in enrichments) {
                var enrichment = enrichments[i],
                    flags = {},
                    label = enrichment.HighlightHighlighted ? enrichment.HighlightState.label : vm.highlightTypes[type],
                    wasHighlighted = enrichment.HighlightHighlighted,
                    _type = type;

                if (!enrichment.AttributeFlagsMap) {
                    enrichment.AttributeFlagsMap = {};
                }
                if (!enrichment.AttributeFlagsMap.CompanyProfile) {
                    enrichment.AttributeFlagsMap.CompanyProfile = {};
                }

                if (type === 'disabled') {
                    label = vm.highlightTypes[type];
                    flags.highlighted = false;
                    flags.hidden = true;
                    enrichment.HighlightHighlighted = false;
                    enrichment.HighlightState.highlighted = false;
                    enrichment.AttributeFlagsMap.CompanyProfile.highlighted = false;
                }

                if (type === 'enabled') {
                    flags.hidden = false;

                    if (wasHighlighted) {
                        _type = 'highlighted';
                    }
                }

                enrichment.AttributeFlagsMap.CompanyProfile.hidden = flags.hidden;
                enrichment.HighlightHidden = flags.hidden;
                enrichment.HighlightState.type = _type;
                enrichment.HighlightState.label = label;
                enrichment.HighlightState.enabled = !flags.hidden;

                flags = {};
            }
            DataCloudStore.updateEnrichments(vm.enrichments);

            var EligibleEnrichments = vm.filter(vm.enrichments, 'IsInternal', false),
                DisabledForSalesTeamTotal = vm.filter(EligibleEnrichments, 'HighlightHidden', true),
                EnabledForSalesTeamTotal = EligibleEnrichments.length - DisabledForSalesTeamTotal.length;

            DataCloudStore.setMetadata('enabledForSalesTeamTotal', EnabledForSalesTeamTotal);
            getHighlightMetadata();
            vm.TileTableItems = {};
        });
    };

    vm.filterLookupFiltered = function (item, type) {
        if (item === undefined || item === null) {
            return item;
        }

        switch (type) {
            case 'percentage':
                var percentage = Math.round(item * 100);
                return percentage !== NaN ? percentage + '%' : '';
            case 'numeric':
                return $filter('number')(parseInt(item, 10));
            case 'currency':
                return '$' + $filter('number')(parseInt(item, 10)); //ben look at this later, use vm.fitler
            case 'date':
                var date = new Date(parseInt(item, 10));
                var year = date.getFullYear().toString();
                var month = (date.getMonth() + 1).toString();
                month = month.length >= 2 ? month : '0' + month;
                var day = date.getDate().toString();
                day = day.length >= 2 ? day : '0' + day;
                return '' + year + month + day;
            case 'uri':
            case 'alpha':
            case 'boolean':
            case 'enum':
            case 'email':
            case 'phone':
            case 'year':
            default:
                return item;
        }

        return item;
    };

    var getTopAttributes = function getTopAttributes(opts) {
        var opts = opts || {},
            category = opts.category;

        DataCloudStore.getAllTopAttributes().then(function (result) {
            var timestamp = new Date().getTime();

            Object.keys(EnrichmentTopAttributes).forEach(function (catKey, catItem) {
                var category = EnrichmentTopAttributes[catKey]['Subcategories'];

                Object.keys(category).forEach(function (subcategory) {
                    var items = category[subcategory];

                    items.forEach(function (item) {

                        var enrichment = vm.enrichments[vm.enrichmentsMap[item.Entity + '.' + item.Attribute]];

                        if (enrichment && enrichment.DisplayName) {
                            var displayName = enrichment.DisplayName;

                            item.DisplayName = displayName;
                        }
                    });
                });
            });

            vm.topAttributes = EnrichmentTopAttributes;

            var timestamp2 = new Date().getTime();
            // console.info('getTopAttributes();\t\t', timestamp2 - timestamp + 'ms');
        });
    };

    function swap(context, i, j) {
        var temp = context[i];
        context[i] = context[j];
        context[j] = temp;
    }

    vm.removeNullsFromArray = function (array) {
        var ret = [];
        array.forEach(function (item, index) {
            if (item) {
                ret.push(item);
            }
        });
        return ret;
    };

    vm.removeEmptyCategories = function (categories) {
        var ret = [];
        categories.forEach(function (category, index) {
            if (vm.categoryCount(category)) {
                ret.push(category);
            }
        });
        return ret;
    };

    vm.processCategories = function () {
        //console.log(EnrichmentTopAttributes);
        vm.categories = Object.keys(EnrichmentTopAttributes).sort();

        if (vm.show_segmentation && vm.section == 'segment.analysis' || vm.section == 'wizard.ratingsengine_segment' || vm.section == 'dashboard.rules') {
            DataCloudStore.topCategories.forEach(function (category, index) {
                if (vm.categories.indexOf(category) >= 0) {
                    swap(vm.categories, vm.categories.indexOf(category), index);
                }
            });
        }

        for (var i in vm.categories) {
            vm.categoryCounts[vm.categories[i]] = null;
        }
    };

    vm.getTileTableItems = function (category, subcategory, segment, limit, debug) {
        var items = [],
            limit = (limit === 0 ? 0 : null) || limit || null;

        if (!vm.TileTableItems[category]) {
            vm.TileTableItems[category] = {};
        }

        if (!vm.TileTableItems[category][subcategory || 'all']) {
            vm.TileTableItems[category][subcategory || 'all'] = {};
        } else {
            return vm.TileTableItems[category][subcategory || 'all'];
        }

        var timestamp = new Date().getTime();

        if (vm.topAttributes[category]) {
            var timestamp_a = new Date().getTime();

            if (!subcategory) {
                //PLS-4922
                Object.keys(vm.topAttributes[category].Subcategories).forEach(function (key, index) {
                    items = items.concat(vm.topAttributes[category].Subcategories[key]);
                });
            } else {
                items = vm.topAttributes[category].Subcategories[subcategory];
            }

            var timestamp_b = new Date().getTime();

            if (items) {
                items.forEach(function (item, itemKey) {
                    var index = vm.enrichmentsMap[item.Entity + '.' + item.Attribute],
                        enrichment = vm.enrichments[index],
                        map = [
                    //'Value',
                    //'AttributeValue',
                    'FundamentalType', 'DisplayName', 'Category', 'Subcategory', 'IsSelected', 'IsPremium', 'IsInternal', 'ImportanceOrdering', 'HighlightHidden', 'HighlightHighlighted', 'SegmentChecked', 'IsRatingsEngineAttribute'];

                    if (enrichment) {
                        if (!vm.lookupMode) {
                            map.forEach(function (key) {
                                item[key] = enrichment[key];
                            });

                            enrichment.Count = item.Count;
                        }
                        item.Hide = false;
                        if (!vm.searchFields(enrichment)) {
                            item.Hide = true;
                        }
                        enrichment.Hide = item.Hide;
                    }
                });
            }
            var timestamp_c = new Date().getTime();
        }

        var timestamp2 = new Date().getTime();

        if (vm.lookupMode || !items || items.length == 0) {
            items = vm.enrichmentsObj[category];

            if (subcategory || vm.isYesNoCategory(category, true)) {
                items = items.filter(function (item) {
                    var isSubcategory = subcategory ? item.Subcategory == subcategory : true,
                        attrValue = vm.lookupFiltered ? vm.lookupFiltered[item.ColumnId] : item.AttributeValue;

                    if (vm.lookupMode && attrValue && isSubcategory) {
                        item.Value = attrValue;
                        if (!vm.metadata.toggle.show.nulls && attrValue == 'No') {
                            return false;
                        } else {
                            return true;
                        }
                    }

                    return isSubcategory;
                });
            }
        }

        var timestamp3 = new Date().getTime();
        var _items = {};

        /**
         * if we aren't showing highlighted items don't segment them even if the UI asks
         */

        if (segment === 'HighlightHighlighted' && !vm.showHighlighting()) {
            segment = '';
        }

        if (segment && items) {
            var segmented = vm.filter(items, segment, true),
                other = vm.filter(items, segment, false);

            _items[segment] = segmented;
        }

        _items['other'] = other || items;
        items = _items;

        vm.TileTableItems[category][subcategory || 'all'] = items;

        var timestamp4 = new Date().getTime(),
            a = timestamp_b - timestamp_a,
            b = timestamp_c - timestamp_b,
            c = timestamp3 - timestamp2,
            d = timestamp4 - timestamp3;

        // console.info(
        //     'getTileTableItems();\t',
        //     '[' + (isNaN(a) ? '' : a + ':') + (isNaN(b) ? '' : b + ':') + c + ':' + d + ']\t '+
        //     (timestamp4 - timestamp) + 'ms\t',
        //     category, '\t',
        //     subcategory, '\t',
        //     items, '\t',
        //     {
        //         'vm.enrichmentsFilter': vm.enrichmentsFilter(), 
        //         'vm.metadata.toggle': vm.metadata.toggle
        //     }
        // );

        return items;
    };

    vm.filterHideTrue = function (item) {
        if (item.Hide === true) {
            return false;
        } else {
            return true;
        }
    };

    vm.generateTileTableLabel = function (items) {
        if (items) {
            if (vm.section == 'segment.analysis') {
                return 'Attribute';
            }

            return 'Top ' + (items.length > 1 ? items.length + ' attributes' : 'attribute');
        }

        return '';
    };

    vm.inCategory = function (enrichment) {
        if (enrichment.DisplayName && !_.size(vm.selected_categories)) {
            // for case where this is used as a | filter in the enrichments ngRepeat on initial state
            return true;
        }

        var selected = _typeof(vm.selected_categories[enrichment.Category]) === 'object';

        return selected;
    };

    vm.selectEnrichment = function (enrichment) {
        vm.saveDisabled = 0;
        vm.selectDisabled = 0;
        var selectedTotal = vm.filter(vm.enrichments, 'IsSelected', true);

        if (enrichment.IsPremium) {
            vm.premiumSelectedTotal = vm.filter(selectedTotal, 'IsPremium', true).length;
            if (vm.premiumSelectedTotal > vm.premiumSelectLimit && enrichment.IsSelected) {
                vm.premiumSelectedTotal = vm.premiumSelectLimit;
                enrichment.IsSelected = false;
                enrichment.IsDirty = false;
                vm.statusMessage(vm.label.premiumTotalSelectError);
                return false;
            }
        }

        vm.generalSelectedTotal = selectedTotal.length;

        if (vm.generalSelectedTotal > vm.generalSelectLimit && enrichment.IsSelected) {
            vm.generalSelectedTotal = vm.generalSelectLimit;
            enrichment.IsSelected = false;
            enrichment.IsDirty = false;
            vm.statusMessage(vm.label.generalTotalSelectError);
            return false;
        }

        if (enrichment.IsSelected) {
            vm.userSelectedCount++;
            vm.statusMessage(vm.label.changed_alert);
        } else {
            vm.userSelectedCount--;

            if (!enrichment.WasDirty) {
                enrichment.WasDirty = true;
                var notselected = vm.filter(vm.enrichments, 'IsSelected', false);
                vm.disabled_count = vm.filter(notselected, 'IsDirty', true).length;
                vm.label.disabled_alert = '<p><strong>You have disabled ' + vm.disabled_count + ' attribute' + (vm.disabled_count > 1 ? 's' : '') + '</strong>. If you are using any of these attributes for real-time scoring, these attributes will no longer be updated in your system.</p>';
                vm.label.disabled_alert += '<p>No changes will be saved until you press the \'Save\' button.</p>';
                vm.statusMessage(vm.label.disabled_alert, { type: 'disabling', wait: 0 });
            }
        }

        if (vm.userSelectedCount < 1) {
            vm.selectDisabled = 1;
        }

        if (!vm.enabledManualSave) {
            vm.saveSelected();
        }
    };

    var status_timer;
    vm.statusMessage = function (message, opts, callback) {
        var opts = opts || {},
            wait = opts.wait || opts.wait === 0 ? opts.wait : 1500,
            type = opts.type || 'alert';

        vm.status_alert.type = type;
        vm.status_alert.message = message;
        vm.status_alert.special = opts.special;
        $timeout.cancel(status_timer);
        vm.status_alert.show = true;

        if (wait) {
            status_timer = $timeout(function () {
                vm.status_alert.show = false;
                vm.status_alert.message = '';
                if (typeof callback === 'function') {
                    callback();
                }
            }, wait);
        }
    };

    vm.closeStatusMessage = function () {
        $timeout.cancel(status_timer);
        vm.status_alert.show = false;
        vm.status_alert.message = '';
    };

    vm.saveSelected = function () {
        var dirtyEnrichments = vm.filter(vm.enrichments, 'IsDirty', true),
            selectedObj = vm.filter(dirtyEnrichments, 'IsSelected', true),
            deselectedObj = vm.filter(dirtyEnrichments, 'IsSelected', false),
            selected = [],
            deselected = [];

        // console.log('saveSelected', dirtyEnrichments, selectedObj, deselectedObj);
        vm.selectDisabled = selectedObj.length ? 0 : 1;

        for (var i in selectedObj) {
            if (selectedObj[i].ColumnId) {
                selected.push(selectedObj[i].ColumnId);
            }
        }

        for (var i in deselectedObj) {
            if (deselectedObj[i].ColumnId) {
                deselected.push(deselectedObj[i].ColumnId);
            }
        }

        var data = {
            selectedAttributes: selected,
            deselectedAttributes: deselected
        };

        vm.saveDisabled = 1;
        vm.hasSaved = 0;

        vm.statusMessage(vm.label.saving_alert, { wait: 0 });

        DataCloudService.setEnrichments(data).then(function (result) {
            if (result.errorCode) {
                vm.statusMessage(vm.label.saved_error, { type: 'error' });
            } else {
                vm.statusMessage(vm.label.saved_alert, { type: 'saved' });
            }
            vm.saveDisabled = 1;

            if (selectedObj.length > 0 || deselectedObj.length > 0) {
                var dirtyObj = vm.filter(vm.enrichments, 'IsDirty', true);

                for (var i in dirtyObj) {
                    dirtyObj[i].IsDirty = false;
                }
            }
        });
    };

    vm.fieldType = function (fieldType) {
        var fieldType = fieldType.replace(/[0-9]+/g, '*');
        var fieldTypes = {
            'default': 'Text/String',
            'NVARCHAR(*)': 'Text/String',
            'FLOAT': 'Number/Float',
            'INT': 'Number/Int',
            'BOOLEAN': 'Boolean'
        };

        return fieldTypes[fieldType] || fieldTypes.default;
    };

    /* jumps you to non-empty category when you filter */
    var gotoNonemptyCategory = function gotoNonemptyCategory() {
        var treeRoot = QueryStore.getAddBucketTreeRoot();

        if (treeRoot) {
            return false;
        }

        var categories = [],
            category = '';

        if (vm.categoryCounts) {
            for (var i in vm.categoryCounts) {
                if (vm.categoryCounts[i] > 0) {
                    categories.push(i);
                }
            }
        }

        if (categories.length <= 1 && !vm.lookupMode) {
            vm.setCategory(categories[0]);
        }
    };

    vm.setCategory = function (category) {
        vm.category = category;
        DataCloudStore.setMetadata('category', category);
    };

    vm.isYesNoCategory = function (category, includeKeywords) {
        var list = ['Website Profile', 'Technology Profile', 'Product Spend Profile'];

        if (includeKeywords) {
            list.push('Website Keywords');
            list.push('Product');
        }

        return list.indexOf(category) >= 0;
    };

    vm.hasSubcategories = function (category) {
        return vm._subcategories[category].length != 1 || vm._subcategories[category][0] != 'Other';
    };

    vm.checkSelectedRatingEngineAttrs = function () {
        return typeof vm.metadata.toggle.show.selected_ratingsengine_attributes === 'undefined' ? false : vm.metadata.toggle.show.selected_ratingsengine_attributes;
    };

    vm.percentage = function (number, total, suffix, limit) {
        var suffix = suffix || '',
            percentage = 0;

        if (number && total) {
            percentage = number / total * 100;

            if (typeof limit != 'undefined') {
                percentage = percentage.toFixed(limit);
            }

            return percentage + suffix;
        }

        return 0;
    };

    var ObjectValues = function ObjectValues(obj) {
        var ar = [];
        if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
            for (var i in obj) {
                ar.push(obj[i]);
            }
        }
        return ar;
    };

    vm.getHighestStat = function (stats) {
        var highest = 0;
        stats.forEach(function (stat) {
            if (stat.Cnt > highest) {
                highest = stat.Cnt;
            }
        });
        return highest;
    };

    vm.makeSegmentsRangeKey = function (enrichment, range, label) {
        var fieldName = enrichment.Attribute || enrichment.ColumnId,
            values = ObjectValues(range),
            key = fieldName + (range ? values.join('') : label);

        return key;
    };

    var getBucketRestrictions = function getBucketRestrictions(tree, arr) {
        tree.forEach(function (branch) {
            if (branch && branch.bucketRestriction) {
                arr.push(branch);
            }

            if (branch && branch.logicalRestriction) {
                getBucketRestrictions(branch.logicalRestriction.restrictions, arr);
            }
        });
    };

    var getExplorerSegments = function getExplorerSegments(enrichments) {

        if (vm.metadataSegment != undefined) {
            var accountRestrictions = vm.metadataSegments.accountRestrictions,
                contactRestrictions = vm.metadataSegments.contactRestrictions;
        } else {
            var queryRestriction = QueryRestriction,
                accountRestrictions = queryRestriction.accountRestrictions,
                contactRestrictions = queryRestriction.contactRestrictions;
        }

        if (vm.addBucketTreeRoot) {
            return;
        }

        accountRestrictions = accountRestrictions ? angular.copy(accountRestrictions.restriction.logicalRestriction.restrictions) : [];

        contactRestrictions = contactRestrictions ? angular.copy(contactRestrictions.restriction.logicalRestriction.restrictions) : [];

        var restrictions = [];

        // FIXME:  Recursively grab all bucketRestrictions - but we might not want this
        // getBucketRestrictions(accountRestrictions, restrictions);
        // getBucketRestrictions(contactRestrictions, restrictions);

        restrictions = [].concat(accountRestrictions, contactRestrictions);

        //console.log('getExplorerSegments', accountRestrictions, contactRestrictions, restrictions);

        // FIXME: this should be recursive... -Lazarus
        for (var i = 0; i < restrictions.length; i++) {
            var restriction = restrictions[i];

            if (!restriction || !restriction.bucketRestriction || !restriction.bucketRestriction.bkt) {
                continue;
            }

            var restriction = restriction.bucketRestriction,
                range = restriction.bkt.Rng,
                label = restriction.bkt.Lbl,
                key = restriction.attr.split(".")[1],
                enrichment = breakOnFirstEncounter(vm.enrichments, 'ColumnId', key, true),
                index = vm.enrichmentsMap[restriction.attr];

            if (index || index === 0) {
                vm.enrichments[index].SegmentChecked = true;
                vm.enrichments[index].SegmentRangesChecked = {};
                vm.segmentAttributeInput[vm.enrichments[index].ColumnId] = true;
                vm.segmentAttributeInputRange[vm.makeSegmentsRangeKey(enrichment, range, label)] = true;
            }
        }
    };

    var textSearch = function textSearch(haystack, needle, case_insensitive) {
        var case_insensitive = case_insensitive === false ? false : true;

        if (case_insensitive) {
            var haystack = haystack.toLowerCase(),
                needle = needle.toLowerCase();
        }

        // .indexOf is faster and more supported than .includes
        return haystack.indexOf(needle) >= 0;
    };

    vm.searchFields = function (enrichment) {
        if (vm.query) {
            if (enrichment.DisplayName && textSearch(enrichment.DisplayName, vm.query)) {
                return true;
            } else if (enrichment.Description && textSearch(enrichment.Description, vm.query)) {
                return true;
            } else if (enrichment.Subcategory && textSearch(enrichment.Subcategory, vm.query)) {
                return true;
            } else {
                return false;
            }
        }

        return true;
    };

    vm.subcategoryCount = function (category, subcategory) {
        var filtered = vm.enrichmentsObj[category];

        vm.hasCategoryCount = 0;

        if (!filtered || filtered.length <= 0) {
            return 0;
        }

        for (var i = 0, result = []; i < filtered.length; i++) {
            var item = filtered[i];
            if (item && vm.searchFields(item)) {
                if (item.Category != category || item.Subcategory != subcategory || vm.lookupMode && !vm.metadata.toggle.show.nulls && item.AttributeValue == "No" && vm.isYesNoCategory(category) || vm.metadata.toggle.show.selected && !item.IsSelected || vm.metadata.toggle.hide.selected && item.IsSelected || vm.metadata.toggle.show.premium && !item.IsPremium || vm.metadata.toggle.hide.premium && item.IsPremium || !vm.metadata.toggle.show.internal && item.IsInternal || vm.metadata.toggle.show.enabled && item.HighlightHidden || vm.metadata.toggle.hide.enabled && !item.HighlightHidden || vm.metadata.toggle.show.highlighted && !item.HighlightHighlighted || vm.metadata.toggle.hide.highlighted && item.HighlightHighlighted || vm.metadata.toggle.show.selected_ratingsengine_attributes && !item.IsRatingsEngineAttribute) {
                    continue;
                }
                result.push(item);
            }
        }

        return result.length;
    };

    vm.categoryCount = function (category) {
        var filtered = vm.enrichmentsObj[category];
        if (!filtered) {
            return 0;
        }

        for (var i = 0, result = []; i < filtered.length; i++) {
            var item = filtered[i];
            if (item && vm.searchFields(item)) {
                if (item.Category != category || vm.lookupMode && !vm.metadata.toggle.show.nulls && item.AttributeValue == "No" && vm.isYesNoCategory(category) || vm.metadata.toggle.show.selected && !item.IsSelected || vm.metadata.toggle.hide.selected && item.IsSelected || vm.metadata.toggle.show.premium && !item.IsPremium || vm.metadata.toggle.hide.premium && item.IsPremium || !vm.metadata.toggle.show.internal && item.IsInternal || vm.metadata.toggle.show.enabled && item.HighlightHidden || vm.metadata.toggle.hide.enabled && !item.HighlightHidden || vm.metadata.toggle.show.highlighted && !item.HighlightHighlighted || vm.metadata.toggle.hide.highlighted && item.HighlightHighlighted || vm.metadata.toggle.show.selected_ratingsengine_attributes && !item.IsRatingsEngineAttribute) {
                    continue;
                }
                result.push(item);
            }
        }
        vm.categoryCounts[item.Category] = result.length;

        if ($stateParams.gotoNonemptyCategory) {
            gotoNonemptyCategory();
        }

        vm.hasCategoryCount = result.length;
        if (vm.lookupMode) {
            lookupSyncNewTotal();
        }
        return result.length;
    };

    var lookupSyncNewTotal = function lookupSyncNewTotal() {

        var categories = vm.highlightMetadata.categories,
            highlightedCategories = [],
            total = 0;

        for (var key in categories) {
            if (categories[key].enabled === 1) {
                highlightedCategories.push(key);
            }
        };

        highlightedCategories.forEach(function (category) {
            for (var key in vm.categoryCounts) {
                if (key === category) {
                    total += vm.categoryCounts[key];
                }
            };
        });

        LookupStore.add('count', total);
    };

    var getSegmentBucketInputs = function getSegmentBucketInputs() {
        var buckets = {},
            metadataSegments = vm.metadataSegments || QueryRestriction;
        if (metadataSegments && metadataSegments.all) {
            metadataSegments.all.forEach(function (item) {
                var bucketId = item.bucketRestriction.lhs.columnLookup.column_name + item.bucketRestriction.range.max;

                buckets[bucketId] = true;
            });
        }
        return buckets;
    };

    vm.segmentAttributeInput = DataCloudStore.getMetadata('segmentAttributeInput') || {};
    vm.selectSegmentAttribute = function (attribute) {
        if (!vm.cube) {
            Notice.warning({
                delay: 1500,
                message: 'Your data is still loading. One moment please.'
            });
        }

        if (!attribute.TopBkt && !vm.inWizard) {
            vm.addFreeTextAttribute(attribute, vm.cube.data[attribute.Entity].Stats[attribute.Attribute]);
            return;
        }

        attribute.SegmentChecked = true;

        var attribute = angular.copy(attribute),
            attributeKey = attribute.Attribute || attribute.FieldName,
            stat = vm.getAttributeStat(attribute) || {},
            attributeRangeKey = stat.Lbl ? vm.makeSegmentsRangeKey(attribute, stat.Rng, stat.Lbl) : '',
            index = vm.enrichmentsMap[attribute.Entity + '.' + attributeKey],
            enrichment = vm.enrichments[index],
            entity = attribute.Entity,
            topBkt = attribute.TopBkt,
            segmentName = $stateParams.segment;

        vm.segmentAttributeInput[attributeKey] = !vm.segmentAttributeInput[attributeKey];
        DataCloudStore.setMetadata('segmentAttributeInput', vm.segmentAttributeInput);

        if (attributeRangeKey) {
            vm.segmentAttributeInputRange[attributeRangeKey] = !vm.segmentAttributeInputRange[attributeRangeKey];
        }

        var addEntity = entity == 'Rating' || entity == 'LatticeAccount' || entity == 'CuratedAccount' ? 'Account' : entity;

        var attributeData = {
            columnName: attributeKey,
            resourceType: entity
        };

        if (!vm.inWizard) {
            attributeData.bkt = angular.copy(topBkt);
        }

        QueryStore.counts.accounts.loading = true;
        QueryStore.counts.contacts.loading = true;
        QueryStore['add' + addEntity + 'Restriction'](attributeData);

        vm.checkSaveButtonState();
    };

    vm.segmentAttributeInputRange = vm.segmentAttributeInputRange || {};
    vm.selectSegmentAttributeRange = function (enrichment, stat, disable) {
        var disable = disable || false,
            attributeKey = enrichment.Attribute || enrichment.ColumnId || enrichment.ColumnId,
            attributeRangeKey = vm.makeSegmentsRangeKey(enrichment, stat.Rng, stat.Lbl),
            fieldName = enrichment.ColumnId || enrichment.ColumnId,
            entity = enrichment.Entity,
            segmentName = $stateParams.segment;

        enrichment.SegmentChecked = true;

        if (disable) {
            return false;
        }
        var bucketToAdd = entity;
        if (entity === 'LatticeAccount' || entity === 'Transaction' || entity === 'Rating' || entity === 'CuratedAccount') {
            bucketToAdd = 'Account';
        }

        vm.segmentAttributeInput[attributeKey] = !vm.segmentAttributeInput[attributeKey];
        vm.segmentAttributeInputRange[attributeRangeKey] = !vm.segmentAttributeInputRange[attributeRangeKey];

        QueryStore.counts.accounts.loading = true;
        QueryStore.counts.contacts.loading = true;
        QueryStore['add' + bucketToAdd + 'Restriction']({
            columnName: attributeKey,
            resourceType: entity,
            bkt: angular.copy(stat)
        });

        vm.TileTableItems = {};

        if (vm.metadataSegments || QueryRestriction) {
            getExplorerSegments(vm.enrichments);
        }

        vm.checkSaveButtonState();
    };

    vm.addFreeTextAttribute = function (enrichment, cube) {
        var count = cube ? cube.Cnt : 0;
        var bkt = { //default bucket for free-text attributes added in My Data or Add step of rules-based rating engine
            'Cmp': 'IS_NOT_NULL',
            'Cnt': count,
            'Id': -1,
            'Lbl': '*',
            'Vals': ['']
        };
        // vm.selectSegmentAttributeRange(enrichment, bkt, (vm.section != 'segment.analysis'));
        vm.selectSegmentAttributeRange(enrichment, bkt, false);
    };

    var getSegmentBucketInputs = function getSegmentBucketInputs() {
        var buckets = {},
            metadataSegments = vm.metadataSegments || QueryRestriction;
        if (metadataSegments && metadataSegments.all) {
            metadataSegments.all.forEach(function (item) {
                var bucketId = item.bucketRestriction.lhs.columnLookup.column_name + item.bucketRestriction.range.max;
                buckets[bucketId] = true;
            });
        }
        return buckets;
    };

    vm.segmentBucketInput = getSegmentBucketInputs();
    vm.selectBucketInput = function (id, bucket) {
        // console.log('Explorer ', id, ' === ',bucket);
        var bucketId = id + bucket,
            range = { min: bucket, max: bucket, is_null_only: false };

        vm.segmentBucketInput[bucketId] = !vm.segmentBucketInput[bucketId];

        QueryStore.setPublicProperty('enableSaveSegmentButton', true);
        //QueryStore.saveSegmentEnabled = true;
        if (vm.segmentBucketInput[bucketId] === true) {
            QueryStore.addAccountRestriction({ columnName: id, range: range });
        } else {
            QueryStore.removeAccountRestriction({ columnName: id, range: range });
        }
    };

    vm.inModel = function () {
        var name = $state.current.name.split('.');
        return name[1] == 'model';
    };

    vm.refineQuery = function () {
        if (vm.inModel()) {
            $state.go('home.model.analysis.explorer.builder');
        } else {
            $state.go('home.segment.explorer.builder');
        }
    };

    vm.checkSaveButtonState = function () {
        var oldVal = QueryStore.getDefaultRestrictions(),
            newAccountVal = JSON.stringify(QueryStore.getAccountRestriction()),
            newContactVal = JSON.stringify(QueryStore.getContactRestriction()),
            newVal = newAccountVal + newContactVal;

        QueryStore.setPublicProperty('enableSaveSegmentButton', oldVal !== newVal);
    };

    vm.selectRatingsEngineAttribute = function (enrichment) {
        var treeRoot = QueryStore.getAddBucketTreeRoot();

        if (treeRoot) {

            var enrichments = vm.topAttributes[enrichment.Category].Subcategories[enrichment.Subcategory],
                attribute = enrichments.filter(function (item) {
                return item.Attribute == enrichment.ColumnId;
            })[0];

            vm.selectSegmentAttribute(attribute);

            RatingsEngineStore.setValidation('add', true);
            vm.statusMessage(vm.label.saved_alert, { type: 'saved' });
        } else {

            vm.statusMessage(vm.label.saving_alert, { wait: 0 });

            var rule = getRatingsEngineRule(RatingsEngineModels);
            var entity = enrichment.Entity;
            var attr = enrichment.ColumnId;
            DataCloudStore.selectRatingsEngineAttributes($stateParams.rating_id, rule.id, [enrichment.Entity + '.' + enrichment.ColumnId]).then(function (response) {
                ExplorerUtils.removeAddAttrFromRule(!enrichment.IsRatingsEngineAttribute, rule, entity, attr);
                enrichment.IsRatingsEngineAttribute = !enrichment.IsRatingsEngineAttribute;

                var SelectedForRatingsEngine = vm.filter(vm.enrichments, 'IsRatingsEngineAttribute', true);

                DataCloudStore.setMetadata('selectedForRatingsEngine', SelectedForRatingsEngine.length);

                if (!SelectedForRatingsEngine.length) {
                    vm.metadata.toggle.show.selected_ratingsengine_attributes = false;
                }

                RatingsEngineStore.setValidation('attributes', true);
                vm.statusMessage(vm.label.saved_alert, { type: 'saved' });
            });
        }
    };

    vm.getAttributeRules = function (attribute, bucket) {
        var getEmptyBuckets = vm.mode == 'dashboardrules';
        var attributes = QueryStore.getDataCloudAttributes(true, getEmptyBuckets); // second parm is getEmptyBuckets

        attributes = attributes.filter(function (item) {
            var restriction = item.bucketRestriction,
                isSameAttribute = restriction.attr == attribute.Entity + '.' + (attribute.Attribute || attribute.ColumnId),
                isSameBucket = true,
                bkt = restriction.bkt,
                ret = isSameAttribute;

            if (bucket && bkt) {
                ret = QueryTreeService.getAttributeRules(restriction, bkt, bucket, isSameAttribute);
            }

            return ret;
        });

        return attributes;
    };

    vm.formatAttributeValue = function (attribute, rules) {
        var label = attribute.TopBkt ? attribute.TopBkt.Lbl : attribute.Value;

        if (!vm.cube || !rules || rules.length == 0) {
            return label ? label : '*';
        }

        var cube = vm.cube.data[attribute.Entity].Stats[attribute.Attribute];
        var cubeMatches = [];
        var cubeLabels = [];
        var matches = [];
        var filtered = rules.filter(function (item) {
            var Lbl = item.bucketRestriction.bkt.Lbl;

            cubeLabels.push(Lbl);
            return Lbl == label;
        });

        if (cube.Bkt) {
            matches = cube.Bkts.List.filter(function (item) {
                if (cubeLabels.indexOf(item.Lbl) >= 0) {
                    cubeMatches.push(item);
                }
                return item.Lbl == label;
            });
        }

        if (filtered.length != rules.length && rules.length > 1) {
            return 'MULTIPLE USES';
        }

        if (filtered.length == 0 && cubeMatches.length == 0 && cubeMatches.length == 0) {
            return 'CUSTOMIZED';
        }

        if (matches.length >= 1 && filtered.length == 0) {
            return 'SELECTED';
        }

        return label;
    };

    vm.formatAttributeRecords = function (type, value) {
        switch (type) {
            case 'MULTIPLE USES':
                return '*';
            case 'CUSTOMIZED':
                return '*';
            case 'SELECTED':
                return "*";
            default:
                return value;
        }
    };

    vm.isSpecialAttributeValue = function (value) {
        var map = ['SELECTED', 'CUSTOMIZED', 'MULTIPLE USES'];
        return map.indexOf(value) >= 0;
    };

    vm.hideLookupResponse = function () {
        return LookupStore.hideLookupResponse(LookupResponse);
    };

    vm.init();
}]).directive('fallbackSrc', function () {
    var fallbackSrc = {
        link: function postLink(scope, iElement, iAttrs) {
            iElement.bind('error', function () {
                angular.element(this).attr("src", iAttrs.fallbackSrc);
                angular.element(this).css({ display: 'initial' }); // removes onerror hiding image
            });
        }
    };

    return fallbackSrc;
}).directive('attributeFeedbackModal', function () {
    return {
        restrict: 'EA',
        templateUrl: '/components/datacloud/explorer/attributefeedback/attributefeedbackmodal.component.html',
        scope: {
            lookupResponse: '=?'
        },
        controller: ['$scope', '$document', '$timeout', '$window', 'LookupStore', 'DataCloudStore', 'BrowserStorageUtility', function ($scope, $document, $timeout, $window, LookupStore, DataCloudStore, BrowserStorageUtility) {
            // test on LETest1503428538807_LPI
            var vm = $scope,
                lookupStore = LookupStore.get('request'),
                $modal = angular.element('attribute-feedback-modal');

            $scope.modal = DataCloudStore.getFeedbackModal();
            $scope.close = function () {
                DataCloudStore.setFeedbackModal(false);
            };

            var clientSession = BrowserStorageUtility.getClientSession();

            $scope.showLookupStore = $scope.modal.context.showLookupStore;
            if ($scope.showLookupStore) {
                $scope.lookupStore = lookupStore;
            }

            $scope.icon = $scope.modal.context.icon;
            $scope.label = $scope.modal.context.label || $scope.modal.context.attribute.DisplayName;
            $scope.value = $scope.modal.context.value;
            $scope.categoryClass = $scope.modal.context.categoryClass;
            $scope.reported = false;

            $scope.report = function () {
                $scope.sendingReport = true;
                var form_fields = $scope.input || {};
                var report = {
                    Attribute: $scope.modal.context.attributeKey || $scope.modal.context.attribute.ColumnId || '',
                    MatchedValue: $scope.value,
                    CorrectValue: form_fields.value || '',
                    Comment: form_fields.comment || '',
                    InputKeys: lookupStore.record,
                    MatchedKeys: {
                        "LDC_Name": $scope.lookupResponse.attributes.LDC_Name,
                        "LDC_Domain": $scope.lookupResponse.attributes.LDC_Domain,
                        "LDC_City": $scope.lookupResponse.attributes.LDC_City,
                        "LDC_State": $scope.lookupResponse.attributes.LDC_State,
                        "LDC_ZipCode": $scope.lookupResponse.attributes.LDC_ZipCode,
                        "LDC_Country": $scope.lookupResponse.attributes.LDC_Country,
                        "LDC_DUNS": $scope.lookupResponse.attributes.LDC_DUNS
                    },
                    MatchLog: $scope.lookupResponse.matchLogs
                };

                $scope.sendingReport = false;
                $scope.reported = true;
                $timeout(function () {
                    $scope.close();
                }, 1000 * 5);
                DataCloudStore.sendFeedback(report, $scope.modal.context.type);
            };

            var setHeight = function setHeight() {
                var height = $(window).height() - 20;
                $modal.css({ maxHeight: height });
                $modal.find('.attribute-feedback-container').css({ maxHeight: height });
            };

            $scope.setHeight = function () {
                // gets called by ng-inits so that the data is there and heights make sense
                setHeight();
            };

            var _handleDocumentResize = _.debounce(handleDocumentResize, 300);
            $(window).on('resize', _handleDocumentResize);

            function handleDocumentResize(evt) {
                setHeight();
            }

            $document.on('click', handleDocumentClick);

            function handleDocumentClick(evt) {
                var target = angular.element(evt.target),
                    clickedModal = target.parents('attribute-feedback-modal').length;

                if (!clickedModal) {
                    $scope.close();
                    $scope.$apply();
                }
            }

            $scope.$on('$destroy', function () {
                $document.off('click', handleDocumentClick);
                $(window).off('resize', _handleDocumentResize);
            });
        }]
    };
}).directive('attributeFeedbackButton', function () {
    return {
        restrict: 'EA',
        templateUrl: '/components/datacloud/explorer/attributefeedback/attributefeedbackbutton.component.html',
        scope: {
            buttonType: '=?',
            attribute: '=',
            attributeKey: '=?',
            value: '=',
            iconImage: '=?',
            iconFont: '=?',
            categoryClass: '=?',
            label: '=?',
            showLookupStore: '=?',
            type: '=?'
        },
        controller: ['$scope', '$stateParams', 'DataCloudStore', function ($scope, $stateParams, DataCloudStore) {
            $scope.buttonType = $scope.buttonType || 'infodot';

            $scope.menuClick = function ($event) {
                $event.stopPropagation();
                $scope.showMenu = !$scope.showMenu;
            };

            $scope.closeMenu = function ($event) {
                $scope.showMenu = false;
            };

            $scope.open = function ($event) {
                $event.stopPropagation();
                $scope.closeMenu($event);
                DataCloudStore.setFeedbackModal(true, {
                    attribute: $scope.attribute,
                    attributeKey: $scope.attributeKey,
                    value: $scope.value,
                    icon: {
                        image: $scope.iconImage || '',
                        font: $scope.iconFont || ''
                    },
                    categoryClass: $scope.categoryClass,
                    label: $scope.label || '',
                    showLookupStore: $scope.showLookupStore,
                    type: $scope.type
                });
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/explorer/explorer.utils.js":
/*!*****************************************************************!*\
  !*** ../common/components/datacloud/explorer/explorer.utils.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module to manipulate the rule object
 */
angular.module('common.datacloud.explorer.utils', []).service('ExplorerUtils', function () {
    var ExplorerUtils = this;
    ExplorerUtils.CONTACT_ENTITY = 'Contact';
    ExplorerUtils.ACCOUNT_ENTITY = 'Account';

    /**
     * Create an empty bucketRestriction with ignored=true
     * @param {*} entity 
     * @param {*} attributeName 
     */
    function getEmptyBucketRestriction(entity, attributeName) {
        var bucketRestriction = {
            bucketRestriction: {
                attr: entity + '.' + attributeName,
                bkt: {},
                ignored: true
            }
        };
        return bucketRestriction;
    }

    /**
     * 
     * @param {*} singleBucket object containing account_restriction and contact_restriction 
     * @param {*} entity 
     * @param {*} attr 
     */
    function addRestrictionToBucket(singleBucket, entity, attr) {

        switch (entity) {
            case ExplorerUtils.CONTACT_ENTITY:
                {
                    singleBucket.contact_restriction.logicalRestriction.restrictions.push(getEmptyBucketRestriction(entity, attr));
                    break;
                }
            default:
                {
                    singleBucket.account_restriction.logicalRestriction.restrictions.push(getEmptyBucketRestriction(entity, attr));
                }
        }
    }

    /**
     * 
     * @param {*} restrictions restrictions contained in the in either account_restriction or contact_restriction
     * @param {*} entityAttr string containing the Entity.AttributeName combined
     */
    function removeFromRestrictions(restrictions, entityAttr) {
        for (var i = 0; i < restrictions.length; i++) {
            if (restrictions[i].bucketRestriction.attr === entityAttr) {
                restrictions.splice(i, 1);
            }
        }
    }

    /**
     * Provied the Entity it takes care of calling the remove method on the appropriate bucket
     * @param {*} bucket 
     * @param {*} entity 
     * @param {*} attr 
     */
    function removeRestrictionFromBucket(bucket, entity, attr) {
        switch (entity) {
            case ExplorerUtils.CONTACT_ENTITY:
                {
                    removeFromRestrictions(bucket.contact_restriction.logicalRestriction.restrictions, entity + '.' + attr);
                    break;
                }
            default:
                {
                    removeFromRestrictions(bucket.account_restriction.logicalRestriction.restrictions, entity + '.' + attr);
                }
        }
    }

    /**
     * For each bucket (A,B, .....) it adds/removes the attribute
     * @param {*} add
     * @param {*} rule Object containing ratingRule.bucketToRuleMap
     * @param {*} entity 
     * @param {*} attr 
     */
    this.removeAddAttrFromRule = function (add, rule, entity, attr) {
        var buckets = rule.ratingRule.bucketToRuleMap;
        var bucketsName = Object.keys(buckets);
        bucketsName.forEach(function (bucket) {
            var bkt = buckets[bucket];
            switch (add) {
                case true:
                    {
                        addRestrictionToBucket(bkt, entity, attr);
                        break;
                    }
                case false:
                    {
                        removeRestrictionFromBucket(bkt, entity, attr);
                        break;
                    }
                default:
                    {
                        console.warn('Add/Remove to the bucket not performed (', bucket, attr, ')');
                    }
            }
        });
    };
});

/***/ }),

/***/ "../common/components/datacloud/explorer/filters/filters.component.js":
/*!****************************************************************************!*\
  !*** ../common/components/datacloud/explorer/filters/filters.component.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('common.datacloud.explorer.filters', []).directive('explorerFilters', function () {
    return {
        restrict: 'EA',
        scope: {
            vm: '='
        },
        templateUrl: '/components/datacloud/explorer/filters/filters.component.html',
        controller: ["$scope", "$stateParams", "$document", "$state", "$timeout", "$interval", "DataCloudStore", "QueryStore", "SegmentStore", "RatingsEngineStore", "BrowserStorageUtility", "FeatureFlagService", "AuthorizationUtility", function controller($scope, $stateParams, $document, $state, $timeout, $interval, DataCloudStore, QueryStore, SegmentStore, RatingsEngineStore, BrowserStorageUtility, FeatureFlagService, AuthorizationUtility) {
            var vm = $scope.vm;

            angular.extend(vm, {
                orders: {
                    attributeLookupMode: ['-Value', 'DisplayName'],
                    attribute: ['-HighlightHighlighted', 'DisplayName'],
                    subcategory: 'toString()',
                    category: 'toString()'
                },
                download_button: {
                    class: 'orange-button select-label',
                    icon: 'fa fa-download',
                    iconclass: 'white-button select-more',
                    iconrotate: false,
                    tooltip: 'Download Enrichments'
                },
                sortPrefix: '+',
                view: 'list',
                queryText: '',
                QueryStore: QueryStore,
                saved: false,
                hasDeleteAccessRights: ['segment.analysis'].indexOf(vm.section) != -1 ? AuthorizationUtility.checkAccessLevel(AuthorizationUtility.excludeExternalUser) : false
            });

            // remove highlighting
            if (!vm.showHighlighting()) {
                vm.orders.attribute = vm.orders.attribute.filter(function (item) {
                    return item != '-HighlightHighlighted' && item != 'HighlightHighlighted';
                });
            }

            var clearFilters = function clearFilters() {
                for (var i in vm.metadata.toggle) {
                    for (var j in vm.metadata.toggle[i]) {
                        vm.metadata.toggle[i][j] = '';
                    }
                }
            };

            vm.init_filters = function () {
                vm.download_button.items = [{
                    href: '/files/latticeinsights/insights/downloadcsv?onlySelectedAttributes=false&Authorization=' + vm.authToken,
                    label: vm.label.button_download,
                    icon: 'fa fa-file-o'
                }, {
                    href: '/files/latticeinsights/insights/downloadcsv?onlySelectedAttributes=true&Authorization=' + vm.authToken,
                    label: vm.label.button_download_selected,
                    icon: 'fa fa-file-o'
                }];

                clearFilters();

                $scope.$watchGroup(['vm.metadata.toggle.hide.highlighted', 'vm.metadata.toggle.hide.selected', 'vm.metadata.toggle.hide.premium', 'vm.metadata.toggle.hide.enabled', 'vm.metadata.toggle.show.nulls', 'vm.metadata.toggle.show.selected', 'vm.metadata.toggle.show.premium', 'vm.metadata.toggle.show.internal', 'vm.metadata.toggle.show.enabled', 'vm.metadata.toggle.show.highlighted', 'vm.metadata.toggle.show.selected_ratingsengine_attributes'], function (newValues, oldValues, scope) {
                    vm.filterEmptySubcategories();
                    vm.TileTableItems = {};
                });

                $scope.$watchGroup(['vm.premiumSelectedTotal', 'vm.generalSelectedTotal'], function (newValues, oldValues, scope) {
                    DataCloudStore.setMetadata('generalSelectedTotal', vm.generalSelectedTotal);
                    DataCloudStore.setMetadata('premiumSelectedTotal', vm.premiumSelectedTotal);
                });

                $scope.$watch('vm.queryText', function (newvalue, oldvalue) {
                    vm.queryInProgress = true;

                    if (vm.queryTimeout) {
                        $timeout.cancel(vm.queryTimeout);
                    }

                    // debounce timeout to speed things up
                    vm.queryTimeout = $timeout(function () {
                        if (!vm.category && newvalue) {
                            vm.setCategory(vm.categories[0]);
                            vm.updateStateParams();
                        }

                        vm.query = vm.queryText;

                        if (vm.section != 'browse') {
                            vm.updateStateParams();
                        }

                        // maybe this will fix the issues where they dont drill down??
                        $timeout(function () {
                            var categories = Object.keys(vm.categoryCounts).filter(function (value, index) {
                                return vm.categoryCounts[value] > 0;
                            });

                            if (vm.category && (categories.indexOf(vm.category) < 0 || categories.length == 1)) {
                                vm.setCategory(categories[0]);
                                vm.filterEmptySubcategories();
                            }

                            vm.queryInProgress = false;
                        }, 100);

                        vm.filterEmptySubcategories();
                        vm.TileTableItems = {};
                    }, 666);
                });

                var find_dropdown_buttons = $interval(dropdown_buttons, 300),
                    find_dropdown_buttons_count = 0;

                function dropdown_buttons() {
                    var buttons = angular.element('.dropdown-container > h2');
                    find_dropdown_buttons_count++;
                    if (buttons.length > 0 || find_dropdown_buttons_count > 5) {
                        $interval.cancel(find_dropdown_buttons);
                    }
                    buttons.click(function (e) {
                        var button = angular.element(this),
                            toggle_on = !button.hasClass('active'),
                            parent = button.closest('.dropdown-container');

                        parent.removeClass('active');
                        buttons.removeClass('selected');
                        buttons.parents().find('.dropdown-container').removeClass('active');
                        buttons.siblings('ul.dropdown').removeClass('open');

                        if (toggle_on) {
                            parent.addClass('active');
                            button.addClass('active');
                            button.siblings('ul.dropdown').addClass('open');
                        }

                        e.stopPropagation();
                    });
                }

                angular.element(document).click(function (event) {
                    var target = angular.element(event.target),
                        el = angular.element('.dropdown-container ul.dropdown, button ul.button-dropdown, .button ul.button-dropdown'),
                        has_parent = target.parents().is('.dropdown-container'),
                        parent = el.parents().find('.dropdown-container'),
                        is_visible = el.is(':visible');

                    if (!has_parent) {
                        vm.closeHighlighterButtons();
                        el.removeClass('open');
                        parent.removeClass('active');
                        el.siblings('.button.active').removeClass('active');
                    }
                    if (is_visible && !has_parent) {
                        $scope.$digest(); //ben -- hrmmm, works for now
                    }
                });

                DataCloudStore.setMetadata('premiumSelectLimit', vm.EnrichmentPremiumSelectMaximum.data && vm.EnrichmentPremiumSelectMaximum.data['HGData_Pivoted_Source'] || 10);
                DataCloudStore.setMetadata('generalSelectLimit', vm.EnrichmentSelectMaximum || 100);
                vm.premiumSelectLimit = DataCloudStore.getMetadata('premiumSelectLimit'); //(vm.EnrichmentPremiumSelectMaximum.data && vm.EnrichmentPremiumSelectMaximum.data['HGData_Pivoted_Source']) || 10;
                vm.generalSelectLimit = DataCloudStore.getMetadata('generalSelectLimit');

                if (vm.show_internal_filter) {
                    /*
                     * this is the default for the internal filter
                     * this also effectivly hides internal attributes when the filter is hidden
                    */
                    vm.metadata.toggle.show.internal = true;
                } else {
                    vm.metadata.toggle.show.internal = false;
                }

                if (vm.section === 'insights') {
                    /* hide disabled for sales team from iframe */
                    vm.metadata.toggle.show.enabled = true;
                } else {
                    vm.metadata.toggle.show.enabled = '';
                }
            };

            vm.hideMessage = function () {
                vm.saved = false;
            };

            vm.isFilterSelected = function () {
                return vm.section !== 'insights' && vm.metadata.toggle.show.enabled || vm.metadata.toggle.show.selected || vm.metadata.toggle.hide.selected || vm.metadata.toggle.show.premium || vm.metadata.toggle.hide.premium || vm.metadata.toggle.hide.enabled || vm.metadata.toggle.show.highlighted || vm.metadata.toggle.hide.highlighted || vm.metadata.toggle.show.nulls || vm.metadata.toggle.show.internal;
            };

            vm.sortOrder = function () {
                var sortPrefix = vm.sortPrefix.replace('+', '');
                if (!vm.category) {
                    return handleFilterOrder(vm.orders.category);
                } else if (vm.subcategories[vm.category] && vm.subcategories[vm.category].length && !vm.subcategory) {
                    return handleFilterOrder(vm.orders.subcategory);
                } else {
                    if (vm.lookupMode && vm.category == 'Technology Profile' || vm.category == 'Website Profile') {
                        return handleFilterOrder(vm.orders.attributeLookupMode);
                    } else {
                        return handleFilterOrder(vm.orders.attribute);
                    }
                }
            };

            var handleFilterOrder = function handleFilterOrder(order, sortPrefix) {
                var sortPrefix = sortPrefix || vm.sortPrefix.replace('+', '');
                if ((typeof order === 'undefined' ? 'undefined' : _typeof(order)) === 'object') {
                    var sortArr = order,
                        retArr = [];

                    sortArr.forEach(function (item, index) {
                        retArr[index] = (item == 'DisplayName' ? sortPrefix : '') + item;
                    });

                    return retArr;
                }
                return sortPrefix + order;
            };

            vm.enrichmentsFilter = function () {
                var filter = {};

                if (vm.metadata.toggle.show.selected && !vm.metadata.toggle.hide.selected) {
                    filter.IsSelected = true;
                }

                if (!vm.metadata.toggle.show.selected && vm.metadata.toggle.hide.selected) {
                    filter.IsSelected = false;
                }

                if (vm.metadata.toggle.show.premium && !vm.metadata.toggle.hide.premium) {
                    filter.IsPremium = true;
                }

                if (!vm.metadata.toggle.show.premium && vm.metadata.toggle.hide.premium) {
                    filter.IsPremium = false;
                }

                if (!vm.metadata.toggle.show.internal) {
                    filter.IsInternal = false;
                }

                if (vm.subcategory) {
                    filter.Subcategory = vm.subcategory;
                }

                if (vm.section == 'team' || vm.section == 'insights') {
                    filter.HighlightHidden = (!vm.metadata.toggle.hide.enabled ? '' : true) || (!vm.metadata.toggle.show.enabled ? '' : false);
                    filter.HighlightHighlighted = (!vm.metadata.toggle.show.highlighted ? '' : true) || (!vm.metadata.toggle.hide.highlighted ? '' : false);
                }

                if (vm.lookupMode && vm.isYesNoCategory(vm.category)) {
                    filter.AttributeValue = !vm.metadata.toggle.show.nulls ? '!' + 'No' : '';
                }

                if (vm.section == 'wizard.ratingsengine_segment') {
                    filter.IsRatingsEngineAttribute = vm.metadata.toggle.show.selected_ratingsengine_attributes ? true : '';
                }

                return filter;
            };

            vm.subcategoryFilter = function (subcategory) {
                if (!vm.enrichments_completed) {
                    return true;
                }
                var category = vm.category,
                    count = vm.subcategoryCount(category, subcategory);

                return count ? true : false;
            };

            vm.goBackToModelRules = function () {
                SegmentStore.sanitizeRuleBuckets(RatingsEngineStore.getRule().rule, true);
                $state.go('home.ratingsengine.dashboard.segment.attributes.rules');
            };

            vm.showAtributeAdmin = function () {
                if (vm.section == 'insight' || vm.section == 'wizard.ratingsengine_segment') {
                    return false;
                }

                return ['segment.analysis'].indexOf(vm.section) != -1 && !vm.inWizard;
            };

            vm.showFileImport = function () {
                var flags = FeatureFlagService.Flags();
                var featureFlags = {};
                featureFlags[flags.VDB_MIGRATION] = false;
                featureFlags[flags.ENABLE_FILE_IMPORT] = true;

                return ['segment.analysis'].indexOf(vm.section) != -1 && !vm.inWizard && AuthorizationUtility.checkAccessLevel(AuthorizationUtility.excludeExternalUser) && AuthorizationUtility.checkFeatureFlags(featureFlags);
            };

            vm.init_filters();
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/explorer/latticeratingcard/latticeratingcard.component.js":
/*!************************************************************************************************!*\
  !*** ../common/components/datacloud/explorer/latticeratingcard/latticeratingcard.component.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.explorer.latticeratingcard', []).directive('explorerLatticeRatingCard', function () {
    return {
        restrict: 'A',
        scope: {
            vm: '='
        },
        templateUrl: '/components/datacloud/explorer/latticeratingcard/latticeratingcard.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "$document", "$timeout", "$interval", "DataCloudStore", function controller($scope, $document, $timeout, $interval, DataCloudStore) {
            var vm = $scope.vm;

            angular.extend(vm, {});

            var getLatticeRatingData = function getLatticeRatingData() {
                if (vm.workingBuckets.length) {
                    var total = 0,
                        lifts = 0,
                        top_lift = 0,
                        data = {
                        total: 0,
                        lifts: 0,
                        ratings: [],
                        slices: []
                    };

                    vm.workingBuckets.forEach(function (bucket) {
                        var bucket_data = {
                            Lbl: bucket.bucket_name,
                            Cnt: bucket.num_leads,
                            Lift: bucket.lift,
                            Classname: bucket.bucket_name.replace('+', '-plus')
                        };
                        data.ratings.push(bucket_data);
                    });

                    data.ratings.forEach(function (item) {
                        total = total + item.Cnt;
                        lifts = lifts + item.Lift;
                        top_lift = item.Lift > top_lift ? item.Lift : top_lift;
                    });
                    data.total = total;
                    data.lifts = lifts;
                    data.slice_size = top_lift.toFixed(1) / 4;
                    data.top_lift = top_lift;
                    for (var i = 0; i < 4; i++) {
                        data.slices.push(i * data.slice_size.toFixed(2));
                    }
                    return data;
                }
            };

            vm.latticeRatings = getLatticeRatingData();
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/explorer/segmentexport/segmentexport.component.js":
/*!****************************************************************************************!*\
  !*** ../common/components/datacloud/explorer/segmentexport/segmentexport.component.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.explorer.export', []).controller('SegmentExportController', ["$scope", "$q", "$state", "$stateParams", "$http", "SegmentService", "SegmentExport", function ($scope, $q, $state, $stateParams, $http, SegmentService, SegmentExport) {
    console.log(SegmentExport);
    var vm = this;
    angular.extend(vm, {
        stateParams: $stateParams,
        segment: $stateParams.segment,
        exportId: $stateParams.exportID,
        segmentExport: SegmentExport,
        showDownloadMessage: false,
        disableDownload: false,
        showErrorMessage: false
    });

    vm.init = function () {
        if (!vm.isExpired()) {
            vm.downloadSegmentExport(); //automatic download
        } else {
            vm.disableDownload = true;
            vm.showErrorMessage = true;
        }
    };

    vm.isExpired = function () {
        var currentTime = Date.now();
        return currentTime > vm.segmentExport.cleanup_by;
    };

    vm.downloadSegmentExport = function () {
        if (vm.exportId && vm.exportId !== null) {
            SegmentService.DownloadExportedSegment(vm.exportId).then(function (result) {
                var contentDisposition = result.headers('Content-Disposition');
                var element = document.createElement("a");
                var fileName = contentDisposition.match(/filename="(.+)"/)[1];
                element.download = fileName;
                var file = new Blob([result.data], { type: 'application/octect-stream' });
                var fileURL = window.URL.createObjectURL(file);
                element.href = fileURL;
                document.body.appendChild(element);
                element.click();
                document.body.removeChild(element);
                vm.showDownloadMessage = true;
            });
        }
    };

    vm.hideDownloadMessage = function () {
        vm.showDownloadMessage = false;
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/datacloud/explorer/subcategorytile/subcategorytile.component.js":
/*!********************************************************************************************!*\
  !*** ../common/components/datacloud/explorer/subcategorytile/subcategorytile.component.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('common.datacloud.explorer.subcategorytile', []).directive('explorerSubcategoryTile', function () {
    return {
        restrict: 'A',
        scope: {
            vm: '=',
            count: '=',
            subcategory: '='
        },
        controllerAs: 'vm',
        templateUrl: '/components/datacloud/explorer/subcategorytile/subcategorytile.component.html',
        controller: ["$scope", "$document", "$timeout", "$interval", "DataCloudStore", function controller($scope, $document, $timeout, $interval, DataCloudStore) {
            var vm = $scope.vm;

            angular.extend(vm, {});

            vm.inSubcategory = function (enrichment) {
                var category = vm.selected_categories[enrichment.Category],
                    subcategories = category && category['subcategories'] ? category['subcategories'] : [],
                    subcategory = enrichment.Subcategory;

                if (enrichment.DisplayName && !subcategories.length) {
                    // for case where this is used as a | filter in the enrichments ngRepeat on initial state
                    return true;
                }

                if (!subcategories.length) {
                    return false;
                }

                var selected = (typeof category === 'undefined' ? 'undefined' : _typeof(category)) === 'object' && subcategories.indexOf(subcategory) > -1;
                return selected;
            };

            vm.subcategoryClick = function (subcategory, $event) {
                var target = angular.element($event.target),
                    currentTarget = angular.element($event.currentTarget);

                if (target.closest("[ng-click]:not(.ignore-ngclick)")[0] !== currentTarget[0]) {
                    // do nothing, user is clicking something with it's own click event
                } else {
                    vm.setSubcategory(vm.subcategory === subcategory ? '' : subcategory);
                    vm.metadata.current = 1;
                    vm.updateStateParams();
                }
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/lookup/lookup.component.js":
/*!*****************************************************************!*\
  !*** ../common/components/datacloud/lookup/lookup.component.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.lookup', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.directives.ngEnterDirective']).controller('LookupController', ["$state", "$stateParams", "LookupStore", "ResourceUtility", "FeatureFlagService", function ($state, $stateParams, LookupStore, ResourceUtility, FeatureFlagService) {
    var vm = this;

    angular.extend(vm, {
        request: LookupStore.get('request'),
        params: LookupStore.get('params'),
        ResourceUtility: ResourceUtility,
        iframeMode: $stateParams.iframe
    });

    vm.cancel = function () {
        $state.go('home.datacloud.datacloud');
    };

    vm.next = function () {
        if (vm.iframeMode) {
            LookupStore.add('Authentication', vm.Authentication);
        }

        LookupStore.add('timestamp', new Date().getTime());
        LookupStore.add('request', vm.request);
        LookupStore.add('params', vm.params);

        if (vm.iframeMode) {
            $state.go('home.insights.iframe');
        } else {
            $state.go('home.datacloud.lookup.tabs');
        }
    };

    vm.parse = function () {
        try {
            var json = JSON.parse(vm.json);
            vm.request.record = json.request.record;
            vm.Authentication = json.Authentication;
        } catch (e) {
            console.log('JSON Parse Error:', e);
            vm.request.record = {};
        }
    };

    vm.validate = function () {
        if (vm.request.record.Website || vm.request.record.CompanyName || vm.request.record.DUNS) {
            vm.requiredMissingField = {};

            if (vm.iframeMode && !vm.Authentication) {
                vm.requiredMissingField.Authentication = true;
            }

            return true;
        }

        vm.requiredMissingField = {
            Website: true,
            CompanyName: true,
            DUNS: true
        };

        if (vm.iframeMode && !vm.Authentication) {
            vm.requiredMissingField.Authentication = true;
        }

        return false;
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/lookup/lookup.index.js":
/*!*************************************************************!*\
  !*** ../common/components/datacloud/lookup/lookup.index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./lookup.component */ "../common/components/datacloud/lookup/lookup.component.js");

__webpack_require__(/*! ./lookup.routes */ "../common/components/datacloud/lookup/lookup.routes.js");

__webpack_require__(/*! ./lookup.service */ "../common/components/datacloud/lookup/lookup.service.js");

/***/ }),

/***/ "../common/components/datacloud/lookup/lookup.routes.js":
/*!**************************************************************!*\
  !*** ../common/components/datacloud/lookup/lookup.routes.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.lookup').config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.datacloud.lookup', {
        url: '/lookup',
        onExit: ['LookupStore', function (LookupStore) {
            LookupStore.reset();
        }],
        redirectTo: 'home.datacloud.lookup.form'
    }).state('home.datacloud.lookup.form', {
        url: '/form',
        params: {
            pageIcon: 'ico-enrichment',
            pageTitle: 'Data Cloud Explorer'
        },
        views: {
            "summary@": {
                controller: 'DataCloudTabsController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/tabs/datacloud/datacloud.component.html'
            },
            "main@": {
                controller: 'LookupController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/lookup/lookup.component.html'
            }
        }
    }).state('home.datacloud.lookup.tabs', {
        url: '/tabs',
        params: {
            pageIcon: 'ico-enrichment',
            pageTitle: 'Data Cloud Explorer'
        },
        onExit: ['DataCloudStore', 'Enrichments', function (DataCloudStore, Enrichments) {
            DataCloudStore.setEnrichments(Enrichments, false);
        }],
        resolve: {
            LookupResponse: ["$q", "LookupService", "LookupStore", "ApiHost", function LookupResponse($q, LookupService, LookupStore, ApiHost) {
                var deferred = $q.defer();

                LookupService.submit(ApiHost).then(function (data) {
                    var current = new Date().getTime();
                    var old = LookupStore.get('timestamp');

                    LookupStore.add('elapsedTime', current - old);
                    LookupStore.add('response', data);

                    deferred.resolve(data);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: 'DataCloudTabsController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/tabs/datacloud/datacloud.component.html'
            },
            "subsummary@": {
                controller: ["LookupResponse", "LookupStore", "BrowserStorageUtility", function controller(LookupResponse, LookupStore, BrowserStorageUtility) {
                    LookupStore.add('count', 0); //Object.keys(LookupResponse.attributes).length;

                    this.store = LookupStore;
                    this.ldc_name = LookupResponse.companyInfo ? LookupResponse.companyInfo.LDC_Name : '';

                    this.hideLookupAttributesCount = LookupStore.hideLookupResponse(LookupResponse);

                    this.elapsedTime = LookupStore.get('elapsedTime');

                    this.isInternalUser = false;
                    if (BrowserStorageUtility.getSessionDocument() != null && BrowserStorageUtility.getSessionDocument().User != null && BrowserStorageUtility.getSessionDocument().User.AccessLevel != null) {
                        var accessLevel = BrowserStorageUtility.getSessionDocument().User.AccessLevel;

                        if (accessLevel == "INTERNAL_USER" || accessLevel == "INTERNAL_ADMIN" || accessLevel == "SUPER_ADMIN") {
                            this.isInternalUser = true;
                        }
                    }
                }],
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/lookup/tabs.component.html'
            }
        },
        redirectTo: 'home.datacloud.lookup.tabs.attr'
    }).state('home.datacloud.lookup.tabs.matching', {
        url: '/matching',
        views: {
            "main@": {
                controller: ["LookupResponse", "LookupStore", function controller(LookupResponse, LookupStore) {
                    var vm = this;

                    angular.extend(vm, {
                        elapsedTime: LookupStore.get('elapsedTime'),
                        response: LookupResponse,
                        matchLogs: LookupStore.syntaxHighlight(LookupResponse.matchLogs)
                    });
                }],
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/lookup/matching.component.html'
            }
        }
    }).state('home.datacloud.lookup.tabs.attr', {
        url: '/attr/:category/:subcategory',
        params: {
            section: 'lookup',
            LoadingText: 'Looking up Company Profile data',
            category: { dynamic: true, value: '' },
            subcategory: { dynamic: true, value: '' }
        },
        views: {
            "main@": {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            }
        }
    });
}]);

/***/ }),

/***/ "../common/components/datacloud/lookup/lookup.service.js":
/*!***************************************************************!*\
  !*** ../common/components/datacloud/lookup/lookup.service.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.lookup').service('LookupStore', ["$sce", "FeatureFlagService", function ($sce, FeatureFlagService) {
    var LookupStore = this;

    this.reset = function () {
        this.count = 0;
        this.timestamp = 0;
        this.params = {
            //shouldSkipLoadingEnrichmentMetadata: true,
            enforceFuzzyMatch: true
        };
        this.response = {};
        this.request = {
            //modelId: '',
            //performEnrichment: true,
            record: {}
        };

        // for Ulysses API when in insights iframe testing mode
        this.Authentication = '';
    };

    this.hideLookupResponse = function (response) {
        return Object.keys(response.companyInfo).length == 1 && 'IsMatched' in response.companyInfo && response.companyInfo.IsMatched == 'false';
    };

    this.setParam = function (property, value) {
        this.params[property] = value;
    };

    this.add = function (type, request) {
        this[type] = request;
    };

    this.get = function (type) {
        return this[type];
    };

    this.syntaxHighlight = function (json) {
        json = json ? json : '';

        if (typeof json != 'string') {
            json = JSON.stringify(json, undefined, 4);
        }

        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

        return $sce.trustAsHtml(json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';

            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }

            return '<span class="' + cls + '">' + match + '</span>';
        }));
    };

    this.reset();
}]).service('LookupService', ["$q", "$http", "LookupStore", function ($q, $http, LookupStore) {
    this.submit = function (ApiHost) {
        var deferred = $q.defer();
        var headers = {
            'Content-Type': 'application/json'
        };

        if (ApiHost == '/ulysses') {
            headers.ErrorDisplayMethod = 'none';
        }

        $http({
            method: 'POST',
            url: ApiHost + '/companyprofiles/',
            params: LookupStore.get('params'),
            data: LookupStore.get('request'),
            headers: headers
        }).success(function (data, status, headers, config) {
            deferred.resolve(data);
        }).error(function (data, status, headers, config) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/picker/picker.component.js":
/*!*****************************************************************!*\
  !*** ../common/components/datacloud/picker/picker.component.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.valuepicker', []).controller('ValuePickerController', ["$state", "$stateParams", "$timeout", "DataCloudStore", "QueryStore", "QueryTreeService", "PickerBuckets", "SegmentStore", "Segment", function ($state, $stateParams, $timeout, DataCloudStore, QueryStore, QueryTreeService, PickerBuckets, SegmentStore, Segment) {
    var vm = this;

    angular.extend(vm, {
        stateParams: $stateParams,
        buckets: PickerBuckets.Bkts.List,
        picker_object: null,
        sortPrefix: '-',
        page: 1,
        row_limit: 15,
        page_size: Math.ceil(15 * 3),
        mode: $stateParams.mode
    });

    vm.init = function () {
        vm.picker_object = QueryTreeService.getPickerObject() || {
            item: null,
            restriction: null
        };

        if (vm.picker_object.item) {
            vm.item = vm.picker_object.item;
            vm.fieldname = vm.item.ColumnId;
            vm.entity = vm.item.Entity;

            if (!vm.item.cube) {
                vm.item.cube = PickerBuckets;
            }
        }

        if (vm.picker_object.restriction) {
            vm.bucketRestriction = vm.picker_object.restriction.bucketRestriction;

            var values = vm.bucketRestriction.bkt.Vals;

            vm.buckets.forEach(function (bucket) {
                if (values.indexOf(bucket.Vals[0]) >= 0) {
                    bucket.checked = true;
                }
            });
        }
    };

    vm.changeBucketState = function (bucket) {
        var restriction = vm.bucketRestriction,
            bucket = angular.copy(bucket),
            vals,
            bkt;

        if (restriction) {
            bkt = restriction.bkt;
            vals = bkt.Vals;
        }

        if (bucket.checked) {
            var entity = vm.item.Entity.toLowerCase();

            if (!bkt || !vals) {
                QueryStore['add' + vm.item.Entity + 'Restriction']({
                    columnName: vm.fieldname,
                    resourceType: vm.entity,
                    bkt: bucket
                });

                var restriction = QueryStore[entity + 'Restriction'].restriction;
                var restrictions = restriction.logicalRestriction.restrictions;

                vm.bucketRestriction = restrictions[restrictions.length - 1].bucketRestriction;
                vm.picker_object.restriction = {
                    "$$hashKey": "object:9999",
                    "bucketRestriction": vm.bucketRestriction,
                    "collapsed": false,
                    "labelGlyph": restrictions.length
                };
                bkt = vm.bucketRestriction.bkt;
                vals = bkt.Vals;
            } else {
                vals.push(bucket.Vals[0]);
            }
        } else {
            vals.splice(vals.indexOf(bucket.Vals[0]), 1);
        }

        if (vals.length == 0) {
            bkt.Cmp = 'IS_NULL';
        } else if (bkt.Cmp == 'NOT_EQUAL' || bkt.Cmp == 'NOT_IN_COLLECTION') {
            bkt.Cmp = vals.length == 1 ? 'NOT_EQUAL' : 'NOT_IN_COLLECTION';
        } else {
            bkt.Cmp = vals.length == 1 ? 'EQUAL' : 'IN_COLLECTION';
        }

        if (vm.controller) {
            vm.updateCounts(vals);
        }

        QueryStore.setPublicProperty('enableSaveSegmentButton', true);
    };

    vm.getBucketLabel = function (bucket) {
        return bucket.labelGlyph;
    };

    vm.updateCounts = function (vals) {
        if ($state.current.name != 'home.ratingsengine.rulesprospects.segment.attributes.rules.picker') {
            QueryStore.setEntitiesProperty('loading', true);

            var segment = {
                'free_form_text_search': "",
                'page_filter': {
                    'num_rows': 10,
                    'row_offset': 0
                }
            };

            segment['account_restriction'] = angular.copy(QueryStore.accountRestriction);
            segment['contact_restriction'] = angular.copy(QueryStore.contactRestriction);

            QueryStore.getEntitiesCounts(segment).then(function (result) {
                QueryStore.setResourceTypeCount('accounts', false, result['Account']);
                QueryStore.setResourceTypeCount('contacts', false, result['Contact']);
            });
        }

        //if (vals && vals.length > 0) {
        vm.controller.updateBucketCount(Segment.name);
        //}
    };

    vm.pushItem = function (item, bucketRestriction, controller) {
        // console.log('pushItem', item, bucketRestriction, controller);
        vm.controller = controller;

        vm.updateCounts();
    };

    vm.go = function (state) {
        $state.go(state);
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/datacloud/picker/picker.index.js":
/*!*************************************************************!*\
  !*** ../common/components/datacloud/picker/picker.index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./picker.component */ "../common/components/datacloud/picker/picker.component.js");

__webpack_require__(/*! ./picker.routes */ "../common/components/datacloud/picker/picker.routes.js");

/***/ }),

/***/ "../common/components/datacloud/picker/picker.routes.js":
/*!**************************************************************!*\
  !*** ../common/components/datacloud/picker/picker.routes.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.valuepicker').config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.segment.explorer.enumpicker', {
        url: '/picker/:entity/:fieldname',
        resolve: {
            PickerBuckets: ['$q', '$stateParams', 'QueryTreeService', 'DataCloudStore', function ($q, $stateParams, QueryTreeService, DataCloudStore) {
                var deferred = $q.defer();
                var entity = $stateParams.entity;
                var fieldname = $stateParams.fieldname;

                QueryTreeService.getPickerCubeData(entity, fieldname).then(function (result) {
                    deferred.resolve(result.data);
                });

                return deferred.promise;
            }],
            Segment: function Segment() {
                return {};
            }
        },
        views: {
            "main@": {
                controller: 'ValuePickerController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/picker/picker.component.html'
            }
        }
    });
}]);

/***/ }),

/***/ "../common/components/datacloud/query/advanced/advanced.component.js":
/*!***************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/advanced.component.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder', ['common.datacloud.query.builder.input', 'common.datacloud.query.builder.tree']).controller('AdvancedQueryCtrl', ["$state", "$stateParams", "$timeout", "$q", "$rootScope", "Cube", "QueryStore", "QueryService", "SegmentStore", "DataCloudStore", "RatingsEngineStore", "RatingEngineModel", "CurrentRatingEngine", function ($state, $stateParams, $timeout, $q, $rootScope, Cube, QueryStore, QueryService, SegmentStore, DataCloudStore, RatingsEngineStore, RatingEngineModel, CurrentRatingEngine) {
    var vm = this,
        CoverageMap;

    angular.extend(this, {
        inModel: $state.current.name.split('.')[1] === 'model',
        inRatingEngine: CurrentRatingEngine !== null,
        cube: Cube,
        history: QueryStore.history,
        restriction: QueryStore.accountRestriction,
        account_restriction: QueryStore.accountRestriction,
        contact_restriction: QueryStore.contactRestriction,
        enrichmentsMap: DataCloudStore.getEnrichmentsMap(),
        droppedItem: null,
        draggedItem: null,
        items: [],
        enrichments: [],
        labelIncrementor: 0,
        bucket: QueryStore.getSelectedBucket(),
        buckets: [],
        bucketsMap: { 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5 },
        bucketLabels: ['A', 'B', 'C', 'D', 'E', 'F'],
        default_bucket: 'A',
        rating_rule: {},
        coverage_map: {},
        rating_id: $stateParams.rating_id,
        ratings: RatingsEngineStore ? RatingsEngineStore.ratings : null,
        treeMode: 'account',
        segment: $stateParams.segment,
        segmentInputTree: [],
        rulesInputTree: [],
        accountRulesTree: [],
        contactRulesTree: [],
        mouseDownTimer: false,
        heights: {}
    });

    vm.init = function () {
        // console.log('[AQB] RatingEngineModel:', RatingEngineModel);
        if ($state.current.name === 'home.ratingsengine.rulesprospects.segment.attributes.rules') {
            vm.mode = 'rules';
        } else if ($state.current.name === 'home.ratingsengine.dashboard.segment.attributes.rules') {
            vm.mode = 'dashboardrules';
        } else {
            vm.mode = 'segment';
        }

        QueryStore.mode = vm.mode;

        if (vm.mode == 'rules' || vm.mode == 'dashboardrules') {
            vm.ratingEngineModel = RatingEngineModel;
            vm.rating_rule = RatingEngineModel.rule.ratingRule;
            vm.rating_buckets = vm.rating_rule.bucketToRuleMap;
            vm.default_bucket = vm.rating_rule.defaultBucketName;

            RatingsEngineStore.setRule(RatingEngineModel);

            vm.initCoverageMap();
            vm.getRatingsAndRecordCounts(RatingEngineModel, CurrentRatingEngine.segment.name);

            QueryStore.setAccountBucketTreeRoot(vm.accountRulesTree[0]);
            QueryStore.setContactBucketTreeRoot(vm.contactRulesTree[0]);
            // console.log('[AQB] CoverageMap:', CoverageMap);
        }

        DataCloudStore.getEnrichments().then(function (enrichments) {
            for (var i = 0, enrichment; i < enrichments.length; i++) {
                enrichment = enrichments[i];

                if (!enrichment) {
                    continue;
                }

                vm.enrichmentsMap[enrichment.Entity + '.' + enrichment.ColumnId] = i;
            }

            vm.enrichments = enrichments;

            DataCloudStore.setEnrichmentsMap(vm.enrichmentsMap);

            $timeout(function () {

                if (vm.mode == 'rules' || vm.mode == 'dashboardrules') {

                    vm.setRulesTree();

                    vm.rulesInputTree = {
                        'collapsed': false,
                        'logicalRestriction': {
                            'operator': 'AND',
                            'restrictions': [vm.accountRulesTree[0], vm.contactRulesTree[0]]
                        }
                    };
                }

                vm.setCurrentSavedTree();

                // console.log('[AQB] Restriction:', angular.copy(vm.restriction));
                // console.log('[AQB] Items:', vm.items);
                // console.log('[AQB] Cube:', vm.cube);
            }, 1);
        });

        QueryStore.setAddBucketTreeRoot(null);

        if (vm.mode == 'segment') {
            vm.segmentInputTree = {
                'logicalRestriction': {
                    'operator': 'AND',
                    'restrictions': [vm.account_restriction.restriction, vm.contact_restriction.restriction]
                }
            };
        }
    };

    vm.initCoverageMap = function (map) {
        var n = map ? 0 : -1;

        vm.buckets = [];

        vm.bucketLabels.forEach(function (bucketName, index) {
            vm.buckets.push({ bucket: bucketName, count: n });
        });

        if (map) {
            var segmentId = Object.keys(map.segmentIdModelRulesCoverageMap)[0];

            vm.coverage_map = map.segmentIdModelRulesCoverageMap[segmentId];

            if (vm.coverage_map) {
                vm.coverage_map.bucketCoverageCounts.forEach(function (bkt) {
                    vm.buckets[vm.bucketsMap[bkt.bucket]].count = bkt.count;
                });
            }
        }

        return map;
    };

    vm.getTree = function () {
        console.log('Get tree');
        switch (vm.mode) {
            case 'segment':
                return [vm.restriction.restriction];
            case 'rules':
                return [vm.generateRulesTree()];
            case 'dashboardrules':
                return [vm.generateRulesTree()];
        }
    };

    vm.getAccountTree = function () {
        return [vm.account_restriction.restriction];
    };

    vm.getContactTree = function () {
        return [vm.contact_restriction.restriction];
    };

    vm.setRulesTree = function () {
        vm.accountRulesTree = [vm.generateRulesTreeForEntity('Account')];
        vm.contactRulesTree = [vm.generateRulesTreeForEntity('Contact')];
        QueryStore.setAccountBucketTreeRoot(vm.accountRulesTree[0]);
        QueryStore.setContactBucketTreeRoot(vm.contactRulesTree[0]);
    };

    vm.getSegmentInputTree = function () {
        if (vm.account_restriction.restriction.logicalRestriction.restrictions.length != 0 && vm.contact_restriction.restriction.logicalRestriction.restrictions.length != 0) {
            return [vm.segmentInputTree];
        } else if (vm.account_restriction.restriction.logicalRestriction.restrictions.length && !vm.contact_restriction.restriction.logicalRestriction.restrictions.length) {
            return vm.getAccountTree();
        } else if (!vm.account_restriction.restriction.logicalRestriction.restrictions.length && vm.contact_restriction.restriction.logicalRestriction.restrictions.length) {
            return vm.getContactTree();
        }
    };

    vm.getRulesInputTree = function () {

        var accountAttrSelected = vm.checkAttributesSelected('account');
        var contactAttrSelected = vm.checkAttributesSelected('contact');

        if (vm.accountRulesTree[0] && vm.contactRulesTree[0]) {
            if (vm.accountRulesTree[0].logicalRestriction.restrictions.length != 0 && vm.contactRulesTree[0].logicalRestriction.restrictions.length != 0 && accountAttrSelected && contactAttrSelected) {

                return [vm.rulesInputTree];
            } else if (vm.accountRulesTree[0].logicalRestriction.restrictions.length && vm.contactRulesTree[0].logicalRestriction.restrictions.length == 0 || accountAttrSelected && !contactAttrSelected) {

                return vm.accountRulesTree;
            } else if (vm.contactRulesTree[0].logicalRestriction.restrictions.length && vm.accountRulesTree[0].logicalRestriction.restrictions.length == 0 || contactAttrSelected && !accountAttrSelected) {

                return vm.contactRulesTree;
            }
        }
    };

    vm.checkAttributesSelected = function (entity) {
        var bucket = vm.buckets[vm.bucketsMap[vm.bucket]];
        var counts = vm.getRuleCount(bucket, true);

        return counts[entity] > 0;
    };

    vm.resetRulesInputTree = function () {
        vm.rulesInputTree = {
            'collapsed': false,
            'logicalRestriction': {
                'operator': 'AND',
                'restrictions': [vm.accountRulesTree[0], vm.contactRulesTree[0]]
            }
        };
    };

    vm.saveRules = function () {
        vm.saved = true;
        RatingsEngineStore.nextSaveRules();
    };

    vm.generateRulesTree = function () {
        var bucketRestrictions = [];

        if (vm.bucket) {
            var bucket = vm.rating_rule.bucketToRuleMap[vm.bucket],
                fromBucket = bucket[vm.treeMode + '_restriction'],
                restrictions = fromBucket.logicalRestriction.restrictions,
                setBuckets = QueryStore.getAllBuckets(restrictions),
                allBuckets = QueryStore.getAllBuckets(restrictions, null, true),
                ids = [],
                rids = [];

            setBuckets.forEach(function (value, index) {
                ids.push(value.bucketRestriction.attr);
            });

            allBuckets.forEach(function (value, index) {
                rids.push(value.bucketRestriction.attr);
            });

            bucketRestrictions.forEach(function (value, index) {
                if (ids.indexOf(value.bucketRestriction.attr) < 0 && rids.indexOf(value.bucketRestriction.attr) < 0) {
                    restrictions.push(value);
                }
            });
        }

        return fromBucket;
    };

    /**
     * TODO: A map with association Entity -> Bucket should be created
     * Look at vm.updateBucketCount where we can use this map as well
     * @param {*} item 
     * @param {*} entity 
     */
    vm.isMatching = function (itemEntity, entity) {
        if (itemEntity == entity) {
            return true;
        } else if (itemEntity === 'PurchaseHistory' && entity === 'Account' || itemEntity === 'Rating' && entity === 'Account') {
            return true;
        } else {
            return false;
        }
    };
    vm.generateRulesTreeForEntity = function (entity) {
        var bucketRestrictions = [];

        if (vm.bucket) {
            var bucket = vm.rating_rule.bucketToRuleMap[vm.bucket],
                fromBucket = bucket[entity.toLowerCase() + '_restriction'],
                restrictions = fromBucket.logicalRestriction.restrictions,
                setBuckets = QueryStore.getAllBuckets(restrictions),
                allBuckets = QueryStore.getAllBuckets(restrictions, null, true),
                ids = [],
                rids = [];

            setBuckets.forEach(function (value, index) {
                ids.push(value.bucketRestriction.attr);
            });

            allBuckets.forEach(function (value, index) {
                rids.push(value.bucketRestriction.attr);
            });

            bucketRestrictions.forEach(function (value, index) {
                if (ids.indexOf(value.bucketRestriction.attr) < 0 && rids.indexOf(value.bucketRestriction.attr) < 0) {
                    restrictions.push(value);
                }
            });
        }

        return fromBucket;
    };

    vm.pushItem = function (item, tree) {
        if (item) {
            var attributeEntity = item.Entity,
                cube = vm.cube[attributeEntity].Stats[item.ColumnId];

            item.cube = cube;
            item.topbkt = tree.bkt;

            vm.items.push(item);
        }
    };

    vm.setCurrentSavedTree = function () {
        QueryStore.currentSavedTree = vm.mode == 'segment' ? angular.copy([vm.segmentInputTree]) : angular.copy([vm.rulesInputTree]);
    };

    vm.getBucketLabel = function (bucket) {
        if (QueryStore.getPublic()['resetLabelIncrementor']) {
            vm.labelIncrementor = 0;
            QueryStore.setPublicProperty('resetLabelIncrementor', false);
        }

        if (bucket && bucket.labelGlyph) {
            return bucket.labelGlyph;
        } else {
            vm.labelIncrementor += 1;
            if (vm.labelIncrementor === 0) {
                vm.labelIncrementor += 1;
            }
            bucket.labelGlyph = vm.labelIncrementor;
            return vm.labelIncrementor;
        }
    };

    vm.saveState = function (noCount) {
        vm.labelIncrementor = 0;

        var current = vm.mode == 'segment' ? angular.copy([vm.segmentInputTree]) : angular.copy([vm.rulesInputTree]),
            old = angular.copy(vm.history[vm.history.length - 1]) || [];

        if (!vm.compareTree(old, current)) {
            vm.history.push(current);

            if (!noCount) {
                vm.updateCount();
            }
        }
    };

    vm.changeDefaultBucket = function (bucket) {
        vm.updateCount();
    };

    vm.clickBucketTile = function (bucket) {

        vm.labelIncrementor = 0;
        vm.bucket = bucket.bucket;

        vm.setSelectedBucket(vm.bucket);
        vm.setRulesTree();
        vm.resetRulesInputTree();
    };

    vm.setSelectedBucket = function (bucket) {
        QueryStore.setSelectedBucket(bucket);
    };

    vm.getRuleCount = function (bkt, entity) {
        return QueryStore.getRuleCount(bkt, vm.rating_rule.bucketToRuleMap, vm.bucketLabels, entity);
    };

    vm.getRatingsAndRecordCounts = function (model, segmentName) {
        var rulesForCounts = vm.getRuleRecordCounts();
        //console.log('getRatingsAndRecordCounts', segmentName, rulesForCounts, model);

        RatingsEngineStore.getCoverageMap(model, segmentName, rulesForCounts).then(function (result) {
            CoverageMap = vm.initCoverageMap(result);

            var buckets = result.segmentIdAndSingleRulesCoverageMap;
            if (buckets) {
                Object.keys(buckets).forEach(function (key) {
                    if (vm.RuleRecordMap[key]) {
                        var label = vm.RuleRecordMap[key].bucketRestriction.attr,
                            type = label.split('.')[0] == 'Contact' ? 'contact' : 'account';

                        vm.RuleRecordMap[key].bucketRestriction.bkt.Cnt = buckets[key][type + 'Count'];
                    }
                });
            }
        });
    };

    vm.clickUndo = function () {
        var lastState;
        while (lastState = vm.history.pop()) {
            if (vm.setState(lastState)) {
                vm.updateCount();

                break;
            }
        }
    };

    vm.setState = function (newState) {
        // console.log('SET', newState);
        // var currentTree = vm.mode == 'rules' ? vm.getRulesInputTree : vm.getSegmentInputTree();
        if (!vm.compareTree(newState, vm.getSegmentInputTree())) {
            vm.labelIncrementor = 0;
            QueryStore['accountRestriction'].restriction = newState[0].logicalRestriction.restrictions[0];
            QueryStore['contactRestriction'].restriction = newState[0].logicalRestriction.restrictions[1];

            vm.account_restriction = {
                restriction: newState[0].logicalRestriction.restrictions[0]
            };

            vm.contact_restriction = {
                restriction: newState[0].logicalRestriction.restrictions[1]
            };

            vm.segmentInputTree.logicalRestriction.restrictions[0] = newState[0].logicalRestriction.restrictions[0];
            vm.segmentInputTree.logicalRestriction.restrictions[1] = newState[0].logicalRestriction.restrictions[1];

            return true;
        }

        return false;
    };

    vm.updateCount = function () {
        QueryStore.setPublicProperty('enableSaveSegmentButton', true);

        if (vm.mode == 'rules' || vm.mode == 'dashboardrules') {
            QueryStore.counts[vm.treeMode + 's'].loading = true;

            var RatingEngineCopy = angular.copy(RatingEngineModel),
                BucketMap = RatingEngineCopy.rule.ratingRule.bucketToRuleMap;

            vm.bucketLabels.forEach(function (bucketName, index) {
                vm.buckets[vm.bucketsMap[bucketName]].count = -1;

                SegmentStore.removeEmptyBuckets([BucketMap[bucketName]['account_restriction']]);
                SegmentStore.removeEmptyBuckets([BucketMap[bucketName]['contact_restriction']]);

                SegmentStore.sanitizeSegmentRestriction([BucketMap[bucketName]['account_restriction']]);
                SegmentStore.sanitizeSegmentRestriction([BucketMap[bucketName]['contact_restriction']]);
            });

            $timeout(function () {
                vm.getRatingsAndRecordCounts(RatingEngineCopy, CurrentRatingEngine.segment.name);
            }, 250);
        } else {
            QueryStore.setEntitiesProperty('loading', true);
            $timeout(function () {
                var segment = {
                    'free_form_text_search': "",
                    'page_filter': {
                        'num_rows': 10,
                        'row_offset': 0
                    }
                };
                vm.labelIncrementor = 0;

                segment['account_restriction'] = angular.copy(QueryStore.accountRestriction);

                segment['contact_restriction'] = angular.copy(QueryStore.contactRestriction);

                QueryStore.getEntitiesCounts(SegmentStore.sanitizeSegment(segment)).then(function (result) {
                    QueryStore.setResourceTypeCount('accounts', false, result['Account']);
                    QueryStore.setResourceTypeCount('contacts', false, result['Contact']);
                });
            }, 250);
        }
    };

    vm.getRuleRecordCounts = function (restrictions) {
        var restrictions = restrictions || vm.getAllBucketRestrictions(),
            segmentId = CurrentRatingEngine.segment.name;

        vm.RuleRecordMap = {};

        restrictions.forEach(function (bucket, index) {
            bucket.bucketRestriction.bkt.Cnt = -1;

            vm.RuleRecordMap[bucket.bucketRestriction.attr + '_' + index] = bucket;
        });

        return RatingsEngineStore.getBucketRuleCounts(angular.copy(restrictions), segmentId);
    };

    vm.getAllBucketRestrictions = function () {
        var RatingEngineCopy = RatingEngineModel,
            BucketMap = RatingEngineCopy.rule.ratingRule.bucketToRuleMap,
            restrictions = [];

        vm.bucketLabels.forEach(function (bucketName, index) {
            var accountRestriction = BucketMap[bucketName]['account_restriction'];
            var accountLogical = { logicalRestriction: { operator: 'AND', restrictions: [] } };
            if (accountRestriction && accountRestriction != null) {
                accountLogical = BucketMap[bucketName]['account_restriction'].logicalRestriction;
            } else {
                accountLogical = { operator: 'AND', restrictions: [] };
                BucketMap[bucketName]['account_restriction'] = { logicalRestriction: accountLogical };
            }

            var contactRestriction = BucketMap[bucketName]['contact_restriction'];
            var contactLogical = { logicalRestriction: { operator: 'AND', restrictions: [] } };
            if (contactRestriction && contactRestriction != null) {
                contactLogical = BucketMap[bucketName]['contact_restriction'].logicalRestriction;
            } else {
                contactLogical = { operator: 'AND', restrictions: [] };
                BucketMap[bucketName]['contact_restriction'] = { logicalRestriction: contactLogical };
            }

            QueryStore.getAllBuckets(accountLogical.restrictions, restrictions);
            QueryStore.getAllBuckets(contactLogical.restrictions, restrictions);
        });

        return restrictions;
    };

    vm.saveSegment = function () {
        var segment = QueryStore.getSegment(),
            restriction = QueryStore.getAccountRestriction();

        vm.labelIncrementor = 0;
        vm.saving = true;

        SegmentStore.CreateOrUpdateSegment(segment, restriction).then(function (result) {
            vm.labelIncrementor = 0;
            vm.saving = false;
            vm.updateCount();
            vm.setCurrentSavedTree();
        });
    };

    vm.compareTree = function (old, current) {
        // remove AQB properties like labelGlyph/collapse
        SegmentStore.sanitizeSegmentRestriction(old);
        SegmentStore.sanitizeSegmentRestriction(angular.copy(current));

        return JSON.stringify(old) === JSON.stringify(current);
    };

    vm.checkDisableSave = function () {
        // FIXME: this stuff is disabled for now
        if (!QueryStore.currentSavedTree || !vm.tree) {
            return true;
        }

        var old = angular.copy(QueryStore.currentSavedTree),
            current = angular.copy(vm.tree);

        return vm.compareTree(old, current);
    };

    vm.goAttributes = function () {
        if (vm.mode == 'rules') {
            var state = 'home.ratingsengine.rulesprospects.segment.attributes.add';
        } else if (vm.mode == 'dashboardrules') {
            var state = 'home.ratingsengine.dashboard.segment.attributes.add';
        } else {
            var state = vm.inModel ? 'home.model.analysis.explorer.attributes' : 'home.segment.explorer.attributes';
        }

        $state.go(state, {
            segment: $stateParams.segment
        });
    };

    vm.mouseUp = function (event) {
        var dragged = vm.draggedItem,
            dropped = vm.droppedItem;

        if (dragged && (!dropped || dropped && dropped.uniqueId !== dragged.uniqueId)) {
            vm.droppedItem = vm;

            if (dropped) {
                this.saveState();
                vm.dropMoveItem(dragged, dropped);
            }
        }

        $timeout.cancel(vm.mouseDownTimer);
        vm.mouseDownTimer = false;

        vm.draggedItem = null;
        vm.droppedItem = null;

        if (vm.draggedClone) {
            vm.draggedClone.remove();
        }

        delete vm.droppedItemAppend;
        delete vm.draggedClone;
    };

    vm.dropMoveItem = function (dragged, dropped, endMove) {
        var items = dropped.parent ? dropped.parent.logicalRestriction.restrictions : dropped.tree.logicalRestriction.restrictions;

        if (dropped.tree.logicalRestriction || dropped.parent.logicalRestriction) {
            var draggedParent = dragged.parent.logicalRestriction.restrictions,
                droppedParent = dropped.parent ? dropped.parent.logicalRestriction.restrictions : [],
                draggedIndex = draggedParent.indexOf(dragged.tree),
                droppedIndex = droppedParent.indexOf(dropped.tree),
                draggedItem = angular.copy(dragged.tree);

            if (dropped.tree.logicalRestriction) {
                var restrictions = dropped.tree.logicalRestriction.restrictions;

                if (vm.droppedItemAppend) {
                    restrictions.push(draggedItem);
                } else {
                    restrictions.splice(0, 0, draggedItem);
                }
            } else {
                var inc = vm.droppedItemAppend ? 1 : 0;

                droppedParent.splice(droppedIndex + inc, 0, draggedItem);
            }

            draggedParent.splice(draggedParent.indexOf(dragged.tree), 1);
        }
    };

    vm.clickTreeMode = function (value) {
        vm.treeMode = value;

        vm.restriction = QueryStore[value + 'Restriction'];
        vm.tree = vm.getTree();

        vm.setCurrentSavedTree();
    };

    vm.categoryClass = function (category) {
        var category = 'category-' + category.toLowerCase().replace(/\s/g, "-");
        return category;
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/datacloud/query/advanced/anvanced.index.js":
/*!***********************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/anvanced.index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./advanced.component */ "../common/components/datacloud/query/advanced/advanced.component.js");

__webpack_require__(/*! ./input/input.index */ "../common/components/datacloud/query/advanced/input/input.index.js");

__webpack_require__(/*! ./tree/tree.index */ "../common/components/datacloud/query/advanced/tree/tree.index.js");

/***/ }),

/***/ "../common/components/datacloud/query/advanced/input/input.component.js":
/*!******************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/input/input.component.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.input', []).directive('queryInputDirective', function () {
    return {
        restrict: 'AE',
        scope: {
            root: '=',
            tree: '='
        },
        templateUrl: '/components/datacloud/query/advanced/input/input.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "DataCloudStore", function controller($scope, DataCloudStore) {
            var vm = this;

            angular.extend(vm, {
                root: $scope.root,
                tree: $scope.tree,
                items: $scope.root.items,
                enrichments: [],
                enrichmentsMap: DataCloudStore.getEnrichmentsMap()
            });

            vm.init = function (type, value) {
                DataCloudStore.getEnrichments().then(function (enrichments) {
                    vm.enrichments = enrichments;

                    if (vm.tree.bucketRestriction) {
                        vm.item = vm.enrichments[vm.enrichmentsMap[vm.tree.bucketRestriction.attr]];
                    }
                });
            };

            vm.init();
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/input/input.index.js":
/*!**************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/input/input.index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./input.component */ "../common/components/datacloud/query/advanced/input/input.component.js");

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/edit/date-range/date-range.component.js":
/*!**************************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/edit/date-range/date-range.component.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * config = 
 * {
        from: { name: 'from', initial: undefined, position: 0, type: 'Time', visible: true },
        to: { name: 'to', initial: undefined, position: 1, type: 'Time', visible: false }
    };
    'type' can be a subtype or a basic type like Boolean, Numerical ecc.
 */
angular.module('common.datacloud.query.builder.tree.edit.transaction.edit.date.range', ['angularMoment']).directive('dateRangeDirective', function () {
    return {
        restrict: 'E',
        scope: {
            vm: '=',
            form: '=',
            type: '@',
            bucketrestriction: '=',
            config: '@',
            showmessage: '=',
            showfrom: '=',
            showto: '=',
            changed: '&',
            fromlabel: '@',
            tolabel: '@',
            showinline: '@',
            startplaceholder: '@',
            endplaceholder: '@',
            hidepristineerror: '@'
        },
        templateUrl: '/components/datacloud/query/advanced/tree/edit/date-range/date-range.component.html',
        controller: ["$scope", "$element", "$timeout", "moment", function controller($scope, $element, $timeout, moment) {

            var DATE_FORMAT = 'YYYY-MM-DD';
            var fromPicker;
            var toPicker;

            function getConfigField(position) {
                var values = JSON.parse($scope.config);
                var config = values[Object.keys(values)[position]];
                return config;
            }

            $scope.getConfig = function (position) {
                var values = JSON.parse($scope.config);
                var config = values[Object.keys(values)[position]];
                return config;
            };

            $scope.vm.resetDatePicker = function () {
                var from = document.getElementById($scope.getFromDateId());
                if (from) {
                    $scope.fromDate = undefined;
                    from.value = '';
                    fromPicker.setDate('', false);
                }
                var to = document.getElementById($scope.getToDateId());
                if (to) {
                    $scope.toDate = undefined;
                    to.value = '';
                    toPicker.setDate('', false);
                }
            };

            function isDateValid(momentDate, otherPosition) {
                switch (otherPosition) {
                    case 0:
                        {
                            if (getConfigField(0).visible) {
                                if ($scope.fromDate) {
                                    var momentFrom = moment($scope.fromDate).format(DATE_FORMAT);
                                    var valid = moment(momentFrom).isSameOrBefore(momentDate);
                                    // console.log('Valid ==> ', valid);
                                    return valid;
                                } else {
                                    return false;
                                }
                            } else {
                                return true;
                            }
                        }
                    case 1:
                        {
                            if (getConfigField(1).visible) {
                                if ($scope.toDate) {
                                    var momentTo = moment($scope.toDate).format(DATE_FORMAT);
                                    var valid = moment(momentDate).isSameOrBefore(momentTo);
                                    // console.log('Valid ==> ', valid);
                                    return valid;
                                } else {
                                    return false;
                                }
                            } else {
                                return true;
                            }
                        }
                    default:
                        return false;
                }
            }

            $scope.validateDates = function () {

                var fromConf = getConfigField(0);
                var toConf = getConfigField(1);

                if (fromConf.visible == true && toConf.visible && toConf.visible == true) {
                    if (!$scope.fromDate || !$scope.toDate) {
                        $scope.form[fromConf.name].$setValidity('datefrom', false);
                        $scope.form[toConf.name].$setValidity('dateto', false);
                        return;
                    }
                    var momentFrom = moment($scope.fromDate).format(DATE_FORMAT);
                    var momentTo = moment($scope.toDate).format(DATE_FORMAT);
                    if (moment(momentFrom).isSame(momentTo)) {
                        $scope.form[fromConf.name].$setValidity('datefrom', false);
                        $scope.form[toConf.name].$setValidity('dateto', false);
                    } else {
                        var valid = moment(momentFrom).isBefore(momentTo);
                        // console.log('valid', valid);
                        // console.time(fromConf.name);
                        $scope.form[fromConf.name].$setValidity('datefrom', valid);
                        $scope.form[toConf.name].$setValidity('dateto', valid);
                    }
                } else {
                    switch (fromConf.visible) {
                        case true:
                            {
                                if ($scope.fromDate) {
                                    $scope.form[fromConf.name].$setValidity('datefrom', true);
                                } else {
                                    $scope.form[fromConf.name].$setValidity('datefrom', false);
                                }
                                return;
                            }
                    }
                    switch (toConf.visible) {
                        case true:
                            {
                                if ($scope.toDate) {
                                    $scope.form[toConf.name].$setValidity('dateto', true);
                                } else {
                                    $scope.form[toConf.name].$setValidity('dateto', false);
                                }
                                return;
                            }
                    }
                }

                setTimeout(function () {
                    $scope.$apply();
                }, 0);
            };

            function initDates() {
                var fromDate = getConfigField(0).initial;
                if (fromDate != undefined) {
                    $scope.fromDate = moment(getConfigField(0).initial).format(DATE_FORMAT);
                }
                var toDate = getConfigField(1).initial;
                if (toDate != undefined) {
                    $scope.toDate = moment(getConfigField(1).initial).format(DATE_FORMAT);
                }
            }

            function initDatePicker() {
                var fromConf = getConfigField(0);
                if (fromConf.visible && fromConf.visible == true) {
                    var from = document.getElementById($scope.getFromDateId());

                    if (from != null) {
                        // var triggerFrom = document.getElementById($scope.getFromDateTriggerId());
                        fromPicker = new Pikaday({
                            field: from,
                            format: DATE_FORMAT,
                            onSelect: function onSelect(date) {
                                var val = moment(date).format(DATE_FORMAT);
                                var valid = isDateValid(val, 1);
                                $scope.fromDate = val;
                                $scope.validateDates();
                                // readDate(1);
                                if (valid) {
                                    $scope.changed({ type: 'Time', position: 0, value: val });
                                    if ($scope.toDate !== undefined) {
                                        $scope.changed({ type: 'Time', position: 1, value: $scope.toDate });
                                    }
                                }
                            }

                        });
                    }
                }
                var toConf = getConfigField(1);
                if (toConf.visible && toConf.visible == true) {
                    var to = document.getElementById($scope.getToDateId());
                    if (to != null) {
                        // var triggerTo = document.getElementById($scope.getToDateTriggerId());
                        toPicker = new Pikaday({
                            field: to,
                            format: DATE_FORMAT,
                            onSelect: function onSelect(date) {
                                var val = moment(date).format(DATE_FORMAT);
                                var valid = isDateValid(val, 0);
                                $scope.toDate = val;
                                $scope.validateDates();
                                // readDate(0);
                                if (valid) {
                                    $scope.changed({ type: 'Time', position: 1, value: val });
                                    if ($scope.fromDate !== undefined) {
                                        $scope.changed({ type: 'Time', position: 0, value: $scope.fromDate });
                                    }
                                }
                            }
                        });
                    }
                }

                if (getConfigField(0).visible && getConfigField(0).visible == true || getConfigField(1).visible && getConfigField(1).visible == true) {
                    initDates();
                }
                $scope.validateDates();
            }

            $scope.init = function () {
                $timeout(initDatePicker, 0);
            };

            /**
            * Get the name of the input field
            * @param {*} position 
            */
            $scope.getName = function (position) {
                var ret = getConfigField(position).name;
                return ret;
            };

            $scope.getFromDateId = function () {
                var id = $scope.bucketrestriction.attr;
                return id + '.txn_from';
            };
            $scope.getFromDateTriggerId = function () {
                var id = $scope.bucketrestriction.attr;
                return id + '.txn_from_trigger';
            };

            $scope.getToDateId = function () {
                var id = $scope.bucketrestriction.attr;
                return id + '.txn_to';
            };

            $scope.getToDateTriggerId = function () {
                var id = $scope.bucketrestriction.attr;
                return id + '.txn_to_trigger';
            };

            $scope.openPicker = function (position) {
                switch (position) {
                    case 0:
                        {
                            fromPicker.show();
                            break;
                        }
                    case 1:
                        {
                            toPicker.show();
                            break;
                        }
                }
            };

            $scope.getErrorMsg = function () {
                if (getConfigField(0).visible == true && getConfigField(1).visible == true) {
                    return 'Enter a valid range';
                } else {
                    return 'Enter a valid date';
                }
            };

            $scope.show = function (position) {
                var visible = getConfigField(position).visible;
                return visible;
            };

            $scope.showErrorMessage = function (position) {
                switch (position) {
                    case 0:
                        {
                            var fromConf = getConfigField(0);
                            // console.timeEnd(fromConf.name);
                            if (fromConf.visible === true) {
                                return $scope.form[fromConf.name].$error.datefrom && ($scope.hidepristineerror ? !$scope.form[fromConf.name].$pristine : true);
                                // myForm.pw.$error.one
                            } else {
                                return false;
                            }
                        }
                    case 1:
                        {
                            var toConf = getConfigField(1);
                            if (toConf.visible === true) {
                                return $scope.form[toConf.name].$error.dateto && ($scope.hidepristineerror ? !$scope.form[toConf.name].$pristine : true);
                                // myForm.pw.$error.one
                            } else {
                                return false;
                            }
                        }

                    default:
                        return false;
                }
            };

            $scope.init();
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/edit/edit.index.js":
/*!*****************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/edit/edit.index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./date-range/date-range.component */ "../common/components/datacloud/query/advanced/tree/edit/date-range/date-range.component.js");

__webpack_require__(/*! ./numerical-range/numerical-range.component */ "../common/components/datacloud/query/advanced/tree/edit/numerical-range/numerical-range.component.js");

__webpack_require__(/*! ./tree-item-edit.component */ "../common/components/datacloud/query/advanced/tree/edit/tree-item-edit.component.js");

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/edit/numerical-range/numerical-range.component.js":
/*!************************************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/edit/numerical-range/numerical-range.component.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * config = 
 * {
        from: { name: 'from', val: undefined, position: 0, type: 'Qty' },
        to: { name: 'to', val: undefined, position: 1, type: 'Qty' }
    };
    'type' can be a subtype or a basic type like Boolean, Numerical ecc.
 */
angular.module('common.datacloud.query.builder.tree.edit.transaction.edit.numerical.range', []).directive('numericalRangeDirective', function () {
    return {
        restrict: 'E',
        scope: {
            vm: '=',
            form: '=',
            type: '@',
            bucketrestriction: '=',
            config: '@',
            mainconfig: '@?',
            showmessage: '=',
            showfrom: '=',
            showto: '=',
            changed: '&',
            fromlabel: '@',
            tolabel: '@',
            showtolabel: '@?',
            invalidcallback: '@?',
            fromdisabled: "=?",
            todisabled: "=?",
            initialvalidation: '@?'
        },

        templateUrl: '/components/datacloud/query/advanced/tree/edit/numerical-range/numerical-range.component.html',
        controller: ["$scope", "$element", function controller($scope, $element) {

            function getConfigField(position) {
                var values = JSON.parse($scope.config);
                var config = values[Object.keys(values)[position]];
                return config;
            }

            function validateMainConfig() {
                $scope.conf = {};
                if ($scope.mainconfig) {
                    var tmp = JSON.parse($scope.mainconfig);
                    $scope.conf.debounce = tmp.debounce ? tmp.debounce : 500;
                } else {
                    $scope.conf.debounce = 500;
                }
            }

            $scope.init = function () {
                validateMainConfig();
                var conf = $scope.config;
                if ($scope.initialvalidation === undefined) {
                    $scope.initialvalidation = true;
                } else {
                    $scope.initialvalidation = !!$scope.initialvalidation;
                }
                if ($scope.fromdisabled === undefined) {
                    $scope.fromdisabled = false;
                } else {
                    $scope.fromdisabled = !!$scope.fromdisabled;
                }
                if ($scope.todisabled === undefined) {
                    $scope.todisabled = false;
                } else {
                    $scope.todisabled = !!$scope.todisabled;
                }

                $scope.values = JSON.parse($scope.config);
            };

            /**
             * Return the min value from the model.
             * If only one field is visible is the return value is ''
             * @param {*} position 
             */
            $scope.getMinVal = function (position) {
                var conf = getConfigField(position);

                if (!$scope.showFrom() || !$scope.showTo()) {
                    return conf.min != undefined ? conf.min : '';
                }

                switch (conf.position) {
                    case 0:
                        {
                            return conf.min != undefined ? conf.min : '';
                        }
                    case 1:
                        {
                            var fromVal = $scope.values.from.value;
                            if (fromVal) {
                                return fromVal + 1;
                            } else {
                                return conf.min != undefined ? conf.min : '';
                            }
                        }
                    default:
                        {
                            return conf.min != undefined ? conf.min : '';
                        }
                }
            };

            /**
             * Return Max value from the model
             * If only one field is visible is the return value is ''
             * @param {*} position 
             */
            $scope.getMaxVal = function (position) {

                var conf = getConfigField(position);

                if (!$scope.showFrom() || !$scope.showTo()) {
                    return conf.max != undefined ? conf.max : '';
                }

                switch (conf.position) {
                    case 0:
                        {
                            var toVal = $scope.values.to.value;
                            if (toVal) {
                                return toVal - 1;
                            } else {
                                return conf.max != undefined ? conf.max : '';
                            }
                        }
                    case 1:
                        {
                            return conf.max != undefined ? conf.max : '';
                        }
                    default:
                        {
                            return conf.max != undefined ? conf.max : '';
                        }
                }
            };

            /**
             * Get the name of the input field
             * @param {*} position 
             */
            $scope.getName = function (position) {
                var ret = getConfigField(position).name;
                return ret;
            };

            /** 
             * Return if from input lable has to be visible
            */
            $scope.showFromLabel = function () {
                if ($scope.fromlabel) {
                    return true;
                } else {
                    return false;
                }
            };

            /**
             * If 'from' input is visible
             */
            $scope.showFrom = function () {
                return $scope.showfrom;
            };

            /** 
             * If label of to field has to be shown
            */
            $scope.showToLabel = function () {
                if ($scope.tolabel) {
                    return true;
                } else {
                    return false;
                }
            };

            /** 
             * If 'to' input is visible
            */
            $scope.showTo = function () {
                return $scope.showto;
            };

            /**
             * Based on the position and if the field is valid
             * it changes the other input min or max
             * @param {*} position 
             */
            $scope.changeValue = function (position) {
                var conf = getConfigField(position);
                if ($scope.isValValid(position) || $scope.invalidcallback && !!$scope.invalidcallback == true) {
                    switch (position) {
                        case 0:
                            {
                                var value = $scope.values.from.value;
                                $scope.changed({ type: conf.type, position: position, value: value });
                                var toInput = $element[0].querySelector('input[name="' + getConfigField(1).name + '"]');
                                if (toInput) {
                                    toInput.min = Number(Number(value) + 1);
                                }
                                break;
                            }
                        case 1:
                            {
                                var value = $scope.values.to.value;
                                $scope.changed({ type: conf.type, position: position, value: value });
                                var fromInput = $element[0].querySelector('input[name="' + getConfigField(0).name + '"]');
                                if (fromInput) {
                                    fromInput.max = Number(Number(value) - 1);
                                }
                                break;
                            }
                    }
                }
            };

            /**
             * Check is a input field containes a valid value
             * @param {*} position 
             */
            $scope.isValValid = function (position) {
                var conf = getConfigField(position);
                var valid = true;
                if ($scope.form[conf.name]) {
                    if ($scope.form[conf.name].$dirty === true || $scope.form[conf.name].$dirty === false && $scope.initialvalidation === true) {
                        valid = $scope.form[conf.name].$valid;
                    }
                }
                return valid;
            };

            $scope.getErrorMsg = function () {
                if ($scope.showFrom() && $scope.showTo()) {
                    return 'Enter a valid range';
                } else {
                    return 'Enter a valid number';
                }
            };

            $scope.showErrorMessage = function () {
                var ret = false;
                var show = $scope.showmessage != undefined ? $scope.showmessage : true;

                if (show && !$scope.isValValid(0) || !$scope.isValValid(1)) {
                    ret = true;
                }
                return ret;
            };

            /**
             * Pattern applied to the attribute pattern
             * Ex. for only integer you need to pass the value \\\d* 
             * This is going to be transformed into \d*
             * @param {*} position 
             */
            $scope.getPattern = function (position) {
                var conf = getConfigField(position);
                if (conf.pattern !== undefined) {
                    return conf.pattern;
                } else {
                    return '';
                }
            };

            /**
             * NOT USED at the moment
             * Force the val of the field range to a valid value based on the min or max of the other field
             * @param {*} position 
             */
            $scope.checkValue = function (position) {
                var conf = getConfigField(position);
                if (!$scope.form[conf.name].$valid) {
                    var input = $element[0].querySelector('input[name="' + conf.name + '"]');
                    var min = input.min;
                    var max = input.max;
                    switch (position) {
                        case 0:
                            {
                                conf.value = Number(max);
                                break;
                            }
                        case 1:
                            {
                                conf.value = Number(min);
                                break;
                            }
                    }
                } else {
                    // console.log('VALID ');
                }
            };

            $scope.init();
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/edit/tree-item-edit.component.js":
/*!*******************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/edit/tree-item-edit.component.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.edit', []).directive('queryItemEditDirective', function () {
    return {
        restrict: 'E',
        scope: {
            vm: '='
        },
        require: 'ngModel',
        templateUrl: '/components/datacloud/query/advanced/tree/edit/tree-item-edit.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "$timeout", "$state", "DataCloudStore", "QueryStore", "QueryTreeService", function controller($scope, $timeout, $state, DataCloudStore, QueryStore, QueryTreeService) {
            var vm = $scope.vm;
            vm.booleanChanged = false;
            vm.presetOperation;
            // console.log(vm.tree.bucketRestriction);

            function showNumericalRange() {
                switch (vm.numericalCmpModel) {
                    case 'EQUAL':
                    case 'GREATER_OR_EQUAL':
                    case 'GREATER_THAN':
                    case 'NOT_EQUAL':
                        {
                            vm.showFromNumerical = true;
                            vm.showToNumerical = false;
                            break;
                        }
                    case 'LESS_THAN':
                    case 'LESS_OR_EQUAL':
                        {
                            vm.showFromNumerical = false;
                            vm.showToNumerical = true;
                            break;
                        }

                    case 'GTE_AND_LT':
                        {
                            vm.showFromNumerical = true;
                            vm.showToNumerical = true;
                            break;
                        }
                    default:
                        {
                            vm.showFromNumerical = false;
                            vm.showToNumerical = false;
                        }
                }
            }

            function initNumericalRange(reset) {
                if (!reset) {

                    var fromNumerical = QueryTreeService.getValue(vm.tree.bucketRestriction, vm.type, vm.numericalConfiguration.from.position);
                    vm.numericalConfiguration.from.value = fromNumerical != null ? Number(fromNumerical) : undefined;
                    var toNumerical = QueryTreeService.getValue(vm.tree.bucketRestriction, vm.type, vm.numericalConfiguration.to.position);
                    vm.numericalConfiguration.to.value = toNumerical != null ? Number(toNumerical) : undefined;
                    setTimeout(function () {
                        showNumericalRange();
                    }, 0);
                } else {
                    vm.showFromNumerical = false;
                    vm.showToNumerical = false;
                    vm.numericalConfiguration.from.value = undefined;
                    vm.numericalConfiguration.to.value = undefined;
                    QueryTreeService.resetBktValues(vm.tree.bucketRestriction, vm.type);
                    setTimeout(function () {
                        showNumericalRange();
                    }, 0);
                }
            }

            vm.initVariables = function () {
                vm.numericalConfiguration = {
                    from: { name: 'from-numerical', value: undefined, position: 0, type: 'Numerical' },
                    to: { name: 'to-numerical', value: undefined, position: 1, type: 'Numerical' }
                };

                vm.booleanValue = QueryTreeService.getBooleanModel(vm.tree.bucketRestriction);
                vm.enumCmpModel = QueryTreeService.getEnumCmpModel(vm.tree.bucketRestriction);
                vm.stringValue = QueryTreeService.getOperationValue(vm.tree.bucketRestriction, 'String');
                vm.stringCmpModel = QueryTreeService.getStringCmpModel(vm.tree.bucketRestriction);
                vm.numericalCmpModel = QueryTreeService.getNumericalCmpModel(vm.tree.bucketRestriction);
                vm.bktVals0 = QueryTreeService.getBktValue(vm.tree.bucketRestriction, 0);
                vm.bktVals1 = QueryTreeService.getBktValue(vm.tree.bucketRestriction, 1);
                vm.vals = vm.tree.bucketRestriction.bkt.Vals;

                vm.string_operations = QueryTreeService.string_operations;

                vm.showFromNumerical = false;
                vm.showToNumerical = false;
                if (QueryTreeService.showType(vm.tree.bucketRestriction, vm.type, 'Numerical')) {
                    vm.numericalCmpModel = QueryTreeService.getNumericalCmpModel(vm.tree.bucketRestriction);
                    initNumericalRange();
                }
            };
            vm.init = function () {

                vm.initVariables();
            };

            vm.init();

            vm.showInput = function (cmpModel) {
                return QueryTreeService.no_inputs.indexOf(cmpModel) < 0;
            };

            vm.clickEditMode = function (value) {
                vm.editMode = value;
                if (value !== 'Custom') {
                    var bucket = vm.getCubeBktList()[0];
                    if (bucket) {
                        vm.presetOperation = bucket.Lbl;
                    }
                    vm.changePreset(bucket);
                } else {
                    QueryTreeService.resetBktValues(vm.tree.bucketRestriction, vm.type);
                    vm.initVariables();
                }
            };

            vm.showNumericalFrom = function () {
                return vm.showFromNumerical;
            };

            vm.showNumericalTo = function () {
                return vm.showToNumerical;
            };

            vm.getForm = function () {
                return $scope.form;
            };

            vm.showEmptyOption = function () {
                return QueryTreeService.showEmptyOption(vm.tree.bucketRestriction);
            };

            vm.getOperationLabel = function () {
                return QueryTreeService.getOperationLabel(vm.type, vm.tree.bucketRestriction);
            };

            vm.getOperationValue = function (operatorType, position) {
                return QueryTreeService.getOperationValue(vm.tree.bucketRestriction, operatorType, position);
            };

            vm.showItem = function (typeToShow) {
                return QueryTreeService.showType(vm.tree.bucketRestriction, vm.type, typeToShow);
            };

            vm.showTo = function () {
                return QueryTreeService.showTo(vm.tree.bucketRestriction);
            };

            vm.changeBooleanValue = function () {
                vm.booleanChanged = true;
                QueryTreeService.changeBooleanValue(vm.tree.bucketRestriction, vm.booleanValue);
            };

            vm.changeEnumCmpValue = function () {
                switch (vm.enumCmpModel) {
                    case 'IS_NULL':
                    case 'IS_NOT_NULL':
                        vm.vals.length = 0;
                        break;
                }

                // switch (vm.enumCmpModel) {
                //     case 'is empty': 
                //         vm.enumCmpModel = 'IS_NULL'; 
                //         vm.vals.length = 0; 
                //         break;
                //     case 'is present': 
                //         vm.enumCmpModel = 'IS_NOT_NULL'; 
                //         vm.vals.length = 0; 
                //         break;
                //     case 'is': 
                //         vm.enumCmpModel = vm.vals.length == 1 
                //             ? 'EQUAL' 
                //             : 'IN_COLLECTION'; 
                //         break;
                //     case 'is not': 
                //         vm.enumCmpModel = vm.vals.length == 1 
                //             ? 'NOT_EQUAL' 
                //             : 'NOT_IN_COLLECTION';
                //         break;
                // }


                // if (vm.enumCmpModel == 'is empty') {
                //     vm.enumCmpModel = 'IS_NULL';
                //     vm.vals.length = 0;
                // } else if (vm.enumCmpModel == 'is') {
                //     vm.enumCmpModel = vm.vals.length == 1 ? 'EQUAL' : 'IN_COLLECTION';
                // } else if (vm.enumCmpModel == 'is not') {
                //     vm.enumCmpModel = vm.vals.length == 1 ? 'NOT_EQUAL' : 'NOT_IN_COLLECTION';
                // }

                QueryTreeService.changeEnumCmpValue(vm.tree.bucketRestriction, vm.enumCmpModel);
            };

            vm.getBktValue = function (position) {
                return QueryTreeService.getBktValue(vm.tree.bucketRestriction, position);
            };
            vm.getCubeBktList = function () {
                return QueryTreeService.getCubeBktList(vm.tree.bucketRestriction, vm.item.cube);
            };

            vm.changeNumericalCmpValue = function () {
                QueryTreeService.changeNumericalCmpValue(vm.tree.bucketRestriction, vm.numericalCmpModel);
                initNumericalRange(true);
            };

            vm.changeStringValue = function () {
                QueryTreeService.changeStringValue(vm.tree.bucketRestriction, vm.stringValue);
            };

            vm.changeStringCmpValue = function () {
                QueryTreeService.changeStringCmpValue(vm.tree.bucketRestriction, vm.stringCmpModel);
            };

            vm.changeBktVal = function (position) {
                var val = vm['bktVals' + position];
                QueryTreeService.changeBktValue(vm.tree.bucketRestriction, val, position);
            };

            vm.goToEnumPicker = function () {
                QueryTreeService.setPickerObject({
                    item: vm.item,
                    restriction: vm.tree
                });

                var state = vm.root.mode == 'rules' ? 'home.ratingsengine.rulesprospects.segment.attributes.rules.picker' : vm.root.mode == 'dashboardrules' ? 'home.ratingsengine.dashboard.segment.attributes.rules.picker' : 'home.segment.explorer.enumpicker';

                $state.go(state, { entity: vm.item.Entity, fieldname: vm.item.ColumnId });
            };

            vm.isValid = function () {
                if ($scope.form.$valid === true) {
                    QueryStore.setPublicProperty('enableSaveSegmentButton', true);
                } else {
                    QueryStore.setPublicProperty('enableSaveSegmentButton', false);
                }
                return $scope.form.$valid;
            };

            vm.showUnsetButton = function () {
                if (vm.root.mode === 'rules' || vm.root.mode === 'dashboardrules') {
                    return true;
                } else {
                    return false;
                }
            };

            vm.getEntity = function () {
                return vm.item.Entity;
            };

            //================= Numerical ==============================

            vm.getNumericalConfigString = function () {
                return vm.numericalConfiguration;
            };

            vm.callbackChangedNumericalValue = function (type, position, value) {
                QueryTreeService.changeValue(vm.tree.bucketRestriction, vm.type, value, position);
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/item/item.index.js":
/*!*****************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/item/item.index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./tree-item.component */ "../common/components/datacloud/query/advanced/tree/item/tree-item.component.js");

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/item/tree-item.component.js":
/*!**************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/item/tree-item.component.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.info', []).directive('queryItemDirective', function () {
    return {
        restrict: 'E',
        scope: {
            vm: '='
        },
        templateUrl: '/components/datacloud/query/advanced/tree/item/tree-item.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "$timeout", "DataCloudStore", "QueryStore", "QueryTreeService", function controller($scope, $timeout, DataCloudStore, QueryStore, QueryTreeService) {
            var vm = $scope.vm;

            vm.getOperationLabel = function () {
                return QueryTreeService.getOperationLabel(vm.type, vm.tree.bucketRestriction);
            };

            vm.getOperationValue = function (operatorType, position) {
                var val = QueryTreeService.getOperationValue(vm.tree.bucketRestriction, operatorType, position);
                // console.log('VAL', val);
                return val;
            };
            vm.showItem = function (typeToShow) {
                var ret = QueryTreeService.showType(vm.tree.bucketRestriction, vm.type, typeToShow);
                // console.log('Show Item ==> ', vm.type, typeToShow, ret);
                return ret;
            };
            vm.showTo = function () {
                return QueryTreeService.showTo(vm.tree.bucketRestriction);
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/percent/edit/percent-edit.component.js":
/*!*************************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/percent/edit/percent-edit.component.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.edit.percent.edit', []).component('percentEditAttribute', {
    templateUrl: '/components/datacloud/query/advanced/tree/percent/edit/percent-edit.component.html',

    bindings: {
        type: '<',
        bucketrestriction: '=',
        form: '=',
        vm: '='
    },

    controller: ["QueryTreeService", "PercentStore", "$timeout", function controller(QueryTreeService, PercentStore, $timeout) {
        var self = this;

        function changePeriodView() {
            switch (self.periodModel) {
                case 'AS_MUCH_AS':
                    {
                        self.showFromPeriod = false;
                        self.showToPeriod = true;
                        break;
                    }
                case 'AT_LEAST':
                    {
                        self.showFromPeriod = true;
                        self.showToPeriod = false;
                        break;
                    }
                case 'BETWEEN':
                    {
                        self.showFromPeriod = true;
                        self.showToPeriod = true;
                        break;
                    }
                default:
                    {
                        self.showFromPeriod = false;
                        self.showToPeriod = false;
                    }
            }
        };

        function initValues() {
            var fromTmp = PercentStore.getVal(self.periodModel, self.bucketrestriction.bkt, 0);
            var toTmp = PercentStore.getVal(self.periodModel, self.bucketrestriction.bkt, 1);
            self.numericalConfig.from.value = fromTmp != null ? Number(fromTmp) : undefined;
            self.numericalConfig.to.value = toTmp != null ? Number(toTmp) : undefined;
        }

        function resetValues() {
            self.showFromPeriod = false;
            self.showToPeriod = false;
            PercentStore.restValues(self.bucketrestriction.bkt);
            initValues();
        }

        this.$onInit = function () {

            this.periodChanging = false;
            this.showFromPeriod = false;
            this.showToPeriod = false;
            this.directionList = PercentStore.getDirectionList();
            this.periodList = PercentStore.getCmpList();
            this.numericalConfig = PercentStore.getNumericalPeriodConfig();
            this.periodModel = this.bucketrestriction.bkt.Chg.Cmp;
            this.directionModel = PercentStore.getDirection(this.bucketrestriction.bkt);
            changePeriodView();
            initValues();
        };

        this.getPeriodNumericalConfString = function () {
            if (!this.numericalConfig) {
                this.numericalConfig = PercentStore.getNumericalPeriodConfig();
            }
            return JSON.stringify(this.numericalConfig);
        };

        this.callbackChangedValue = function (type, position, value) {
            PercentStore.changeValue(this.periodModel, this.bucketrestriction.bkt.Chg.Vals, position, value);
        };

        this.changeDirection = function () {
            PercentStore.setDirection(this.bucketrestriction.bkt, this.directionModel);
        };

        this.changePeriod = function () {
            this.periodChanging = true;
            changePeriodView();
            PercentStore.changeCmp(this.bucketrestriction.bkt, this.periodModel);
            resetValues();
            $timeout(function () {
                changePeriodView();
                self.periodChanging = false;
            }, 0);
        };

        this.isPeriodRangeValid = function () {
            return PercentStore.isPeriodRangeValid(this.form);
        };

        this.getErrorMsg = function () {
            return PercentStore.getErrorMsg(this.showFromPeriod, this.showToPeriod);
        };
    }]

});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/percent/item/percent-item.component.js":
/*!*************************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/percent/item/percent-item.component.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.edit.percent.item', []).component('percentAttribute', {
    templateUrl: '/components/datacloud/query/advanced/tree/percent/item/percent-item.component.html',

    bindings: {
        bucketrestriction: '='
    },

    controller: ["QueryTreeService", "PercentStore", function controller(QueryTreeService, PercentStore) {
        var self = this;

        this.$onInit = function () {};

        this.getDirection = function () {
            return PercentStore.getDirectionRedable(this.bucketrestriction);
        };

        this.getCmp = function () {
            return PercentStore.getCmpRedable(this.bucketrestriction);
        };

        this.getValues = function () {
            return PercentStore.getValuesFormatted(this.bucketrestriction);
        };
    }]

});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/percent/percent.component.service.js":
/*!***********************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/percent/percent.component.service.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.edit.percent', []).service('PercentStore', [function () {

    var PercentStore = this;
    PercentStore.directionMap = {
        'DEC': {
            name: 'DEC',
            displayName: 'Decrease',
            readable: 'Decreased'
        },
        'INC': {
            name: 'INC',
            displayName: 'Increase',
            readable: 'Increased'
        }
    };
    PercentStore.cmpMap = {
        'AS_MUCH_AS': {
            name: 'AS_MUCH_AS',
            displayName: 'By as Much as'
        },
        'AT_LEAST': {
            name: 'AT_LEAST',
            displayName: 'By at Least'
        },
        'BETWEEN': {
            name: 'BETWEEN',
            displayName: 'Between'
        }
    };

    function getConfigField(position) {
        var tmp = PercentStore.getNumericalPeriodConfig();

        var values = JSON.parse(JSON.stringify(tmp));
        var config = values[Object.keys(values)[position]];
        return config;
    }
    this.getNumericalFieldName = function (position) {
        var config = getConfigField(position);
        return config.name;
    };
    this.getDirectionList = function () {
        return [{
            name: 'DEC',
            displayName: 'Decrease'
        }, {
            name: 'INC',
            displayName: 'Increase'
        }];
    };

    this.getCmpList = function () {
        return [{
            name: 'AS_MUCH_AS',
            displayName: 'By as Much as'
        }, {
            name: 'AT_LEAST',
            displayName: 'By at Least'
        }, {
            name: 'BETWEEN',
            displayName: 'Between'
        }];
    };

    this.getNumericalPeriodConfig = function () {
        return {
            'from': {
                'name': 'from-period-percent',
                'value': undefined,
                'position': 0,
                'type': 'Avg',
                'min': '0',
                'max': '',
                'pattern': '\\\d*'
            },
            'to': {
                'name': 'to-period-percent',
                'value': undefined,
                'position': 1,
                'type': 'Avg',
                'min': '0',
                'max': '',
                'pattern': '\\\d*'
            }
        };
    };
    this.restValues = function (bkt) {
        bkt.Chg.Vals = [];
    };

    this.changeValue = function (cmp, valsArray, position, value) {
        switch (cmp) {
            case 'BETWEEN':
                {
                    valsArray[position] = value;
                    break;
                }
            default:
                {
                    valsArray[0] = value;
                }
        }
    };
    this.getDirection = function (bkt) {
        var direction = bkt.Chg.Direction;
        if (direction) {
            return direction;
        } else {
            bkt.Chg.Direction = 'DEC';
            return 'DEC';
        }
    };

    this.setDirection = function (bkt, direction) {
        bkt.Chg.Direction = direction;
    };

    this.getVal = function (cmp, bkt, position) {
        var valsArray = bkt.Chg.Vals;
        switch (cmp) {
            case 'BETWEEN':
                {
                    return valsArray[position];
                }
            case 'AS_MUCH_AS':
            case 'AT_LEAST':
                {
                    if (position == valsArray.length - 1 || valsArray.length == 0) {
                        return valsArray[valsArray.length - 1];
                    } else {
                        return null;
                    }
                }
            default:
                {
                    return null;
                }
        }
    };

    this.getDirectionRedable = function (bucketrestriction) {
        var direction = bucketrestriction.bkt.Chg.Direction;
        var directionObj = PercentStore.directionMap[direction];
        if (directionObj) {
            return directionObj.readable ? directionObj.readable : '';
        } else {
            return '';
        }
    };

    this.getCmpRedable = function (bucketrestriction) {
        var cmp = bucketrestriction.bkt.Chg.Cmp;
        var cmpObj = PercentStore.cmpMap[cmp];
        if (cmpObj) {
            return cmpObj.displayName ? cmpObj.displayName : '';
        } else {
            return '';
        }
    };

    this.getValuesFormatted = function (bucketrestriction) {
        var bkt = bucketrestriction.bkt;
        var vals = bkt.Chg.Vals;

        if (vals) {
            var list = vals.toString();
            list = list.replace(/,/g, ' - ');
            return list;
        } else {
            return '';
        }
    };

    this.getCmp = function (bkt) {
        return bkt.Chg.Cmp;
    };

    this.changeCmp = function (bkt, cmp) {
        bkt.Chg.Cmp = cmp;
    };

    this.isPeriodRangeValid = function (form) {
        var valid = true;
        var confFrom = getConfigField(0);
        var confTo = getConfigField(1);
        if (form[confFrom.name] && !form[confFrom.name].$valid) {
            valid = false;
        }
        if (form[confTo.name] && !form[confTo.name].$valid) {
            valid = false;
        }
        return valid;
    };

    this.getErrorMsg = function (fromVisible, toVisible) {
        if (fromVisible === true && toVisible == true) {
            return 'Enter a valid range';
        } else {
            return 'Enter a valid number';
        }
    };
    this.updateBkt = function (original, changed) {

        original.Chg.Direction = changed.Chg.Direction;
        original.Chg.Cmp = changed.Chg.Cmp;
        original.Chg.Vals = changed.Chg.Vals;
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/percent/prcent.index.js":
/*!**********************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/percent/prcent.index.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./edit/percent-edit.component */ "../common/components/datacloud/query/advanced/tree/percent/edit/percent-edit.component.js");

__webpack_require__(/*! ./item/percent-item.component */ "../common/components/datacloud/query/advanced/tree/percent/item/percent-item.component.js");

__webpack_require__(/*! ./percent.component.service */ "../common/components/datacloud/query/advanced/tree/percent/percent.component.service.js");

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/transaction/transaction-item-edit.component.js":
/*!*********************************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/transaction/transaction-item-edit.component.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.edit.transaction.edit', ['common.datacloud.query.builder.tree.edit.transaction.edit.numerical.range', 'common.datacloud.query.builder.tree.edit.transaction.edit.date.range', 'common.datacloud.query.builder.tree.transaction.service', 'angularMoment']).directive('transactionEditDirective', function () {
    return {
        restrict: 'E',
        scope: {
            type: '=',
            bucketrestriction: '=',
            form: '=',
            purchased: '=',
            booleanchanged: '='

        },
        templateUrl: '/components/datacloud/query/advanced/tree/transaction/transaction-item-edit.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "$timeout", "$state", "moment", "QueryTreeTransactionStore", "QueryTreeService", function controller($scope, $timeout, $state, moment, QueryTreeTransactionStore, QueryTreeService) {
            var vm = $scope.vm;
            vm.type = $scope.type;
            vm.form = $scope.form;
            vm.purchased = $scope.purchased;
            vm.moment = moment;

            vm.bucketrestriction = $scope.bucketrestriction;
            /******************** Qty **************/
            vm.showFromUnit = false;
            vm.showToUnit = false;
            /***************************************/

            /******************* Amt ***************/
            vm.showFromAmt = false;
            vm.showToAmt = false;
            /***************************************/

            /************** Date Range ************/

            vm.showFromTime = false;
            vm.showToTime = false;
            vm.showTimeFrame = false;
            /**************************************/

            /*********** Numerical range **********/
            vm.showFromPeriod = false;
            vm.showToPeriod = false;
            /**************************************/

            vm.qtyConf = QueryTreeTransactionStore.getQtyConfig();
            vm.amtConf = QueryTreeTransactionStore.getAmtConfig();
            vm.periodNumericalConf = QueryTreeTransactionStore.getPeriodNumericalConfig();
            vm.periodTimeConf = QueryTreeTransactionStore.getPeriodTimeConfig();

            vm.cmpsList = QueryTreeTransactionStore.getCmpsList();
            vm.periodList = QueryTreeTransactionStore.periodList();
            vm.unitPurchasedCmpChoises = QueryTreeTransactionStore.unitPurchasedCmpChoises();
            vm.amountSpentCmpChoises = QueryTreeTransactionStore.amountSpentCmpChoises();

            function initQty(reset) {
                var tmpUnit = QueryTreeService.getCmp($scope.bucketrestriction, $scope.type, 'Qty');
                vm.unitPurchasedCmp = tmpUnit !== '' ? tmpUnit : 'ANY';

                if (!reset) {
                    var fromQty = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, vm.qtyConf.from.position, 'Qty');
                    vm.qtyConf.from.value = fromQty != null && fromQty >= 0 ? Number(fromQty) : undefined;

                    var toQty = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, vm.qtyConf.to.position, 'Qty');
                    vm.qtyConf.to.value = toQty != null && toQty >= 0 ? Number(toQty) : undefined;

                    vm.showFromUnit = vm.showUnitFrom();
                    vm.showToUnit = vm.showUnitTo();
                } else {
                    vm.qtyConf.from.value = undefined;
                    vm.qtyConf.to.value = undefined;
                    vm.showFromUnit = false;
                    vm.showToUnit = false;
                    QueryTreeService.resetBktValues($scope.bucketrestriction, $scope.type, 'Qty');
                    $timeout(function () {
                        vm.showFromUnit = vm.showUnitFrom();
                        vm.showToUnit = vm.showUnitTo();
                    }, 0);
                }
            }

            function initAmt(reset) {
                var tmpAmt = QueryTreeService.getCmp($scope.bucketrestriction, $scope.type, 'Amt');
                vm.amtCmp = tmpAmt !== '' ? tmpAmt : 'ANY';

                vm.showFromAmt = false;
                vm.showToAmt = false;

                if (!reset) {
                    var fromAmt = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, vm.amtConf.from.position, 'Amt');
                    vm.amtConf.from.value = fromAmt >= 0 ? Number(fromAmt) : undefined;

                    var toAmt = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, vm.amtConf.to.position, 'Amt');
                    vm.amtConf.to.value = toAmt >= 0 ? Number(toAmt) : undefined;

                    vm.showFromAmt = vm.showAmtFrom();
                    vm.showToAmt = vm.showAmtTo();
                } else {
                    vm.amtConf.from.value = undefined;
                    vm.amtConf.to.value = undefined;
                    QueryTreeService.resetBktValues($scope.bucketrestriction, $scope.type, 'Amt');

                    $timeout(function () {
                        vm.showFromAmt = vm.showAmtFrom();
                        vm.showToAmt = vm.showAmtTo();
                    }, 0);
                }
            }

            function initTime() {
                var tmpTimeCmp = QueryTreeService.getCmp($scope.bucketrestriction, $scope.type, 'Time');
                vm.timeCmp = tmpTimeCmp !== '' ? tmpTimeCmp : 'Month';
            }

            function setInitialValueNumericalPeriod() {
                if (vm.showPeriodFrom() && vm.showPeriodTo()) {
                    vm.periodNumericalConf.from.value = 1;
                    vm.periodNumericalConf.to.value = 2;
                    QueryTreeService.changeValue($scope.bucketrestriction, $scope.type, vm.periodNumericalConf.from.value, vm.periodNumericalConf.from.position, 'Time');
                    QueryTreeService.changeValue($scope.bucketrestriction, $scope.type, vm.periodNumericalConf.to.value, vm.periodNumericalConf.to.position, 'Time');
                } else if (vm.showPeriodFrom() && !vm.showPeriodTo()) {
                    vm.periodNumericalConf.from.value = 1;
                    vm.periodNumericalConf.to.value = undefined;
                    QueryTreeService.resetBktValues($scope.bucketrestriction, $scope.type, 'Time');
                    QueryTreeService.changeValue($scope.bucketrestriction, $scope.type, vm.periodNumericalConf.from.value, vm.periodNumericalConf.from.position, 'Time');
                } else if (!vm.showPeriodFrom() && vm.showPeriodTo()) {
                    vm.periodNumericalConf.from.value = undefined;
                    vm.periodNumericalConf.to.value = 1;
                    QueryTreeService.resetBktValues($scope.bucketrestriction, $scope.type, 'Time');
                    QueryTreeService.changeValue($scope.bucketrestriction, $scope.type, vm.periodNumericalConf.to.value, vm.periodNumericalConf.to.position, 'Time');
                } else {
                    vm.periodNumericalConf.from.value = undefined;
                    vm.periodNumericalConf.to.value = undefined;
                    QueryTreeService.resetBktValues($scope.bucketrestriction, $scope.type, 'Time');
                }
            }

            function initTimePeriod(reset) {
                vm.showFromPeriod = false;
                vm.showToPeriod = false;
                vm.showTimeFrame = false;

                if (!reset) {
                    var fromPeriod = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, vm.periodNumericalConf.from.position, 'Time');
                    vm.periodNumericalConf.from.value = fromPeriod != 0 ? Number(fromPeriod) : undefined;

                    var toPeriod = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, vm.periodNumericalConf.to.position, 'Time');
                    vm.periodNumericalConf.to.value = toPeriod != 0 ? Number(toPeriod) : undefined;

                    vm.showFromPeriod = vm.showPeriodFrom();
                    vm.showToPeriod = vm.showPeriodTo();
                    vm.showTimeFrame = vm.showTimeFrameDate();
                } else {
                    vm.showFromTime = false;
                    vm.showToTime = false;
                    vm.showTimeFrame = false;
                    setInitialValueNumericalPeriod();
                    $timeout(function () {
                        vm.showFromPeriod = vm.showPeriodFrom();
                        vm.showToPeriod = vm.showPeriodTo();
                        vm.showTimeFrame = vm.showTimeFrameDate();
                    }, 0);
                }
            }
            function initDateRange() {
                if (QueryTreeService.getPeriodValue($scope.bucketrestriction, $scope.type, 'Time') === 'Date') {
                    var tmpFrom = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, 0, 'Time');
                    vm.periodTimeConf.from.initial = tmpFrom != undefined && tmpFrom != 0 ? vm.moment(tmpFrom).format('YYYY-MM-DD') : undefined;
                    var tmpTo = QueryTreeService.getValue($scope.bucketrestriction, $scope.type, 1, 'Time');
                    vm.periodTimeConf.to.initial = tmpTo != undefined && tmpTo != 0 ? vm.moment(tmpTo).format('YYYY-MM-DD') : undefined;
                    // console.log('+++++++++++++++++++++> fromDate ', vm.fromDate, 'toDate ', vm.toDate);
                } else {
                    // console.log('----------->NO DATE <------------');
                    vm.periodTimeConf.from.initial = undefined;
                    vm.periodTimeConf.to.initial = undefined;
                }
            }

            function removeKey(cmpValue, subType) {

                switch (cmpValue) {
                    case 'ANY':
                        {
                            // console.log('CMP value ', cmpValue);
                            QueryTreeService.removeKey($scope.bucketrestriction, $scope.type, subType);
                            break;
                        }
                }
            }

            vm.init = function () {

                var tmp = QueryTreeService.getCmp($scope.bucketrestriction, $scope.type, 'Time');
                vm.timeCmp = tmp !== '' ? tmp : 'EVER';
                var periodTmp = QueryTreeService.getPeriodValue($scope.bucketrestriction, $scope.type, 'Time');
                vm.timeframePeriod = periodTmp !== '' ? periodTmp : vm.periodList[0].name;

                initQty();
                initAmt();
                initTime();
                initTimePeriod();
            };

            vm.showSubTypeSelection = function (subType) {
                if ($scope.booleanchanged === true) {
                    QueryTreeService.removeKey($scope.bucketrestriction, $scope.type, 'Qty');
                    QueryTreeService.removeKey($scope.bucketrestriction, $scope.type, 'Amt');
                    $scope.booleanchanged = false;
                }
                switch (subType) {
                    case 'Amt':
                    case 'Qty':
                        {
                            if ($scope.purchased == 'Yes') {
                                return true;
                            } else {
                                return false;
                            }
                        }
                    default:
                        return true;
                }
            };

            vm.getQtyConfigString = function () {
                var ret = JSON.stringify(vm.qtyConf);
                return ret;
            };

            vm.getAmtConfigString = function () {
                var ret = JSON.stringify(vm.amtConf);
                return ret;
            };
            vm.getPeriodNumericalConfString = function () {
                var ret = JSON.stringify(vm.periodNumericalConf);
                return ret;
            };
            vm.getPeriodTimeConfString = function () {
                initDateRange();
                vm.periodTimeConf.from.visible = vm.showTimeFrom();
                vm.periodTimeConf.to.visible = vm.showTimeTo();
                var ret = JSON.stringify(vm.periodTimeConf);
                return ret;
            };

            vm.callbackChangedValue = function (type, position, value) {
                QueryTreeService.changeValue($scope.bucketrestriction, $scope.type, value, position, type);
            };

            vm.changeCmp = function (value, type) {
                // console.log('TYPE ==> ', type);
                QueryTreeService.changeCmp($scope.bucketrestriction, $scope.type, value, type);

                switch (type) {
                    case 'Qty':
                        {
                            vm.showFromUnit = vm.showUnitFrom();
                            vm.showToUnit = vm.showUnitTo();
                            initQty(true);
                            removeKey(value, 'Qty');
                            break;
                        }
                    case 'Amt':
                        {
                            vm.showFromAmt = vm.showAmtFrom();
                            vm.showToAmt = vm.showAmtTo();
                            initAmt(true);
                            removeKey(value, 'Amt');
                            break;
                        }
                    case 'Time':
                        {
                            initTimePeriod(true);
                            if (vm.showTimeFrameDate()) {
                                vm.timeframePeriod = 'Date';
                                vm.changeTimeFramePeriod();
                            } else {
                                vm.timeframePeriod = vm.periodList[0].name;
                                vm.changeTimeFramePeriod();
                            }
                            break;
                        }
                    default:
                        {
                            vm.showFromUnit = vm.showUnitFrom();
                            vm.showToUnit = vm.showUnitTo();

                            vm.showFromAmt = vm.showAmtFrom();
                            vm.showToAmt = vm.showAmtTo();
                        }
                }
            };

            //************************ Txn *********************/

            function getConfigField(position) {
                var values = JSON.parse(vm.getPeriodNumericalConfString());
                var config = values[Object.keys(values)[position]];
                return config;
            }

            vm.isPeriodRangeValid = function () {
                var valid = true;
                var confFrom = getConfigField(0);
                var confTo = getConfigField(1);
                if (vm.form[confFrom.name] && !vm.form[confFrom.name].$valid) {
                    valid = false;
                }
                if (vm.form[confTo.name] && !vm.form[confTo.name].$valid) {
                    valid = false;
                }
                return valid;
            };

            vm.getErrorMsg = function () {
                if (vm.showPeriodFrom() && vm.showPeriodTo()) {
                    return 'Enter a valid range';
                } else {
                    return 'Enter a valid number';
                }
            };

            vm.showTimeframePeriod = function () {
                switch (vm.timeCmp) {
                    case 'EVER':
                    case 'BETWEEN_DATE':
                    case 'BEFORE':
                    case 'AFTER':
                        {
                            return false;
                        }
                    default:
                        return true;

                }
            };

            vm.showTimeFrameDate = function () {
                switch (vm.timeCmp) {
                    case 'BETWEEN_DATE':
                    case 'BEFORE':
                    case 'AFTER':
                        {
                            return true;
                        }
                    default:
                        return false;

                }
            };

            vm.showTimeFrom = function () {
                switch (vm.timeCmp) {
                    case 'BETWEEN_DATE':
                    case 'AFTER':
                        {
                            return true;
                        }
                    default:
                        return false;

                }
            };

            vm.showTimeTo = function () {
                switch (vm.timeCmp) {
                    case 'BEFORE':
                    case 'BETWEEN_DATE':
                    case 'PRIOR_ONLY':
                        {
                            return true;
                        }
                    default:
                        return false;
                }
            };

            vm.showPeriodFrom = function () {
                switch (vm.timeCmp) {
                    case 'EVER':
                    case 'IN_CURRENT_PERIOD':
                    case 'BETWEEN_DATE':
                    case 'BEFORE':
                    case 'AFTER':
                    case 'WITHIN':
                    case 'PRIOR_ONLY':
                        {
                            return false;
                        }
                    default:
                        return true;
                }
            };
            vm.showPeriodTo = function () {
                switch (vm.timeCmp) {
                    case 'BETWEEN':
                    case 'WITHIN':
                    case 'PRIOR_ONLY':
                        {
                            return true;
                        }
                    default:
                        return false;
                }
            };

            vm.changeTimeFramePeriod = function () {
                QueryTreeService.changeTimeframePeriod($scope.bucketrestriction, $scope.type, vm.timeframePeriod);
            };

            /*********************** Qty *************************/

            vm.showUnitFrom = function () {
                switch (vm.unitPurchasedCmp) {
                    case 'EQUAL':
                    case 'GREATER_OR_EQUAL':
                    case 'GREATER_THAN':
                    case 'GTE_AND_LT':
                    case 'NOT_EQUAL':
                        {
                            return true;
                        }
                    default:
                        {
                            return false;
                        };
                }
            };
            vm.showUnitTo = function () {
                switch (vm.unitPurchasedCmp) {
                    case 'GTE_AND_LT':
                    case 'LESS_OR_EQUAL':
                    case 'LESS_THAN':
                        {

                            return true;
                        }
                    default:
                        {
                            return false;
                        }
                }
            };

            /************************ Amt *******************************/

            vm.showAmtFrom = function () {
                switch (vm.amtCmp) {
                    case 'GREATER_OR_EQUAL':
                    case 'GREATER_THAN':
                    case 'GTE_AND_LT':
                        {
                            return true;
                        }
                    default:
                        return false;
                }
            };
            vm.showAmtTo = function () {
                switch (vm.amtCmp) {
                    case 'GTE_AND_LT':
                    case 'LESS_OR_EQUAL':
                    case 'LESS_THAN':
                        {
                            return true;
                        }
                    default:
                        return false;
                }
            };
            vm.init();
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/transaction/transaction-item.component.js":
/*!****************************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/transaction/transaction-item.component.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.edit.transaction', ['common.datacloud.query.builder.tree.transaction.service']).directive('transactionDirective', function () {
    return {
        restrict: 'E',
        scope: {
            type: '=',
            bucketrestriction: '=',
            purchased: '='
        },
        templateUrl: '/components/datacloud/query/advanced/tree/transaction/transaction-item.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "$timeout", "$state", "QueryTreeService", function controller($scope, $timeout, $state, QueryTreeService) {
            var vm = $scope.vm;

            vm.init = function () {};
            vm.init();

            vm.getPeriod = function () {
                var period = QueryTreeService.getPeriodValue($scope.bucketrestriction, $scope.type, 'Time');
                if (period != 'Date' && vm.getCmp('Time') !== 'Ever') {
                    return period + '(s)';
                }
            };

            vm.showSubTypeSelection = function (subType) {
                switch (subType) {
                    case 'Amt':
                    case 'Qty':
                        {
                            if ($scope.purchased == true) {
                                return true;
                            } else {
                                return false;
                            }
                        }
                    default:
                        return true;
                }
            };

            vm.getCmp = function (subType) {
                var ret = QueryTreeService.getCmp($scope.bucketrestriction, $scope.type, subType);
                switch (subType) {
                    case 'Time':
                        {
                            var cmp = ret === '' ? 'Ever' : QueryTreeService.transactionMap[ret];
                            return cmp;
                        }
                    case 'Amt':
                    case 'Qty':
                        {
                            return ret === '' ? 'Any' : QueryTreeService.cmpMap[ret];
                        }
                    default:
                        {
                            return ret;
                        }
                }
            };
            vm.showLabel = function (subType) {
                var cmp = vm.getCmp(subType);
                switch (subType) {
                    case 'Amt':
                        {
                            if ('Any' === cmp) {
                                return false;
                            }
                            return true;
                        }
                    default:
                        return fasle;
                }
            };

            vm.getValues = function (subType) {
                var ret = QueryTreeService.getValues($scope.bucketrestriction, $scope.type, subType);
                switch (ret.length) {
                    case 0:
                        {
                            return '';
                        }
                    case 1:
                        {
                            if (subType === 'Time' && ret[0] === -1) {
                                return '';
                            }
                            return ret[0];
                        }
                    case 2:
                        {
                            return ret[0] + ' - ' + ret[1];
                        }
                    default:
                        return '';
                }
            };
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/transaction/transaction.index.js":
/*!*******************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/transaction/transaction.index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./transaction-item-edit.component */ "../common/components/datacloud/query/advanced/tree/transaction/transaction-item-edit.component.js");

__webpack_require__(/*! ./transaction-item.component */ "../common/components/datacloud/query/advanced/tree/transaction/transaction-item.component.js");

__webpack_require__(/*! ./transaction.service */ "../common/components/datacloud/query/advanced/tree/transaction/transaction.service.js");

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/transaction/transaction.service.js":
/*!*********************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/transaction/transaction.service.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.transaction.service', []).service('QueryTreeTransactionStore', ["$q", "$http", "QueryTreeTransactionService", function ($q, $http, QueryTreeTransactionService) {
    var QueryTreeTransactionStore = this;
    QueryTreeTransactionStore.periods = [];
    this.getAmtConfig = function () {
        return {
            from: { name: 'from-amt', value: undefined, position: 0, type: 'Amt', min: '0', max: '' },
            to: { name: 'to-amt', value: undefined, position: 1, type: 'Amt', min: '0', max: '' }
        };
    };

    this.getQtyConfig = function () {
        return {
            from: { name: 'from-qty', value: undefined, position: 0, type: 'Qty', min: '0' },
            to: { name: 'to-qty', value: undefined, position: 1, type: 'Qty', min: '0' }
        };
    };

    this.getPeriodNumericalConfig = function () {
        return {
            from: { name: 'from-period', value: undefined, position: 0, type: 'Time', min: '1', max: '', pattern: '\\\d*' },
            to: { name: 'to-period', value: undefined, position: 1, type: 'Time', min: '1', max: '', pattern: '\\\d*' }
        };
    };

    this.getPeriodTimeConfig = function () {
        return {
            from: { name: 'from-time', initial: undefined, position: 0, type: 'Time', visible: true },
            to: { name: 'to-time', initial: undefined, position: 1, type: 'Time', visible: true }
        };
    };

    this.getCmpsList = function () {

        return [{ 'name': 'EVER', 'displayName': 'Ever' }, { 'name': 'IN_CURRENT_PERIOD', 'displayName': 'Current' }, { 'name': 'WITHIN', 'displayName': 'Previous' }, { 'name': 'PRIOR_ONLY', 'displayName': 'Only Prior to Last' }, { 'name': 'BETWEEN', 'displayName': 'Between Last' }, { 'name': 'BETWEEN_DATE', 'displayName': 'Between' }, { 'name': 'BEFORE', 'displayName': 'Before' }, { 'name': 'AFTER', 'displayName': 'After' }];
    };

    this.periodList = function () {
        if (QueryTreeTransactionStore.periods.length == 0) {
            QueryTreeTransactionService.getPeriods().then(function (result) {
                result.forEach(function (element) {
                    QueryTreeTransactionStore.periods.push({ 'name': element, 'displayName': element + '(s)' });
                });
            });
        }
        return QueryTreeTransactionStore.periods;
    };
    this.unitPurchasedCmpChoises = function () {
        return [{ 'name': 'ANY', 'displayName': 'Any' }, { 'name': 'GREATER_THAN', 'displayName': 'Greater than' }, { 'name': 'GREATER_OR_EQUAL', 'displayName': 'Greater than or Equal to' }, { 'name': 'LESS_THAN', 'displayName': 'Less than' }, { 'name': 'LESS_OR_EQUAL', 'displayName': 'Less than or Equal to' }, { 'name': 'GTE_AND_LT', 'displayName': 'Between' }];
    };

    this.amountSpentCmpChoises = function () {
        return [{ 'name': 'ANY', 'displayName': 'Any' }, { 'name': 'GREATER_THAN', 'displayName': 'Greater than' }, { 'name': 'GREATER_OR_EQUAL', 'displayName': 'Greater than or Equal to' }, { 'name': 'LESS_THAN', 'displayName': 'Less than' }, { 'name': 'LESS_OR_EQUAL', 'displayName': 'Less than or Equal to' }, { 'name': 'GTE_AND_LT', 'displayName': 'Between' }];
    };
}]).service('QueryTreeTransactionService', ["$http", "$q", function ($http, $q) {

    this.getPeriods = function (resourceType, query) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/datacollection/periods/names'
        }).success(function (result) {
            deferred.resolve(result);
        }).error(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/tree-purchase-history.service.js":
/*!*******************************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/tree-purchase-history.service.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.purchasehistory.service', ['common.datacloud.query.builder.tree.edit.percent']).service('QueryTreePurchaseHistoryService', ["PercentStore", function (PercentStore) {

    this.cmpMap = {
        'EQUAL': 'is equal to',
        'NOT_EQUAL': 'is not equal to',
        'GREATER_THAN': 'is greater than',
        'GREATER_OR_EQUAL': 'is greater than or equal to',
        'LESS_THAN': 'is less than',
        'LESS_OR_EQUAL': 'is less than or equal to',
        'GTE_AND_LTE': 'is greater than or equal and lesser than or equal',
        'GTE_AND_LT': 'is between',
        'GT_AND_LT': "is greater than and less than"
    };

    function setValsBasedOnPosition(cmp, valsArray, position, value) {
        switch (cmp) {
            case 'GTE_AND_LT':
            case 'BETWEEN':
            case 'BETWEEN_DATE':
                {
                    valsArray[position] = value;
                    break;
                }
            default:
                {
                    valsArray[0] = value;
                }
        }
    }
    function getValsBasedOnPosition(cmp, valsArray, position) {
        switch (cmp) {
            case 'GTE_AND_LT':
            case 'BETWEEN':
            case 'BETWEEN_DATE':
            case 'EQUAL':
            case 'NOT_EQUAL':
                {
                    return valsArray[position];
                }
            case 'GREATER_THAN':
            case 'GREATER_OR_EQUAL':
            case 'AFTER':
                {
                    if (position == valsArray.length - 1 || valsArray.length == 0) {
                        return valsArray[valsArray.length - 1];
                    } else {
                        return null;
                    }
                }
            case 'LESS_THAN':
            case 'LESS_OR_EQUAL':
            case 'BEFORE':
            case 'WITHIN':
            case 'PRIOR_ONLY':
                {
                    if (position == valsArray.length - 1 || valsArray.length == 0) {
                        return null;
                    } else {
                        return valsArray[valsArray.length - 1];
                    }
                }
            default:
                {
                    return null;
                }
        }
    }
    /**
     * type is 'TimeSeries'
     * How to identify 'Boolean':
     * bkt: {
     *      Txn:{
     *          Negate: false/true
     *          Time: {
     *              Cmp: "EVER"
     *              Period: "Day"
     *              Vals: []
     *          }
     *      }
     * }
     * 
     * ///////
     * bkt: {
     *      Txn:{
     *          Qty: {
     *              Cmp: "LESS_THAN"
     *              Vals:[1]
     *          }
     *          Time:{
     *              Cmp: ""
     *              Period: "EVER"
     *              Vals: []
     *          }
     *      }
     * }
     * ////
     * bkt: {
     *      Txn:{
     *          Amt: {
     *              Cmp: ""
     *              Vals:[2]
     *          }
     *          Time:{
     *              Cmp: ""
     *              Period: "EVER"
     *              Vals: []
     *          }
     *      }
     * }
     * How to identify 'Numerical'
     * 
     * How to identify 'Enum'
     * 
     * @param {*} bucketRestriction 
     * @param {*} type 
     * @param {*} typeToShow 
     */
    this.showType = function (bucketRestriction, type, typeToShow) {
        // console.log(bucketRestriction, ' - TO SHOW: ', typeToShow, ' - TYPE: ', type);
        if ('TimeSeries' === type) {

            switch (typeToShow) {
                case 'Boolean':
                    {
                        var txn = bucketRestriction.bkt.Txn;
                        if (txn.Negate != undefined) {
                            return true;
                        } else {
                            return false;
                        }
                    };
                case 'Date':
                case 'Numerical':
                case 'Enum':
                    {
                        return false;
                    }
                case 'Transaction':
                    {
                        return true;
                    }
                default:
                    return false;
            }
        } else if ('PercentChange' === type) {
            //TO DO: change this with back end value
            // console.log('IS AverageSeries');
            switch (typeToShow) {
                case 'Percent':
                    {
                        return true;
                    }
                default:
                    {
                        return false;
                    }
            }
        } else {
            switch (typeToShow) {
                case 'Numerical':
                    {
                        return true;
                    }
                default:
                    {
                        return false;
                    }
            }
        }
    };

    this.showTo = function (bucketRestriction, two_inputs) {
        if (two_inputs.indexOf(bucketRestriction.bkt.Cmp) >= 0) {
            return true;
        } else {
            return false;
        }
    };
    /**
     * Return the operation label for and Account or Contacts Entity
     * @param {*} cmpMap 
     * @param {*} type 
     * @param {*} bucketRestriction 
     */
    this.getOperationLabel = function (cmpMap, type, bucketRestriction) {
        // console.log('The op label ', type, '  ',cmpMap, '      ',bucketRestriction);
        if (!bucketRestriction.bkt) {
            return;
        }

        switch (type) {
            case 'TimeSeries':
                {
                    var txn = bucketRestriction.bkt.Txn;
                    var cmp = '';
                    if (txn.Negate !== undefined) {
                        cmp = 'is';
                    } else if (txn.Amt) {
                        cmp = txn.Amt.Cmp;
                    } else {
                        cmp = txn.Time.Cmp;
                    }
                    // console.log('CMP', cmp);
                    var ret = cmpMap[cmp];
                    // console.log('RET', ret);
                    return ret;
                }
            case 'PercentChange':
                {
                    return PercentStore.getCmpRedable(bucketRestriction);
                }
            case 'Numerical':
                {
                    var numRet = this.cmpMap[bucketRestriction.bkt.Cmp];
                    return numRet;
                }

            default:
                return 'has a value of';
        }
    };

    function getBooleanValue(bucketRestriction) {
        if (bucketRestriction.bkt.Txn) {
            return !bucketRestriction.bkt.Txn.Negate;
        } else {
            return 'Empty';
        }
    }

    function getDateValue(bucketRestriction) {
        var time = bucketRestriction.bkt.Txn.Time;
        if (time !== undefined) {
            return 'Ever';
            // return time.Period; This is the value that can be edited in the future
        } else {
            return 'Ever';
        }
    }

    function getNumericalValue(bucketRestriction, position) {
        if (bucketRestriction.ignored === false) {
            return bucketRestriction.bkt.Vals[position];
        }
    }

    function getEnumValues(bucketRestriction) {
        if (bucketRestriction.ignored === false) {
            return bucketRestriction.bkt.Vals;
        }
    }

    this.getOperationValue = function (bucketRestriction, operatorType, position) {
        // console.log('Operation Value', operatorType, position);
        switch (operatorType) {
            case 'Boolean':
                {
                    return getBooleanValue(bucketRestriction);
                };
            case 'Date':
                {
                    return getDateValue(bucketRestriction);
                };
            case 'Numerical':
                {
                    return getNumericalValue(bucketRestriction, position);
                };
            case 'Enum':
                {
                    return getEnumValues(bucketRestriction);
                };
            default:
                return 'Unknown';
        }
    };

    function sameValues(vals1, vals2) {
        var sameVals = true;
        if (vals1 && vals2 && vals1.length == vals2.length) {
            var index = 0;
            vals1.forEach(function (val) {
                if (val != vals2[index]) {
                    sameVals = false;
                    return;
                }
                index++;
            });
        } else {
            sameVals = false;
        }
        return sameVals;
    }

    this.getAttributeRules = function (bkt, bucket, isSameAttribute) {
        // console.log('PurchaseHistory');
        var isSameBucket = true;
        if (bucket && bucket.Txn && bkt && bkt.Txn) {
            var qty1 = bucket.Txn.Qty;
            var qty2 = bkt.Txn.Qty;
            var amt1 = bucket.Txn.Amt;
            var amt2 = bkt.Txn.Amt;

            if (!qty1 && !amt1 && !qty2 && !qty2) {
                var txn1 = bucket.Txn;
                var txn2 = bkt.Txn;
                var neg1 = txn1.Negate;
                var neg2 = txn1.Negate;
                var lbl1 = bucket.Lbl;
                var lbl2 = bkt.Lbl;
                isSameBucket = neg1 == neg2 && lbl1 == lbl2;
            }
        } else if (bucket && bucket.Chg && bkt && bkt.Chg) {
            var direction1 = bucket.Chg.Direction;
            var direction2 = bkt.Chg.Direction;
            var cmp1 = bucket.Chg.Cmp;
            var cmp2 = bkt.Chg.Cmp;

            isSameBucket = direction1 == direction2 && cmp1 == cmp2;
            if (isSameBucket) {
                isSameBucket = sameValues(bucket.Chg.Vals, bkt.Chg.Vals);
            }
        } else {
            if (bucket && bucket.Vals !== undefined && bucket.Vals != null && bkt.Vals !== undefined && bkt.Vals != null) {
                var tmp = bkt.Vals[0] == bucket.Vals[0] && bkt.Vals[1] == bucket.Vals[1] && bkt.Cmp == bucket.Cmp && bkt.Direction == bucket.Direction;
                isSameBucket = tmp;
            }
        }
        var r = isSameAttribute && isSameBucket;
        return r;
    };

    this.isBucketUsed = function (bucket) {
        return typeof bucket.bkt.Id == "number"; //typeof bucket.bkt.Id == "number" && bucket.bkt.Vals && bucket.bkt.Vals.length > 0;
    };

    /**
     * type: TimeSeries
     * @param {*} bucketRestriction 
     * @param {*} type 
     */
    this.getBktVals = function (bucketRestriction, type) {
        if (bucketRestriction.bkt.Txn) {
            var txn = bucketRestriction.bkt.Txn;
            switch (type) {
                case 'TimeSeries':
                    {
                        var val = getBooleanValue(bucketRestriction);
                        var vals = [val];
                        return vals;
                    }
                default:
                    {
                        return [];
                    }
            }
        } else if (bucketRestriction.bkt.Chg) {
            switch (type) {
                case 'PercentChange':
                    {
                        var values = bucketRestriction.bkt.Chg.Vals;
                        if (values) {
                            var listPct = values.toString();
                            listPct = listPct.replace(/,/g, ' - ');
                            return listPct;
                        } else {
                            return '';
                        }
                    }
                default:
                    {
                        return [];
                    }
            }
        } else {
            var vals = bucketRestriction.bkt;
            if (vals) {
                var list = vals.toString();
                list = list.replace(/,/g, ' - ');
                return list;
            } else {
                return '';
            }
        }
    };

    this.getValue = function (bucketRestriction, type, position, subType) {
        if (type === 'TimeSeries' && bucketRestriction.bkt.Txn) {
            var txn = bucketRestriction.bkt.Txn;
            switch (subType) {
                case 'Time':
                    {
                        var tsTime = txn.Time;
                        if (tsTime) {
                            return getValsBasedOnPosition(tsTime.Cmp, tsTime.Vals, position);
                        }
                        // if (tsTime && tsTime.Vals && position <= tsTime.Vals.length - 1) {
                        //     return tsTime.Vals[position];
                        // }
                    }
                case 'Qty':
                    {
                        var qty = txn.Qty;
                        if (qty) {
                            return getValsBasedOnPosition(qty.Cmp, qty.Vals, position);
                        }
                    }
                case 'Amt':
                    {
                        var amt = txn.Amt;
                        if (amt) {
                            return getValsBasedOnPosition(amt.Cmp, amt.Vals, position);
                        }
                    }

                default:
                    {
                        return 0;
                    }
            }
        } else if (type === 'PercentChange' && bucketRestriction.bkt.Chg) {
            return getValsBasedOnPosition(bucketRestriction.bkt.Chg.Cmp, bucketRestriction.bkt.Chg.Vals, position);
        } else {
            return getValsBasedOnPosition(bucketRestriction.bkt.Cmp, bucketRestriction.bkt.Vals, position);
        }
    };

    this.getValues = function (bucketRestriction, type, subType) {
        if (type === 'TimeSeries' && bucketRestriction.bkt.Txn) {
            var txn = bucketRestriction.bkt.Txn;
            switch (subType) {
                case 'Time':
                    {
                        var tsTime = txn.Time;
                        if (tsTime && tsTime.Vals) {
                            return tsTime.Vals;
                        }
                        return [];
                    }
                case 'Qty':
                    {
                        var qty = txn.Qty;
                        if (qty && qty.Vals) {
                            return qty.Vals;
                        }
                        return [];
                    }
                case 'Amt':
                    {
                        var amt = txn.Amt;
                        if (amt && amt.Vals) {
                            return amt.Vals;
                        }
                        return [];
                    }
                default:
                    {
                        return [];
                    }
            }
        } else if (type === 'PercentChange' && bucketRestriction.bkt.Chg) {
            return bucketRestriction.bkt.Chg.Vals;
        } else {
            return bucketRestriction.bkt.Vals;
        }
    };
    //******************** Editing mode *********************************/
    this.changeBooleanValue = function (bucketRestriction, booleanValue) {
        var txn = bucketRestriction.bkt.Txn;
        if (txn != undefined) {
            if ('Yes' === booleanValue) {
                txn.Negate = false;
                bucketRestriction.bkt.Lbl = 'Yes';
            } else if ('No' === booleanValue) {
                txn.Negate = true;
                bucketRestriction.bkt.Lbl = 'No';
            } else {
                txn.Negate = null;
                bucketRestriction.bkt.Lbl = 'Undefined';
            }
        }
    };
    this.changeEnumCmpValue = function (bucketRestriction, value) {
        bucketRestriction.bkt.Cmp = value;
    };
    this.changeNumericalCmpValue = function (bucketRestriction, value) {
        bucketRestriction.bkt.Cmp = value;
    };

    this.changeBktValue = function (bucketRestriction, value, position) {
        // var cmp = bucketRestriction.bkt.Cmp;
        // var vals = bucketRestriction.bkt.Vals;
        setValsBasedOnPosition(bucketRestriction.bkt.Cmp, bucketRestriction.bkt.Vals, position, value);
        // bucketRestriction.bkt.Vals[position] = value;
    };

    this.changeValue = function (bucketRestriction, type, value, position, subType) {
        if (type === 'TimeSeries') {
            var txn = bucketRestriction.bkt.Txn;
            if (txn) {
                switch (subType) {
                    case 'Time':
                        {
                            var tsTime = txn.Time;
                            if (tsTime && value !== undefined) {
                                setValsBasedOnPosition(tsTime.Cmp, tsTime.Vals, position, value);
                                // tsTime.Vals[position] = value;
                            }
                            break;
                        }
                    case 'Qty':
                        {
                            var qty = txn.Qty;
                            if (qty && value !== undefined) {
                                setValsBasedOnPosition(qty.Cmp, qty.Vals, position, value);
                            }
                            // console.log('Changed ', bucketRestriction);
                            break;
                        }
                    case 'Amt':
                        {
                            var amt = txn.Amt;
                            if (amt && value !== undefined) {
                                setValsBasedOnPosition(amt.Cmp, amt.Vals, position, value);
                                // amt.Vals[position] = value;
                            }
                            break;
                        }
                }
            }
        } else if (type === 'PercentChange' && bucketRestriction.bkt.Chg) {
            setValsBasedOnPosition(bucketRestriction.bkt.Chg.Cmp, bucketRestriction.bkt.Chg.Vals, position, value);
        } else {
            setValsBasedOnPosition(bucketRestriction.bkt.Cmp, bucketRestriction.bkt.Vals, position, value);
        }
    };

    this.changeTimeframePeriod = function (bucketRestriction, type, value) {
        switch (type) {
            case 'TimeSeries':
                {
                    var txn = bucketRestriction.bkt.Txn;
                    if (txn) {
                        var tsTime = txn.Time;
                        if (tsTime) {
                            tsTime.Period = value;
                        }
                    }
                };

            // default: return '';
        }
    };

    this.changeCmp = function (bucketRestriction, type, value, subType) {
        if (type === 'TimeSeries') {
            var txn = bucketRestriction.bkt.Txn;
            // console.log('Change Cmp', value, subType);
            if (txn) {
                switch (subType) {
                    case 'Time':
                        {
                            var tsTime = txn.Time;
                            if (tsTime) {
                                tsTime.Cmp = value;
                            } else {
                                txn[subType] = {
                                    Cmp: value,
                                    Period: "Month",
                                    Vals: []
                                };
                            }
                            break;
                        }
                    case 'Qty':
                        {
                            var qty = txn.Qty;
                            if (qty) {
                                qty.Cmp = value;
                            } else {
                                txn[subType] = {
                                    Cmp: value,
                                    Vals: []
                                };
                            }
                            break;
                        }
                    case 'Amt':
                        {
                            var amt = txn.Amt;
                            if (amt) {
                                amt.Cmp = value;
                            } else {
                                txn[subType] = {
                                    Cmp: value,
                                    Vals: []
                                };
                            }
                            break;
                        }
                }
            }
        } else if (type === 'PercentChange' && bucketRestriction.bkt.Chg) {
            bucketRestriction.bkt.Chg.Cmp = value;
        } else {
            bucketRestriction.bkt.Cmp = value;
        }
    };

    this.removeKey = function (bucketRestriction, type, subType) {
        if (type === 'TimeSeries') {
            var txn = bucketRestriction.bkt.Txn;
            // console.log('Change Cmp', value, subType);
            if (txn) {
                switch (subType) {
                    case 'Qty':
                        {
                            delete txn.Qty;
                            break;
                        }
                    case 'Amt':
                        {
                            delete txn.Amt;
                            break;
                        }
                }
            }
        }
    };
    this.resetBktValues = function (bucketRestriction, type, subType) {
        if (type === 'TimeSeries') {
            var txn = bucketRestriction.bkt.Txn;
            // console.log('Change Cmp', value, subType);
            if (txn) {
                switch (subType) {
                    case 'Time':
                        {
                            var t = txn.Time;
                            if (t) {
                                t.Vals = [];
                            }
                            break;
                        }
                    case 'Qty':
                        {
                            var qty = txn.Qty;
                            if (qty) {
                                qty.Vals = [];
                            }

                            break;
                        }
                    case 'Amt':
                        {
                            var amt = txn.Amt;
                            if (amt) {
                                amt.Vals = [];
                            }
                            break;
                        }
                }
            }
        } else if (type === 'PercentChange' && bucketRestriction.bkt.Chg) {
            bucketRestriction.bkt.Chg.Vals = [];
        } else {
            bucketRestriction.bkt.Vals = [];
        }
    };

    this.getBooleanModel = function (bucketRestriction) {
        var txn = bucketRestriction.bkt.Txn;
        if (txn && txn.Negate != undefined) {
            if (txn.Negate === true) {
                return 'No';
            }if (txn.Negate === false) {
                return 'Yes';
            }
            return '';
        } else {
            // console.warn('Buket restirction with Boolean Value not set');
            return '';
        }
    };

    this.getEnumCmpModel = function (bucketRestriction) {
        return bucketRestriction.bkt.Cmp;
    };

    this.getNumericalCmpModel = function (bucketRestriction) {
        return bucketRestriction.bkt.Cmp;
    };
    this.getStringCmpModel = function (bucketRestriction) {
        return bucketRestriction.bkt.Cmp;
    };

    this.getBktValue = function (bucketRestriction, position) {
        var txn = bucketRestriction.bkt.Txn;
        if (txn) {
            if (txn.Negate !== undefined) {
                return txn.Negate === true ? 'No' : 'Yes';
            }
            if (txn.Qty) {
                return txn.Qry.Vals[position];
            }
            if (txn.Amt) {
                return txn.Amt.Vals[position];
            }
        } else {
            return getValsBasedOnPosition(bucketRestriction.bkt.Cmp, bucketRestriction.bkt.Vals, position);
        }
    };

    this.getCubeBktList = function (cube) {
        return cube.Bkts.List;
    };

    function getTransacionCmp(bucketRestriction) {
        if (bucketRestriction && bucketRestriction.bkt && bucketRestriction.bkt.Txn && bucketRestriction.bkt.Txn.Time) {
            return bucketRestriction.bkt.Txn.Time.Cmp;
        } else {
            console.warn('Transaction attribute does not contain Cmp');
            return '';
        }
    }

    this.getCmp = function (bucketRestriction, type) {
        // console.log('TYPE', type);
        switch (type) {
            case 'TimeSeries':
                {
                    return getTransacionCmp(bucketRestriction);
                };
            case 'PercentChange':
                {
                    return bucketRestriction.bkt.Chg;
                }

            default:
                return bucketRestriction.bkt.Cmp;
        }
    };

    this.getCmp = function (bucketRestriction, type, subType) {
        switch (type) {
            case 'TimeSeries':
                {
                    if (bucketRestriction.bkt.Txn !== undefined) {
                        var txn = bucketRestriction.bkt.Txn;
                        if (subType === 'Time' && txn !== undefined) {
                            return txn.Time.Cmp;
                        }
                        if (subType === 'Qty' && txn.Qty !== undefined) {
                            return txn.Qty.Cmp;
                        }
                        if (subType === 'Amt' && txn.Amt !== undefined) {
                            return txn.Amt.Cmp;
                        }
                        return '';
                    } else {
                        console.warn('TimeSeries does not have Txn object');
                    }
                };
            case 'PercentChange':
                {
                    return bucketRestriction.bkt.Chg.Cmp;
                }
            default:
                return bucketRestriction.bkt.Cmp;
        }
    };

    this.getPeriodValue = function (bucketRestriction, type, subType) {
        if (type === 'TimeSeries' && subType !== undefined) {
            var txn = bucketRestriction.bkt.Txn;
            switch (subType) {
                case 'Time':
                    {
                        return txn.Time.Period;
                    }
                default:
                    return '';
            }
        } else {
            return '';
        }
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/tree.component.js":
/*!****************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/tree.component.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree', ['common.datacloud.query.builder.tree.service', 'common.datacloud.query.builder.tree.info', 'common.datacloud.query.builder.tree.edit', 'common.datacloud.query.builder.tree.edit.transaction', 'common.datacloud.query.builder.tree.edit.transaction.edit', 'common.datacloud.query.builder.tree.edit.percent', 'common.datacloud.query.builder.tree.edit.percent.edit', 'common.datacloud.query.builder.tree.edit.percent.item']).directive('queryTreeDirective', function () {
    return {
        restrict: 'AE',
        scope: {
            root: '=',
            tree: '=',
            parent: '=',
            entity: '='
        },
        templateUrl: '/components/datacloud/query/advanced/tree/tree.component.html',
        controllerAs: 'vm',
        controller: ["$scope", "$timeout", "$filter", "DataCloudStore", "QueryStore", "QueryTreeService", "RatingsEngineStore", function controller($scope, $timeout, $filter, DataCloudStore, QueryStore, QueryTreeService, RatingsEngineStore) {
            var vm = this;

            angular.extend(vm, {
                root: $scope.root,
                tree: $scope.tree,
                parent: $scope.parent,
                items: $scope.items,
                entity: $scope.entity,
                enrichments: [],
                enrichmentsMap: DataCloudStore.getEnrichmentsMap(),
                type: '',
                label: '',
                range: [],
                operation: '',
                unused: false,
                uniqueId: Math.random() * (8 << 8),
                editMode: 'Custom',
                records_updating: false,
                numerical_operations: QueryTreeService.numerical_operations,
                enum_operations: QueryTreeService.enum_operations,
                no_inputs: QueryTreeService.no_inputs,
                two_inputs: QueryTreeService.two_inputs
            });

            vm.init = function (type, value) {
                vm.tree.collapsed = false;

                DataCloudStore.getEnrichments().then(function (enrichments) {
                    vm.enrichments = enrichments;
                    if (vm.tree.bucketRestriction) {
                        // console.log('BUCKET ',vm.tree.bucketRestriction.ignored);
                        if (vm.tree.bucketRestriction.ignored === undefined) {
                            vm.tree.bucketRestriction.ignored = true;
                        }

                        var bucket = vm.tree.bucketRestriction,
                            bucketEntity = bucket.attr.split('.')[0],
                            bucketColumnId = bucket.attr.split('.')[1];

                        vm.item = $filter('filter')(vm.enrichments, { Entity: bucketEntity, ColumnId: bucketColumnId }, true)[0];
                        // console.log('ITEM ', vm.item);
                        if (!vm.item || bucket.ignored === true) {
                            vm.unused = true;
                        } else {
                            vm.unused = bucket.ignored;
                        }
                        // console.log('IGNORE ', vm.unused);
                        if (vm.item) {
                            vm.root.pushItem(vm.item, vm.tree.bucketRestriction, vm);
                            if (vm.item.cube && vm.item.cube.Bkts) {
                                vm.type = vm.item.cube.Bkts.Type;
                                // console.log("Type =============> ",vm.type);
                            } else {
                                //FIXME: if there is no Bkts, it is most likely a non-bucketable text field (YSong, Jan-2018)
                                vm.type = 'String';
                            }
                        }

                        vm.label = vm.tree.bucketRestriction.bkt ? vm.tree.bucketRestriction.bkt.Lbl : '';
                        vm.range = QueryTreeService.getBktVals(vm.tree.bucketRestriction, vm.type); //vm.tree.bucketRestriction.bkt.Vals;
                    }
                });
            };

            vm.isBucketUsed = function (bucket) {
                var ret = QueryTreeService.isBucketUsed(bucket); //typeof bucket.bkt.Id == "number" && bucket.bkt.Vals && bucket.bkt.Vals.length > 0;
                return ret;
            };

            vm.checkSelected = function (bucket) {
                // console.log('checkSelected', bucket);
                // Remove this method and remove vm.range/vm.label since they should not be necessary
                if (bucket.Vals && bucket.Vals[0] == vm.range[0] && bucket.Vals[1] == vm.range[1]) {
                    vm.presetOperation = bucket.Lbl;
                }
            };

            vm.changePreset = function (bucket) {
                var label = vm.presetOperation;
                var buckets = vm.item.cube.Bkts.List;
                // var bucket = buckets.filter(function(item) { return item.Lbl == label; })[0];
                if (bucket == undefined) bucket = buckets.filter(function (item) {
                    return item.Lbl == label;
                })[0];
                var restriction = vm.tree.bucketRestriction.bkt;
                var bkt = angular.copy(bucket);

                restriction.Cmp = bkt.Cmp;
                restriction.Id = bkt.Id;
                restriction.Cnt = bkt.Cnt;
                restriction.Lbl = bkt.Lbl;
                if (bkt.Vals[0] !== undefined) {
                    if (restriction.Vals[0]) {
                        restriction.Vals[0] = bkt.Vals[0];
                    } else {
                        restriction.Vals = [bkt.Vals[0]];
                    }
                } else if (restriction.Vals[0]) {
                    restriction.Vals.length = 0;
                }

                if (bkt.Vals[1] !== undefined) {
                    if (restriction.Vals[1]) {
                        restriction.Vals[1] = bkt.Vals[1];
                    } else {
                        restriction.Vals.push(bkt.Vals[1]);
                    }
                } else if (restriction.Vals[1]) {
                    restriction.Vals.splice(1, 1);
                }
            };

            // vm.getOperationLabel = function() {
            //     if (!vm.tree.bucketRestriction.bkt) {
            //         return;
            //     }

            //     switch (vm.type) {
            //         case 'Boolean': return QueryTreeService.cmpMap[vm.tree.bucketRestriction.bkt.Vals[0] || ''];
            //         case 'Numerical': return QueryTreeService.cmpMap[vm.tree.bucketRestriction.bkt.Cmp];
            //         case 'Enum': return QueryTreeService.cmpMap[vm.tree.bucketRestriction.bkt.Cmp];
            //         default: return 'has a value of';
            //     }
            // }

            vm.setBucket = function ($event, unset) {
                vm.editing = false;

                if (unset) {
                    vm.unused = true;
                    vm.tree.bucketRestriction.bkt = {};
                    vm.tree.bucketRestriction.ignored = true;
                } else {
                    vm.unused = false;
                    vm.tree.bucketRestriction.ignored = false;
                }

                vm.records_updating = true;

                vm.root.updateCount();
                vm.updateBucketCount();

                $event.preventDefault();
                $event.stopPropagation();

                $timeout(function () {
                    vm.records_updating = false;
                }, 250);
            };

            vm.editBucket = function () {
                if (vm.root.draggedItem == vm) {
                    return;
                }

                if (!vm.editing && !vm.root.draggedItem && (vm.type == 'Boolean' || vm.type == 'Numerical' || vm.type == 'Enum' || vm.type == 'TimeSeries' || vm.type == 'String' || vm.type == 'PercentChange')) {
                    if (vm.unused) {
                        vm.unused = false;
                        vm.tree.bucketRestriction.ignored = false;

                        if (vm.type != 'String') {
                            vm.item.topbkt = angular.copy(vm.item.cube.Bkts.List[0]);
                            vm.tree.bucketRestriction.bkt = angular.copy(vm.item.cube.Bkts.List[0]);
                        } else {
                            vm.item.topbkt = {
                                "Lbl": " ",
                                "Cmp": "IS_NOT_NULL",
                                "Id": -1,
                                "Cnt": vm.item.cube.Cnt,
                                "Vals": [""]
                            };

                            vm.tree.bucketRestriction.bkt = {
                                "Lbl": " ",
                                "Cmp": "IS_NOT_NULL",
                                "Id": -1,
                                "Cnt": vm.item.cube.Cnt,
                                "Vals": [""]
                            };
                        }

                        vm.label = vm.tree.bucketRestriction.bkt.Lbl;
                        vm.range = vm.tree.bucketRestriction.bkt.Vals;
                    }

                    vm.root.saveState(true);
                    vm.editing = true;
                }
            };

            vm.updateBucketCount = function (segmentName) {
                if (vm.root.mode != 'rules' || vm.root.mode != 'dashboardrules') {
                    vm.records_updating = true;

                    QueryTreeService.updateBucketCount(angular.copy(vm.tree.bucketRestriction), segmentName).then(function (data) {
                        if (typeof data == 'number') {
                            vm.tree.bucketRestriction.bkt.Cnt = data;
                        }

                        vm.records_updating = false;
                    });
                }
            };

            // vm.changeBooleanValue = function() {
            //     if (!vm.tree.bucketRestriction.bkt.Vals[0]) {
            //         vm.tree.bucketRestriction.bkt.Vals[0] = null;
            //     }

            //     vm.updateBucketCount();
            // }

            vm.addAttribute = function (tree) {
                this.root.saveState();
                QueryStore.setAddBucketTreeRoot(vm.tree, vm.entity.toLowerCase());
                this.root.goAttributes();
            };

            vm.mouseDown = function (event) {
                if (vm.editing) {
                    return false;
                }

                vm.root.draggedItem = null;

                vm.root.mouseDownTimer = $timeout(function () {
                    vm.root.draggedItem = vm;
                    vm.root.mouseDownTimer = false;
                    vm.mouseMove(event);
                }, 150);
            };

            vm.mouseMove = function (event, dashedItem, append) {
                var dragged = vm.root.draggedItem,
                    dropped = vm.root.droppedItem;

                if (dragged) {
                    var rect = event.currentTarget.getBoundingClientRect(),
                        offsetY = event.clientY - rect.top;

                    if (!dashedItem) {
                        vm.root.droppedItemAppend = offsetY / rect.height >= 0.5;
                    } else if (append) {
                        vm.root.droppedItemAppend = append || false;
                    }

                    if (!vm.root.draggedClone || !vm.root.draggedContainer) {
                        vm.root.draggedContainer = angular.element('.advanced-query-builder');

                        vm.root.draggedClone = angular.element(event.currentTarget.parentNode.cloneNode(false));
                        vm.root.draggedClone.append(event.currentTarget.cloneNode(true));

                        vm.root.draggedContainer.append(vm.root.draggedClone);
                        vm.root.draggedClone.addClass('query-section').addClass('dragging');
                    }

                    vm.rect = vm.root.draggedContainer[0].getBoundingClientRect();

                    var x = event.clientX - vm.rect.left + 10;
                    var y = event.clientY - vm.rect.top - 51;
                    var t = 'translate(' + x + 'px,' + y + 'px) scale(0.8, 0.8)';

                    vm.root.draggedClone.css({
                        '-webkit-transform': t,
                        '-moz-transform': t,
                        '-ms-transform': t,
                        'transform': t
                    });
                }
            };

            vm.mouseOver = function (event) {
                var dragged = vm.root.draggedItem,
                    dropped = vm.root.droppedItem;

                if (dragged && (!dropped || dropped && dropped.tree.$$hashKey !== vm.tree.$$hashKey)) {
                    vm.root.droppedItem = vm;
                }
            };

            vm.addOperator = function (tree) {
                var operator = tree.logicalRestriction.operator == 'AND' ? 'OR' : 'AND';

                this.root.saveState();

                if (tree.logicalRestriction) {
                    tree.logicalRestriction.restrictions.push({
                        logicalRestriction: {
                            operator: operator,
                            restrictions: []
                        }
                    });
                }
            };

            vm.clickOperator = function () {
                $timeout(function () {
                    vm.root.saveState();
                }, 50);
            };

            // vm.clickEditMode = function(value) {
            //     vm.editMode = value;
            //     if(value !== 'Custom'){
            //         console.log('Preset');
            //         var bucket = vm.getCubeBktList()[0]
            //         vm.changePreset(bucket);
            //     }else{
            //         QueryTreeService.resetBktValues();
            //     }
            // }

            vm.clickCollapsed = function () {
                // FIXME - collapsed property is weeded out of equivalency check
                //vm.root.saveState(true); // true wont update counts

                vm.tree.collapsed = !vm.tree.collapsed;
            };

            vm.clickDelete = function () {

                vm.root.saveState();

                vm.parent.logicalRestriction.restrictions.forEach(function (item, index) {
                    if (item == vm.tree) {
                        if (vm.parent.bucketRestriction || vm.parent.logicalRestriction) {
                            vm.parent.logicalRestriction.restrictions.splice(index, 1);
                        }
                    }
                });
                vm.root.updateCount();
            };

            vm.buckRestrictionSortBy = function () {
                return function (object) {
                    return object.bucketRestriction && object.bucketRestriction.bkt && object.bucketRestriction.bkt.Id;
                };
            };

            vm.categoryClass = function (category) {
                return category ? category.toLowerCase().replace(/\s/g, "_") : '';
            };

            vm.init();
        }]
    };
});

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/tree.index.js":
/*!************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/tree.index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./edit/edit.index */ "../common/components/datacloud/query/advanced/tree/edit/edit.index.js");

__webpack_require__(/*! ./item/item.index */ "../common/components/datacloud/query/advanced/tree/item/item.index.js");

__webpack_require__(/*! ./percent/prcent.index */ "../common/components/datacloud/query/advanced/tree/percent/prcent.index.js");

__webpack_require__(/*! ./transaction/transaction.index */ "../common/components/datacloud/query/advanced/tree/transaction/transaction.index.js");

__webpack_require__(/*! ./tree-purchase-history.service */ "../common/components/datacloud/query/advanced/tree/tree-purchase-history.service.js");

__webpack_require__(/*! ./tree.component */ "../common/components/datacloud/query/advanced/tree/tree.component.js");

__webpack_require__(/*! ./tree.service */ "../common/components/datacloud/query/advanced/tree/tree.service.js");

/***/ }),

/***/ "../common/components/datacloud/query/advanced/tree/tree.service.js":
/*!**************************************************************************!*\
  !*** ../common/components/datacloud/query/advanced/tree/tree.service.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query.builder.tree.service', ['common.datacloud.query.builder.tree.purchasehistory.service']).service('QueryTreeService', ["$q", "$http", "QueryTreeAccountEntityService", "QueryTreePurchaseHistoryService", "QueryService", function ($q, $http, QueryTreeAccountEntityService, QueryTreePurchaseHistoryService, QueryService) {
    // console.log('TEST service');
    var QueryTreeService = this;
    /**
     * This object is used to define the association among treeMode and the entity
     */
    this.treeMapping = {
        'rating': 'account',
        'purchasehistory': 'account',
        'account': 'account',
        'contact': 'contact',
        'curatedaccount': 'account'

    };
    this.transactionMap = {
        'EVER': 'Ever',
        'IN_CURRENT_PERIOD': 'Current',
        'WITHIN': 'Previous',
        'PRIOR_ONLY': 'Only Prior to Last',
        'BETWEEN': 'Between Last',
        'BETWEEN_DATE': 'Between',
        'BEFORE': 'Before',
        'AFTER': 'After'
    };
    this.cmpMap = {
        "Yes": "is",
        "No": "is",
        "": "is",
        "is": "is",
        "empty": "is empty",
        "between": "is between",
        'IS_NULL': 'is empty',
        'IS_NOT_NULL': 'is present',
        'EQUAL': 'is equal to',
        'NOT_EQUAL': 'is not equal to',
        'GREATER_THAN': 'is greater than',
        'GREATER_OR_EQUAL': 'is greater than or equal to',
        'LESS_THAN': 'is less than',
        'LESS_OR_EQUAL': 'is less than or equal to',
        'GTE_AND_LTE': 'is greater than or equal and lesser than or equal',
        'GTE_AND_LT': 'is between',
        'GT_AND_LTE': "is greater than and lesser or equal",
        'GT_AND_LT': "is greater than and less than",
        'IN_COLLECTION': 'in collection',
        'NOT_IN_COLLECTION': 'is not',
        'CONTAINS': 'contains',
        'NOT_CONTAINS': 'not contains',
        'STARTS_WITH': 'starts with',
        'IN_CURRENT_PERIOD': 'Current',
        'EVER': 'Ever',
        'Any': 'Any',
        'BEFORE': 'Before',
        'BETWEEN': 'Between',
        'AFTER': 'After',
        'BETWEEN_LT': 'Between Last',
        'PREVIOUS': 'Previous',
        'PRIOR_ONLY_LT': 'Only Prior to Last',
        'ENDS_WITH': 'ends with',
        'WITHIN': 'Previous',
        'PRIOR_ONLY': 'Only Prior to Last',
        'BETWEEN_DATE': 'Between'
    };

    this.numerical_operations = {
        'EQUAL': 'Equal to',
        'NOT_EQUAL': 'Not Equal to',
        'GREATER_THAN': 'Greater Than',
        'GREATER_OR_EQUAL': 'Greater than or Equal to',
        'LESS_THAN': 'Less Than',
        'LESS_OR_EQUAL': 'Less than or Equal to',
        'GTE_AND_LT': 'Between',
        'IS_NULL': 'Is Empty'
    };

    this.enum_operations = {
        'EQUAL': 'is',
        'NOT_EQUAL': 'is not',
        'IN_COLLECTION': 'is',
        'NOT_IN_COLLECTION': 'is not'
    };

    this.string_operations = {
        'STARTS_WITH': 'starts with',
        'ENDS_WITH': 'ends with',
        'CONTAINS': 'contains',
        'NOT_CONTAINS': 'does not contain',
        'EQUAL': 'equals',
        'NOT_EQUAL': 'does not equal',
        'IS_NULL': 'is empty',
        'IS_NOT_NULL': 'is present'
    };

    this.no_inputs = ['IS_NULL', 'IS_NOT_NULL'];

    this.two_inputs = ['GTE_AND_LT'];

    this.numerical_labels = {
        'EQUAL': '=',
        'NOT_EQUAL': '!=',
        'GREATER_THAN': '>',
        'GREATER_OR_EQUAL': '>=',
        'LESS_THAN': '<',
        'LESS_OR_EQUAL': '<=',
        'IS_NULL': 'is empty'
    };

    this.prevBucketCountAttr = null;

    /**
     * Return the service based on the Entity type
     * 'Account', 'Contact', 'PurchaseHistory'
     * @param {*} entity 
     */
    function getService(entity) {
        switch (entity) {
            case 'LatticeAccount':
            case 'Account':
            case 'Contact':
            case 'CuratedAccount':
            case 'Rating':
                {
                    return QueryTreeAccountEntityService;
                };
            case 'PurchaseHistory':
                {
                    return QueryTreePurchaseHistoryService;
                };
            default:
                return null;
        }
    }

    /**
     * Retrives from attr the Entity
     * @param {*} bucketRestriction 
     */
    function getEntity(bucketRestriction) {
        if (bucketRestriction) {
            var attr = bucketRestriction.attr;
            if (attr) {
                var dot = attr.indexOf('.');
                var entity = attr.slice(0, dot);
                return entity;
            } else {
                return 'Unkown';
            }
        } else {
            console.warn('Bucket Restriction not existing', bucketRestriction);
            return 'Unkown';
        }
    }

    this.showEmptyOption = function (bucketRestriction) {
        if ('PurchaseHistory' === getEntity(bucketRestriction)) {
            return false;
        } else {
            return true;
        }
    };

    /**
     * Return if a type ('Boolean', 'Numerical', 'Enum') can be shown or not
     * @param {*} bucketRestriction 
     * @param {*} type 
     * @param {*} typeToShow 
     */
    this.showType = function (bucketRestriction, type, typeToShow) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.showType(bucketRestriction, type, typeToShow);
        } else {
            console.warn('Service not implemented');
            return false;
        }
    };

    /**
     * Return if the second value (To) can be shown or not
     * @param {*} bucketRestriction 
     */
    this.showTo = function (bucketRestriction) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.showTo(bucketRestriction, this.two_inputs);
        } else {
            console.warn('Service not implemented');
            return false;
        }
    };
    /**
     * Return the operation label (Ex. 'is equal to' 'is less than')
     * based on the Entity
     * @param {*} type 
     * @param {*} bucketRestriction 
     */
    this.getOperationLabel = function (type, bucketRestriction) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getOperationLabel(QueryTreeService.cmpMap, type, bucketRestriction);
        } else {
            console.warn('Service not implemented');
            return 'has a value of';
        }
    };
    /**
     * Return the value of the bucket restriction
     * @param {*} bucketRestriction 
     * @param {*} operatorType 
     * @param {*} position 
     */
    this.getOperationValue = function (bucketRestriction, operatorType, position) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getOperationValue(bucketRestriction, operatorType, position);
        } else {
            console.warn('Service not implemented');
            return 'Unknown';
        }
    };

    this.getAttributeRules = function (bucketRestriction, bkt, bucket, isSameAttribute) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        return service.getAttributeRules(bkt, bucket, isSameAttribute);
    };

    this.getValue = function (bucketRestriction, type, position, subType) {
        if (subType != undefined) {
            var entity = getEntity(bucketRestriction);
            var service = getService(entity);
            return service.getValue(bucketRestriction, type, position, subType);
        } else {
            return this.getBktValue(bucketRestriction, position);
        }
    };

    this.getValues = function (bucketRestriction, type, subType) {
        if (subType === undefined) {
            return this.getBktVals(bucketRestriction, type);
        } else {
            var entity = getEntity(bucketRestriction);
            var service = getService(entity);
            return service.getValues(bucketRestriction, type, subType);
        }
    };

    this.getBktVals = function (bucketRestriction, type) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        return service.getBktVals(bucketRestriction, type);
    };

    this.isBucketUsed = function (bucket) {
        // console.log('Service ', bucket);
        // return bucket.ignored;
        var entity = getEntity(bucket);
        var service = getService(entity);
        return service.isBucketUsed(bucket);
    };

    this.hasInputs = function (type, bucketRestriction) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        var cmpModel = bucketRestriction.bkt.Cmp;
        if (service) {
            switch (type) {
                case 'Enum':
                    cmpModel = service.getEnumCmpModel(bucketRestriction);
                    break;
                case 'String':
                    cmpModel = service.getStringCmpModel(bucketRestriction);
                    break;
                case 'Numerical':
                    cmpModel = service.getNumericalCmpModel(bucketRestriction);
                    break;
            }
            return this.no_inputs.indexOf(cmpModel) == -1;
        } else {
            console.warn('getCmpModel() service not implemented');
        }
    };

    //***************** Editing ************************************/


    /**
     * Return the var for ng-model in a boolean bucket restriction
     * @param {*} bucketRestriction 
     */
    this.getBooleanModel = function (bucketRestriction) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getBooleanModel(bucketRestriction);
        } else {
            console.warn(' getBooleanModel() Service not implemented');
        }
    };

    this.getStringCmpModel = function (bucketRestriction) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getStringCmpModel(bucketRestriction);
        } else {
            console.warn(' getStringCmpModel() Service not implemented');
        }
    };

    this.getEnumCmpModel = function (bucketRestriction) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getEnumCmpModel(bucketRestriction);
        } else {
            console.warn(' getEnumCmpModel() Service not implemented');
        }
    };

    this.getNumericalCmpModel = function (bucketRestriction) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getNumericalCmpModel(bucketRestriction);
        } else {
            console.warn(' getNumericalCmpModel() Service not implemented');
        }
    };

    /**
    * Change a boolean value for a Boolean restriction
    * @param {*} bucketRestriction 
    */
    this.changeBooleanValue = function (bucketRestriction, booleanValue) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            service.changeBooleanValue(bucketRestriction, booleanValue);
        } else {
            console.warn(' changeBooleanValue() Service not implemented');
        }
    };
    this.changeEnumCmpValue = function (bucketRestriction, value) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.changeEnumCmpValue(bucketRestriction, value);
        } else {
            console.warn(' changeEnumCmpValue() Service not implemented');
        }
    };
    this.changeStringValue = function (bucketRestriction, stringValue) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            service.changeStringValue(bucketRestriction, stringValue);
        } else {
            console.warn(' changeStringValue() Service not implemented');
        }
    };
    this.changeStringCmpValue = function (bucketRestriction, value) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.changeStringCmpValue(bucketRestriction, value);
        } else {
            console.warn(' changeStringCmpValue() Service not implemented');
        }
    };
    this.changeNumericalCmpValue = function (bucketRestriction, value) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            QueryTreeService.changeBktValsSize(bucketRestriction, value);
            return service.changeNumericalCmpValue(bucketRestriction, value);
        } else {
            console.warn(' changeNumericalCmpValue() Service not implemented');
        }
    };

    this.changeBktValsSize = function (bucketRestriction, value) {
        if (QueryTreeService.two_inputs.indexOf(value) < 0 && bucketRestriction.bkt.Vals.length == 2) {
            bucketRestriction.bkt.Vals.splice(1, 1);
        }
    };

    this.changeBktValue = function (bucketRestriction, value, position) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.changeBktValue(bucketRestriction, value, position);
        } else {
            console.warn(' changeNumericalCmpValue() Service not implemented');
        }
    };

    this.changeValue = function (bucketRestriction, type, value, position, subType) {
        if (subType === undefined) {
            this.changeBktValue(bucketRestriction, value, position);
        } else {
            var entity = getEntity(bucketRestriction);
            var service = getService(entity);
            service.changeValue(bucketRestriction, type, value, position, subType);
        }
    };

    this.changeCmp = function (bucketRestriction, type, value, subType) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.changeCmp(bucketRestriction, type, value, subType);
        } else {
            console.warn(' changeNumericalCmpValue() Service not implemented');
        }
    };

    this.changeTimeframePeriod = function (bucketRestriction, type, value) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.changeTimeframePeriod(bucketRestriction, type, value);
        } else {
            console.warn(' changeNumericalCmpValue() Service not implemented');
        }
    };

    this.removeKey = function (bucketRestriction, type, subType) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.removeKey(bucketRestriction, type, subType);
        } else {
            console.warn(' removeKey() Service not implemented');
        }
    };
    this.resetBktValues = function (bucketRestriction, type, subType) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.resetBktValues(bucketRestriction, type, subType);
        } else {
            console.warn(' resetBktValues() Service not implemented');
        }
    };

    this.getBktValue = function (bucketRestriction, position) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getBktValue(bucketRestriction, position);
        } else {
            console.warn(' getBktValue() Service not implemented');
        }
    };

    this.getCubeBktList = function (bucketRestriction, cube) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getCubeBktList(cube);
        } else {
            console.warn(' getCubeBktList() Service not implemented');
        }
    };

    this.setPickerObject = function (attribute) {
        this.picker_object = attribute;
    };

    this.getPickerObject = function (attribute) {
        return this.picker_object;
    };

    this.getPickerCubeData = function (entity, fieldname) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/datacollection/statistics/attrs/' + entity + '/' + fieldname
        }).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.updateBucketCount = function (bucketRestriction, segmentName) {
        var deferred = $q.defer();

        var segment = {
            "free_form_text_search": ""
        };
        if (segmentName) {
            segment.preexisting_segment_name = segmentName;
            // segment.contact_restriction = {};
        }
        console.log(bucketRestriction.attr);
        this.treeMode = bucketRestriction.attr.split('.')[0].toLowerCase();
        //This call is done to associate some mode to account
        this.treeMode = QueryTreeService.treeMapping[this.treeMode];
        segment[this.treeMode + '_restriction'] = {
            "restriction": {
                "bucketRestriction": angular.copy(bucketRestriction)
            }
        };
        console.log(this.treeMode);
        QueryService.GetCountByQuery(this.treeMode + 's', segment, bucketRestriction.attr == this.prevBucketCountAttr).then(function (result) {
            deferred.resolve(result);
        });

        this.prevBucketCountAttr = bucketRestriction.attr;

        return deferred.promise;
    };

    this.getCmp = function (bucketRestriction, type) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        if (service) {
            return service.getCmp(bucketRestriction, type);
        } else {
            console.warn(' getCmp() Service not implemented');
        }
    };

    this.getCmp = function (bucketRestriction, type, subType) {
        if (subType === undefined) {
            return this.getCmp(bucketRestriction, type);
        } else {
            var entity = getEntity(bucketRestriction);
            var service = getService(entity);
            if (service) {
                return service.getCmp(bucketRestriction, type, subType);
            } else {
                console.warn(' getCmp() Service not implemented');
            }
        }
    };

    this.getPeriodValue = function (bucketRestriction, type, subType) {
        var entity = getEntity(bucketRestriction);
        var service = getService(entity);
        return service.getPeriodValue(bucketRestriction, type, subType);
    };
}]).service('QueryTreeAccountEntityService', function () {
    function setValsBasedOnPosition(cmp, valsArray, position, value) {
        switch (cmp) {
            case 'GTE_AND_LT':
                {
                    valsArray[position] = value;
                    break;
                }
            default:
                {
                    valsArray[0] = value;
                }
        }
    }
    function getValsBasedOnPosition(cmp, valsArray, position) {
        switch (cmp) {
            case 'GTE_AND_LT':
                {
                    return valsArray[position];
                    break;
                }
            case 'GREATER_THAN':
            case 'GREATER_OR_EQUAL':
            case 'NOT_EQUAL':
            case 'EQUAL':
                {
                    if (position == valsArray.length - 1 || valsArray.length == 0) {
                        return valsArray[valsArray.length - 1];
                    } else {
                        return null;
                    }
                    break;
                }
            case 'LESS_THAN':
            case 'LESS_OR_EQUAL':
                {
                    if (position == valsArray.length - 1 || valsArray.length == 0) {
                        return null;
                    } else {
                        return valsArray[valsArray.length - 1];
                    }
                    break;
                    ;
                }
            default:
                {
                    return null;
                }
        }
    }

    this.showType = function (bucketRestriction, type, typeToShow) {
        switch (typeToShow) {
            case 'Numerical':
                {
                    if (typeToShow === type) {
                        return true;
                    } else {
                        return false;
                    }
                };
            case 'Boolean':
                {
                    if (type === typeToShow) {
                        return true;
                    } else {
                        return false;
                    }
                };
            case 'Enum':
                {
                    if (type === typeToShow) {
                        return true;
                    } else {
                        return false;
                    }
                };
            case 'Date':
                {
                    return false;
                };
            case 'String':
                {
                    return type === typeToShow;
                }
            default:
                return false;
        }
    };

    this.showTo = function (bucketRestriction, two_inputs) {
        if (two_inputs.indexOf(bucketRestriction.bkt.Cmp) >= 0) {
            return true;
        } else {
            return false;
        }
    };
    /**
     * Return the operation label for and Account or Contacts Entity
     * @param {*} cmpMap 
     * @param {*} type 
     * @param {*} bucketRestriction 
     */
    this.getOperationLabel = function (cmpMap, type, bucketRestriction) {
        if (!bucketRestriction.bkt) {
            return;
        }
        var cmp = bucketRestriction.bkt.Cmp;

        switch (type) {
            case 'Boolean':
                return cmpMap[bucketRestriction.bkt.Vals[0] || ''];

            case 'Numerical':
                return cmpMap[cmp];

            case 'Enum':
                var ret = '';

                switch (cmp) {
                    case 'EQUAL':
                        ret = 'is';break;
                    case 'IN_COLLECTION':
                        ret = 'is';break;
                    case 'NOT_EQUAL':
                        ret = 'is not';break;
                    case 'NOT_IN_COLLECTION':
                        ret = 'is not';break;
                    case 'IS_NULL':
                        ret = 'is empty';break;
                    case 'IS_NOT_NULL':
                        ret = 'is present';break;
                }

                return ret;

            case 'String':
                return cmpMap[cmp];

            default:
                return 'has a value of';
        }
    };

    function getBooleanValue(bucketRestriction) {
        if (bucketRestriction.bkt.Vals && bucketRestriction.bkt.Vals[0] === 'Yes') {
            return 'True';
        }if (bucketRestriction.bkt.Vals && bucketRestriction.bkt.Vals[0] === 'No') {
            return 'False';
        }
        return 'Empty';
    }

    function getNumericalValue(bucketRestriction, position) {
        return bucketRestriction.bkt.Vals[position];
    }

    function getEnumValues(bucketRestriction) {
        return bucketRestriction.bkt.Vals;
    }

    function getStringValue(bucketRestriction) {
        if (bucketRestriction.bkt.Cmp == 'IS_NULL' || bucketRestriction.bkt.Cmp == 'IS_NOT_NULL') {
            return '';
        }
        return bucketRestriction.bkt.Vals && bucketRestriction.bkt.Vals[0] ? bucketRestriction.bkt.Vals[0] : 'any (*)';
    }

    this.getOperationValue = function (bucketRestriction, operatorType, position) {
        // console.log('Operation Value', operatorType, position);
        switch (operatorType) {
            case 'Boolean':
                {
                    return getBooleanValue(bucketRestriction);
                };
            case 'Numerical':
                {
                    return getNumericalValue(bucketRestriction, position);
                };
            case 'Enum':
                {
                    return getEnumValues(bucketRestriction);
                };
            case 'String':
                {
                    return getStringValue(bucketRestriction);
                };
            default:
                return 'Unknown';
        }
    };

    this.getAttributeRules = function (bkt, bucket, isSameAttribute) {
        // console.log('Account', bucket, bkt);
        var isSameBucket = true;
        if (bucket && bucket.Vals !== undefined && bucket.Vals != null && bkt.Vals !== undefined && bkt.Vals != null) {
            isSameBucket = bkt.Vals[0] == bucket.Vals[0] && bkt.Vals[1] == bucket.Vals[1] && bkt.Cmp == bucket.Cmp;
        }

        return isSameAttribute && isSameBucket;
    };

    this.isBucketUsed = function (bucket) {
        // return bucket.bkt && typeof bucket.bkt.Id == "number" || bucket.ignored !== true;
        return bucket.ignored !== true;
    };

    this.getBktVals = function (bucketRestriction, type) {
        return bucketRestriction.bkt && bucketRestriction.bkt.Vals;
    };

    this.getValue = function (bucketRestriction, type, position, subType) {};

    this.getValues = function (bucketRestriction, type, subType) {};

    //******************** Editing mode *********************************/
    this.changeBooleanValue = function (bucketRestriction, booleanValue) {
        bucketRestriction.bkt.Vals[0] = booleanValue.length ? booleanValue : null;
    };
    this.changeStringValue = function (bucketRestriction, stringValue) {
        bucketRestriction.bkt.Vals[0] = stringValue ? stringValue : '';
    };
    this.changeStringCmpValue = function (bucketRestriction, value) {
        bucketRestriction.bkt.Cmp = value;
    };
    this.changeEnumCmpValue = function (bucketRestriction, value) {
        bucketRestriction.bkt.Cmp = value;
    };
    this.changeNumericalCmpValue = function (bucketRestriction, value) {
        bucketRestriction.bkt.Cmp = value;
    };

    this.changeBktValue = function (bucketRestriction, value, position) {
        setValsBasedOnPosition(bucketRestriction.bkt.Cmp, bucketRestriction.bkt.Vals, position, value);
        // bucketRestriction.bkt.Vals[position] = value;
    };

    this.changeValue = function (bucketRestriction, type, value, position, subType) {};

    this.changeTimeframePeriod = function (bucketRestriction, type, value) {};

    this.resetBktValues = function (bucketRestriction, type, subType) {
        bucketRestriction.bkt.Vals = [];
    };
    this.removeKey = function (bucketRestriction, type, subtype) {
        console.warn('Not implemented');
    };
    this.getBooleanModel = function (bucketRestriction) {
        return bucketRestriction.bkt.Vals[0];
    };
    this.getStringCmpModel = function (bucketRestriction) {
        return bucketRestriction.bkt.Cmp;
    };
    this.getEnumCmpModel = function (bucketRestriction) {
        return bucketRestriction.bkt.Cmp;
    };

    this.getNumericalCmpModel = function (bucketRestriction) {
        return bucketRestriction.bkt.Cmp;
    };

    this.getBktValue = function (bucketRestriction, position) {
        return getValsBasedOnPosition(bucketRestriction.bkt.Cmp, bucketRestriction.bkt.Vals, position);
        // return bucketRestriction.bkt.Vals[position];
    };

    this.getCubeBktList = function (cube) {
        return cube.Bkts.List;
    };

    this.getCmp = function (bucketRestriction, type, subType) {
        return '';
    };

    this.getPeriodValue = function (bucketRestriction, type, subtype) {
        return '';
    };

    this.changeCmp = function (bucketRestriction, type, value, subType) {};
});

/***/ }),

/***/ "../common/components/datacloud/query/query.component.js":
/*!***************************************************************!*\
  !*** ../common/components/datacloud/query/query.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query', ['common.datacloud.query.builder', 'common.datacloud.query.results']);

/***/ }),

/***/ "../common/components/datacloud/query/query.factory.js":
/*!*************************************************************!*\
  !*** ../common/components/datacloud/query/query.factory.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query').factory('BucketRestriction', function () {
    function BucketRestriction(columnName, objectType, range, attr, bkt) {
        if (attr === null || attr === undefined) {
            this.attr = objectType + '.' + columnName;
        } else {
            this.attr = attr;
        }

        if (bkt === null || attr === undefined) {
            this.bkt = {};
        } else {
            this.bkt = bkt;
        }

        if (!range) {
            return null;
        }
    }

    BucketRestriction.isBucketRestrictionLike = function (bucketRestriction) {
        return bucketRestriction instanceof BucketRestriction || bucketRestriction.hasOwnProperty('bkt') && bucketRestriction.hasOwnProperty('attr') || bucketRestriction.hasOwnProperty('range') && bucketRestriction.hasOwnProperty('lhs') && bucketRestriction.lhs.hasOwnProperty('columnLookup');
    };

    BucketRestriction.isEqualRange = function (a, b) {
        return a.max === b.max && a.min === b.min && a.is_null_only === b.is_null_only;
    };

    BucketRestriction.getColumnName = function (bucketRestriction) {
        if (bucketRestriction.attr === null || bucketRestriction.attr === undefined) {
            return bucketRestriction.lhs.columnLookup.column_name;
        } else {
            return bucketRestriction.attr.split(".")[1];
        }
    };

    BucketRestriction.getObjectType = function (bucketRestriction) {
        if (bucketRestriction.attr === null || bucketRestriction.attr === undefined) {
            if (bucketRestriction.lhs.columnLookup.object_type === 'BucketedAccountMaster') {
                bucketRestriction.lhs.columnLookup.object_type = 'LatticeAccount';
            }
            return bucketRestriction.lhs.columnLookup.object_type || 'LatticeAccount';
        } else {
            return bucketRestriction.attr.split(".")[0];
        }
    };

    BucketRestriction.getRange = function (bucketRestriction) {
        return bucketRestriction.range;
    };

    return BucketRestriction;
});

/***/ }),

/***/ "../common/components/datacloud/query/query.index.js":
/*!***********************************************************!*\
  !*** ../common/components/datacloud/query/query.index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./advanced/anvanced.index */ "../common/components/datacloud/query/advanced/anvanced.index.js");

__webpack_require__(/*! ./results/results.index */ "../common/components/datacloud/query/results/results.index.js");

__webpack_require__(/*! ./query.component */ "../common/components/datacloud/query/query.component.js");

__webpack_require__(/*! ./query.factory */ "../common/components/datacloud/query/query.factory.js");

__webpack_require__(/*! ./query.routes */ "../common/components/datacloud/query/query.routes.js");

__webpack_require__(/*! ./query.service */ "../common/components/datacloud/query/query.service.js");

/***/ }),

/***/ "../common/components/datacloud/query/query.routes.js":
/*!************************************************************!*\
  !*** ../common/components/datacloud/query/query.routes.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query').config(["$stateProvider", function ($stateProvider) {
    var resolveGetData = function resolveGetData(type) {
        return ['$q', '$stateParams', 'QueryStore', 'SegmentStore', function ($q, $stateParams, QueryStore, SegmentStore) {
            var deferred = $q.defer(),
                name = $stateParams.segment,
                getQuery = function getQuery(name, account, contact) {
                return {
                    free_form_text_search: '',
                    account_restriction: account || store.getAccountRestriction,
                    contact_restriction: contact,
                    preexisting_segment_name: name,
                    lookups: [{
                        "attribute": {
                            "entity": "Account",
                            "attribute": "AccountId"
                        }
                    }, {
                        "attribute": {
                            "entity": "Account",
                            "attribute": "CompanyName"
                        }
                    }, {
                        "attribute": {
                            "entity": "Account",
                            "attribute": "City"
                        }
                    }, {
                        "attribute": {
                            "entity": "Account",
                            "attribute": "Website"
                        }
                    }, {
                        "attribute": {
                            "entity": "Account",
                            "attribute": "State"
                        }
                    }, {
                        "attribute": {
                            "entity": "Account",
                            "attribute": "Country"
                        }
                    }],
                    main_entity: "Account",
                    page_filter: {
                        num_rows: 10,
                        row_offset: 0
                    }
                };
            };

            if (name === "Create") {
                var account_restriction = QueryStore.getAccountRestriction(),
                    contact_restriction = QueryStore.getContactRestriction(),
                    query = getQuery(name, account_restriction, contact_restriction),
                    result = QueryStore.GetDataByQuery(type, query).then(function (data) {
                    return data;
                });

                deferred.resolve(result);
            } else {
                SegmentStore.getSegmentByName(name).then(function (segment) {
                    var query = getQuery(name, segment.account_restriction, segment.contact_restriction),
                        result = QueryStore.GetDataByQuery(type, query).then(function (data) {
                        return data;
                    });

                    deferred.resolve(result);
                });
            };

            return deferred.promise;
        }];
    };

    $stateProvider.state('home.segment.explorer.builder', {
        url: '/builder',
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Query Builder'
        },
        onEnter: ['$stateParams', 'SegmentService', 'SegmentStore', 'BackStore', 'StateHistory', function ($stateParams, SegmentService, SegmentStore, BackStore, StateHistory) {
            var name = $stateParams.segment,
                lastFrom = StateHistory && StateHistory.lastTo() ? StateHistory.lastFrom().name : '';

            BackStore.setBackState('home.segments');
            if ('Create' === name) {
                BackStore.setBackLabel($stateParams.segment);
                BackStore.setHidden(true);
            } else {
                SegmentStore.getSegmentByName(name).then(function (result) {
                    BackStore.setBackLabel(result.display_name);
                    BackStore.setHidden(false);
                });
            }

            if (lastFrom !== 'home.segment.explorer.attributes' && name && name !== 'Create') {
                SegmentService.GetSegmentDependenciesModelView(name);
            }
        }],
        resolve: {
            Cube: ['$q', 'DataCloudStore', function ($q, DataCloudStore) {
                var deferred = $q.defer();

                DataCloudStore.getCube().then(function (result) {
                    if (result.data) {
                        deferred.resolve(result.data);
                    }
                });

                return deferred.promise;
            }],
            RatingEngineModel: [function () {
                return null;
            }],
            CurrentRatingEngine: [function () {
                return null;
            }]
        },
        views: {
            "main@": {
                controller: 'AdvancedQueryCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/advanced/advanced.component.html'
            },
            'header.back@': 'backNav'
        }
    }).state('home.segment.accounts', {
        url: '/accounts',
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Accounts'
        },
        onEnter: ['$stateParams', 'SegmentStore', 'BackStore', function ($stateParams, SegmentStore, BackStore) {
            var name = $stateParams.segment;

            BackStore.setBackState('home.segments');
            if ('Create' === name) {
                BackStore.setBackLabel($stateParams.segment);
                BackStore.setHidden(true);
            } else {
                SegmentStore.getSegmentByName(name).then(function (result) {
                    BackStore.setBackLabel(result.display_name);
                    BackStore.setHidden(false);
                });
            }
        }],
        onExit: ['QueryStore', function (QueryStore) {
            QueryStore.getEntitiesCounts().then(function () {
                // console.log('resetEntitiesCount');
            });
        }],
        resolve: {
            Accounts: resolveGetData('accounts'),
            Contacts: [function () {
                return null;
            }],
            // for the Playbook wizard Targets tab
            NoSFIdsCount: [function () {
                return null;
            }],
            AccountsCoverage: [function () {
                return null;
            }],
            Config: [function () {
                return null;
            }]
        },
        views: {
            "main@": {
                controller: 'QueryResultsCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/results/queryresults.component.html'
            },
            'header.back@': 'backNav'
        }
    }).state('home.segment.contacts', {
        url: '/contacts',
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Contacts'
        },
        onEnter: ['$stateParams', 'SegmentStore', 'BackStore', function ($stateParams, SegmentStore, BackStore) {
            var name = $stateParams.segment;

            BackStore.setBackState('home.segments');
            if ('Create' === name) {
                BackStore.setBackLabel($stateParams.segment);
                BackStore.setHidden(true);
            } else {
                SegmentStore.getSegmentByName(name).then(function (result) {
                    BackStore.setBackLabel(result.display_name);
                    BackStore.setHidden(false);
                });
            }
        }],
        onExit: ['$stateParams', 'QueryStore', function ($stateParams, QueryStore) {
            QueryStore.getEntitiesCounts().then(function () {
                // console.log('resetEntitiesCount');
            });
        }],
        resolve: {
            Contacts: resolveGetData('contacts'),
            Accounts: [function () {
                return null;
            }],
            // for the Playbook wizard Targets tab
            NoSFIdsCount: [function () {
                return null;
            }],
            AccountsCoverage: [function () {
                return null;
            }],
            Config: [function () {
                return null;
            }]
        },
        views: {
            "main@": {
                controller: 'QueryResultsCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/results/queryresults.component.html'
            },
            'header.back@': 'backNav'
        }
    });
}]);

/***/ }),

/***/ "../common/components/datacloud/query/query.service.js":
/*!*************************************************************!*\
  !*** ../common/components/datacloud/query/query.service.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.query').service('QueryStore', ["$filter", "$q", "$stateParams", "$timeout", "QueryService", "BucketRestriction", "SegmentStore", "NumberUtility", function ($filter, $q, $stateParams, $timeout, QueryService, BucketRestriction, SegmentStore, NumberUtility) {
    var QueryStore = this;

    this.entities = ['account', 'contact'];
    this.validResourceTypes = ['accounts', 'contacts', 'products'];
    this.validContexts = ['accounts', 'contacts', 'products'];
    this.segment = null;

    // for Adanced Query Builder
    this.history = [];

    this.mode = '';

    this.counts = {
        accounts: {
            value: 0,
            loading: false
        },
        contacts: {
            value: 0,
            loading: false
        },
        product: {
            value: 0,
            loading: false
        }
    };

    this.accounts = [];
    this.contacts = [];

    this.addBucketTreeType = '';

    this.public = {
        enableSaveSegmentButton: false,
        resetLabelIncrementor: false
    };

    this.isDataAvailable = null;
    this.collectionStatus = null;

    this.init = function () {
        this.initRestrictions();
    };

    function getEntity(entity) {
        switch (entity) {
            case 'account':
            case 'purchasehistory':
                {
                    return 'account';
                }
            case 'contact':
                {
                    return 'contact';
                }
        }
    }

    this.clear = function () {
        delete this.accountBucketTreeRoot;
        delete this.contactBucketTreeRoot;
        delete this.addBucketTreeRoot;
        this.addBucketTreeType = '';
        this.mode = '';
        this.segment = null;
        this.accounts = [];
        this.contacts = [];
        this.initRestrictions();
        this.selectedBucket = 'A';
    };

    this.initRestrictions = function () {
        var template = {
            restriction: {
                logicalRestriction: {
                    operator: "AND",
                    restrictions: []
                }
            }
        };

        this.entities.forEach(function (entity) {
            QueryStore[getEntity(entity) + 'Restriction'] = angular.copy(template);
        });
    };

    this.resetRestrictions = function (segment) {
        this.entities.forEach(function (entity) {
            var restriction = QueryStore[getEntity(entity) + 'Restriction'].restriction.logicalRestriction;

            restriction.operator = "AND";

            if (segment && segment[getEntity(entity) + '_restriction']) {
                restriction.restrictions = segment[getEntity(entity) + '_restriction'].restriction.logicalRestriction.restrictions;
                restriction.operator = segment[getEntity(entity) + '_restriction'].restriction.logicalRestriction.operator;
            } else {
                restriction.restrictions.length = 0;
            }
        });

        this.getEntitiesCounts();
    };

    this.setSelectedBucket = function (bucket) {
        this.selectedBucket = bucket;
    };
    this.getSelectedBucket = function () {
        return this.selectedBucket;
    };

    this.setEntitiesProperty = function (property, value) {
        for (var key in this.counts) {
            this.counts[key][property] = value;
        }
    };

    this.setPublicProperty = function (property, value) {
        this.public[property] = value;
    };

    this.getPublic = function () {
        return this.public;
    };

    this.setResourceTypeCount = function (resourceType, loading, value) {

        var resourceTypeCount = this.getCounts()[resourceType];

        if (resourceTypeCount) {
            if (typeof value !== 'undefined') {
                resourceTypeCount.value = value;
            }
            if (typeof loading !== 'undefined') {
                resourceTypeCount.loading = loading;
            }
        }
    };

    this.getCounts = function () {
        return this.counts;
    };

    this.getRuleCount = function (bkt, bucketToRuleMap, bucketLabels, entity) {
        // console.log(bkt, ' = ', entity);
        if (bkt) {
            var buckets = [bucketToRuleMap[bkt.bucket]];
        } else {
            var buckets = [];

            bucketLabels.forEach(function (bucketName, index) {
                buckets.push(bucketToRuleMap[bucketName]);
            });
        }

        var accountRestrictions = [],
            contactRestrictions = [];
        var filteredAccounts = [],
            filteredContacts = [];
        buckets.forEach(function (bucket, index) {
            accountRestrictions = QueryStore.getAllBuckets(bucket['account_restriction'].logicalRestriction.restrictions);
            contactRestrictions = QueryStore.getAllBuckets(bucket['contact_restriction'].logicalRestriction.restrictions);

            filteredAccounts = filteredAccounts.concat(accountRestrictions.filter(function (value, index) {
                return value.bucketRestriction && value.bucketRestriction.bkt && value.bucketRestriction.bkt.Id && !value.bucketRestriction.ignored;
            }));

            filteredContacts = filteredContacts.concat(contactRestrictions.filter(function (value, index) {
                return value.bucketRestriction && value.bucketRestriction.bkt && value.bucketRestriction.bkt.Id && !value.bucketRestriction.ignored;
            }));
        });

        if (entity) {
            var counts = {
                'account': filteredAccounts.length,
                'contact': filteredContacts.length
            };
            return counts;
        }

        return filteredAccounts.length + filteredContacts.length;
    };

    this.setAccounts = function (query) {
        var deferred = $q.defer();

        this.GetDataByQuery('accounts', query).then(function (response) {
            QueryStore.accounts = response;
            deferred.resolve(response);
        });
        return deferred.promise;
    };

    this.getAccounts = function () {
        return this.accounts;
    };

    var self = this;
    this.validResourceTypes.forEach(function (resourceType) {
        self.setResourceTypeCount(resourceType, true);
    });

    this.setContacts = function (query) {
        var deferred = $q.defer();

        this.GetDataByQuery('contacts', query).then(function (response) {
            QueryStore.contacts = response;
            deferred.resolve(response);
        });
        return deferred.promise;
    };

    this.getContacts = function () {
        return this.contacts;
    };

    this.setDefaultRestrictions = function (defaultRestrictions) {
        this.defaultRestrictions = defaultRestrictions;
    };
    this.getDefaultRestrictions = function () {
        return this.defaultRestrictions;
    };

    this.setAccountRestriction = function (accountRestriction) {
        if (accountRestriction) {
            this.accountRestriction = accountRestriction;
        }
    };
    this.getAccountRestriction = function () {
        return this.accountRestriction;
    };
    this.updateAccountRestriction = function (accountRestriction) {
        //accountRestriction = accountRestriction.all;
    };

    this.setContactRestriction = function (contactRestriction) {
        if (contactRestriction) {
            QueryStore.contactRestriction = contactRestriction;
        }
    };
    this.getContactRestriction = function () {
        return QueryStore.contactRestriction;
    };

    // this.setPurchaseHistoryRestriction = function(purchaseRestriction){
    //     if (purchaseRestriction) {
    //         this.purchaseRestriction = purchaseRestriction;
    //     }
    // }
    this.updateContactRestriction = function (contactRestriction) {
        //contactRestriction = contactRestriction.all;
    };

    this.setSegment = function (segment) {
        this.segment = segment;
    };

    this.getSegment = function () {
        return this.segment;
    };

    this.setupStore = function (segment) {
        this.setSegment(segment);
        this.resetRestrictions(segment);

        var aRS = JSON.stringify(segment ? segment.account_restriction : this.getAccountRestriction());
        var cRS = JSON.stringify(segment ? segment.contact_restriction : this.getContactRestriction());

        this.setDefaultRestrictions(aRS + cRS);
    };

    this.getSegmentProperty = function (properties, propertyName) {
        for (var i = 0; i < properties.length; i++) {
            var property = properties[i].metadataSegmentProperty;
            if (property.option === propertyName) {
                return property.value;
            }
        }

        return null;
    };

    this.setAccountBucketTreeRoot = function (tree) {
        this.accountBucketTreeRoot = tree;
    };

    this.setContactBucketTreeRoot = function (tree) {
        this.contactBucketTreeRoot = tree;
    };

    this.setAddBucketTreeRoot = function (tree, type) {
        if (tree === null) {
            delete this.addBucketTreeRoot;
        } else {
            this.addBucketTreeRoot = tree; // this causes PLS-6617
            this.addBucketTreeType = type ? type : '';
        }
    };

    this.getAddBucketTreeRoot = function (tree) {
        return this.addBucketTreeRoot;
    };

    this.addAccountRestriction = function (attribute) {
        this.addRestriction('account', attribute);
    };

    this.addContactRestriction = function (attribute) {
        this.addRestriction('contact', attribute);
    };

    this.addPurchaseHistoryRestriction = function (attribute) {
        this.addRestriction('account', attribute);
    };

    this.removeAccountRestriction = function (attribute) {
        this.removeRestriction('account', attribute);
    };

    this.removeContactRestriction = function (attribute) {
        this.removeRestriction('contact', attribute);
    };

    function setBucketRestrictionUsed(bucketRestriction) {
        // console.log('==================> Addded restriction ',QueryStore.mode, bucketRestriction.bkt);
        if (!bucketRestriction.bkt || bucketRestriction.bkt == {}) {
            if (QueryStore.mode == 'rules' || QueryStore.mode == 'dashboardrules') {
                bucketRestriction.ignored = true;
            } else {
                bucketRestriction.ignored = bucketRestriction.ignored ? bucketRestriction.ignored : false;
            }
        } else {
            if (QueryStore.mode == 'rules' || QueryStore.mode == 'dashboardrules') {
                bucketRestriction.ignored = true;
            } else {
                bucketRestriction.ignored = bucketRestriction.ignored ? bucketRestriction.ignored : false;
            }
        }

        // console.log('Addded restriction ',bucketRestriction);
    }

    this.addRestriction = function (type, attribute, forceTreeRoot) {

        attribute = this.setAttributeAttr(type, attribute);

        var treeRoot = this.getAddBucketTreeRoot(),
            restrictions = [],
            bucketRestriction = new BucketRestriction(attribute.columnName, attribute.resourceType, attribute.bkt ? attribute.bkt.Vals : null, attribute.attr, attribute.bkt ? attribute.bkt : null);

        setBucketRestrictionUsed(bucketRestriction);

        if (QueryStore.mode == 'rules' || QueryStore.mode == 'dashboardrules') {
            restrictions = this[type + 'BucketTreeRoot'].logicalRestriction.restrictions;
        } else if (forceTreeRoot || treeRoot && type == this.addBucketTreeType) {
            restrictions = forceTreeRoot ? forceTreeRoot : treeRoot.logicalRestriction.restrictions;
        } else {
            restrictions = this[type + 'Restriction'].restriction.logicalRestriction.restrictions;
            //console.log(':add:', type, attribute, bucketRestriction, restrictions);

            var sameAttributes = restrictions.filter(function (restriction) {
                var br = restriction.bucketRestriction;
                return br && br.attr == bucketRestriction.attr;
            });

            var logicalRestrictions = restrictions.filter(function (restriction) {
                return restriction.logicalRestriction;
            });

            //console.log(':add:', sameAttributes, '\n', logicalRestrictions);

            var newHome = null;

            logicalRestrictions.forEach(function (logical) {
                var rs = logical.logicalRestriction.restrictions;

                var buckets = rs.filter(function (restriction) {
                    var br = restriction.bucketRestriction;
                    return br && br.attr == bucketRestriction.attr;
                });

                if (buckets.length > 0 && buckets.length == rs.length) {
                    newHome = rs;
                }
            });

            if (newHome) {
                restrictions = sameAttributes.length > 0 ? restrictions : newHome;
            }

            if (sameAttributes.length > 0) {
                if (!newHome || newHome && sameAttributes.length > 0) {
                    var newLogicalRestriction = {
                        logicalRestriction: {
                            operator: 'OR',
                            restrictions: []
                        }
                    };

                    restrictions.push(newLogicalRestriction);

                    restrictions = newLogicalRestriction.logicalRestriction.restrictions;
                }

                sameAttributes.forEach(function (restriction) {
                    restriction.bucketRestriction.columnName = attribute.columnName;
                    restriction.bucketRestriction.resourceType = attribute.resourceType;

                    QueryStore.addRestriction(type, restriction.bucketRestriction, restrictions);
                    QueryStore.removeRestriction(type, restriction.bucketRestriction);
                });
            }
        }

        restrictions.push({
            bucketRestriction: bucketRestriction
        });

        this.setRestrictions(type);
    };

    this.removeRestriction = function (type, attribute) {
        //console.log(':remove:', type, attribute);

        attribute = this.setAttributeAttr(type, attribute);
        //console.log(':remove attr:', type, attribute);

        var searchTerm = attribute.attr,
            index = -1,
            retrictions = this[type + 'Restriction'].restriction.logicalRestriction.restrictions;

        for (var i = 0, len = retrictions.length; i < len; i++) {
            if (retrictions[i].bucketRestriction && retrictions[i].bucketRestriction.attr === searchTerm) {
                var index = i;
                break;
            }
        }

        if (index >= 0) {
            retrictions.splice(index, 1);
        }

        this.setRestrictions(type);
    };

    this.setAttributeAttr = function (type, attribute) {
        var resourceType = type == 'contact' ? 'Contact' : 'LatticeAccount';
        attribute.resourceType = attribute.resourceType || resourceType;
        attribute.attr = attribute.resourceType + '.' + attribute.columnName;
        return attribute;
    };

    this.setRestrictions = function (type) {
        type == 'account' ? this.setAccountRestriction(this.accountRestriction) : this.setContactRestriction(this.contactRestriction);

        this.getEntitiesCounts();
    };

    this.findAttributes = function (columnName) {
        var groupKey = null;
        var attributes = [];

        for (var group in this.restriction) {
            var attributes = this.findAttributesInGroup(group, columnName);

            if (attributes.length > 0) {
                groupKey = group;
                break;
            }
        }
        return {
            groupKey: groupKey,
            attributes: attributes
        };
    };

    this.findAttributesInGroup = function (groupKey, columnName) {
        var group = this.restriction[groupKey];

        var results = [];

        for (var i = 0; i < group.length; i++) {
            //console.log(group, "fired");
            if (group[i].bucketRestriction.columnName === columnName) {
                results.push({
                    index: i,
                    bucketRestriction: group[i].bucketRestriction
                });
            }
        }
        return results;
    };

    this.getCollectionStatus = function () {
        var deferred = $q.defer();
        if (QueryStore.collectionStatus != null) {
            deferred.resolve(QueryStore.collectionStatus);
        } else {
            QueryService.GetCollectionStatus().then(function (response) {
                QueryStore.collectionStatus = response;
                QueryStore.isDataAvailable = response && (response.AccountCount != 0 || response.ContactCount != 0);
                deferred.resolve(response);
            });
        }
        return deferred.promise;
    };

    this.getEntitiesCounts = function (query) {
        var deferred = $q.defer();

        this.GetEntitiesCountsByQuery(query).then(function (data) {
            if (!data) {
                deferred.resolve({});
            } else {
                QueryStore.setResourceTypeCount('accounts', false, data['Account']);
                QueryStore.setResourceTypeCount('contacts', false, data['Contact']);
                QueryStore.setEntitiesProperty('loading', false);

                deferred.resolve(data);
            }
        });

        return deferred.promise;
    };

    this.GetEntitiesCountsByQuery = function (query) {
        var deferred = $q.defer(),
            accountRestriction = this.getAccountRestriction(),
            contactRestriction = this.getContactRestriction();

        if (query === undefined || query === '') {
            var queryWithRestriction = {
                'free_form_text_search': '',
                'account_restriction': accountRestriction,
                'contact_restriction': contactRestriction,
                'restrict_without_sfdcid': false,
                'page_filter': {
                    'num_rows': 10,
                    'row_offset': 0
                }
            };
        } else {
            var queryWithRestriction = {
                'free_form_text_search': query.free_form_text_search || '',
                'account_restriction': query.account_restriction || {},
                'contact_restriction': query.contact_restriction || {},
                'preexisting_segment_name': query.preexisting_segment_name,
                'page_filter': {
                    'num_rows': query.page_filter.num_rows,
                    'row_offset': query.page_filter.row_offset
                },
                'restrict_without_sfdcid': query.restrict_without_sfdcid
            };
        };

        queryWithRestriction = SegmentStore.sanitizeSegment(queryWithRestriction);

        QueryService.GetEntitiesCounts(queryWithRestriction).then(function (data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    this.GetCountByQuery = function (resourceType, query) {
        if (!this.isValidResourceType(resourceType)) {
            var deferred = $q.defer();

            deferred.resolve({
                error: {
                    errMsg: 'Invalid resourceType: ' + resourceType
                }
            });

            return deferred.promise;
        } else {
            var deferred = $q.defer(),
                accountRestriction = this.getAccountRestriction(),
                contactRestriction = this.getContactRestriction();

            if (query === undefined || query === '') {
                var queryWithRestriction = {
                    'free_form_text_search': '',
                    'account_restriction': accountRestriction,
                    'contact_restriction': contactRestriction,
                    'restrict_without_sfdcid': false,
                    'page_filter': {
                        'num_rows': 10,
                        'row_offset': 0
                    }
                };
            } else {
                var queryWithRestriction = {
                    'free_form_text_search': query.free_form_text_search || '',
                    'account_restriction': query.account_restriction || {},
                    'contact_restriction': query.contact_restriction || {},
                    'preexisting_segment_name': query.preexisting_segment_name,
                    'page_filter': {
                        'num_rows': query.page_filter.num_rows,
                        'row_offset': query.page_filter.row_offset
                    },
                    'restrict_without_sfdcid': query.restrict_without_sfdcid
                };
            };

            queryWithRestriction = SegmentStore.sanitizeSegment(queryWithRestriction);

            QueryService.GetCountByQuery(resourceType, queryWithRestriction).then(function (data) {
                //console.log('Resource Type', resourceType);
                deferred.resolve(data[resourceType == 'account' ? 'Account' : 'Contact']);
            });

            return deferred.promise;
        }
    };

    this.GetDataByQuery = function (resourceType, query) {
        if (!this.isValidResourceType(resourceType)) {
            var deferred = $q.defer();
            deferred.resolve({
                error: {
                    errMsg: 'Invalid resourceType: ' + resourceType
                }
            });
            return deferred.promise;
        } else {

            var deferred = $q.defer();

            var queryWithRestriction = {
                'free_form_text_search': query.free_form_text_search,
                'account_restriction': query.account_restriction,
                'contact_restriction': query.contact_restriction,
                'preexisting_segment_name': query.preexisting_segment_name,
                'page_filter': {
                    'num_rows': query.page_filter.num_rows,
                    'row_offset': query.page_filter.row_offset
                },
                'restrict_with_sfdcid': query.restrict_with_sfdcid
            };
            if (resourceType === 'accounts') {
                queryWithRestriction.lookups = query.lookups;
            }

            deferred.resolve(QueryService.GetDataByQuery(resourceType, queryWithRestriction));
            return deferred.promise;
        }
    };

    this.isValidResourceType = function (resourceType) {
        //console.log('isValidResourceType', resourceType);
        return this.validResourceTypes.indexOf(resourceType) > -1;
    };

    this.getAllBuckets = function (tree, restrictions, getEmptyBuckets) {
        restrictions = restrictions || [];

        tree.forEach(function (branch) {
            if (branch && branch.bucketRestriction && branch.bucketRestriction) {
                if (getEmptyBuckets || branch.bucketRestriction.bkt && typeof branch.bucketRestriction.bkt.Id == 'number') {
                    restrictions.push(branch);
                }
            }

            if (branch && branch.logicalRestriction) {
                QueryStore.getAllBuckets(branch.logicalRestriction.restrictions, restrictions);
            }
        });

        return restrictions;
    };

    this.getDataCloudAttributes = function (ignoreCache, getEmptyBuckets) {
        //var treeRoot = QueryStore.getAddBucketTreeRoot();
        var restrictions = [];

        getEmptyBuckets = getEmptyBuckets || false;

        if (QueryStore.mode == 'rules' || QueryStore.mode == 'dashboardrules') {
            this.getAllBuckets(QueryStore.accountBucketTreeRoot.logicalRestriction.restrictions, restrictions, getEmptyBuckets);
            this.getAllBuckets(QueryStore.contactBucketTreeRoot.logicalRestriction.restrictions, restrictions, getEmptyBuckets);
            // this.getAllBuckets(this.treeRoot.logicalRestriction.restrictions, restrictions);
        } else {
            var ar = QueryStore.getAccountRestriction();
            var cr = QueryStore.getContactRestriction();

            this.getAllBuckets(ar.restriction.logicalRestriction.restrictions, restrictions);
            this.getAllBuckets(cr.restriction.logicalRestriction.restrictions, restrictions);
        }

        return restrictions;
    };

    this.generateBucketLabel = function (bkt) {
        var a, b;

        if (bkt.Vals) {
            var format = NumberUtility.AbbreviateLargeNumber;
            var abbrs = ["K", "M", "B"]; // no T from Backend?

            a = format(bkt.Vals[0], 0, abbrs);
            b = format(bkt.Vals[1], 0, abbrs);
        }

        switch (bkt.Cmp) {
            case 'Yes':
                bkt.Lbl = 'Yes';
                break;
            case 'empty':
                bkt.Lbl = '';
                break;
            case 'EQUAL':
                bkt.Lbl = bkt.Vals[0];
                break;
            case 'IS_NULL':
                bkt.Lbl = '';
                break;
            case 'IS_NOT_NULL':
                bkt.Lbl = '';
                break;
            case 'GREATER_THAN':
                bkt.Lbl = '> ' + a;
                break;
            case 'LESS_THAN':
                bkt.Lbl = '< ' + a;
                break;
            case 'GREATER_OR_EQUAL':
                bkt.Lbl = '>= ' + a;
                break;
            case 'LESS_OR_EQUAL':
                bkt.Lbl = '<= ' + a;
                break;
            case 'GT_AND_LTE':
                bkt.Lbl = '> ' + a + ' and <= ' + b;
                break;
            case 'GT_AND_LT':
                bkt.Lbl = '> ' + a + ' and < ' + b;
                break;
            case 'GTE_AND_LTE':
                bkt.Lbl = '>= ' + a + ' and <= ' + b;
                break;
            case 'GTE_AND_LT':
                bkt.Lbl = a + ' - ' + b;
                break;
            case 'between':
                bkt.Lbl = a + ' - ' + b;
                break;
            case 'BETWEEN':
                bkt.Lbl = a + ' - ' + b;
                break;
            case 'IN_COLLECTION':
                bkt.Lbl = bkt.Vals.join(', ');
                break;
            case 'NOT_IN_COLLECTION':
                bkt.Lbl = 'not ' + bkt.Vals.join(', ');
                break;
            default:
                if (bkt.Cmp) {
                    bkt.Lbl = bkt.Vals && bkt.Vals.length > 0 ? a : 'empty';
                }
        }

        return bkt;
    };

    this.init();
}]).service('QueryService', ["$http", "$q", "SegmentStore", function ($http, $q, SegmentStore) {
    this.canceler = null;
    this.cancelerCounts = null;

    this.GetCountByQuery = function (resourceType, query, cancelPrevious) {
        if (this.canceler && cancelPrevious) {
            this.canceler.resolve("cancelled");
        }

        this.canceler = $q.defer();
        var deferred = $q.defer();

        SegmentStore.sanitizeSegment(query);

        $http({
            method: 'POST',
            url: '/pls/' + resourceType + '/count',
            data: query,
            timeout: this.canceler.promise,
            headers: {
                'ErrorDisplayMethod': 'none'
            }
        }).success(function (result) {
            deferred.resolve(result);
        }).error(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetCollectionStatus = function () {
        var deferred = $q.defer(),
            url = '/pls/datacollection/status';

        $http({
            method: 'get',
            url: url
        }).then(function (response) {
            deferred.resolve(response.data);
        }, function (response) {
            deferred.resolve({});
        });
        return deferred.promise;
    };

    this.GetEntitiesCounts = function (query, cancelPrevious) {
        var deferred = $q.defer();

        if (this.cancelerCounts) {
            this.cancelerCounts.resolve("cancelled");
        }

        this.cancelerCounts = $q.defer();

        SegmentStore.sanitizeSegment(query);

        $http({
            method: 'POST',
            url: '/pls/entities/counts',
            data: query,
            timeout: this.cancelerCounts.promise,
            headers: {
                'ErrorDisplayMethod': 'none'
            }
        }).success(function (result) {
            deferred.resolve(result);
        }).error(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetDataByQuery = function (resourceType, query) {
        var deferred = $q.defer();

        SegmentStore.sanitizeSegment(query);

        $http({
            method: 'POST',
            url: '/pls/' + resourceType + '/data',
            data: query
        }).success(function (result) {
            deferred.resolve(result);
        }).error(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/query/results/queryresults.component.js":
/*!******************************************************************************!*\
  !*** ../common/components/datacloud/query/results/queryresults.component.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

angular.module('common.datacloud.query.results', ['mainApp.core.utilities.BrowserStorageUtility']).controller('QueryResultsCtrl', ["$q", "$scope", "$state", "$stateParams", "$filter", "$rootScope", "BrowserStorageUtility", "QueryStore", "QueryService", "SegmentService", "SegmentStore", "LookupStore", "Config", "Accounts", "AccountsCoverage", "Contacts", "PlaybookWizardStore", "PlaybookWizardService", "NoSFIdsCount", function ($q, $scope, $state, $stateParams, $filter, $rootScope, BrowserStorageUtility, QueryStore, QueryService, SegmentService, SegmentStore, LookupStore, Config, Accounts, AccountsCoverage, Contacts, PlaybookWizardStore, PlaybookWizardService, NoSFIdsCount) {
    var _angular$extend;

    var vm = this;
    angular.extend(vm, (_angular$extend = {
        resourceType: $state.current.name.substring($state.current.name.lastIndexOf('.') + 1),
        modelId: $stateParams.modelId,
        inModel: $state.current.name.split('.')[1] === 'model',
        section: $stateParams.section,
        page: $stateParams.pageTitle,
        accounts: Accounts,
        counts: {},
        contacts: Contacts,
        noSFCount: NoSFIdsCount,
        loading: true,
        saving: false,
        saved: false,
        segment: QueryStore.getSegment(),
        accountRestriction: QueryStore.getAccountRestriction(),
        contactRestriction: QueryStore.getContactRestriction(),
        current: 1,
        pagesize: 10,
        showAccountPagination: false,
        showContactPagination: false,
        search: '',
        searchOptions: {
            updateOn: 'default blur',
            debounce: 1500
        },
        accountsCoverage: AccountsCoverage,
        excludeNonSalesForce: false,
        sortType: 'CompanyName',
        sortDesc: false,
        sortReverse: false,
        authToken: BrowserStorageUtility.getTokenDocument()
    }, _defineProperty(_angular$extend, 'saving', false), _defineProperty(_angular$extend, 'config', Config), _defineProperty(_angular$extend, 'currentTargetTab', 'Accounts'), _defineProperty(_angular$extend, 'tmpAccounts', []), _defineProperty(_angular$extend, 'tmpContacts', []), _defineProperty(_angular$extend, 'recommendationCounts', {}), _angular$extend));

    vm.init = function () {
        // Set Counts for Segment and PLay Targets
        if (vm.section === 'segment.analysis') {
            vm.counts = QueryStore.getCounts();
        } else {

            vm.selectedBuckets = [];
            if (vm.section === 'wizard.targets') {
                var bucketsToLaunch = PlaybookWizardStore.currentPlay && PlaybookWizardStore.currentPlay.launchHistory && PlaybookWizardStore.currentPlay.launchHistory.mostRecentLaunch && PlaybookWizardStore.currentPlay.launchHistory.mostRecentLaunch.bucketsToLaunch ? PlaybookWizardStore.currentPlay.launchHistory.mostRecentLaunch.bucketsToLaunch : [];

                // Get sum of non-suppressed buckets to calculate percentage for each bucket
                var numAccounts = 0;
                for (var i = 0; i < vm.accountsCoverage.bucketCoverageCounts.length; i++) {
                    numAccounts += vm.accountsCoverage.bucketCoverageCounts[i].count;
                }
                // Create array (vm.selectedBuckets) of bucket names (e.g. ["A", "B", "C"]) 
                // to be used when launching play, and assign percentage to the bucket for display purposes
                vm.accountsCoverage.bucketCoverageCounts.forEach(function (bucket) {
                    if (bucketsToLaunch.length && bucketsToLaunch.indexOf(bucket.bucket) !== -1) {
                        vm.selectedBuckets.push(bucket.bucket);
                    }
                    if (!bucketsToLaunch.length) {
                        vm.selectedBuckets.push(bucket.bucket);
                    }

                    // Use this if you want to round up to nearest integer percentage
                    // If you do use this, use this in the view HTML ({{ ::bucket.percentage }}%)
                    // result is (1%) for 0.3%
                    // bucket.percentage = Math.ceil((bucket.count / numAccounts) * 100);

                    // Use this if you want more precise percentage in the display
                    // If you do use this, use this in the view HTML ({{ ::bucket.percentage | percentage: 1 }})
                    // result is (0.3%) for 0.3%
                    bucket.percentage = bucket.count / numAccounts;
                });
                PlaybookWizardStore.setBucketsToLaunch(vm.selectedBuckets);
            } else if (vm.section === 'dashboard.targets') {
                PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function (data) {
                    var buckets = data.ratingEngine.bucketMetadata;
                    buckets.forEach(function (bucket) {
                        vm.selectedBuckets.push(bucket.bucket_name);
                    });
                });
            }
        }
    };

    function updatePage() {
        vm.loading = true;
        var offset = (vm.current - 1) * vm.pagesize;

        if (vm.section === 'segment.analysis') {

            // My Data or Segment Account & Contacts pages
            var dataQuery = {
                "free_form_text_search": vm.search,
                "account_restriction": vm.accountRestriction,
                "contact_restriction": vm.contactRestriction,
                "preexisting_segment_name": $stateParams.segment,
                "restrict_with_sfdcid": vm.excludeNonSalesForce,
                "lookups": [{
                    "attribute": {
                        "entity": "Account",
                        "attribute": "AccountId"
                    }
                }, {
                    "attribute": {
                        "entity": "Account",
                        "attribute": "CompanyName"
                    }
                }, {
                    "attribute": {
                        "entity": "Account",
                        "attribute": "City"
                    }
                }, {
                    "attribute": {
                        "entity": "Account",
                        "attribute": "Website"
                    }
                }, {
                    "attribute": {
                        "entity": "Account",
                        "attribute": "State"
                    }
                }, {
                    "attribute": {
                        "entity": "Account",
                        "attribute": "Country"
                    }
                }],
                "main_entity": "Account",
                "page_filter": {
                    "num_rows": vm.pagesize,
                    "row_offset": offset
                },
                "sort": {
                    "attributes": [{
                        "attribute": vm.sortType,
                        "entity": "Account"
                    }]
                }
            };

            if (vm.page === 'Accounts') {
                QueryStore.setAccounts(dataQuery).then(function (response) {
                    vm.accounts = response.data;
                    vm.loading = false;
                });
            } else if (vm.page === 'Contacts') {
                QueryStore.setContacts(dataQuery).then(function (response) {
                    vm.contacts = response.data;
                    vm.loading = false;
                });
            }

            var query = {
                "free_form_text_search": vm.search,
                "account_restriction": vm.accountRestriction,
                "contact_restriction": vm.contactRestriction,
                "restrict_without_sfdcid": false,
                "page_filter": {
                    "num_rows": vm.pagesize,
                    "row_offset": offset
                }
            };

            QueryStore.getEntitiesCounts(query).then(function (data) {
                vm.counts[vm.page.toLowerCase()].value = data[vm.page == 'Contacts' ? 'Contact' : 'Account'];
                vm.counts[vm.page.toLowerCase()].loading = false;

                if (vm.page == 'Accounts' || vm.page === 'Playbook') {
                    vm.showAccountPagination = data['Account'] > 10;
                    vm.showContactPagination = false;
                }

                if (vm.page == 'Contacts') {
                    vm.showAccountPagination = false;
                    vm.showContactPagination = data['Contact'] > 10;
                }
            });
        } else {

            // Targets page for create Play flow
            var dataQuery = {
                free_form_text_search: vm.search || '',
                restrictNotNullSalesforceId: false,
                entityType: 'Account',
                bucketFieldName: 'ScoreBucket',
                maximum: vm.pagesize,
                offset: offset,
                sortBy: vm.sortType,
                descending: vm.sortDesc,
                selectedBuckets: vm.selectedBuckets
            };

            PlaybookWizardStore.setValidation('targets', false);
            PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function (data) {

                // Get play rating engine and create array object literal for getting the counts.
                var engineId = data.ratingEngine.id,
                    engineIdObject = [{ id: engineId }];

                // Get Account Data             
                PlaybookWizardService.getTargetData(engineId, dataQuery).then(function (data) {
                    PlaybookWizardStore.setTargetData(data.data);
                    vm.accounts = PlaybookWizardStore.getTargetData();
                });

                // -----------------------------------------
                // Uncomment this when backend supports 
                // the checkbox 'Exclude non SalesForce accounts' 
                // from target's list

                // var filtered = [];
                // console.log(vm.accounts);
                // for (var i = 0; i < vm.accounts.length; i++) {
                //     if (vm.accounts[i].SalesforceAccountID === "" || vm.accounts[i].SalesforceAccountID === null || vm.accounts[i].SalesforceAccountID === undefined) {
                //         filtered.push(vm.accounts[i]);
                //         vm.noSFCount = filtered.length;
                //     }
                // }
                // vm.noSFCount = filtered.length;
                // -----------------------------------------

                // Get Account Counts for Pagination
                if (!vm.search) {
                    PlaybookWizardStore.getRatingsCounts(engineIdObject).then(function (data) {
                        var accountsCoverage = data.ratingEngineIdCoverageMap && data.ratingEngineIdCoverageMap[engineId] ? data.ratingEngineIdCoverageMap[engineId] : null;

                        var filteredAccountsCoverage = accountsCoverage.bucketCoverageCounts.filter(function (bucket) {
                            return vm.selectedBuckets.indexOf(bucket.bucket) >= 0;
                        });

                        var calculateCountsFromFiltered = function calculateCountsFromFiltered(array) {
                            var accounts = 0,
                                count;
                            for (var i = 0; i < array.length; i++) {
                                accounts += filteredAccountsCoverage[i].count;
                            }
                            count = accounts;
                            return count;
                        };

                        if (vm.section === 'create.targets' || vm.section === 'dashboard.targets') {
                            vm.counts = {
                                accounts: {
                                    value: calculateCountsFromFiltered(filteredAccountsCoverage)
                                },
                                contacts: {
                                    value: vm.accountsCoverage.contactCount
                                }
                            };
                        } else {
                            vm.counts = {
                                accounts: {
                                    value: calculateCountsFromFiltered(filteredAccountsCoverage)
                                },
                                contacts: {
                                    value: vm.accountsCoverage.contactCount
                                }
                            };
                        }

                        if (vm.counts.accounts.value > 10) {
                            vm.showAccountPagination = true;
                            vm.showContactPagination = false;
                        }

                        if (vm.section == 'wizard.targets' && vm.selectedBuckets.length == 0) {
                            vm.showAccountPagination = false;
                        }

                        vm.topNCount = vm.counts.accounts.value;
                        PlaybookWizardStore.setValidation('targets', vm.topNCount > 0);
                    });
                } else if (vm.search) {
                    var countsQuery = {
                        freeFormTextSearch: vm.search || '',
                        restrictNotNullSalesforceId: vm.excludeNonSalesForce,
                        entityType: 'Account',
                        selectedBuckets: vm.selectedBuckets
                    };

                    PlaybookWizardService.getTargetCount(engineId, countsQuery).then(function (data) {
                        vm.counts.accounts.value = data;

                        vm.showAccountPagination = vm.counts.accounts.value > 10;
                        vm.showContactPagination = false;

                        if (vm.section == 'wizard.targets' && vm.selectedBuckets.length == 0) {
                            vm.counts.accounts.value = 0;
                            vm.showAccountPagination = false;
                        }
                    });
                }

                PlaybookWizardStore.setBucketsToLaunch(vm.selectedBuckets);
            });

            vm.loading = false;
        }

        vm.checkSaveButtonState();
    };

    vm.updateTopNCount = function () {
        vm.maxTargetValue = vm.counts.accounts.value;

        if (vm.topNCount <= vm.maxTargetValue) {
            vm.showError = false;
            PlaybookWizardStore.setValidation('targets', true);
            PlaybookWizardStore.setTopNCount(vm.topNCount);
        } else {
            vm.showError = true;
            PlaybookWizardStore.setValidation('targets', false);
        }
    };

    vm.topNInputClick = function ($event) {
        $scope.topNCount = true;
        $event.target.select();
    };

    vm.excludeNonSalesForceCheckbox = function (excludeAccounts) {
        excludeAccounts = !excludeAccounts;

        if (excludeAccounts) {
            vm.excludeNonSalesForce = true;
        } else {
            vm.excludeNonSalesForce = false;
        }

        updatePage();
    };

    vm.bucketClick = function (bucket) {
        var index = vm.selectedBuckets.indexOf(bucket.bucket);

        if (index > -1) {
            vm.selectedBuckets.splice(index, 1);
        } else {
            vm.selectedBuckets.push(bucket.bucket);
        }

        PlaybookWizardStore.setBucketsToLaunch(vm.selectedBuckets);

        updatePage();
        vm.makeRecommendationCounts();
    };

    vm.showNoResultsText = function (accounts, contacts) {
        var accounts = accounts || {},
            contacts = contacts || {};
        switch (vm.page) {
            case 'Accounts':
                return accounts.length === 0;

            case 'Playbook':
                return accounts.length === 0;

            case 'Contacts':
                return contacts.length === 0;

            default:
                return accounts.length === 0 && contacts.length === 0;
        }
    };

    var prevQuery = vm.search;
    vm.submitQuery = function () {

        vm.loading = true;
        vm.current = 1;

        if (vm.search && prevQuery && vm.search.toUpperCase() === prevQuery.toUpperCase()) {
            return;
        }
        updatePage();
    };

    vm.refineQuery = function () {
        return vm.inModel() ? 'home.model.analysis.explorer.builder' : 'home.segment.explorer.builder';
    };

    $rootScope.$on('clearSegment', function (e) {
        vm.clearSearch();
    });

    vm.clearSearch = function () {
        vm.search = '';
        vm.current = 1;

        vm.submitQuery();
    };

    vm.sort = function (columnName) {
        vm.sortType = columnName;
        vm.sortDesc = !vm.sortDesc;
        vm.current = 1;

        updatePage();
    };

    vm.checkSaveButtonState = function () {
        var oldVal = QueryStore.getDefaultRestrictions(),
            newAccountVal = JSON.stringify(QueryStore.getAccountRestriction()),
            newContactVal = JSON.stringify(QueryStore.getContactRestriction()),
            newVal = newAccountVal + newContactVal;

        if (oldVal === newVal) {
            vm.saveSegmentEnabled = false;
            vm.saved = false;
        } else {
            vm.saveSegmentEnabled = true;
        };
    };

    vm.inModel = function () {
        var name = $state.current.name.split('.');
        return name[1] == 'model';
    };

    vm.hideMessage = function () {
        vm.saved = false;
    };

    vm.saveSegment = function () {
        var segmentName = $stateParams.segment,
            ts = new Date().getTime();

        if (segmentName === 'Create') {
            var accountRestriction = QueryStore.getAccountRestriction(),
                contactRestriction = QueryStore.getContactRestriction(),
                segment = {
                'name': 'segment' + ts,
                'display_name': 'segment' + ts,
                'account_restriction': accountRestriction,
                'contact_restriction': contactRestriction,
                'page_filter': {
                    'row_offset': 0,
                    'num_rows': 10
                }
            };

            SegmentService.CreateOrUpdateSegment(segment).then(function (result) {
                QueryStore.setupStore(result.data);

                vm.saveSegmentEnabled = false;
                $state.go('.', { segment: 'segment' + ts }, { notify: false });
                vm.saved = true;
            });
        } else {
            SegmentStore.getSegmentByName(segmentName).then(function (result) {
                var segmentData = result,
                    accountRestriction = QueryStore.getAccountRestriction(),
                    contactRestriction = QueryStore.getContactRestriction(),
                    segment = {
                    'name': segmentData.name,
                    'display_name': segmentData.display_name,
                    'account_restriction': accountRestriction,
                    'contact_restriction': contactRestriction,
                    'page_filter': {
                        'row_offset': 0,
                        'num_rows': 10
                    }
                };

                SegmentService.CreateOrUpdateSegment(segment).then(function (result) {
                    QueryStore.setupStore(result.data);

                    vm.saveSegmentEnabled = false;
                    $state.go('.', { segment: 'segment' + ts }, { notify: false });
                    vm.saved = true;
                });
            });
        };
    };

    vm.makeRecommendationCounts = function (opts) {
        var opts = opts || {};

        if (!vm.accountsCoverage && !vm.accountsCoverage.bucketCoverageCounts) {
            vm.recommendationCounts = null;
            return false;
        }

        var sections = {
            total: 0,
            selected: 0,
            suppressed: 0,
            launched: 0,
            contacts: 0
        },
            buckets = {};

        vm.accountsCoverage.bucketCoverageCounts.forEach(function (count) {
            sections.total += parseInt(count.count);
        });

        var _contacts = 0;
        for (var i in vm.selectedBuckets) {
            var bucket = vm.selectedBuckets[i];
            var count = vm.accountsCoverage.bucketCoverageCounts.find(function (value) {
                return value.bucket === bucket;
            });
            sections.selected += parseInt(count.count);
            _contacts = _contacts + parseInt(count.contactCount || 0);
        }

        sections.contacts = _contacts; //vm.accountsCoverage.contactCount || 0; // need to find campaign with contactCount to test this

        sections.suppressed = parseInt(sections.total - sections.selected);

        sections.launched = vm.topNCount && opts.suppressed ? vm.topNCount : sections.selected > sections.suppressed ? sections.total - sections.suppressed : sections.selected;

        var $topNCountEl = angular.element('input#topNCount');

        if ($topNCountEl.is(':checked')) {
            sections.suppressed = Math.max(sections.total - vm.topNCount, sections.suppressed) || 0;
        }

        vm.recommendationCounts = sections;
        PlaybookWizardStore.setRecommendationCounts(sections);
    };

    $scope.$watch('vm.current', function (newValue, oldValue) {
        vm.loading = true;
        updatePage();
    });

    vm.init();
}]).filter('percentage', ['$filter', function ($filter) {
    return function (input, decimals) {
        return $filter('number')(input * 100, decimals) + '%';
    };
}]);

/***/ }),

/***/ "../common/components/datacloud/query/results/results.index.js":
/*!*********************************************************************!*\
  !*** ../common/components/datacloud/query/results/results.index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./queryresults.component */ "../common/components/datacloud/query/results/queryresults.component.js");

__webpack_require__(/*! ./targettabs.component */ "../common/components/datacloud/query/results/targettabs.component.js");

/***/ }),

/***/ "../common/components/datacloud/query/results/targettabs.component.js":
/*!****************************************************************************!*\
  !*** ../common/components/datacloud/query/results/targettabs.component.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.targettabs', ['mainApp.appCommon.utilities.ResourceUtility']).controller('TargetTabsController', ["$state", "$stateParams", "ResourceUtility", "Config", "PlaybookWizardStore", function ($state, $stateParams, ResourceUtility, Config, PlaybookWizardStore) {

    var vm = this;
    angular.extend(vm, {
        stateParams: $stateParams,
        config: Config,
        showTabs: false
    });
    vm.init = function () {};
    vm.init();
}]);

/***/ }),

/***/ "../common/components/datacloud/tabs/datacloud/datacloud.component.js":
/*!****************************************************************************!*\
  !*** ../common/components/datacloud/tabs/datacloud/datacloud.component.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.tabs.datacloud', ['mainApp.appCommon.utilities.ResourceUtility']).controller('DataCloudTabsController', ["$state", "$stateParams", "$scope", "FeatureFlagService", "BrowserStorageUtility", "ResourceUtility", "DataCloudStore", function ($state, $stateParams, $scope, FeatureFlagService, BrowserStorageUtility, ResourceUtility, DataCloudStore) {

    var vm = this,
        flags = FeatureFlagService.Flags();

    angular.extend(vm, {
        DataCloudStore: DataCloudStore,
        stateParams: $stateParams,
        section: $stateParams.section,
        show_lattice_insights: FeatureFlagService.FlagIsEnabled(flags.LATTICE_INSIGHTS)
    });

    vm.setStateParams = function (section) {
        var goHome = false;
        if (section && section == vm.section && section) {
            goHome = true;
        }
        vm.section = section;
        var params = {
            section: vm.section
        };
        if (goHome) {
            params.category = '';
            params.subcategory = '';
        }
        $state.go('home.datacloud.explorer', params, { notify: true });
    };

    vm.init = function () {};

    vm.init();
}]);

/***/ }),

/***/ "../common/components/datacloud/tabs/mydata/mydata.component.js":
/*!**********************************************************************!*\
  !*** ../common/components/datacloud/tabs/mydata/mydata.component.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.tabs.mydata', []).controller('MyDataTabsController', ["$state", "$stateParams", "FeatureFlagService", "DataCloudStore", "QueryStore", "StateHistory", function ($state, $stateParams, FeatureFlagService, DataCloudStore, QueryStore, StateHistory) {
    var vm = this,
        flags = FeatureFlagService.Flags();

    angular.extend(vm, {
        DataCloudStore: DataCloudStore,
        QueryStore: QueryStore,
        stateParams: $stateParams,
        segment: $stateParams.segment,
        section: $stateParams.section,
        show_lattice_insights: FeatureFlagService.FlagIsEnabled(flags.LATTICE_INSIGHTS),
        accountRestriction: QueryStore.getAccountRestriction() || null,
        contactRestriction: QueryStore.getContactRestriction() || null,
        counts: QueryStore.getCounts()
    });

    vm.init = function () {
        QueryStore.history = [];

        QueryStore.getEntitiesCounts();

        var attributesUrl = "home.segment.explorer.attributes({segment:'" + vm.segment + "'})";

        vm.attributes = vm.ifInModel('home.model.analysis.explorer', attributesUrl);
        vm.accounts = vm.ifInModel('home.model.analysis.accounts', 'home.segment.accounts');
        vm.contacts = vm.ifInModel('home.model.analysis.contacts', 'home.segment.contacts');
    };

    vm.getRuleCount = function () {
        var all = [];

        ['accountRestriction', 'contactRestriction'].forEach(function (source) {
            if (QueryStore[source].restriction) {
                var buckets = QueryStore.getAllBuckets(QueryStore[source].restriction.logicalRestriction.restrictions);
                all = [].concat(all, buckets);
            }
        });

        return all.length || 0;
    };

    vm.checkState = function (type) {
        var map = {
            'home.segment.explorer.attributes': 'attributes',
            'home.segment.explorer.enumpicker': 'attributes',
            'home.segment.explorer.builder': 'builder',
            'home.segment.accounts': 'accounts',
            'home.segment.contacts': 'contacts'
        };

        return map[StateHistory.lastTo().name] == type;
    };

    vm.setStateParams = function (section) {
        var goHome = false;

        if (section && section == vm.section && section) {
            goHome = true;
        }

        vm.section = section;

        var params = {
            section: vm.section
        };

        if (goHome) {
            params.category = '';
            params.subcategory = '';
        }

        var state = vm.ifInModel('home.model.analysis', 'home.segment');

        $state.go(state, params, { notify: true });
    };

    vm.inModel = function () {
        var name = $state.current.name.split('.');
        return name[1] == 'model';
    };

    vm.ifInModel = function (model, not) {
        return vm.inModel() ? model : not;
    };

    vm.go = function (state) {
        $state.go(state);
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/datacloud/tabs/subheader/subheader.component.js":
/*!****************************************************************************!*\
  !*** ../common/components/datacloud/tabs/subheader/subheader.component.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.datacloud.tabs.subheader', []).controller('SubHeaderTabsController', ["$state", "$rootScope", "$stateParams", "$timeout", "FeatureFlagService", "DataCloudStore", "QueryStore", "SegmentService", "SegmentStore", "HealthService", "QueryTreeService", "StateHistory", function ($state, $rootScope, $stateParams, $timeout, FeatureFlagService, DataCloudStore, QueryStore, SegmentService, SegmentStore, HealthService, QueryTreeService, StateHistory) {
    var vm = this,
        flags = FeatureFlagService.Flags();
    // vm.showExportDropdown = false;
    vm.displayExportBanner = false;
    angular.extend(vm, {
        stateParams: $stateParams,
        segment: $stateParams.segment,
        section: $stateParams.section,
        show_lattice_insights: FeatureFlagService.FlagIsEnabled(flags.LATTICE_INSIGHTS),
        public: QueryStore.getPublic(),
        builderClicked: false,
        attribuesClicked: false,
        isSaving: false,
        enableSaveSegmentMsg: false,
        header: {
            exportSegment: {
                class: 'white-button select-label',
                click: false,
                icon: 'fa fa-chevron-down',
                iconlabel: 'Export',
                iconclass: 'save button white-button select-more',
                iconrotate: true,
                icondisabled: false,
                showSpinner: false
            }
        },
        counts: QueryStore.getCounts()
    });

    vm.init = function () {
        QueryStore.setPublicProperty('enableSaveSegmentButton', false);
        this.header.exportSegment.items = [{
            label: 'Accounts',
            icon: 'fa fa-building-o',
            click: checkStatusBeforeExport.bind(null, 'ACCOUNT'),
            disabledif: !QueryStore.counts.accounts.loading && !QueryStore.counts.accounts.value
        }, {
            label: 'Contacts',
            icon: 'fa fa-users',
            click: checkStatusBeforeExport.bind(null, 'CONTACT'),
            disabledif: !QueryStore.counts.contacts.loading && !QueryStore.counts.contacts.value
        }, {
            label: 'Accounts and Contacts',
            icon: 'fa fa-briefcase',
            click: checkStatusBeforeExport.bind(null, 'ACCOUNT_AND_CONTACT'),
            disabledif: !QueryStore.counts.accounts.loading && !QueryStore.counts.accounts.loading && (QueryStore.counts.accounts.value == 0 || QueryStore.counts.contacts.value == 0)
        }];
    };

    vm.getPickerItem = function () {
        return QueryTreeService.getPickerObject();
    };

    vm.checkState = function (type) {
        var state = $state.current.name;

        var map = {
            'home.segment.explorer.attributes': 'attributes',
            'home.segment.explorer.builder': 'builder',
            'home.segment.explorer.enumpicker': 'picker',
            'home.segment.accounts': 'accounts',
            'home.segment.contacts': 'contacts'
        };

        return map[state] == type;
    };

    vm.clickBuilder = function () {
        var state = vm.ifInModel('home.model.analysis.explorer.builder', 'home.segment.explorer.builder');

        vm.builderClicked = true;
        vm.attribuesClicked = false;

        $timeout(function () {
            $state.go(state, $stateParams);
        }, 1);
    };

    vm.clickAttributes = function () {
        var state = vm.ifInModel('home.model.analysis.explorer.attributes', 'home.segment.explorer.attributes');

        vm.builderClicked = false;
        vm.attribuesClicked = true;

        $timeout(function () {
            $state.go(state, $stateParams);
        }, 1);
    };

    vm.clickPickerBack = function () {
        var state = StateHistory.lastFrom();
        var params = StateHistory.lastFromParams();

        $state.go(state.name, params);
    };

    vm.clickSegmentButton = function (parms) {
        var state = vm.ifInModel('home.model.segmentation', 'home.segments');
        var opts = parms ? {} : { notify: true };

        $state.go(state, parms, opts);
    };

    vm.clearSegment = function () {
        QueryStore.resetRestrictions();
        QueryStore.setPublicProperty('enableSaveSegmentButton', false);
        $rootScope.$broadcast('clearSegment');
    };

    vm.saveSegment = function () {
        var segmentName = $stateParams.segment,
            isNewSegment = segmentName === 'Create',
            accountRestriction = QueryStore.getAccountRestriction(),
            contactRestriction = QueryStore.getContactRestriction(),
            ts = new Date().getTime();

        var xhrSaveSegment = function xhrSaveSegment(segmentData) {

            console.log(segmentData);

            var name = isNewSegment ? 'segment' + ts : segmentData.name;

            var displayName = isNewSegment ? 'segment' + ts : segmentData.display_name;

            var description = isNewSegment ? null : segmentData.description;

            var segment = SegmentStore.sanitizeSegment({
                name: name,
                display_name: displayName,
                description: description,
                account_restriction: angular.copy(accountRestriction),
                contact_restriction: angular.copy(contactRestriction),
                page_filter: {
                    row_offset: 0,
                    num_rows: 10
                }
            });
            QueryStore.setPublicProperty('enableSaveSegmentButton', false);
            vm.isSaving = true;
            SegmentService.CreateOrUpdateSegment(segment).then(function (result) {

                if (isNewSegment) {
                    vm.clickSegmentButton({
                        edit: segment.name
                    });
                } else {
                    vm.enableSaveSegmentMsg = true;
                    $timeout(function () {
                        vm.enableSaveSegmentMsg = false;
                    }, 3500);
                }

                vm.saved = true;
                vm.isSaving = false;
            });
        };

        QueryStore.setPublicProperty('enableSaveSegmentButton', false);

        var xhrGetSegmentResult = function xhrGetSegmentResult(result) {
            xhrSaveSegment(result);
        };

        isNewSegment ? xhrSaveSegment() : SegmentStore.getSegmentByName(segmentName).then(xhrGetSegmentResult);
    };

    vm.inModel = function () {
        var name = $state.current.name.split('.');
        return name[1] == 'model';
    };

    vm.ifInModel = function (model, not) {
        return vm.inModel() ? model : not;
    };

    vm.exportSegment = function (exportType) {
        var segmentName = $stateParams.segment,
            ts = new Date().getTime();
        // console.log('export type', exportType);
        QueryStore.setPublicProperty('resetLabelIncrementor', true);

        if (segmentName === 'Create') {
            var accountRestriction = QueryStore.getAccountRestriction(),
                contactRestriction = QueryStore.getContactRestriction(),
                segmentExport = SegmentStore.sanitizeSegment({
                'account_restriction': accountRestriction,
                'contact_restriction': contactRestriction,
                'type': exportType
            });

            console.log('saveMetadataSegmentExport new', segmentName, ts, segmentExport);

            SegmentService.CreateOrUpdateSegmentExport(segmentExport).then(function (result) {
                console.log(result);
                if (result.success) {
                    vm.displayExportBanner = true;
                }
                vm.toggleExportDropdown(false);
            });
        } else {
            SegmentStore.getSegmentByName(segmentName).then(function (result) {
                var segmentData = result,
                    accountRestriction = QueryStore.getAccountRestriction(),
                    contactRestriction = QueryStore.getContactRestriction(),
                    segmentExport = SegmentStore.sanitizeSegment({
                    'export_prefix': segmentData.display_name,
                    'account_restriction': accountRestriction,
                    'contact_restriction': contactRestriction,
                    'type': exportType
                });
                console.log('saveSegment existing', segmentData, segmentExport);

                SegmentService.CreateOrUpdateSegmentExport(segmentExport).then(function (result) {
                    console.log(result);
                    if (result.success) {
                        vm.displayExportBanner = true;
                    }
                    vm.toggleExportDropdown(false);
                });
            });
        };
    };

    // vm.toggleExportDropdown = function($event) {
    //     if ($event != null) {
    //         $event.stopPropagation();
    //     }
    //     vm.showExportDropdown = !vm.showExportDropdown;
    // }

    vm.hideExportBanner = function () {
        vm.displayExportBanner = false;
    };

    vm.toggleExportDropdown = function (bool) {
        vm.header.exportSegment.icondisabled = bool;
        vm.header.exportSegment.showSpinner = bool;
    };

    vm.disableExport = function () {
        var accountsAvailable = vm.counts.accounts.value;
        var contactsAvailable = vm.counts.contacts.value;
        vm.header.exportSegment.items[0].disabledif = !accountsAvailable;
        vm.header.exportSegment.items[1].disabledif = !contactsAvailable;
        vm.header.exportSegment.items[2].disabledif = !accountsAvailable || !contactsAvailable;
    };

    function checkStatusBeforeExport(exportType, $event) {
        $event.preventDefault();

        HealthService.checkSystemStatus().then(function () {
            vm.toggleExportDropdown(true); //disable dropdown
            vm.exportSegment(exportType);
        });
    }

    vm.init();
}]);

/***/ }),

/***/ "../common/components/datacloud/tabs/tabs.index.js":
/*!*********************************************************!*\
  !*** ../common/components/datacloud/tabs/tabs.index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./datacloud/datacloud.component */ "../common/components/datacloud/tabs/datacloud/datacloud.component.js");

__webpack_require__(/*! ./mydata/mydata.component */ "../common/components/datacloud/tabs/mydata/mydata.component.js");

__webpack_require__(/*! ./subheader/subheader.component */ "../common/components/datacloud/tabs/subheader/subheader.component.js");

/***/ }),

/***/ "../common/components/exceptions/exceptions.component.js":
/*!***************************************************************!*\
  !*** ../common/components/exceptions/exceptions.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.exceptions', ['common.banner', 'common.modal', 'common.notice']).service('ServiceErrorUtility', ["$timeout", "$injector", "Banner", "Modal", "Notice", function ($timeout, $injector, Banner, Modal, Notice) {
    this.check = function (response) {
        if (!response || !response.data) {
            return false;
        }

        var data = response.data,
            uiErrorCheck = !!(data.error || data.error_description || data.errorMsg),
            uiActionCheck = !!data.UIAction;

        return uiErrorCheck || uiActionCheck;
    };

    this.process = function (response) {
        if (this.check(response)) {
            var config = response.config || { headers: {} },
                params = (config.headers.ErrorDisplayMethod || 'banner').split('|'),
                options = config.headers.ErrorDisplayOptions ? JSON.parse(config.headers.ErrorDisplayOptions) : {},
                callback = config.headers.ErrorDisplayCallback || null,
                payload = response.data,
                uiAction = payload ? payload.UIAction : {},
                method = (uiAction ? uiAction.view : params[0]).toLowerCase();

            switch (method) {
                case 'none':
                    break;

                case 'popup':
                    this.show(Modal, response, options, callback);
                    break;

                case 'modal':
                    this.show(Modal, response, options, callback);
                    break;

                case 'banner':
                    this.show(Banner, response, options, callback);
                    break;

                case 'notice':
                    this.show(Notice, response, options, callback);
                    break;

                case 'suppress':
                    console.log('-!- API error suppressed:', response, options);
                    break;

                default:
                    this.show(Modal, response, options, callback);
            }
        }
    };

    this.show = function (Service, response, options, callback) {
        if (!this.check(response)) {
            return;
        }

        var payload = response.data,
            uiAction = payload.UIAction || {},
            method = (uiAction.status || 'error').toLowerCase(),
            http_err = response.statusText,
            http_code = response.status,
            url = response.config.url,
            title = uiAction.title || http_code + ' "' + http_err + '" ' + url,
            message = uiAction.message || payload.errorMsg || payload.error_description,
            name = "API_Exception",
            opts = angular.extend({ title: title, message: message, name: name }, options),
            cbSplit = callback ? callback.split('.') : [],
            cbService = callback ? $injector.get(cbSplit[0]) : null,
            cbMethod = callback ? cbSplit[1] : null;

        $timeout(function () {
            Service[method](opts, cbMethod ? cbService[cbMethod].bind(cbService) : null);
        }, 1);
    };

    this.hideBanner = function () {
        Banner.reset();
    };
}]).service('ServiceErrorInterceptor', ["$q", "$injector", function ($q, $injector) {
    this.response = function (response) {
        var ServiceErrorUtility = $injector.get('ServiceErrorUtility');
        ServiceErrorUtility.process(response);
        return response || $q.when(response);
    };

    this.request = function (response) {
        var ServiceErrorUtility = $injector.get('ServiceErrorUtility');
        ServiceErrorUtility.process(response);
        return response || $q.when(response);
    };

    this.responseError = function (rejection) {
        var ServiceErrorUtility = $injector.get('ServiceErrorUtility');
        ServiceErrorUtility.process(rejection);
        return $q.reject(rejection);
    };

    this.requestError = function (rejection) {
        var ServiceErrorUtility = $injector.get('ServiceErrorUtility');
        ServiceErrorUtility.process(rejection);
        return $q.reject(rejection);
    };
}]).config(["$httpProvider", function ($httpProvider) {
    $httpProvider.interceptors.push('ServiceErrorInterceptor');
}]);

/***/ }),

/***/ "../common/components/forms/edit-form.component.js":
/*!*********************************************************!*\
  !*** ../common/components/forms/edit-form.component.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** 
 * Component allows to edit two fields, name (text) and description (textarea).
 * It also has two buttons to trigger the saving or cancel it.
 * It takes care of the validation of the mandatory fields.
 * Name is the mandatory field.
 * 
 * dataobj: is te object containing the original data
 * callback: method to call once save/cancel button is clicked
 * saving: vaalue that indicate if the saving is in progress
 * config : {
 *      data: {id: 'id'},
 *      fields:{
 *          name: {fieldname: 'displayName', visible: true, maxLength: 50, label:'Name'},
 *          description: {fieldname: 'description', visible: false, maxLength: 1000, label: 'Description'}
 *      }  
 * }
 */
angular.module('lp.tile.edit', []).component('editForm', {
    templateUrl: '/components/forms/edit-form.component.html',
    bindings: {
        config: '<',
        dataobj: '=',
        callback: '&',
        saving: '='
    },
    controller: function controller() {

        this.showName = this.config.fields.name.visible;
        this.showDescription = this.config.fields.description.visible;
        this.name = this.dataobj[this.config.fields.name.fieldname];
        this.description = this.dataobj[this.config.fields.description.fieldname];

        this.cancel = function ($event) {
            $event.stopPropagation();
            this.callback({
                obj: this.dataobj
            });
        };

        this.isValid = function (editNameDescription) {
            return editNameDescription.$valid;
        };

        this.isModified = function (editNameDescription) {
            return editNameDescription.$dirty;
        };

        this.save = function ($event) {
            $event.stopPropagation();
            var idKey = this.config.data.id;
            var nameKey = this.config.fields.name.fieldname;
            var descriptionKey = this.config.fields.description.fieldname;
            var newData = {};

            newData[idKey] = this.dataobj[idKey];
            newData[nameKey] = this.name;
            newData[descriptionKey] = this.description;
            this.callback({
                obj: this.dataobj,
                newData: newData
            });
        };
    }

});

/***/ }),

/***/ "../common/components/forms/forms.index.js":
/*!*************************************************!*\
  !*** ../common/components/forms/forms.index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./edit-form.component */ "../common/components/forms/edit-form.component.js");

/***/ }),

/***/ "../common/components/modal/modal.component.js":
/*!*****************************************************!*\
  !*** ../common/components/modal/modal.component.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('common.modal', []).service('Modal', ["$timeout", "$compile", "$rootScope", function ($timeout, $compile, $rootScope) {
    var Modal = this;

    this.init = function () {
        this.modals = {};

        this.configTemplate = {
            type: "sm",
            dischargetext: "Cancel",
            confirmtext: "Confirm",
            icon: "fa fa-exclamation-triangle",
            iconstyle: {},
            showclose: true
        };

        this.configs = {
            warning: {
                name: "generic_warning",
                title: "Application Warning",
                confirmcolor: "yellow-button",
                headerconfig: { "background-color": "#ffbd48", "color": "white" },
                showcancel: true
            },
            success: {
                name: "generic_success",
                title: "Success",
                icon: "fa fa-info-circle",
                confirmcolor: "green-button",
                headerconfig: { "background-color": "#6fbe4a", "color": "white" },
                showcancel: false
            },
            error: {
                name: "generic_error",
                title: "Error",
                confirmcolor: "white-button",
                headerconfig: { "background-color": "#D0242F", "color": "white" },
                showcancel: false
            },
            info: {
                name: "generic_info",
                title: "Info",
                icon: "fa fa-info-circle",
                confirmcolor: "blue-button",
                headerconfig: { "background-color": "#629acc", "color": "white" },
                showcancel: false
            }
        };
    };

    this.get = function (name) {
        return this.modals[name] ? this.modals[name].modal : false;
    };

    this.getData = function (name) {

        if (this.modals[name] && this.modals[name].data !== undefined) {
            return this.modals[name].data;
        } else {
            return {};
        }
    };

    this.setData = function (name, data) {
        var modal = this.modals[name];

        if (modal) {
            this.modals[name].data = data;
        }
    };

    this.set = function (name, modal) {
        var mod = this.modals[name];

        if (!mod) {
            var modalObj = {
                modal: modal
            };

            this.modals[name] = modalObj;
        }
        // this.modals[name] = modal;
    };

    this.remove = function (name) {
        if (this.modals[name]) {
            delete this.modals[name];
        }
    };

    this.getConfig = function (type) {
        var template = Modal.configTemplate;
        var config = Modal.configs[type];
        var combined = angular.extend(template, config);

        return angular.copy(combined);
    };

    this.success = function (opts, cb) {
        this.prefab_generator('success', opts, cb);
    };

    this.warning = function (opts, cb) {
        this.prefab_generator('warning', opts, cb);
    };

    this.error = function (opts, cb) {
        this.prefab_generator('error', opts, cb);
    };

    this.info = function (opts, cb) {
        this.prefab_generator('info', opts, cb);
    };

    this.prefab_generator = function (type, opts, cb) {
        var modal = Modal.get(opts.name);

        if (modal) {
            Modal.modalRemoveFromDOM(modal, { name: opts.name });
        }

        var config = Modal.getConfig(type);
        config.callback = cb;
        config = angular.extend(config, opts);
        this.generate(config);
    };

    this.generate = function (config) {
        var scope = $rootScope.$new();

        scope.modalConfig = config;
        scope.modalCallback = this.modalCallback;
        scope.transclusion = config.message || '';

        var directive = '<le-modal-window config="modalConfig" callback-function="modalCallback(args)">' + scope.transclusion + '</le-modal-window>';
        var compiled = $compile(directive)(scope);

        if (document.getElementById('leModalContainer')) {
            angular.element('#leModalContainer').append(compiled);
        } else {
            angular.element('body').prepend($('<div></div>').attr({ id: 'leModalContainer' }).append(compiled));
        }

        var unregisterWatch = $rootScope.$watch(function () {
            return Modal.modals[config.name];
        }, function (newValue, oldValue) {
            if (Modal.modals[config.name]) {
                Modal.get(config.name).toggle();
                unregisterWatch();
            }
        });
    };

    this.modalCallback = function (args) {
        var modal = Modal.get(args.name);

        // if the callback exists and returns FALSE, modal will stay open
        var remove = modal.config.callback ? modal.config.callback(args) : true;

        if (remove && modal) {
            Modal.modalRemoveFromDOM(modal, args);
        }
    };

    this.modalRemoveFromDOM = function (modal, args) {
        modal.toggle();
        var element = angular.element('#' + args.name);
        if (element) {
            element.remove();
        }
        Modal.remove(args.name);
    };

    this.init();
}]).filter('cut', function () {
    return function (value, wordwise, max, tail) {
        if (!value) {
            return '';
        }

        max = parseInt(max, 10);

        if (!max) return value;
        if (value.length <= max) return value;

        value = value.substr(0, max);

        if (wordwise) {
            var lastspace = value.lastIndexOf(' ');

            if (lastspace !== -1) {
                if (value.charAt(lastspace - 1) === '.' || value.charAt(lastspace - 1) === ',') {
                    lastspace = lastspace - 1;
                }

                value = value.substr(0, lastspace);
            }
        }

        return value + (tail || ' â€¦');
    };
}).directive('ngHtmlCompile', ["$compile", function ($compile) {
    return {
        restrict: 'A',
        link: function link(scope, element, attrs) {
            scope.$watch(attrs.ngHtmlCompile, function (newValue, oldValue) {
                element.html(newValue);
                $compile(element.contents())(scope);
            });
        }
    };
}]).directive('leModalWindow', ['Modal', function (Modal) {
    return {
        restrict: 'E',
        scope: { config: '=', callback: '&callbackFunction' },
        replace: true,
        transclude: true,
        templateUrl: "/components/modal/modal.component.html",
        link: function link(scope, element, attrs, ctrl, transclude) {
            transclude(scope, function (content) {
                scope.transclude = content.length > 0 ? content[0].innerHTML : '';
            });

            scope.opened = false;
            scope.showModalMsg = false;
            scope.showWaiting = false;
            scope.dischargeDisabled = false;
            scope.confirmDisabled = false;
            scope.modalMsg = '';
            scope.modalMsgType = 'warning';
            scope.iconSupported = {
                "warning": "fa fa-exclamation-triangle"
            };

            if (!scope.config) {
                scope.config = {};
            }

            var name = scope.config['name'] || Date.now();

            Modal.set(name, scope);

            scope.modalConfig = {
                "type": scope.config.type || "md",
                "icon": scope.config.icon || scope.iconSupported.warning,
                "iconstyle": scope.config.iconstyle || { 'background-color': 'black' },
                "title": scope.config.title || "Default Title",
                "titlelength": scope.config.titlelength || 100,
                "showclose": typeof scope.config.showclose === 'undefined' ? true : scope.config.showclose,
                "showcancel": typeof scope.config.showcancel === 'undefined' ? true : scope.config.showcancel,
                "dischargetext": scope.config.dischargetext || "Cancel",
                "dischargeaction": scope.config.dischargeaction || 'cancel',
                "confirmtext": scope.config.confirmtext || "OK",
                "confirmaction": scope.config.confirmaction || 'ok',
                "confirmstyle": scope.config.confirmstyle || {},
                "confirmcolor": scope.config.confirmstyle === undefined ? scope.config.confirmcolor || 'blue-button' : '',
                "contenturl": scope.config.contenturl || '',
                "headerconfig": scope.config.headerconfig || {}
            };

            scope.toggle = function (data) {
                scope.opened = !scope.opened;
                Modal.setData(name, data);
                resetWindow();
            };

            scope.showMessage = function (msg, type) {
                scope.showModalMsg = true;
                scope.modalMsg = msg;
                scope.modalMsgType = type;
            };

            scope.waiting = function (show) {
                scope.showWaiting = show;

                if (show === true) {
                    scope.disableConfirmButton(true);
                }
            };

            scope.disableConfirmButton = function (disable) {
                this.confirmDisabled = disable;
            };

            scope.disableDischargeButton = function (disable) {
                scope.dischargeDisabled = disable;
            };

            scope.forceDischarge = function () {
                scope.toggle();
                resetWindow();
                scope.callCallback('closedForced');
            };

            scope.discharge = function () {
                scope.callCallback(scope.modalConfig.dischargeaction);
            };

            scope.confirm = function () {
                scope.callCallback(scope.modalConfig.confirmaction);
            };

            scope.callCallback = function (value) {
                if (_typeof(scope.callback) !== undefined) {
                    var data = Modal.getData(name);
                    scope.callback({
                        args: {
                            name: name,
                            action: value,
                            data: data
                        }
                    });
                }
            };

            function resetWindow() {
                scope.showModalMsg = false;
                scope.dischargeDisabled = false;
                scope.confirmDisabled = false;
                scope.showWaiting = false;
                scope.modalMsg = '';
            }
        }
    };
}]);

/***/ }),

/***/ "../common/components/notice/notice.component.js":
/*!*******************************************************!*\
  !*** ../common/components/notice/notice.component.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.notice', []).service('Notice', ["$timeout", function ($timeout) {
    var Notice = this;

    this.init = function () {
        this.notice = {
            visible: false,
            title: '',
            message: '',
            delay: 0
        };
    };

    this.get = function () {
        return this.notice;
    };

    this.set = function (opts) {
        opts = opts || {};

        this.notice.visible = true;
        this.notice.type = opts.type || 'info';
        this.notice.title = opts.title || '';
        this.notice.message = opts.message || '';

        $timeout(function () {
            Notice.notice.visible = false;
        }, opts.delay || 3500);
    };

    this.reset = function () {
        this.init();
    };

    this.generate = function (type, opts) {
        delete opts.type;

        this.set(angular.extend({
            type: type || 'info'
        }, opts));
    };

    this.error = function (opts) {
        this.generate('error', opts);
    };

    this.warning = function (opts) {
        this.generate('warning', opts);
    };

    this.success = function (opts) {
        this.generate('success', opts);
    };

    this.info = function (opts) {
        this.generate('info', opts);
    };

    this.init();
}]).component('noticeMessage', {
    templateUrl: '/components/notice/notice.component.html',
    controller: ["Notice", "$scope", "$compile", "$sce", function controller(Notice, $scope, $compile, $sce) {
        this.notice = Notice.get();
    }]
});

/***/ }),

/***/ "../common/components/pagination/pagination.component.js":
/*!***************************************************************!*\
  !*** ../common/components/pagination/pagination.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation.pagination', [])
/* 
    startFrom filter combined with limitTo makes pagination possible 
*/
.filter('startFrom', function () {
    return function (input, start) {
        if (input) {
            start = +start;
            return input.slice(start);
        }
        return [];
    };
}).directive('pdPaginationControls', function () {
    return {
        restrict: 'EA',
        templateUrl: '/components/pagination/pagination.component.html',
        scope: {
            max: '=',
            current: '='
        },
        controller: ['$scope', function ($scope) {
            $scope.Math = window.Math;
        }]
    };
});

/***/ }),

/***/ "../common/components/timeout/session-timeout.component.js":
/*!*****************************************************************!*\
  !*** ../common/components/timeout/session-timeout.component.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.utilities.SessionTimeout', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.login.services.LoginService']).service('SessionTimeoutUtility', ["$rootScope", "$state", "$modal", "$timeout", "BrowserStorageUtility", "LoginService", function ($rootScope, $state, $modal, $timeout, BrowserStorageUtility, LoginService) {
    var vm = this,
        debug = false; // make the modal popup faster

    var TIME_INTERVAL_BETWEEN_INACTIVITY_CHECKS = 30 * 1000;
    var TIME_INTERVAL_INACTIVITY_BEFORE_WARNING = 14.5 * 60 * 1000; // 14.5 minutes
    var TIME_INTERVAL_WARNING_BEFORE_LOGOUT = 30 * 1000;

    if (debug) {
        var TIME_INTERVAL_BETWEEN_INACTIVITY_CHECKS = 30 * 100;
        var TIME_INTERVAL_INACTIVITY_BEFORE_WARNING = 14.5 * 60 * 1;
        var TIME_INTERVAL_WARNING_BEFORE_LOGOUT = 30 * 100000;
    }

    this.inactivityCheckingId = null;
    this.warningModalInstance = null;
    this.sessionExpired = false;

    vm.init = function () {
        vm.startObservingUserActivtyThroughMouseAndKeyboard();
        vm.startCheckingIfSessionIsInactive();
    };

    vm.refreshPreviousSession = function (tenant) {
        LoginService.GetSessionDocument(tenant).then(function (data, status) {
            if (data && data.Success === true) {
                vm.startObservingUserActivtyThroughMouseAndKeyboard();
                vm.startCheckingIfSessionIsInactive();
            }
        });
    };

    vm.startObservingUserActivtyThroughMouseAndKeyboard = function () {
        $(document.body).mousemove(function (e) {
            if (!vm.warningModalInstance) {
                vm.refreshSessionLastActiveTimeStamp();
            }
        });

        $(document.body).keypress(function (e) {
            if (!vm.warningModalInstance) {
                vm.refreshSessionLastActiveTimeStamp();
            }
        });
    };

    vm.startCheckingIfSessionIsInactive = function () {
        vm.refreshSessionLastActiveTimeStamp();

        vm.inactivityCheckingId = setInterval(vm.checkIfSessionIsInactiveEveryInterval, TIME_INTERVAL_BETWEEN_INACTIVITY_CHECKS);
    };

    vm.checkIfSessionIsInactiveEveryInterval = function () {
        var ignoreStates = ['home.models.import', 'home.models.pmml', 'home.model.scoring', 'home.models.import.job', 'home.models.pmml.job'];

        if (ignoreStates.indexOf($state.current.name) >= 0) {
            return;
        }

        if (Date.now() - BrowserStorageUtility.getSessionLastActiveTimestamp() >= TIME_INTERVAL_INACTIVITY_BEFORE_WARNING) {
            if (!vm.warningModalInstance) {
                vm.cancelCheckingIfSessionIsInactiveAndSetIdToNull();
                vm.openWarningModal();
            }

            $timeout(vm.callWhenWarningModalExpires, TIME_INTERVAL_WARNING_BEFORE_LOGOUT);
        }
    };

    vm.refreshSessionLastActiveTimeStamp = function () {
        BrowserStorageUtility.setSessionLastActiveTimestamp(Date.now());
    };

    vm.hasSessionTimedOut = function () {
        return Date.now() - BrowserStorageUtility.getSessionLastActiveTimestamp() >= TIME_INTERVAL_INACTIVITY_BEFORE_WARNING + TIME_INTERVAL_WARNING_BEFORE_LOGOUT;
    };

    vm.openWarningModal = function () {
        vm.warningModalInstance = $modal.open({
            animation: true,
            backdrop: true,
            scope: $rootScope,
            templateUrl: '/components/timeout/session-timeout.modal.html'
        });

        $rootScope.refreshSession = function () {
            vm.closeWarningModalAndSetInstanceToNull();
            vm.startCheckingIfSessionIsInactive();
        };
    };

    vm.cancelCheckingIfSessionIsInactiveAndSetIdToNull = function () {
        clearInterval(vm.inactivityCheckingId);
        vm.inactivityCheckingId = null;
    };

    vm.stopObservingUserInteractionBasedOnMouseAndKeyboard = function () {
        $(document.body).off("mousemove");
        $(document.body).off("keypress");
    };

    vm.callWhenWarningModalExpires = function () {
        if (vm.hasSessionTimedOut()) {
            vm.sessionExpired = true;
            vm.stopObservingUserInteractionBasedOnMouseAndKeyboard();

            LoginService.Logout();
        } else {
            if (vm.warningModalInstance) {
                vm.closeWarningModalAndSetInstanceToNull();
            }

            if (!vm.inactivityCheckingId) {
                vm.startCheckingIfSessionIsInactive();
            }
        }
    };

    vm.closeWarningModalAndSetInstanceToNull = function () {
        angular.element(document.body).removeClass("modal-open");
        angular.element(".modal-backdrop").remove();
        angular.element(".modal").remove();
        vm.warningModalInstance.close();
        vm.warningModalInstance = null;
    };
}]);

/***/ }),

/***/ "../common/components/wizard/controls/controls.component.js":
/*!******************************************************************!*\
  !*** ../common/components/wizard/controls/controls.component.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.wizard.controls', []).controller('ImportWizardControls', ["$state", "$stateParams", "$scope", "$timeout", "$transitions", "$rootScope", "$window", "ResourceUtility", "WizardProgressItems", "WizardProgressContext", "WizardControlsOptions", "WizardValidationStore", "StateHistory", function ($state, $stateParams, $scope, $timeout, $transitions, $rootScope, $window, ResourceUtility, WizardProgressItems, WizardProgressContext, WizardControlsOptions, WizardValidationStore, StateHistory
// ImportWizardService, ImportWizardStore
) {
    var vm = this,
        ImportWizardControls = this,
        preventUnload = WizardControlsOptions.preventUnload;

    angular.extend(vm, {
        itemMap: {},
        items: WizardProgressItems,
        state: $state.current.name,
        prev: WizardControlsOptions.backState,
        next: function () {
            return 'home.' + WizardProgressContext;
        }(),
        valid: false,
        toState: $state.current,
        nextDisabled: false,
        prevDisabled: false
    });

    $transitions.onStart({}, function (trans) {
        var to = trans.$to(),
            params = trans.params('to'),
            from = trans.$from();

        angular.element(window).scrollTop(0, 0);

        vm.toState = to;
        vm.item = vm.itemMap[to.name];
    });

    $transitions.onFinish({}, function () {
        vm.nextDisabled = false;
    });

    if (preventUnload) {
        /**
         * leaving this here because it's interesting
         */
        // if($window.performance) {
        //     console.log('$window.performance', $window.performance.navigation.type, {
        //         TYPE_RELOAD: $window.performance.navigation.TYPE_RELOAD, 
        //         TYPE_NAVIGATE: $window.performance.navigation.TYPE_NAVIGATE, 
        //         TYPE_BACK_FORWARD: $window.performance.navigation.TYPE_BACK_FORWARD
        //     });
        // }

        /**
         * if there is no last from we assume the user has manually reloaded the page
         * so we give them a chance to no reload and if they proceed anyway we take
         * them back to the play list
         */
        if (!StateHistory.lastFrom().name) {
            if (preventUnload === true) {
                $state.go('home');
            } else {
                $state.go(preventUnload);
            }
        } else {
            $window.onbeforeunload = function (event) {
                var warning = 'Changes you made may not be saved. Are you sure?'; // this is just the default messaging which can't be changed in chrome anyway
                event.returnValue = warning;
                return warning;
            };
        }
    }

    $scope.$on("$destroy", function () {
        $window.onbeforeunload = null;
    });

    this.historyStore = this.historyStore || {};

    vm.init = function () {
        vm.rootState = vm.next + '.';
        vm.setButtons();

        if (WizardControlsOptions.secondaryLink) {
            vm.secondaryLink = true;
        };

        if (WizardControlsOptions.secondaryLinkValidation) {
            vm.secondaryLinkValidation = true;
        };

        vm.items.forEach(function (item) {
            var key = vm.rootState + item.state;
            vm.itemMap[key] = item;
        });
        vm.item = vm.itemMap[vm.toState.name];

        ImportWizardControls.setHistoryStore($state.current.name);
    };

    this.setHistoryStore = function (path) {
        var prevState = vm.prev,
            prevParams = null;
        if (StateHistory.lastFrom() && StateHistory.lastFrom().name && !vm.prev) {
            var prevState = StateHistory.lastFrom(),
                prevParams = StateHistory.lastFromParams();
        }
        ImportWizardControls.historyStore[path] = {
            prev: {
                state: prevState,
                params: prevParams
            }
        };
    };

    this.getHistoryStore = function (path) {
        if (path) {
            return ImportWizardControls.historyStore[path];
        }
        return ImportWizardControls.historyStore;
    };

    vm.click = function (isPrev) {
        vm.setButtons();

        if (vm.next && !isPrev) {
            vm.go(vm.next, isPrev);
        } else if (isPrev && vm.prev) {
            var hasParams = vm.prev.route ? true : false;

            if (hasParams) {
                vm.go(vm.prev.route, isPrev, vm.prev.params);
            } else {
                vm.go(vm.prev, isPrev);
            }
        } else if (isPrev && !vm.prev) {
            var storedState = ImportWizardControls.getHistoryStore($state.current.name);
            if (storedState && storedState.prev && storedState.prev.state) {
                $state.go(storedState.prev.state, storedState.prev.params);
            } else {
                //window.history.back();
                //$state.go($uiRouter.globals.$current.parent.navigable);
                $state.go('home');
            }
        } else if (!isPrev && !vm.next) {
            if (WizardControlsOptions.nextState) {
                var params = WizardControlsOptions.nextStateParams ? typeof WizardControlsOptions.nextStateParams == 'function' ? WizardControlsOptions.nextStateParams() : WizardControlsOptions.nextStateParams : {};

                vm.go(WizardControlsOptions.nextState, isPrev, params);
            }
        }
    };

    vm.clickSecondary = function (state, params) {
        var current = vm.itemMap[$state.current.name];
        if (current.secondaryFn) {
            current.secondaryFn(state, params);
        } else {
            $state.go(vm.item.secondaryLink);
        }
    };

    vm.go = function (state, isPrev, params) {
        var current = vm.itemMap[$state.current.name];
        vm.nextDisabled = true;

        if (current.nextFn && !isPrev) {
            current.nextFn(state, params);
        } else {
            $state.go(state, params);
        }
    };

    vm.setButtons = function () {
        var current = $state.current.name,
            item,
            state,
            split,
            last,
            prev,
            next,
            nsplit,
            psplit;

        for (var i = 0; i < vm.items.length; i++) {
            item = vm.items[i];
            state = item.state;

            if (vm.rootState + state == current) {
                split = state.split('.');
                last = split[split.length - 1];

                vm.prev = WizardControlsOptions.backState;
                vm.next = '';

                if (i + 1 < vm.items.length) {
                    next = vm.getNext(i).state;
                    nsplit = next.split('.');

                    vm.next = vm.rootState + nsplit.join('.');
                }

                if (i - 1 >= 0) {
                    prev = vm.getPrev(i - 1) ? vm.getPrev(i - 1).state : vm.prev;
                    psplit = prev.split('.');

                    vm.prev = vm.rootState + psplit.join('.');
                }
            }
        }

        vm.isValid();
    };

    vm.getNext = function (index) {
        var item,
            i = 1;

        while (item = vm.items[index + i++]) {
            if (item.hide && index + i < vm.items.length) {
                continue;
            }

            break;
        }
        return item;
    };

    vm.getPrev = function (index) {
        var item,
            i = 0;

        while (item = vm.items[index + i]) {
            i = i - 1;

            if (item.hide && index + i >= 0) {
                continue;
            }

            break;
        }
        return item;
    };

    vm.isValid = function () {
        var current = $state.current.name,
            currentStep = current.split('.').pop();

        if (WizardValidationStore.getValidation) {
            vm.valid = WizardValidationStore.getValidation(currentStep);
            if (vm.item && vm.item.afterNextValidation) {
                vm.nextDisabled = !vm.valid;
            }
        } else {
            vm.valid = true;
        }

        return vm.valid;
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/wizard/header/header.component.js":
/*!**************************************************************!*\
  !*** ../common/components/wizard/header/header.component.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.wizard.header', []).controller('WizardHeader', ["$state", "$stateParams", "$scope", "$timeout", "$rootScope", "ResourceUtility", "WizardProgressItems", "WizardProgressContext", "WizardValidationStore", "RatingsEngineStore", "WizardHeaderTitle", "WizardCustomHeaderSteps", function ($state, $stateParams, $scope, $timeout, $rootScope, ResourceUtility, WizardProgressItems, WizardProgressContext, WizardValidationStore, RatingsEngineStore, WizardHeaderTitle, WizardCustomHeaderSteps) {
    var vm = this;

    angular.extend(vm, {
        title: WizardHeaderTitle || '',
        showEntityCounts: false
    });

    vm.init = function () {
        if (vm.showCustomHeader()) {
            vm.setEntityCounts();
        }
    };

    vm.showCustomHeader = function () {
        var check = false;
        var wizardState = 'home.' + WizardProgressContext;

        WizardCustomHeaderSteps.forEach(function (step) {
            if ($state.current.name == wizardState + step) {
                check = true;
            }
        });
        return check;
    };

    vm.setEntityCounts = function () {
        var currentSegment = RatingsEngineStore.getSegment();
        if (currentSegment.accounts != undefined && currentSegment.contacts != undefined) {
            vm.accounts = currentSegment.accounts.toLocaleString('en');
            vm.contacts = currentSegment.contacts.toLocaleString('en');
        } else if ($stateParams.rating_id) {
            RatingsEngineStore.getRating($stateParams.rating_id).then(function (rating) {
                vm.accounts = rating.segment.accounts.toLocaleString('en');
                vm.contacts = rating.segment.contacts.toLocaleString('en');
            });
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/wizard/progress/progress.component.js":
/*!******************************************************************!*\
  !*** ../common/components/wizard/progress/progress.component.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.wizard.progress', ['common.exceptions']).controller('ImportWizardProgress', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "WizardProgressContext", "WizardProgressItems", "WizardValidationStore", "ServiceErrorUtility", function ($state, $stateParams, $scope, $timeout, ResourceUtility, WizardProgressContext, WizardProgressItems, WizardValidationStore, ServiceErrorUtility) {
    var vm = this;

    angular.extend(vm, {
        items: WizardProgressItems,
        context: WizardProgressContext,
        wizard: '.',
        rootState: function () {
            return 'home.' + WizardProgressContext + '.';
        }(),
        itemMap: {}
    });

    vm.init = function () {
        vm.items.forEach(function (item) {
            vm.itemMap[vm.rootState + item.state.split('.').pop()] = item;
        });

        // vm.current = vm.itemMap[vm.rootState + $state.current.name.split('.').pop()];
        // vm.currentState = vm.current.state;
        // vm.previousState = '';
    };

    vm.isDisable = function (item) {
        if (item.progressDisabled === true) {
            return true;
        }
        return false;
    };

    vm.click = function ($event) {
        // This is a hack. This needs to be replaced by conditional CSS classes on the li's
        $event.preventDefault();
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/wizard/wizard.component.js":
/*!*******************************************************!*\
  !*** ../common/components/wizard/wizard.component.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.wizard', ['common.wizard.progress', 'common.wizard.controls', 'common.wizard.header']).controller('ImportWizard', ["$state", "$stateParams", "$scope", "FeatureFlagService", "ResourceUtility", "WizardHeaderTitle", "WizardContainerId", function ($state, $stateParams, $scope, FeatureFlagService, ResourceUtility, WizardHeaderTitle, WizardContainerId) {
    var vm = this,
        flags = FeatureFlagService.Flags();

    angular.extend(vm, {
        title: WizardHeaderTitle || '',
        container_id: WizardContainerId || ''
    });

    vm.init = function () {
        vm.title = WizardHeaderTitle || name; //set WizardHeaderTitle to false to use the header component
    };

    vm.init();
}]);

/***/ }),

/***/ "../common/components/wizard/wizard.index.js":
/*!***************************************************!*\
  !*** ../common/components/wizard/wizard.index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(/*! ../../app/utilities/ResourceUtility */ "../common/app/utilities/ResourceUtility.js");

__webpack_require__(/*! ./progress/progress.component */ "../common/components/wizard/progress/progress.component.js");

__webpack_require__(/*! ./controls/controls.component */ "../common/components/wizard/controls/controls.component.js");

__webpack_require__(/*! ./header/header.component */ "../common/components/wizard/header/header.component.js");

__webpack_require__(/*! ./wizard.component */ "../common/components/wizard/wizard.component.js");

console.log("Wizard module");
// import angular from "angular";

// import '../../app/modules/ServiceError/ServiceErrorModule';
exports.default = angular.module("com.le.common.wizard", ['common.wizard']);

/***/ }),

/***/ "../common/network.vendor.js":
/*!***********************************!*\
  !*** ../common/network.vendor.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.from = exports.Subject = exports.Observable = exports.axios = undefined;

var _rxjs = __webpack_require__(/*! rxjs */ "../common/node_modules/rxjs/_esm5/index.js");

var _axios = __webpack_require__(/*! axios */ "../common/node_modules/axios/index.js");

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.axios = _axios2.default;
exports.Observable = _rxjs.Observable;
exports.Subject = _rxjs.Subject;
exports.from = _rxjs.from;

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/components/UIRouter.js":
/*!*****************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/components/UIRouter.js ***!
  \*****************************************************************************/
/*! exports provided: UIRouterProvider, UIRouterConsumer, InstanceOrPluginsMissingError, UIRouterInstanceUndefinedError, UIRouter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouterProvider", function() { return UIRouterProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouterConsumer", function() { return UIRouterConsumer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstanceOrPluginsMissingError", function() { return InstanceOrPluginsMissingError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouterInstanceUndefinedError", function() { return UIRouterInstanceUndefinedError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouter", function() { return UIRouter; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../common/node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _uirouter_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uirouter/core */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../index */ "../common/node_modules/@uirouter/react/lib-esm/index.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var _a;
/**
 * @reactapi
 * @module components
 */ /** */





var 
/** @internalapi */
UIRouterProvider = (_a = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined), _a.Provider), 
/**
 * <UIRouterConsumer> component lets you access the UIRouter instance
 * anywhere in the component tree, by simply wrapping your component and
 * using the function-as-child pattern to pass the instance via props.
 *
 * #### Example:
 * ```jsx
 * <UIRouterConsumer>
 *  {router => <MyComponent router={router} />}
 * </UIRouterConsumer>
 * ```
 */
UIRouterConsumer = _a.Consumer;
/** @hidden */
var InstanceOrPluginsMissingError = new Error("Router instance or plugins missing.\nYou must either provide a location plugin via the plugins prop:\n\n<UIRouter plugins={[pushStateLocationPlugin]} states={[\u00B7\u00B7\u00B7]}>\n  <UIView />\n</UIRouter>\n\nor initialize the router yourself and pass the instance via props:\n\nconst router = new UIRouterReact();\nrouter.plugin(pushStateLocationPlugin);\n\u00B7\u00B7\u00B7\n<UIRouter router={router}>\n  <UIView />\n</UIRouter>\n");
/** @hidden */
var UIRouterInstanceUndefinedError = new Error("UIRouter instance is undefined. Did you forget to include the <UIRouter> as root component?");
var UIRouter = /** @class */ (function (_super) {
    __extends(UIRouter, _super);
    function UIRouter(props, context) {
        var _this = _super.call(this, props, context) || this;
        // check if a router instance is provided
        if (props.router) {
            _this.router = props.router;
        }
        else if (props.plugins) {
            _this.router = new _index__WEBPACK_IMPORTED_MODULE_3__["UIRouterReact"]();
            _this.router.plugin(_uirouter_core__WEBPACK_IMPORTED_MODULE_2__["servicesPlugin"]);
            props.plugins.forEach(function (plugin) { return _this.router.plugin(plugin); });
            if (props.config)
                props.config(_this.router);
            (props.states || []).forEach(function (state) { return _this.router.stateRegistry.register(state); });
        }
        else {
            throw InstanceOrPluginsMissingError;
        }
        _this.router.start();
        return _this;
    }
    UIRouter.prototype.render = function () {
        return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](UIRouterProvider, { value: this.router }, this.props.children);
    };
    UIRouter.propTypes = {
        plugins: prop_types__WEBPACK_IMPORTED_MODULE_1__["arrayOf"](prop_types__WEBPACK_IMPORTED_MODULE_1__["func"]),
        states: prop_types__WEBPACK_IMPORTED_MODULE_1__["arrayOf"](prop_types__WEBPACK_IMPORTED_MODULE_1__["object"]),
        config: prop_types__WEBPACK_IMPORTED_MODULE_1__["func"],
        children: prop_types__WEBPACK_IMPORTED_MODULE_1__["element"].isRequired,
        router: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"],
    };
    return UIRouter;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]));

//# sourceMappingURL=UIRouter.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/components/UISref.js":
/*!***************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/components/UISref.js ***!
  \***************************************************************************/
/*! exports provided: UISref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UISref", function() { return UISref; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../common/node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "../common/node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _uirouter_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uirouter/core */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../index */ "../common/node_modules/@uirouter/react/lib-esm/index.js");
/* harmony import */ var _UIView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./UIView */ "../common/node_modules/@uirouter/react/lib-esm/components/UIView.js");
/* harmony import */ var _UIRouter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./UIRouter */ "../common/node_modules/@uirouter/react/lib-esm/components/UIRouter.js");
/* harmony import */ var _UISrefActive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./UISrefActive */ "../common/node_modules/@uirouter/react/lib-esm/components/UISrefActive.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @reactapi
 * @module components
 */ /** */









var classNames = classnames__WEBPACK_IMPORTED_MODULE_2__;
var Sref = /** @class */ (function (_super) {
    __extends(Sref, _super);
    function Sref() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getOptions = function () {
            var parent = _this.props.parentUIView;
            var parentContext = (parent && parent.context) || _this.props.router.stateRegistry.root();
            var defOpts = { relative: parentContext, inherit: true };
            return Object(_uirouter_core__WEBPACK_IMPORTED_MODULE_3__["extend"])(defOpts, _this.props.options || {});
        };
        _this.handleClick = function (e) {
            var childOnClick = _this.props.children.props.onClick;
            if (Object(_uirouter_core__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(childOnClick)) {
                childOnClick(e);
            }
            if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {
                e.preventDefault();
                var params = _this.props.params || {};
                var to = _this.props.to;
                var options = _this.getOptions();
                _this.props.router.stateService.go(to, params, options);
            }
        };
        return _this;
    }
    Sref.prototype.componentWillMount = function () {
        var addStateInfo = this.props.addStateInfoToParentActive;
        this.deregister = typeof addStateInfo === 'function' ? addStateInfo(this.props.to, this.props.params) : function () { };
        var router = this.props.router;
        if (typeof router === 'undefined') {
            throw _UIRouter__WEBPACK_IMPORTED_MODULE_6__["UIRouterInstanceUndefinedError"];
        }
    };
    Sref.prototype.componentWillUnmount = function () {
        this.deregister();
    };
    Sref.prototype.render = function () {
        var params = this.props.params || {}, to = this.props.to, options = this.getOptions();
        var childrenProps = this.props.children.props;
        var props = Object.assign({}, childrenProps, {
            onClick: this.handleClick,
            href: this.props.router.stateService.href(to, params, options),
            className: classNames(this.props.className, childrenProps.className),
        });
        return Object(react__WEBPACK_IMPORTED_MODULE_0__["cloneElement"])(this.props.children, props);
    };
    Sref.propTypes = {
        router: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"].isRequired,
        parentUIView: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"],
        addStateInfoToParentActive: prop_types__WEBPACK_IMPORTED_MODULE_1__["func"],
        children: prop_types__WEBPACK_IMPORTED_MODULE_1__["element"].isRequired,
        to: prop_types__WEBPACK_IMPORTED_MODULE_1__["string"].isRequired,
        params: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"],
        options: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"],
        className: prop_types__WEBPACK_IMPORTED_MODULE_1__["string"],
    };
    return Sref;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]));
var UISref = function (props) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_index__WEBPACK_IMPORTED_MODULE_4__["UIRouterConsumer"], null, function (router) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_UIView__WEBPACK_IMPORTED_MODULE_5__["UIViewConsumer"], null, function (parentUIView) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_UISrefActive__WEBPACK_IMPORTED_MODULE_7__["UISrefActiveConsumer"], null, function (addStateInfo) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Sref, __assign({}, props, { router: router, parentUIView: parentUIView, addStateInfoToParentActive: addStateInfo }))); })); })); })); };
UISref.displayName = 'UISref';
//# sourceMappingURL=UISref.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/components/UISrefActive.js":
/*!*********************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/components/UISrefActive.js ***!
  \*********************************************************************************/
/*! exports provided: StateNameMustBeAStringError, UISrefActiveProvider, UISrefActiveConsumer, UISrefActive */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateNameMustBeAStringError", function() { return StateNameMustBeAStringError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UISrefActiveProvider", function() { return UISrefActiveProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UISrefActiveConsumer", function() { return UISrefActiveConsumer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UISrefActive", function() { return UISrefActive; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../common/node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "../common/node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../index */ "../common/node_modules/@uirouter/react/lib-esm/index.js");
/* harmony import */ var _UIRouter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UIRouter */ "../common/node_modules/@uirouter/react/lib-esm/components/UIRouter.js");
/* harmony import */ var _UIView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./UIView */ "../common/node_modules/@uirouter/react/lib-esm/components/UIView.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
/**
 * @reactapi
 * @module components
 */ /** */







var classNames = classnames__WEBPACK_IMPORTED_MODULE_2__;
var StateNameMustBeAStringError = new Error('State name provided to <UISref {to}> must be a string.');
/** @internalapi */
var UISrefActiveProvider = (_a = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined), _a.Provider), UISrefActiveConsumer = _a.Consumer;
var SrefActive = /** @class */ (function (_super) {
    __extends(SrefActive, _super);
    function SrefActive() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // keep track of states to watch and their activeClasses
        _this.states = [];
        _this.activeClasses = {};
        _this.state = {
            activeClasses: '',
        };
        _this.addStateInfo = function (stateName, stateParams) {
            var activeClass = _this.props.class;
            var deregister = _this.addState(stateName, stateParams, activeClass);
            var addStateInfo = _this.props.addStateInfoToParentActive;
            _this.updateActiveClasses();
            if (typeof addStateInfo === 'function') {
                var parentDeregister_1 = addStateInfo(stateName, stateParams);
                return function () {
                    deregister();
                    parentDeregister_1();
                };
            }
            return deregister;
        };
        _this.addState = function (stateName, stateParams, activeClass) {
            var stateService = _this.props.router.stateService;
            var parent = _this.props.parentUIView;
            var stateContext = (parent && parent.context) || _this.props.router.stateRegistry.root();
            var state = stateService.get(stateName, stateContext);
            var stateHash = _this.createStateHash(stateName, stateParams);
            var stateInfo = {
                state: state || { name: stateName },
                params: stateParams,
                hash: stateHash,
            };
            _this.states.push(stateInfo);
            _this.activeClasses[stateHash] = activeClass;
            return function () {
                var idx = _this.states.indexOf(stateInfo);
                if (idx !== -1)
                    _this.states.splice(idx, 1);
            };
        };
        _this.createStateHash = function (state, params) {
            if (typeof state !== 'string') {
                throw StateNameMustBeAStringError;
            }
            return params && typeof params === 'object' ? state + JSON.stringify(params) : state;
        };
        _this.getActiveClasses = function () {
            var activeClasses = [];
            var stateService = _this.props.router.stateService;
            var exact = _this.props.exact;
            _this.states.forEach(function (s) {
                var state = s.state, params = s.params, hash = s.hash;
                if (!exact && stateService.includes(state.name, params))
                    activeClasses.push(_this.activeClasses[hash]);
                if (exact && stateService.is(state.name, params))
                    activeClasses.push(_this.activeClasses[hash]);
            });
            return classNames(activeClasses);
        };
        _this.updateActiveClasses = function () {
            var activeClasses = _this.state.activeClasses;
            var newActiveClasses = _this.getActiveClasses();
            if (activeClasses !== newActiveClasses) {
                _this.setState({
                    activeClasses: _this.getActiveClasses(),
                });
            }
        };
        return _this;
    }
    SrefActive.prototype.componentWillMount = function () {
        var _this = this;
        var router = this.props.router;
        if (typeof router === 'undefined') {
            throw _UIRouter__WEBPACK_IMPORTED_MODULE_4__["UIRouterInstanceUndefinedError"];
        }
        // register callback for state change
        this.deregister = router.transitionService.onSuccess({}, function () { return _this.updateActiveClasses(); });
    };
    SrefActive.prototype.componentWillUnmount = function () {
        this.deregister();
    };
    SrefActive.prototype.render = function () {
        var activeClasses = this.state.activeClasses;
        var className = this.props.className;
        var children = activeClasses.length > 0
            ? Object(react__WEBPACK_IMPORTED_MODULE_0__["cloneElement"])(this.props.children, Object.assign({}, this.props.children.props, {
                className: classNames(className, this.props.children.props.className, activeClasses),
            }))
            : this.props.children;
        return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](UISrefActiveProvider, { value: this.addStateInfo }, children);
    };
    SrefActive.propTypes = {
        parentUIView: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"],
        addStateInfoToParentActive: prop_types__WEBPACK_IMPORTED_MODULE_1__["func"],
        router: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"].isRequired,
        class: prop_types__WEBPACK_IMPORTED_MODULE_1__["string"].isRequired,
        children: prop_types__WEBPACK_IMPORTED_MODULE_1__["element"].isRequired,
        className: prop_types__WEBPACK_IMPORTED_MODULE_1__["string"],
    };
    return SrefActive;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]));
var UISrefActive = function (props) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_index__WEBPACK_IMPORTED_MODULE_3__["UIRouterConsumer"], null, function (router) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_UIView__WEBPACK_IMPORTED_MODULE_5__["UIViewConsumer"], null, function (parentUIView) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](UISrefActiveConsumer, null, function (addStateInfo) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](SrefActive, __assign({}, props, { router: router, parentUIView: parentUIView, addStateInfoToParentActive: addStateInfo }))); })); })); })); };
UISrefActive.displayName = 'UISrefActive';
//# sourceMappingURL=UISrefActive.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/components/UIView.js":
/*!***************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/components/UIView.js ***!
  \***************************************************************************/
/*! exports provided: TransitionPropCollisionError, UIViewProvider, UIViewConsumer, UIView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionPropCollisionError", function() { return TransitionPropCollisionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIViewProvider", function() { return UIViewProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIViewConsumer", function() { return UIViewConsumer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIView", function() { return UIView; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../common/node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _uirouter_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uirouter/core */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../index */ "../common/node_modules/@uirouter/react/lib-esm/index.js");
/* harmony import */ var _UIRouter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UIRouter */ "../common/node_modules/@uirouter/react/lib-esm/components/UIRouter.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
/**
 * @reactapi
 * @module components
 */ /** */






/** @internalapi */
var id = 0;
var TransitionPropCollisionError = new Error('`transition` cannot be used as resolve token. ' +
    'Please rename your resolve to avoid conflicts with the router transition.');
/** @internalapi */
var UIViewProvider = (_a = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined), _a.Provider), UIViewConsumer = _a.Consumer;
var View = /** @class */ (function (_super) {
    __extends(View, _super);
    function View() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            loaded: false,
            component: 'div',
            props: {},
        };
        return _this;
    }
    View.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, render = _a.render;
        var _b = this.state, component = _b.component, props = _b.props, loaded = _b.loaded;
        // register reference of child component
        // register new hook right after component has been rendered
        var stateName = this.uiViewAddress && this.uiViewAddress.context && this.uiViewAddress.context.name;
        // only class components can implement the
        // uiCanExit hook and ref doesn't work on
        // stateless function components
        if (typeof component !== 'string' &&
            (!!component.render || (component.prototype && !!component.prototype.render))) {
            props.ref = function (c) {
                _this.componentInstance = c;
                _this.registerUiCanExitHook(stateName);
            };
        }
        // attach any style or className to the rendered component
        // specified on the UIView itself
        var _c = this.props, className = _c.className, style = _c.style;
        var styleProps = { className: className, style: style };
        var childProps = __assign({}, props, styleProps);
        var child = !loaded && Object(react__WEBPACK_IMPORTED_MODULE_0__["isValidElement"])(children) ? Object(react__WEBPACK_IMPORTED_MODULE_0__["cloneElement"])(children, childProps) : Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])(component, childProps);
        // if a render function is passed use that,
        // otherwise render the component normally
        var ChildOrRenderFunction = typeof render !== 'undefined' && loaded ? render(component, childProps) : child;
        return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](UIViewProvider, { value: this.uiViewAddress }, ChildOrRenderFunction);
    };
    View.prototype.componentWillMount = function () {
        var router = this.props.router;
        if (typeof router === 'undefined') {
            throw _UIRouter__WEBPACK_IMPORTED_MODULE_4__["UIRouterInstanceUndefinedError"];
        }
        // Check the context for the parent UIView's fqn and State
        var parent = this.props.parentUIView;
        // Not found in context, this is a root UIView
        parent = parent || { fqn: '', context: router.stateRegistry.root() };
        var name = this.props.name || '$default';
        this.uiViewData = {
            $type: 'react',
            id: ++id,
            name: name,
            fqn: parent.fqn ? parent.fqn + '.' + name : name,
            creationContext: parent.context,
            configUpdated: this.viewConfigUpdated.bind(this),
            config: undefined,
        };
        this.uiViewAddress = { fqn: this.uiViewData.fqn, context: undefined };
        this.deregister = router.viewService.registerUIView(this.uiViewData);
        this.setState({ id: this.uiViewData.id });
    };
    View.prototype.componentWillUnmount = function () {
        this.deregister();
    };
    /**
     * View config updated callback
     *
     * This is called by UI-Router during ViewService.sync().
     * The `newConfig` parameter will contain view configuration (component, etc) when a
     * state is activated and one of its views targets this `UIView`.
     */
    View.prototype.viewConfigUpdated = function (newConfig) {
        if (newConfig === this.uiViewData.config) {
            return;
        }
        var trans;
        var resolves = {};
        if (newConfig) {
            var viewContext = newConfig.viewDecl && newConfig.viewDecl.$context;
            this.uiViewAddress = {
                fqn: this.uiViewAddress.fqn,
                context: viewContext,
            };
            var resolveContext = new _uirouter_core__WEBPACK_IMPORTED_MODULE_2__["ResolveContext"](newConfig.path);
            var injector_1 = resolveContext.injector();
            var stringTokens = resolveContext.getTokens().filter(function (x) { return typeof x === 'string'; });
            if (stringTokens.indexOf('transition') !== -1) {
                throw TransitionPropCollisionError;
            }
            trans = injector_1.get(_uirouter_core__WEBPACK_IMPORTED_MODULE_2__["Transition"]);
            resolves = stringTokens.map(function (token) { return [token, injector_1.get(token)]; }).reduce(_uirouter_core__WEBPACK_IMPORTED_MODULE_2__["applyPairs"], {});
        }
        this.uiViewData.config = newConfig;
        var key = Date.now();
        var props = __assign({}, resolves, { transition: trans, key: key });
        var newComponent = newConfig && newConfig.viewDecl && newConfig.viewDecl.component;
        this.setState({
            component: newComponent || 'div',
            props: newComponent ? props : {},
            loaded: !!newComponent,
        });
    };
    View.prototype.registerUiCanExitHook = function (stateName) {
        typeof this.removeHook === 'function' && this.removeHook();
        var criteria = { exiting: stateName };
        var callback = this.componentInstance &&
            typeof this.componentInstance.uiCanExit === 'function' &&
            this.componentInstance.uiCanExit;
        if (stateName && callback) {
            var transitions = this.props.router.transitionService;
            this.removeHook = transitions.onBefore(criteria, callback, {});
        }
    };
    View.propTypes = {
        router: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"].isRequired,
        parentUIView: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"],
        name: prop_types__WEBPACK_IMPORTED_MODULE_1__["string"],
        className: prop_types__WEBPACK_IMPORTED_MODULE_1__["string"],
        style: prop_types__WEBPACK_IMPORTED_MODULE_1__["object"],
        render: prop_types__WEBPACK_IMPORTED_MODULE_1__["func"],
    };
    return View;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]));
var UIView = /** @class */ (function (_super) {
    __extends(UIView, _super);
    function UIView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UIView.prototype.render = function () {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_index__WEBPACK_IMPORTED_MODULE_3__["UIRouterConsumer"], null, function (router) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](UIViewConsumer, null, function (parentUIView) { return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](View, __assign({}, _this.props, { router: router, parentUIView: parentUIView })); })); }));
    };
    UIView.displayName = 'UIView';
    UIView.__internalViewComponent = View;
    return UIView;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]));

//# sourceMappingURL=UIView.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/components/components.js":
/*!*******************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/components/components.js ***!
  \*******************************************************************************/
/*! exports provided: UIRouterProvider, UIRouterConsumer, InstanceOrPluginsMissingError, UIRouterInstanceUndefinedError, UIRouter, TransitionPropCollisionError, UIViewProvider, UIViewConsumer, UIView, UISref, StateNameMustBeAStringError, UISrefActiveProvider, UISrefActiveConsumer, UISrefActive */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _UIRouter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIRouter */ "../common/node_modules/@uirouter/react/lib-esm/components/UIRouter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterProvider", function() { return _UIRouter__WEBPACK_IMPORTED_MODULE_0__["UIRouterProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterConsumer", function() { return _UIRouter__WEBPACK_IMPORTED_MODULE_0__["UIRouterConsumer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InstanceOrPluginsMissingError", function() { return _UIRouter__WEBPACK_IMPORTED_MODULE_0__["InstanceOrPluginsMissingError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterInstanceUndefinedError", function() { return _UIRouter__WEBPACK_IMPORTED_MODULE_0__["UIRouterInstanceUndefinedError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouter", function() { return _UIRouter__WEBPACK_IMPORTED_MODULE_0__["UIRouter"]; });

/* harmony import */ var _UIView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UIView */ "../common/node_modules/@uirouter/react/lib-esm/components/UIView.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionPropCollisionError", function() { return _UIView__WEBPACK_IMPORTED_MODULE_1__["TransitionPropCollisionError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIViewProvider", function() { return _UIView__WEBPACK_IMPORTED_MODULE_1__["UIViewProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIViewConsumer", function() { return _UIView__WEBPACK_IMPORTED_MODULE_1__["UIViewConsumer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIView", function() { return _UIView__WEBPACK_IMPORTED_MODULE_1__["UIView"]; });

/* harmony import */ var _UISref__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UISref */ "../common/node_modules/@uirouter/react/lib-esm/components/UISref.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISref", function() { return _UISref__WEBPACK_IMPORTED_MODULE_2__["UISref"]; });

/* harmony import */ var _UISrefActive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./UISrefActive */ "../common/node_modules/@uirouter/react/lib-esm/components/UISrefActive.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateNameMustBeAStringError", function() { return _UISrefActive__WEBPACK_IMPORTED_MODULE_3__["StateNameMustBeAStringError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISrefActiveProvider", function() { return _UISrefActive__WEBPACK_IMPORTED_MODULE_3__["UISrefActiveProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISrefActiveConsumer", function() { return _UISrefActive__WEBPACK_IMPORTED_MODULE_3__["UISrefActiveConsumer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISrefActive", function() { return _UISrefActive__WEBPACK_IMPORTED_MODULE_3__["UISrefActive"]; });

/**
 * # Components
 *
 * UI-Router React Components and their APIs:
 * - [[UIRouter]]: Main router component
 * - [[UIView]]: A viewport for routed components
 * - [[UISref]]: A state ref to a target state; navigates when clicked
 * - [[UISrefActive]]: Adds a css class when a UISref's target state (or a child state) is active
 *
 * @preferred
 * @reactapi
 * @module components
 */ /** */




//# sourceMappingURL=components.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/core.js":
/*!**************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/core.js ***!
  \**************************************************************/
/*! exports provided: StartMethodCalledMoreThanOnceError, UIRouterReact */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StartMethodCalledMoreThanOnceError", function() { return StartMethodCalledMoreThanOnceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouterReact", function() { return UIRouterReact; });
/* harmony import */ var _uirouter_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uirouter/core */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js");
/* harmony import */ var _reactViews__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reactViews */ "../common/node_modules/@uirouter/react/lib-esm/reactViews.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @reactapi
 * @module react
 */ /** */


/**
 * React View Config Factory
 *
 * Given a path and a [[ReactViewDeclaration]]
 * (the view declaration object found on the state declaration),
 * returns a [[ReactViewConfig]]
 *
 * The ReactViewConfig is an instance of a view,
 * which will be provided to the matching `UIView` Component's
 * [[UIView.viewConfigUpdated]] function.
 *
 * @internalapi
 */
var viewConfigFactory = function (node, config) { return new _reactViews__WEBPACK_IMPORTED_MODULE_1__["ReactViewConfig"](node, config); };
/** @hidden */
var StartMethodCalledMoreThanOnceError = new Error("\n  The Router.start() method has been called more than once.\n\n  The <UIRouter> component calls start() as final step of the initialization and you shouldn't need to call it manually.\n");
/**
 * The main UIRouter object
 *
 * This is the main UIRouter object.
 * There should be one instance of this object per running application.
 *
 * This class has references to all the other UIRouter services.
 */
var UIRouterReact = /** @class */ (function (_super) {
    __extends(UIRouterReact, _super);
    /**
     * Creates a new UIRouter instance
     *
     * This can be used to manually bootstrap the router.
     *
     * #### Example:
     * ```js
     * import { UIRouterReact } from "ui-router-ng2";
     * let routerInstance = new UIRouterReact();
     * routerInstance.start();
     * ```
     */
    function UIRouterReact() {
        var _this = _super.call(this) || this;
        _this.started = false;
        _this.viewService._pluginapi._viewConfigFactory('react', viewConfigFactory);
        _this.stateRegistry.decorator('views', _reactViews__WEBPACK_IMPORTED_MODULE_1__["reactViewsBuilder"]);
        return _this;
    }
    /**
     * Starts the router
     *
     * Calling this method enables listening to the URL for changes.
     * It also performs the initial state synchronization from the URL.
     */
    UIRouterReact.prototype.start = function () {
        // Throw error if user calls `start` more than once
        if (this.started) {
            throw StartMethodCalledMoreThanOnceError;
        }
        else {
            this.urlMatcherFactory.$get();
            this.urlRouter.listen();
            this.urlRouter.sync();
            this.started = true;
        }
    };
    return UIRouterReact;
}(_uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UIRouter"]));

//# sourceMappingURL=core.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/index.js":
/*!***************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/index.js ***!
  \***************************************************************/
/*! exports provided: UIRouterReact, StartMethodCalledMoreThanOnceError, UIRouter, reactViewsBuilder, ReactViewConfig, UrlRules, UrlConfig, UIRouterGlobals, UIRouterPluginBase, UIRouterProvider, UIRouterConsumer, InstanceOrPluginsMissingError, UIRouterInstanceUndefinedError, TransitionPropCollisionError, UIViewProvider, UIViewConsumer, UIView, UISref, StateNameMustBeAStringError, UISrefActiveProvider, UISrefActiveConsumer, UISrefActive, root, fromJson, toJson, forEach, extend, equals, identity, noop, createProxyFunctions, inherit, inArray, _inArray, removeFrom, _removeFrom, pushTo, _pushTo, deregAll, defaults, mergeR, ancestors, pick, omit, pluck, filter, find, mapObj, map, values, allTrueR, anyTrueR, unnestR, flattenR, pushR, uniqR, unnest, flatten, assertPredicate, assertMap, assertFn, pairs, arrayTuples, applyPairs, tail, copy, _extend, silenceUncaughtInPromise, silentRejection, makeStub, services, Glob, curry, compose, pipe, prop, propEq, parse, not, and, or, all, any, is, eq, val, invoke, pattern, isUndefined, isDefined, isNull, isNullOrUndefined, isFunction, isNumber, isString, isObject, isArray, isDate, isRegExp, isInjectable, isPromise, Queue, maxLength, padString, kebobString, functionToString, fnToString, stringify, beforeAfterSubstr, hostRegex, stripLastPathElement, splitHash, splitQuery, splitEqual, trimHashVal, splitOnDelim, joinNeighborsR, Category, Trace, trace, DefType, Param, ParamTypes, StateParams, ParamType, PathNode, PathUtils, resolvePolicies, defaultResolvePolicy, Resolvable, NATIVE_INJECTOR_TOKEN, ResolveContext, resolvablesBuilder, StateBuilder, StateObject, StateMatcher, StateQueueManager, StateRegistry, StateService, TargetState, TransitionHookPhase, TransitionHookScope, HookBuilder, matchState, RegisteredHook, makeEvent, RejectType, Rejection, Transition, TransitionHook, TransitionEventType, defaultTransOpts, TransitionService, UrlMatcher, ParamFactory, UrlMatcherFactory, UrlRouter, UrlRuleFactory, BaseUrlRule, UrlService, ViewService, $q, $injector, BaseLocationServices, HashLocationService, MemoryLocationService, PushStateLocationService, MemoryLocationConfig, BrowserLocationConfig, keyValsToObjectR, getParams, parseUrl, buildUrl, locationPluginFactory, servicesPlugin, hashLocationPlugin, pushStateLocationPlugin, memoryLocationPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _uirouter_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uirouter/core */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRules", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UrlRules"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlConfig", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UrlConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterGlobals", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UIRouterGlobals"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterPluginBase", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UIRouterPluginBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "root", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["root"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromJson", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["fromJson"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toJson", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["toJson"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["forEach"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["equals"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["identity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["noop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createProxyFunctions", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["createProxyFunctions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inherit", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["inherit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inArray", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["inArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_inArray", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["_inArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeFrom", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["removeFrom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_removeFrom", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["_removeFrom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushTo", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pushTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_pushTo", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["_pushTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deregAll", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["deregAll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaults", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["defaults"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["mergeR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ancestors", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["ancestors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pick", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pick"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "omit", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["omit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pluck", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pluck"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["filter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "find", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["find"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mapObj", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["mapObj"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "map", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["map"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "values", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["values"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "allTrueR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["allTrueR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "anyTrueR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["anyTrueR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unnestR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["unnestR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flattenR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["flattenR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pushR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "uniqR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["uniqR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unnest", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["unnest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["flatten"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertPredicate", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["assertPredicate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertMap", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["assertMap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertFn", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["assertFn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pairs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrayTuples", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["arrayTuples"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyPairs", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["applyPairs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tail", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["tail"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["copy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_extend", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["_extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "silenceUncaughtInPromise", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["silenceUncaughtInPromise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "silentRejection", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["silentRejection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeStub", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["makeStub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "services", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["services"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Glob", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Glob"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "curry", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["curry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["compose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pipe"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["prop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propEq", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["propEq"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["parse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "not", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["not"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "and", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["and"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "or", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["or"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "all", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["all"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "any", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "is", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["is"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["eq"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "val", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["val"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "invoke", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["invoke"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pattern", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pattern"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isUndefined", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isUndefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDefined", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isDefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNull", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isNull"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNullOrUndefined", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDate", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isDate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInjectable", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isInjectable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["isPromise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Queue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxLength", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["maxLength"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "padString", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["padString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "kebobString", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["kebobString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "functionToString", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["functionToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fnToString", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["fnToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["stringify"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeAfterSubstr", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["beforeAfterSubstr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hostRegex", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["hostRegex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripLastPathElement", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["stripLastPathElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitHash", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["splitHash"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitQuery", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["splitQuery"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitEqual", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["splitEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trimHashVal", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["trimHashVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitOnDelim", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["splitOnDelim"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "joinNeighborsR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["joinNeighborsR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Category", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Category"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Trace", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Trace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["trace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefType", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["DefType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Param", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Param"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamTypes", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["ParamTypes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateParams", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["StateParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamType", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["ParamType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PathNode", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["PathNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PathUtils", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["PathUtils"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolvePolicies", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["resolvePolicies"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultResolvePolicy", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["defaultResolvePolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Resolvable", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Resolvable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NATIVE_INJECTOR_TOKEN", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["NATIVE_INJECTOR_TOKEN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResolveContext", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["ResolveContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolvablesBuilder", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["resolvablesBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateBuilder", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["StateBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateObject", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["StateObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateMatcher", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["StateMatcher"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateQueueManager", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["StateQueueManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateRegistry", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["StateRegistry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateService", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["StateService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TargetState", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["TargetState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHookPhase", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["TransitionHookPhase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHookScope", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["TransitionHookScope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HookBuilder", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["HookBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matchState", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["matchState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RegisteredHook", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["RegisteredHook"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeEvent", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["makeEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RejectType", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["RejectType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rejection", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Rejection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transition", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["Transition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHook", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["TransitionHook"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionEventType", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["TransitionEventType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultTransOpts", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["defaultTransOpts"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionService", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["TransitionService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlMatcher", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UrlMatcher"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamFactory", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["ParamFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlMatcherFactory", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UrlMatcherFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRouter", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UrlRouter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRuleFactory", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UrlRuleFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseUrlRule", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["BaseUrlRule"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlService", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["UrlService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewService", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["ViewService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$q", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["$q"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$injector", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["$injector"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseLocationServices", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["BaseLocationServices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HashLocationService", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["HashLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationService", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["MemoryLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PushStateLocationService", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["PushStateLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationConfig", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["MemoryLocationConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserLocationConfig", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["BrowserLocationConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keyValsToObjectR", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["keyValsToObjectR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["getParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["parseUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildUrl", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["buildUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "locationPluginFactory", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["locationPluginFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "servicesPlugin", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["servicesPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hashLocationPlugin", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["hashLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushStateLocationPlugin", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pushStateLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoryLocationPlugin", function() { return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["memoryLocationPlugin"]; });

/* harmony import */ var _reactViews__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reactViews */ "../common/node_modules/@uirouter/react/lib-esm/reactViews.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reactViewsBuilder", function() { return _reactViews__WEBPACK_IMPORTED_MODULE_1__["reactViewsBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReactViewConfig", function() { return _reactViews__WEBPACK_IMPORTED_MODULE_1__["ReactViewConfig"]; });

/* harmony import */ var _components_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/components */ "../common/node_modules/@uirouter/react/lib-esm/components/components.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterProvider", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UIRouterProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterConsumer", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UIRouterConsumer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InstanceOrPluginsMissingError", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["InstanceOrPluginsMissingError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterInstanceUndefinedError", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UIRouterInstanceUndefinedError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionPropCollisionError", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["TransitionPropCollisionError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIViewProvider", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UIViewProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIViewConsumer", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UIViewConsumer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIView", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UIView"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISref", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UISref"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateNameMustBeAStringError", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["StateNameMustBeAStringError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISrefActiveProvider", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UISrefActiveProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISrefActiveConsumer", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UISrefActiveConsumer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UISrefActive", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UISrefActive"]; });

/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core */ "../common/node_modules/@uirouter/react/lib-esm/core.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterReact", function() { return _core__WEBPACK_IMPORTED_MODULE_3__["UIRouterReact"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StartMethodCalledMoreThanOnceError", function() { return _core__WEBPACK_IMPORTED_MODULE_3__["StartMethodCalledMoreThanOnceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouter", function() { return _components_components__WEBPACK_IMPORTED_MODULE_2__["UIRouter"]; });

/**
 * # React Specific API
 *
 *
 * UI-Router for React relies heavily on [`@uirouter/core`](http://github.com/ui-router/core).
 * The following APIs are extensions to the core ui-router APIs, specific to `ui-router-react`.
 *
 * @preferred
 * @reactapi
 * @module react
 */ /** */





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/lib-esm/reactViews.js":
/*!********************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/lib-esm/reactViews.js ***!
  \********************************************************************/
/*! exports provided: reactViewsBuilder, ReactViewConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reactViewsBuilder", function() { return reactViewsBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReactViewConfig", function() { return ReactViewConfig; });
/* harmony import */ var _uirouter_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uirouter/core */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js");
/**
 * @reactapi
 * @module react
 */ /** */

/**
 * This is a [[StateBuilder.builder]] function for react `views`.
 *
 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
 * handles the `views` property with logic specific to ui-router-react.
 *
 * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and
 * applies the state-level configuration to a view named `$default`.
 *
 * @internalapi
 */
function reactViewsBuilder(state) {
    var views = {}, viewsDefinitionObject;
    if (!state.views) {
        viewsDefinitionObject = { $default: Object(_uirouter_core__WEBPACK_IMPORTED_MODULE_0__["pick"])(state, ['component']) };
    }
    else {
        viewsDefinitionObject = Object(_uirouter_core__WEBPACK_IMPORTED_MODULE_0__["map"])(state.views, function (val, key) {
            if (val.component)
                return val;
            return { component: val };
        });
    }
    Object(_uirouter_core__WEBPACK_IMPORTED_MODULE_0__["forEach"])(viewsDefinitionObject, function (config, name) {
        name = name || '$default'; // Account for views: { "": { template... } }
        if (Object.keys(config).length == 0)
            return;
        config.$type = 'react';
        config.$context = state;
        config.$name = name;
        var normalized = _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["ViewService"].normalizeUIViewTarget(config.$context, config.$name);
        config.$uiViewName = normalized.uiViewName;
        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;
        views[name] = config;
    });
    return views;
}
/** @internalapi */
var id = 0;
/** @internalapi */
var ReactViewConfig = /** @class */ (function () {
    function ReactViewConfig(path, viewDecl) {
        this.path = path;
        this.viewDecl = viewDecl;
        this.loaded = true;
        this.$id = id++;
    }
    ReactViewConfig.prototype.load = function () {
        return _uirouter_core__WEBPACK_IMPORTED_MODULE_0__["services"].$q.when(this);
    };
    return ReactViewConfig;
}());

//# sourceMappingURL=reactViews.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js ***!
  \***************************************************************************************************/
/*! exports provided: root, fromJson, toJson, forEach, extend, equals, identity, noop, createProxyFunctions, inherit, inArray, _inArray, removeFrom, _removeFrom, pushTo, _pushTo, deregAll, defaults, mergeR, ancestors, pick, omit, pluck, filter, find, mapObj, map, values, allTrueR, anyTrueR, unnestR, flattenR, pushR, uniqR, unnest, flatten, assertPredicate, assertMap, assertFn, pairs, arrayTuples, applyPairs, tail, copy, _extend, silenceUncaughtInPromise, silentRejection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromJson", function() { return fromJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toJson", function() { return toJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return noop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createProxyFunctions", function() { return createProxyFunctions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inherit", function() { return inherit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inArray", function() { return inArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_inArray", function() { return _inArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFrom", function() { return removeFrom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_removeFrom", function() { return _removeFrom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pushTo", function() { return pushTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_pushTo", function() { return _pushTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deregAll", function() { return deregAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaults", function() { return defaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeR", function() { return mergeR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ancestors", function() { return ancestors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pick", function() { return pick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "omit", function() { return omit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pluck", function() { return pluck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapObj", function() { return mapObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "values", function() { return values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allTrueR", function() { return allTrueR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anyTrueR", function() { return anyTrueR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unnestR", function() { return unnestR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flattenR", function() { return flattenR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pushR", function() { return pushR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniqR", function() { return uniqR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unnest", function() { return unnest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertPredicate", function() { return assertPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertMap", function() { return assertMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertFn", function() { return assertFn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return pairs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayTuples", function() { return arrayTuples; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPairs", function() { return applyPairs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tail", function() { return tail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_extend", function() { return _extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "silenceUncaughtInPromise", function() { return silenceUncaughtInPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "silentRejection", function() { return silentRejection; });
/* harmony import */ var _predicates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _coreservices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/**
 * Random utility functions used in the UI-Router code
 *
 * These functions are exported, but are subject to change without notice.
 *
 * @preferred @publicapi @module common
 */ /** */



var root = (typeof self === 'object' && self.self === self && self) ||
    (typeof global === 'object' && global.global === global && global) ||
    undefined;
var angular = root.angular || {};
var fromJson = angular.fromJson || JSON.parse.bind(JSON);
var toJson = angular.toJson || JSON.stringify.bind(JSON);
var forEach = angular.forEach || _forEach;
var extend = Object.assign || _extend;
var equals = angular.equals || _equals;
function identity(x) {
    return x;
}
function noop() { }
/**
 * Builds proxy functions on the `to` object which pass through to the `from` object.
 *
 * For each key in `fnNames`, creates a proxy function on the `to` object.
 * The proxy function calls the real function on the `from` object.
 *
 *
 * #### Example:
 * This example creates an new class instance whose functions are prebound to the new'd object.
 * ```js
 * class Foo {
 *   constructor(data) {
 *     // Binds all functions from Foo.prototype to 'this',
 *     // then copies them to 'this'
 *     bindFunctions(Foo.prototype, this, this);
 *     this.data = data;
 *   }
 *
 *   log() {
 *     console.log(this.data);
 *   }
 * }
 *
 * let myFoo = new Foo([1,2,3]);
 * var logit = myFoo.log;
 * logit(); // logs [1, 2, 3] from the myFoo 'this' instance
 * ```
 *
 * #### Example:
 * This example creates a bound version of a service function, and copies it to another object
 * ```
 *
 * var SomeService = {
 *   this.data = [3, 4, 5];
 *   this.log = function() {
 *     console.log(this.data);
 *   }
 * }
 *
 * // Constructor fn
 * function OtherThing() {
 *   // Binds all functions from SomeService to SomeService,
 *   // then copies them to 'this'
 *   bindFunctions(SomeService, this, SomeService);
 * }
 *
 * let myOtherThing = new OtherThing();
 * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'
 * ```
 *
 * @param source A function that returns the source object which contains the original functions to be bound
 * @param target A function that returns the target object which will receive the bound functions
 * @param bind A function that returns the object which the functions will be bound to
 * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)
 * @param latebind If true, the binding of the function is delayed until the first time it's invoked
 */
function createProxyFunctions(source, target, bind, fnNames, latebind) {
    if (latebind === void 0) { latebind = false; }
    var bindFunction = function (fnName) { return source()[fnName].bind(bind()); };
    var makeLateRebindFn = function (fnName) {
        return function lateRebindFunction() {
            target[fnName] = bindFunction(fnName);
            return target[fnName].apply(null, arguments);
        };
    };
    fnNames = fnNames || Object.keys(source());
    return fnNames.reduce(function (acc, name) {
        acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);
        return acc;
    }, target);
}
/**
 * prototypal inheritance helper.
 * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it
 */
var inherit = function (parent, extra) { return extend(Object.create(parent), extra); };
/** Given an array, returns true if the object is found in the array, (using indexOf) */
var inArray = Object(_hof__WEBPACK_IMPORTED_MODULE_1__["curry"])(_inArray);
function _inArray(array, obj) {
    return array.indexOf(obj) !== -1;
}
/**
 * Given an array, and an item, if the item is found in the array, it removes it (in-place).
 * The same array is returned
 */
var removeFrom = Object(_hof__WEBPACK_IMPORTED_MODULE_1__["curry"])(_removeFrom);
function _removeFrom(array, obj) {
    var idx = array.indexOf(obj);
    if (idx >= 0)
        array.splice(idx, 1);
    return array;
}
/** pushes a values to an array and returns the value */
var pushTo = Object(_hof__WEBPACK_IMPORTED_MODULE_1__["curry"])(_pushTo);
function _pushTo(arr, val) {
    return arr.push(val), val;
}
/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */
var deregAll = function (functions) {
    return functions.slice().forEach(function (fn) {
        typeof fn === 'function' && fn();
        removeFrom(functions, fn);
    });
};
/**
 * Applies a set of defaults to an options object.  The options object is filtered
 * to only those properties of the objects in the defaultsList.
 * Earlier objects in the defaultsList take precedence when applying defaults.
 */
function defaults(opts) {
    var defaultsList = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        defaultsList[_i - 1] = arguments[_i];
    }
    var defaultVals = extend.apply(void 0, [{}].concat(defaultsList.reverse()));
    return extend(defaultVals, pick(opts || {}, Object.keys(defaultVals)));
}
/** Reduce function that merges each element of the list into a single object, using extend */
var mergeR = function (memo, item) { return extend(memo, item); };
/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
    var path = [];
    // tslint:disable-next-line:forin
    for (var n in first.path) {
        if (first.path[n] !== second.path[n])
            break;
        path.push(first.path[n]);
    }
    return path;
}
/**
 * Return a copy of the object only containing the whitelisted properties.
 *
 * #### Example:
 * ```
 * var foo = { a: 1, b: 2, c: 3 };
 * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }
 * ```
 * @param obj the source object
 * @param propNames an Array of strings, which are the whitelisted property names
 */
function pick(obj, propNames) {
    var objCopy = {};
    for (var _prop in obj) {
        if (propNames.indexOf(_prop) !== -1) {
            objCopy[_prop] = obj[_prop];
        }
    }
    return objCopy;
}
/**
 * Return a copy of the object omitting the blacklisted properties.
 *
 * @example
 * ```
 *
 * var foo = { a: 1, b: 2, c: 3 };
 * var ab = omit(foo, ['a', 'b']); // { c: 3 }
 * ```
 * @param obj the source object
 * @param propNames an Array of strings, which are the blacklisted property names
 */
function omit(obj, propNames) {
    return Object.keys(obj)
        .filter(Object(_hof__WEBPACK_IMPORTED_MODULE_1__["not"])(inArray(propNames)))
        .reduce(function (acc, key) { return ((acc[key] = obj[key]), acc); }, {});
}
/**
 * Maps an array, or object to a property (by name)
 */
function pluck(collection, propName) {
    return map(collection, Object(_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])(propName));
}
/** Filters an Array or an Object's properties based on a predicate */
function filter(collection, callback) {
    var arr = Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(collection), result = arr ? [] : {};
    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return (result[key] = x); };
    forEach(collection, function (item, i) {
        if (callback(item, i))
            accept(item, i);
    });
    return result;
}
/** Finds an object from an array, or a property of an object, that matches a predicate */
function find(collection, callback) {
    var result;
    forEach(collection, function (item, i) {
        if (result)
            return;
        if (callback(item, i))
            result = item;
    });
    return result;
}
/** Given an object, returns a new object, where each property is transformed by the callback function */
var mapObj = map;
/** Maps an array or object properties using a callback function */
function map(collection, callback, target) {
    target = target || (Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(collection) ? [] : {});
    forEach(collection, function (item, i) { return (target[i] = callback(item, i)); });
    return target;
}
/**
 * Given an object, return its enumerable property values
 *
 * @example
 * ```
 *
 * let foo = { a: 1, b: 2, c: 3 }
 * let vals = values(foo); // [ 1, 2, 3 ]
 * ```
 */
var values = function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); };
/**
 * Reduce function that returns true if all of the values are truthy.
 *
 * @example
 * ```
 *
 * let vals = [ 1, true, {}, "hello world"];
 * vals.reduce(allTrueR, true); // true
 *
 * vals.push(0);
 * vals.reduce(allTrueR, true); // false
 * ```
 */
var allTrueR = function (memo, elem) { return memo && elem; };
/**
 * Reduce function that returns true if any of the values are truthy.
 *
 *  * @example
 * ```
 *
 * let vals = [ 0, null, undefined ];
 * vals.reduce(anyTrueR, true); // false
 *
 * vals.push("hello world");
 * vals.reduce(anyTrueR, true); // true
 * ```
 */
var anyTrueR = function (memo, elem) { return memo || elem; };
/**
 * Reduce function which un-nests a single level of arrays
 * @example
 * ```
 *
 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
 * ```
 */
var unnestR = function (memo, elem) { return memo.concat(elem); };
/**
 * Reduce function which recursively un-nests all arrays
 *
 * @example
 * ```
 *
 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", "double, "nested" ]
 * ```
 */
var flattenR = function (memo, elem) {
    return Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);
};
/**
 * Reduce function that pushes an object to an array, then returns the array.
 * Mostly just for [[flattenR]] and [[uniqR]]
 */
function pushR(arr, obj) {
    arr.push(obj);
    return arr;
}
/** Reduce function that filters out duplicates */
var uniqR = function (acc, token) { return (inArray(acc, token) ? acc : pushR(acc, token)); };
/**
 * Return a new array with a single level of arrays unnested.
 *
 * @example
 * ```
 *
 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
 * unnest(input) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
 * ```
 */
var unnest = function (arr) { return arr.reduce(unnestR, []); };
/**
 * Return a completely flattened version of an array.
 *
 * @example
 * ```
 *
 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
 * flatten(input) // [ "a", "b", "c", "d", "double, "nested" ]
 * ```
 */
var flatten = function (arr) { return arr.reduce(flattenR, []); };
/**
 * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.
 * @example
 * ```
 *
 * let isNumber = (obj) => typeof(obj) === 'number';
 * let allNumbers = [ 1, 2, 3, 4, 5 ];
 * allNumbers.filter(assertPredicate(isNumber)); //OK
 *
 * let oneString = [ 1, 2, 3, 4, "5" ];
 * oneString.filter(assertPredicate(isNumber, "Not all numbers")); // throws Error(""Not all numbers"");
 * ```
 */
var assertPredicate = assertFn;
/**
 * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.
 * @example
 * ```
 *
 * var data = { foo: 1, bar: 2 };
 *
 * let keys = [ 'foo', 'bar' ]
 * let values = keys.map(assertMap(key => data[key], "Key not found"));
 * // values is [1, 2]
 *
 * let keys = [ 'foo', 'bar', 'baz' ]
 * let values = keys.map(assertMap(key => data[key], "Key not found"));
 * // throws Error("Key not found")
 * ```
 */
var assertMap = assertFn;
function assertFn(predicateOrMap, errMsg) {
    if (errMsg === void 0) { errMsg = 'assert failure'; }
    return function (obj) {
        var result = predicateOrMap(obj);
        if (!result) {
            throw new Error(Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(errMsg) ? errMsg(obj) : errMsg);
        }
        return result;
    };
}
/**
 * Like _.pairs: Given an object, returns an array of key/value pairs
 *
 * @example
 * ```
 *
 * pairs({ foo: "FOO", bar: "BAR }) // [ [ "foo", "FOO" ], [ "bar": "BAR" ] ]
 * ```
 */
var pairs = function (obj) { return Object.keys(obj).map(function (key) { return [key, obj[key]]; }); };
/**
 * Given two or more parallel arrays, returns an array of tuples where
 * each tuple is composed of [ a[i], b[i], ... z[i] ]
 *
 * @example
 * ```
 *
 * let foo = [ 0, 2, 4, 6 ];
 * let bar = [ 1, 3, 5, 7 ];
 * let baz = [ 10, 30, 50, 70 ];
 * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]
 * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]
 * ```
 */
function arrayTuples() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args.length === 0)
        return [];
    var maxArrayLen = args.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 âˆ’ 1 aka Number.MAX_SAFE_INTEGER
    var result = [];
    var _loop_1 = function (i) {
        // This is a hot function
        // Unroll when there are 1-4 arguments
        switch (args.length) {
            case 1:
                result.push([args[0][i]]);
                break;
            case 2:
                result.push([args[0][i], args[1][i]]);
                break;
            case 3:
                result.push([args[0][i], args[1][i], args[2][i]]);
                break;
            case 4:
                result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);
                break;
            default:
                result.push(args.map(function (array) { return array[i]; }));
                break;
        }
    };
    for (var i = 0; i < maxArrayLen; i++) {
        _loop_1(i);
    }
    return result;
}
/**
 * Reduce function which builds an object from an array of [key, value] pairs.
 *
 * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.
 *
 * Each keyValueTuple should be an array with values [ key: string, value: any ]
 *
 * @example
 * ```
 *
 * var pairs = [ ["fookey", "fooval"], ["barkey", "barval"] ]
 *
 * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})
 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
 *
 * // Or, more simply:
 * var pairsToObj = pairs.reduce(applyPairs, {})
 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
 * ```
 */
function applyPairs(memo, keyValTuple) {
    var key, value;
    if (Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(keyValTuple))
        key = keyValTuple[0], value = keyValTuple[1];
    if (!Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isString"])(key))
        throw new Error('invalid parameters to applyPairs');
    memo[key] = value;
    return memo;
}
/** Get the last element of an array */
function tail(arr) {
    return (arr.length && arr[arr.length - 1]) || undefined;
}
/**
 * shallow copy from src to dest
 */
function copy(src, dest) {
    if (dest)
        Object.keys(dest).forEach(function (key) { return delete dest[key]; });
    if (!dest)
        dest = {};
    return extend(dest, src);
}
/** Naive forEach implementation works with Objects or Arrays */
function _forEach(obj, cb, _this) {
    if (Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj))
        return obj.forEach(cb, _this);
    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });
}
function _extend(toObj) {
    for (var i = 1; i < arguments.length; i++) {
        var obj = arguments[i];
        if (!obj)
            continue;
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; j++) {
            toObj[keys[j]] = obj[keys[j]];
        }
    }
    return toObj;
}
function _equals(o1, o2) {
    if (o1 === o2)
        return true;
    if (o1 === null || o2 === null)
        return false;
    if (o1 !== o1 && o2 !== o2)
        return true; // NaN === NaN
    var t1 = typeof o1, t2 = typeof o2;
    if (t1 !== t2 || t1 !== 'object')
        return false;
    var tup = [o1, o2];
    if (Object(_hof__WEBPACK_IMPORTED_MODULE_1__["all"])(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(tup))
        return _arraysEq(o1, o2);
    if (Object(_hof__WEBPACK_IMPORTED_MODULE_1__["all"])(_predicates__WEBPACK_IMPORTED_MODULE_0__["isDate"])(tup))
        return o1.getTime() === o2.getTime();
    if (Object(_hof__WEBPACK_IMPORTED_MODULE_1__["all"])(_predicates__WEBPACK_IMPORTED_MODULE_0__["isRegExp"])(tup))
        return o1.toString() === o2.toString();
    if (Object(_hof__WEBPACK_IMPORTED_MODULE_1__["all"])(_predicates__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(tup))
        return true; // meh
    var predicates = [_predicates__WEBPACK_IMPORTED_MODULE_0__["isFunction"], _predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"], _predicates__WEBPACK_IMPORTED_MODULE_0__["isDate"], _predicates__WEBPACK_IMPORTED_MODULE_0__["isRegExp"]];
    if (predicates.map(_hof__WEBPACK_IMPORTED_MODULE_1__["any"]).reduce(function (b, fn) { return b || !!fn(tup); }, false))
        return false;
    var keys = {};
    // tslint:disable-next-line:forin
    for (var key in o1) {
        if (!_equals(o1[key], o2[key]))
            return false;
        keys[key] = true;
    }
    for (var key in o2) {
        if (!keys[key])
            return false;
    }
    return true;
}
function _arraysEq(a1, a2) {
    if (a1.length !== a2.length)
        return false;
    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);
}
// issue #2676
var silenceUncaughtInPromise = function (promise) { return promise.catch(function (e) { return 0; }) && promise; };
var silentRejection = function (error) { return silenceUncaughtInPromise(_coreservices__WEBPACK_IMPORTED_MODULE_2__["services"].$q.reject(error)); };
//# sourceMappingURL=common.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../lpi/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js":
/*!*********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js ***!
  \*********************************************************************************************************/
/*! exports provided: makeStub, services */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeStub", function() { return makeStub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "services", function() { return services; });
var noImpl = function (fnname) { return function () {
    throw new Error("No implementation for " + fnname + ". The framework specific code did not implement this method.");
}; };
var makeStub = function (service, methods) {
    return methods.reduce(function (acc, key) { return ((acc[key] = noImpl(service + "." + key + "()")), acc); }, {});
};
var services = {
    $q: undefined,
    $injector: undefined,
};

//# sourceMappingURL=coreservices.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/glob.js":
/*!*************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/glob.js ***!
  \*************************************************************************************************/
/*! exports provided: Glob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Glob", function() { return Glob; });
/** @publicapi @module core */
/**
 * Matches state names using glob-like pattern strings.
 *
 * Globs can be used in specific APIs including:
 *
 * - [[StateService.is]]
 * - [[StateService.includes]]
 * - The first argument to Hook Registration functions like [[TransitionService.onStart]]
 *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]
 *
 * A `Glob` string is a pattern which matches state names.
 * Nested state names are split into segments (separated by a dot) when processing.
 * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']
 *
 * Globs work according to the following rules:
 *
 * ### Exact match:
 *
 * The glob `'A.B'` matches the state named exactly `'A.B'`.
 *
 * | Glob        |Matches states named|Does not match state named|
 * |:------------|:--------------------|:---------------------|
 * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |
 * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |
 * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|
 *
 * ### Single star (`*`)
 *
 * A single star (`*`) is a wildcard that matches exactly one segment.
 *
 * | Glob        |Matches states named  |Does not match state named |
 * |:------------|:---------------------|:--------------------------|
 * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |
 * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |
 * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|
 *
 * ### Double star (`**`)
 *
 * A double star (`'**'`) is a wildcard that matches *zero or more segments*
 *
 * | Glob        |Matches states named                           |Does not match state named         |
 * |:------------|:----------------------------------------------|:----------------------------------|
 * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |
 * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |
 * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |
 * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |
 *
 */
var Glob = /** @class */ (function () {
    function Glob(text) {
        this.text = text;
        this.glob = text.split('.');
        var regexpString = this.text
            .split('.')
            .map(function (seg) {
            if (seg === '**')
                return '(?:|(?:\\.[^.]*)*)';
            if (seg === '*')
                return '\\.[^.]*';
            return '\\.' + seg;
        })
            .join('');
        this.regexp = new RegExp('^' + regexpString + '$');
    }
    /** Returns true if the string has glob-like characters in it */
    Glob.is = function (text) {
        return !!/[!,*]+/.exec(text);
    };
    /** Returns a glob from the string, or null if the string isn't Glob-like */
    Glob.fromString = function (text) {
        return Glob.is(text) ? new Glob(text) : null;
    };
    Glob.prototype.matches = function (name) {
        return this.regexp.test('.' + name);
    };
    return Glob;
}());

//# sourceMappingURL=glob.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js":
/*!************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js ***!
  \************************************************************************************************/
/*! exports provided: curry, compose, pipe, prop, propEq, parse, not, and, or, all, any, is, eq, val, invoke, pattern */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "curry", function() { return curry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return prop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "propEq", function() { return propEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return parse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "not", function() { return not; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "and", function() { return and; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "or", function() { return or; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "all", function() { return all; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "any", function() { return any; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is", function() { return is; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "val", function() { return val; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invoke", function() { return invoke; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pattern", function() { return pattern; });
/**
 * Higher order functions
 *
 * These utility functions are exported, but are subject to change without notice.
 *
 * @module common_hof
 */ /** */
/**
 * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.
 *
 * Given a function with N parameters, returns a new function that supports partial application.
 * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,
 * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to
 * accept more parameters until all N parameters have been supplied.
 *
 *
 * This contrived example uses a partially applied function as an predicate, which returns true
 * if an object is found in both arrays.
 * @example
 * ```
 * // returns true if an object is in both of the two arrays
 * function inBoth(array1, array2, object) {
 *   return array1.indexOf(object) !== -1 &&
 *          array2.indexOf(object) !== 1;
 * }
 * let obj1, obj2, obj3, obj4, obj5, obj6, obj7
 * let foos = [obj1, obj3]
 * let bars = [obj3, obj4, obj5]
 *
 * // A curried "copy" of inBoth
 * let curriedInBoth = curry(inBoth);
 * // Partially apply both the array1 and array2
 * let inFoosAndBars = curriedInBoth(foos, bars);
 *
 * // Supply the final argument; since all arguments are
 * // supplied, the original inBoth function is then called.
 * let obj1InBoth = inFoosAndBars(obj1); // false
 *
 * // Use the inFoosAndBars as a predicate.
 * // Filter, on each iteration, supplies the final argument
 * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];
 * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]
 *
 * ```
 *
 * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function
 *
 * @param fn
 * @returns {*|function(): (*|any)}
 */
function curry(fn) {
    var initial_args = [].slice.apply(arguments, [1]);
    var func_args_length = fn.length;
    function curried(args) {
        if (args.length >= func_args_length)
            return fn.apply(null, args);
        return function () {
            return curried(args.concat([].slice.apply(arguments)));
        };
    }
    return curried(initial_args);
}
/**
 * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left
 * given: f(x), g(x), h(x)
 * let composed = compose(f,g,h)
 * then, composed is: f(g(h(x)))
 */
function compose() {
    var args = arguments;
    var start = args.length - 1;
    return function () {
        var i = start, result = args[start].apply(this, arguments);
        while (i--)
            result = args[i].call(this, result);
        return result;
    };
}
/**
 * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right
 * given: f(x), g(x), h(x)
 * let piped = pipe(f,g,h);
 * then, piped is: h(g(f(x)))
 */
function pipe() {
    var funcs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        funcs[_i] = arguments[_i];
    }
    return compose.apply(null, [].slice.call(arguments).reverse());
}
/**
 * Given a property name, returns a function that returns that property from an object
 * let obj = { foo: 1, name: "blarg" };
 * let getName = prop("name");
 * getName(obj) === "blarg"
 */
var prop = function (name) { return function (obj) { return obj && obj[name]; }; };
/**
 * Given a property name and a value, returns a function that returns a boolean based on whether
 * the passed object has a property that matches the value
 * let obj = { foo: 1, name: "blarg" };
 * let getName = propEq("name", "blarg");
 * getName(obj) === true
 */
var propEq = curry(function (name, _val, obj) { return obj && obj[name] === _val; });
/**
 * Given a dotted property name, returns a function that returns a nested property from an object, or undefined
 * let obj = { id: 1, nestedObj: { foo: 1, name: "blarg" }, };
 * let getName = prop("nestedObj.name");
 * getName(obj) === "blarg"
 * let propNotFound = prop("this.property.doesnt.exist");
 * propNotFound(obj) === undefined
 */
var parse = function (name) { return pipe.apply(null, name.split('.').map(prop)); };
/**
 * Given a function that returns a truthy or falsey value, returns a
 * function that returns the opposite (falsey or truthy) value given the same inputs
 */
var not = function (fn) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return !fn.apply(null, args);
}; };
/**
 * Given two functions that return truthy or falsey values, returns a function that returns truthy
 * if both functions return truthy for the given arguments
 */
function and(fn1, fn2) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return fn1.apply(null, args) && fn2.apply(null, args);
    };
}
/**
 * Given two functions that return truthy or falsey values, returns a function that returns truthy
 * if at least one of the functions returns truthy for the given arguments
 */
function or(fn1, fn2) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return fn1.apply(null, args) || fn2.apply(null, args);
    };
}
/**
 * Check if all the elements of an array match a predicate function
 *
 * @param fn1 a predicate function `fn1`
 * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array
 */
var all = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); }; };
// tslint:disable-next-line:variable-name
var any = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); }; };
/** Given a class, returns a Predicate function that returns true if the object is of that class */
var is = function (ctor) { return function (obj) {
    return (obj != null && obj.constructor === ctor) || obj instanceof ctor;
}; };
/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */
var eq = function (value) { return function (other) { return value === other; }; };
/** Given a value, returns a function which returns the value */
var val = function (v) { return function () { return v; }; };
function invoke(fnName, args) {
    return function (obj) { return obj[fnName].apply(obj, args); };
}
/**
 * Sorta like Pattern Matching (a functional programming conditional construct)
 *
 * See http://c2.com/cgi/wiki?PatternMatching
 *
 * This is a conditional construct which allows a series of predicates and output functions
 * to be checked and then applied.  Each predicate receives the input.  If the predicate
 * returns truthy, then its matching output function (mapping function) is provided with
 * the input and, then the result is returned.
 *
 * Each combination (2-tuple) of predicate + output function should be placed in an array
 * of size 2: [ predicate, mapFn ]
 *
 * These 2-tuples should be put in an outer array.
 *
 * @example
 * ```
 *
 * // Here's a 2-tuple where the first element is the isString predicate
 * // and the second element is a function that returns a description of the input
 * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];
 *
 * // Second tuple: predicate "isNumber", mapfn returns a description
 * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];
 *
 * let third = [ (input) => input === null,  (input) => `Oh, null...` ];
 *
 * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];
 *
 * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);
 *
 * console.log(descriptionOf(undefined)); // 'notdefined'
 * console.log(descriptionOf(55)); // '(55) That's a number!'
 * console.log(descriptionOf("foo")); // 'Here's your string foo'
 * ```
 *
 * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,
 * with a Predicate and a mapping/output function
 * @returns {function(any): *}
 */
function pattern(struct) {
    return function (x) {
        for (var i = 0; i < struct.length; i++) {
            if (struct[i][0](x))
                return struct[i][1](x);
        }
    };
}
//# sourceMappingURL=hof.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js":
/*!**************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js ***!
  \**************************************************************************************************/
/*! exports provided: root, fromJson, toJson, forEach, extend, equals, identity, noop, createProxyFunctions, inherit, inArray, _inArray, removeFrom, _removeFrom, pushTo, _pushTo, deregAll, defaults, mergeR, ancestors, pick, omit, pluck, filter, find, mapObj, map, values, allTrueR, anyTrueR, unnestR, flattenR, pushR, uniqR, unnest, flatten, assertPredicate, assertMap, assertFn, pairs, arrayTuples, applyPairs, tail, copy, _extend, silenceUncaughtInPromise, silentRejection, makeStub, services, Glob, curry, compose, pipe, prop, propEq, parse, not, and, or, all, any, is, eq, val, invoke, pattern, isUndefined, isDefined, isNull, isNullOrUndefined, isFunction, isNumber, isString, isObject, isArray, isDate, isRegExp, isInjectable, isPromise, Queue, maxLength, padString, kebobString, functionToString, fnToString, stringify, beforeAfterSubstr, hostRegex, stripLastPathElement, splitHash, splitQuery, splitEqual, trimHashVal, splitOnDelim, joinNeighborsR, Category, Trace, trace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "root", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["root"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromJson", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["fromJson"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toJson", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["toJson"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["forEach"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["equals"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["identity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["noop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createProxyFunctions", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["createProxyFunctions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inherit", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["inherit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inArray", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["inArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_inArray", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["_inArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeFrom", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["removeFrom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_removeFrom", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["_removeFrom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushTo", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["pushTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_pushTo", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["_pushTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deregAll", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["deregAll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaults", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["defaults"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeR", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["mergeR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ancestors", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["ancestors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pick", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["pick"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "omit", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["omit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pluck", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["pluck"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["filter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "find", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["find"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mapObj", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["mapObj"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "map", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["map"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "values", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["values"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "allTrueR", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["allTrueR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "anyTrueR", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["anyTrueR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unnestR", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["unnestR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flattenR", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["flattenR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushR", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["pushR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "uniqR", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["uniqR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unnest", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["unnest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["flatten"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertPredicate", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["assertPredicate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertMap", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["assertMap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertFn", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["assertFn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["pairs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrayTuples", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["arrayTuples"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyPairs", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["applyPairs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tail", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["tail"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["copy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_extend", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["_extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "silenceUncaughtInPromise", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["silenceUncaughtInPromise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "silentRejection", function() { return _common__WEBPACK_IMPORTED_MODULE_0__["silentRejection"]; });

/* harmony import */ var _coreservices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeStub", function() { return _coreservices__WEBPACK_IMPORTED_MODULE_1__["makeStub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "services", function() { return _coreservices__WEBPACK_IMPORTED_MODULE_1__["services"]; });

/* harmony import */ var _glob__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glob */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/glob.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Glob", function() { return _glob__WEBPACK_IMPORTED_MODULE_2__["Glob"]; });

/* harmony import */ var _hof__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "curry", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["curry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["compose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["pipe"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["prop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propEq", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["propEq"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["parse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "not", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["not"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "and", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["and"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "or", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["or"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "all", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["all"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "any", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "is", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["is"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["eq"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "val", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["val"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "invoke", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["invoke"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pattern", function() { return _hof__WEBPACK_IMPORTED_MODULE_3__["pattern"]; });

/* harmony import */ var _predicates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isUndefined", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isUndefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDefined", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isDefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNull", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isNull"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNullOrUndefined", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isNullOrUndefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDate", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isDate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInjectable", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isInjectable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return _predicates__WEBPACK_IMPORTED_MODULE_4__["isPromise"]; });

/* harmony import */ var _queue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./queue */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/queue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return _queue__WEBPACK_IMPORTED_MODULE_5__["Queue"]; });

/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxLength", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["maxLength"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "padString", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["padString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "kebobString", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["kebobString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "functionToString", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["functionToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fnToString", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["fnToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["stringify"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeAfterSubstr", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["beforeAfterSubstr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hostRegex", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["hostRegex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripLastPathElement", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["stripLastPathElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitHash", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["splitHash"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitQuery", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["splitQuery"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitEqual", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["splitEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trimHashVal", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["trimHashVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitOnDelim", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["splitOnDelim"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "joinNeighborsR", function() { return _strings__WEBPACK_IMPORTED_MODULE_6__["joinNeighborsR"]; });

/* harmony import */ var _trace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Category", function() { return _trace__WEBPACK_IMPORTED_MODULE_7__["Category"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Trace", function() { return _trace__WEBPACK_IMPORTED_MODULE_7__["Trace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return _trace__WEBPACK_IMPORTED_MODULE_7__["trace"]; });

/** @publicapi @module common */ /** */








//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js":
/*!*******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js ***!
  \*******************************************************************************************************/
/*! exports provided: isUndefined, isDefined, isNull, isNullOrUndefined, isFunction, isNumber, isString, isObject, isArray, isDate, isRegExp, isInjectable, isPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isUndefined", function() { return isUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDefined", function() { return isDefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNull", function() { return isNull; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNullOrUndefined", function() { return isNullOrUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return isArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDate", function() { return isDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return isRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInjectable", function() { return isInjectable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return isPromise; });
/* harmony import */ var _hof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/** Predicates
 *
 * These predicates return true/false based on the input.
 * Although these functions are exported, they are subject to change without notice.
 *
 * @module common_predicates
 */ /** */

var toStr = Object.prototype.toString;
var tis = function (t) { return function (x) { return typeof x === t; }; };
var isUndefined = tis('undefined');
var isDefined = Object(_hof__WEBPACK_IMPORTED_MODULE_0__["not"])(isUndefined);
var isNull = function (o) { return o === null; };
var isNullOrUndefined = Object(_hof__WEBPACK_IMPORTED_MODULE_0__["or"])(isNull, isUndefined);
var isFunction = tis('function');
var isNumber = tis('number');
var isString = tis('string');
var isObject = function (x) { return x !== null && typeof x === 'object'; };
var isArray = Array.isArray;
var isDate = (function (x) { return toStr.call(x) === '[object Date]'; });
var isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });
/**
 * Predicate which checks if a value is injectable
 *
 * A value is "injectable" if it is a function, or if it is an ng1 array-notation-style array
 * where all the elements in the array are Strings, except the last one, which is a Function
 */
function isInjectable(val) {
    if (isArray(val) && val.length) {
        var head = val.slice(0, -1), tail = val.slice(-1);
        return !(head.filter(Object(_hof__WEBPACK_IMPORTED_MODULE_0__["not"])(isString)).length || tail.filter(Object(_hof__WEBPACK_IMPORTED_MODULE_0__["not"])(isFunction)).length);
    }
    return isFunction(val);
}
/**
 * Predicate which checks if a value looks like a Promise
 *
 * It is probably a Promise if it's an object, and it has a `then` property which is a Function
 */
var isPromise = Object(_hof__WEBPACK_IMPORTED_MODULE_0__["and"])(isObject, Object(_hof__WEBPACK_IMPORTED_MODULE_0__["pipe"])(Object(_hof__WEBPACK_IMPORTED_MODULE_0__["prop"])('then'), isFunction));
//# sourceMappingURL=predicates.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/queue.js":
/*!**************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/queue.js ***!
  \**************************************************************************************************/
/*! exports provided: Queue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return Queue; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/** @publicapi @module common */ /** */

var Queue = /** @class */ (function () {
    function Queue(_items, _limit) {
        if (_items === void 0) { _items = []; }
        if (_limit === void 0) { _limit = null; }
        this._items = _items;
        this._limit = _limit;
        this._evictListeners = [];
        this.onEvict = Object(_common__WEBPACK_IMPORTED_MODULE_0__["pushTo"])(this._evictListeners);
    }
    Queue.prototype.enqueue = function (item) {
        var items = this._items;
        items.push(item);
        if (this._limit && items.length > this._limit)
            this.evict();
        return item;
    };
    Queue.prototype.evict = function () {
        var item = this._items.shift();
        this._evictListeners.forEach(function (fn) { return fn(item); });
        return item;
    };
    Queue.prototype.dequeue = function () {
        if (this.size())
            return this._items.splice(0, 1)[0];
    };
    Queue.prototype.clear = function () {
        var current = this._items;
        this._items = [];
        return current;
    };
    Queue.prototype.size = function () {
        return this._items.length;
    };
    Queue.prototype.remove = function (item) {
        var idx = this._items.indexOf(item);
        return idx > -1 && this._items.splice(idx, 1)[0];
    };
    Queue.prototype.peekTail = function () {
        return this._items[this._items.length - 1];
    };
    Queue.prototype.peekHead = function () {
        if (this.size())
            return this._items[0];
    };
    return Queue;
}());

//# sourceMappingURL=queue.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js":
/*!****************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js ***!
  \****************************************************************************************************/
/*! exports provided: maxLength, padString, kebobString, functionToString, fnToString, stringify, beforeAfterSubstr, hostRegex, stripLastPathElement, splitHash, splitQuery, splitEqual, trimHashVal, splitOnDelim, joinNeighborsR */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxLength", function() { return maxLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padString", function() { return padString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kebobString", function() { return kebobString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "functionToString", function() { return functionToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnToString", function() { return fnToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return stringify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beforeAfterSubstr", function() { return beforeAfterSubstr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hostRegex", function() { return hostRegex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stripLastPathElement", function() { return stripLastPathElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitHash", function() { return splitHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitQuery", function() { return splitQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitEqual", function() { return splitEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trimHashVal", function() { return trimHashVal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitOnDelim", function() { return splitOnDelim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "joinNeighborsR", function() { return joinNeighborsR; });
/* harmony import */ var _predicates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transition/rejectFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _hof__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/**
 * Functions that manipulate strings
 *
 * Although these functions are exported, they are subject to change without notice.
 *
 * @module common_strings
 */ /** */




/**
 * Returns a string shortened to a maximum length
 *
 * If the string is already less than the `max` length, return the string.
 * Else return the string, shortened to `max - 3` and append three dots ("...").
 *
 * @param max the maximum length of the string to return
 * @param str the input string
 */
function maxLength(max, str) {
    if (str.length <= max)
        return str;
    return str.substr(0, max - 3) + '...';
}
/**
 * Returns a string, with spaces added to the end, up to a desired str length
 *
 * If the string is already longer than the desired length, return the string.
 * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.
 *
 * @param length the desired length of the string to return
 * @param str the input string
 */
function padString(length, str) {
    while (str.length < length)
        str += ' ';
    return str;
}
function kebobString(camelCase) {
    return camelCase
        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char
        .replace(/([A-Z])/g, function ($1) { return '-' + $1.toLowerCase(); }); // replace rest
}
function functionToString(fn) {
    var fnStr = fnToString(fn);
    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\([^)]*\))/);
    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;
    var fnName = fn['name'] || '';
    if (fnName && toStr.match(/function \(/)) {
        return 'function ' + fnName + toStr.substr(9);
    }
    return toStr;
}
function fnToString(fn) {
    var _fn = Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(fn) ? fn.slice(-1)[0] : fn;
    return (_fn && _fn.toString()) || 'undefined';
}
var isRejection = _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_1__["Rejection"].isRejectionPromise;
var hasToString = function (obj) {
    return Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj) && !Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj) && obj.constructor !== Object && Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(obj.toString);
};
var stringifyPattern = Object(_hof__WEBPACK_IMPORTED_MODULE_3__["pattern"])([
    [_predicates__WEBPACK_IMPORTED_MODULE_0__["isUndefined"], Object(_hof__WEBPACK_IMPORTED_MODULE_3__["val"])('undefined')],
    [_predicates__WEBPACK_IMPORTED_MODULE_0__["isNull"], Object(_hof__WEBPACK_IMPORTED_MODULE_3__["val"])('null')],
    [_predicates__WEBPACK_IMPORTED_MODULE_0__["isPromise"], Object(_hof__WEBPACK_IMPORTED_MODULE_3__["val"])('[Promise]')],
    [isRejection, function (x) { return x._transitionRejection.toString(); }],
    [hasToString, function (x) { return x.toString(); }],
    [_predicates__WEBPACK_IMPORTED_MODULE_0__["isInjectable"], functionToString],
    [Object(_hof__WEBPACK_IMPORTED_MODULE_3__["val"])(true), _common__WEBPACK_IMPORTED_MODULE_2__["identity"]],
]);
function stringify(o) {
    var seen = [];
    function format(value) {
        if (Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isObject"])(value)) {
            if (seen.indexOf(value) !== -1)
                return '[circular ref]';
            seen.push(value);
        }
        return stringifyPattern(value);
    }
    if (Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(o)) {
        // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify
        // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by
        // manually stringifying it.
        return format(o);
    }
    return JSON.stringify(o, function (key, value) { return format(value); }).replace(/\\"/g, '"');
}
/** Returns a function that splits a string on a character or substring */
var beforeAfterSubstr = function (char) { return function (str) {
    if (!str)
        return ['', ''];
    var idx = str.indexOf(char);
    if (idx === -1)
        return [str, ''];
    return [str.substr(0, idx), str.substr(idx + 1)];
}; };
var hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');
var stripLastPathElement = function (str) { return str.replace(/\/[^/]*$/, ''); };
var splitHash = beforeAfterSubstr('#');
var splitQuery = beforeAfterSubstr('?');
var splitEqual = beforeAfterSubstr('=');
var trimHashVal = function (str) { return (str ? str.replace(/^#/, '') : ''); };
/**
 * Splits on a delimiter, but returns the delimiters in the array
 *
 * #### Example:
 * ```js
 * var splitOnSlashes = splitOnDelim('/');
 * splitOnSlashes("/foo"); // ["/", "foo"]
 * splitOnSlashes("/foo/"); // ["/", "foo", "/"]
 * ```
 */
function splitOnDelim(delim) {
    var re = new RegExp('(' + delim + ')', 'g');
    return function (str) { return str.split(re).filter(_common__WEBPACK_IMPORTED_MODULE_2__["identity"]); };
}
/**
 * Reduce fn that joins neighboring strings
 *
 * Given an array of strings, returns a new array
 * where all neighboring strings have been joined.
 *
 * #### Example:
 * ```js
 * let arr = ["foo", "bar", 1, "baz", "", "qux" ];
 * arr.reduce(joinNeighborsR, []) // ["foobar", 1, "bazqux" ]
 * ```
 */
function joinNeighborsR(acc, x) {
    if (Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isString"])(Object(_common__WEBPACK_IMPORTED_MODULE_2__["tail"])(acc)) && Object(_predicates__WEBPACK_IMPORTED_MODULE_0__["isString"])(x))
        return acc.slice(0, -1).concat(Object(_common__WEBPACK_IMPORTED_MODULE_2__["tail"])(acc) + x);
    return Object(_common__WEBPACK_IMPORTED_MODULE_2__["pushR"])(acc, x);
}
//# sourceMappingURL=strings.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js":
/*!**************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js ***!
  \**************************************************************************************************/
/*! exports provided: Category, Trace, trace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Category", function() { return Category; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Trace", function() { return Trace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return trace; });
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/**
 * # Transition tracing (debug)
 *
 * Enable transition tracing to print transition information to the console,
 * in order to help debug your application.
 * Tracing logs detailed information about each Transition to your console.
 *
 * To enable tracing, import the [[Trace]] singleton and enable one or more categories.
 *
 * ### ES6
 * ```js
 * import {trace} from "@uirouter/core";
 * trace.enable(1, 5); // TRANSITION and VIEWCONFIG
 * ```
 *
 * ### CJS
 * ```js
 * let trace = require("@uirouter/core").trace;
 * trace.enable("TRANSITION", "VIEWCONFIG");
 * ```
 *
 * ### Globals
 * ```js
 * let trace = window["@uirouter/core"].trace;
 * trace.enable(); // Trace everything (very verbose)
 * ```
 *
 * ### Angular 1:
 * ```js
 * app.run($trace => $trace.enable());
 * ```
 *
 * @publicapi @module trace
 */
/* tslint:disable:no-console */



/** @hidden */
function uiViewString(uiview) {
    if (!uiview)
        return 'ui-view (defunct)';
    var state = uiview.creationContext ? uiview.creationContext.name || '(root)' : '(none)';
    return "[ui-view#" + uiview.id + " " + uiview.$type + ":" + uiview.fqn + " (" + uiview.name + "@" + state + ")]";
}
/** @hidden */
var viewConfigString = function (viewConfig) {
    var view = viewConfig.viewDecl;
    var state = view.$context.name || '(root)';
    return "[View#" + viewConfig.$id + " from '" + state + "' state]: target ui-view: '" + view.$uiViewName + "@" + view.$uiViewContextAnchor + "'";
};
/** @hidden */
function normalizedCat(input) {
    return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(input) ? Category[input] : Category[Category[input]];
}
/** @hidden */
var consoleLog = Function.prototype.bind.call(console.log, console);
/** @hidden */
var consoletable = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(console.table) ? console.table.bind(console) : consoleLog.bind(console);
/**
 * Trace categories Enum
 *
 * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]
 *
 * `trace.enable(Category.TRANSITION)`
 *
 * These can also be provided using a matching string, or position ordinal
 *
 * `trace.enable("TRANSITION")`
 *
 * `trace.enable(1)`
 */
var Category;
(function (Category) {
    Category[Category["RESOLVE"] = 0] = "RESOLVE";
    Category[Category["TRANSITION"] = 1] = "TRANSITION";
    Category[Category["HOOK"] = 2] = "HOOK";
    Category[Category["UIVIEW"] = 3] = "UIVIEW";
    Category[Category["VIEWCONFIG"] = 4] = "VIEWCONFIG";
})(Category || (Category = {}));

/** @hidden */
var _tid = Object(_common_hof__WEBPACK_IMPORTED_MODULE_0__["parse"])('$id');
/** @hidden */
var _rid = Object(_common_hof__WEBPACK_IMPORTED_MODULE_0__["parse"])('router.$id');
/** @hidden */
var transLbl = function (trans) { return "Transition #" + _tid(trans) + "-" + _rid(trans); };
/**
 * Prints UI-Router Transition trace information to the console.
 */
var Trace = /** @class */ (function () {
    /** @hidden */
    function Trace() {
        /** @hidden */
        this._enabled = {};
        this.approximateDigests = 0;
    }
    /** @hidden */
    Trace.prototype._set = function (enabled, categories) {
        var _this = this;
        if (!categories.length) {
            categories = Object.keys(Category)
                .map(function (k) { return parseInt(k, 10); })
                .filter(function (k) { return !isNaN(k); })
                .map(function (key) { return Category[key]; });
        }
        categories.map(normalizedCat).forEach(function (category) { return (_this._enabled[category] = enabled); });
    };
    Trace.prototype.enable = function () {
        var categories = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            categories[_i] = arguments[_i];
        }
        this._set(true, categories);
    };
    Trace.prototype.disable = function () {
        var categories = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            categories[_i] = arguments[_i];
        }
        this._set(false, categories);
    };
    /**
     * Retrieves the enabled stateus of a [[Category]]
     *
     * ```js
     * trace.enabled("VIEWCONFIG"); // true or false
     * ```
     *
     * @returns boolean true if the category is enabled
     */
    Trace.prototype.enabled = function (category) {
        return !!this._enabled[normalizedCat(category)];
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceTransitionStart = function (trans) {
        if (!this.enabled(Category.TRANSITION))
            return;
        console.log(transLbl(trans) + ": Started  -> " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(trans));
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceTransitionIgnored = function (trans) {
        if (!this.enabled(Category.TRANSITION))
            return;
        console.log(transLbl(trans) + ": Ignored  <> " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(trans));
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceHookInvocation = function (step, trans, options) {
        if (!this.enabled(Category.HOOK))
            return;
        var event = Object(_common_hof__WEBPACK_IMPORTED_MODULE_0__["parse"])('traceData.hookType')(options) || 'internal', context = Object(_common_hof__WEBPACK_IMPORTED_MODULE_0__["parse"])('traceData.context.state.name')(options) || Object(_common_hof__WEBPACK_IMPORTED_MODULE_0__["parse"])('traceData.context')(options) || 'unknown', name = Object(_strings__WEBPACK_IMPORTED_MODULE_2__["functionToString"])(step.registeredHook.callback);
        console.log(transLbl(trans) + ":   Hook -> " + event + " context: " + context + ", " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["maxLength"])(200, name));
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceHookResult = function (hookResult, trans, transitionOptions) {
        if (!this.enabled(Category.HOOK))
            return;
        console.log(transLbl(trans) + ":   <- Hook returned: " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["maxLength"])(200, Object(_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(hookResult)));
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceResolvePath = function (path, when, trans) {
        if (!this.enabled(Category.RESOLVE))
            return;
        console.log(transLbl(trans) + ":         Resolving " + path + " (" + when + ")");
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {
        if (!this.enabled(Category.RESOLVE))
            return;
        console.log(transLbl(trans) + ":               <- Resolved  " + resolvable + " to: " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["maxLength"])(200, Object(_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(resolvable.data)));
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceError = function (reason, trans) {
        if (!this.enabled(Category.TRANSITION))
            return;
        console.log(transLbl(trans) + ": <- Rejected " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(trans) + ", reason: " + reason);
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceSuccess = function (finalState, trans) {
        if (!this.enabled(Category.TRANSITION))
            return;
        console.log(transLbl(trans) + ": <- Success  " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(trans) + ", final state: " + finalState.name);
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {
        if (extra === void 0) { extra = ''; }
        if (!this.enabled(Category.UIVIEW))
            return;
        console.log("ui-view: " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["padString"])(30, event) + " " + uiViewString(viewData) + extra);
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {
        if (!this.enabled(Category.UIVIEW))
            return;
        this.traceUIViewEvent('Updating', viewData, " with ViewConfig from context='" + context + "'");
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceUIViewFill = function (viewData, html) {
        if (!this.enabled(Category.UIVIEW))
            return;
        this.traceUIViewEvent('Fill', viewData, " with: " + Object(_strings__WEBPACK_IMPORTED_MODULE_2__["maxLength"])(200, html));
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceViewSync = function (pairs) {
        if (!this.enabled(Category.VIEWCONFIG))
            return;
        var uivheader = 'uiview component fqn';
        var cfgheader = 'view config state (view name)';
        var mapping = pairs
            .map(function (_a) {
            var uiView = _a.uiView, viewConfig = _a.viewConfig;
            var _b;
            var uiv = uiView && uiView.fqn;
            var cfg = viewConfig && viewConfig.viewDecl.$context.name + ": (" + viewConfig.viewDecl.$name + ")";
            return _b = {}, _b[uivheader] = uiv, _b[cfgheader] = cfg, _b;
        })
            .sort(function (a, b) { return (a[uivheader] || '').localeCompare(b[uivheader] || ''); });
        consoletable(mapping);
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {
        if (!this.enabled(Category.VIEWCONFIG))
            return;
        console.log("VIEWCONFIG: " + event + " " + viewConfigString(viewConfig));
    };
    /** @internalapi called by ui-router code */
    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {
        if (!this.enabled(Category.VIEWCONFIG))
            return;
        console.log("VIEWCONFIG: " + event + " " + uiViewString(viewData));
    };
    return Trace;
}());

/**
 * The [[Trace]] singleton
 *
 * #### Example:
 * ```js
 * import {trace} from "@uirouter/core";
 * trace.enable(1, 5);
 * ```
 */
var trace = new Trace();

//# sourceMappingURL=trace.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/globals.js":
/*!*********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/globals.js ***!
  \*********************************************************************************************/
/*! exports provided: UIRouterGlobals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouterGlobals", function() { return UIRouterGlobals; });
/* harmony import */ var _params_stateParams__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./params/stateParams */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/stateParams.js");
/* harmony import */ var _common_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/queue */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/queue.js");
/** @publicapi @module core */ /** */


/**
 * Global router state
 *
 * This is where we hold the global mutable state such as current state, current
 * params, current transition, etc.
 */
var UIRouterGlobals = /** @class */ (function () {
    function UIRouterGlobals() {
        /**
         * Current parameter values
         *
         * The parameter values from the latest successful transition
         */
        this.params = new _params_stateParams__WEBPACK_IMPORTED_MODULE_0__["StateParams"]();
        /** @internalapi */
        this.lastStartedTransitionId = -1;
        /** @internalapi */
        this.transitionHistory = new _common_queue__WEBPACK_IMPORTED_MODULE_1__["Queue"]([], 1);
        /** @internalapi */
        this.successfulTransitions = new _common_queue__WEBPACK_IMPORTED_MODULE_1__["Queue"]([], 1);
    }
    UIRouterGlobals.prototype.dispose = function () {
        this.transitionHistory.clear();
        this.successfulTransitions.clear();
        this.transition = null;
    };
    return UIRouterGlobals;
}());

//# sourceMappingURL=globals.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/coreResolvables.js":
/*!***********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/coreResolvables.js ***!
  \***********************************************************************************************************/
/*! exports provided: registerAddCoreResolvables, treeChangesCleanup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerAddCoreResolvables", function() { return registerAddCoreResolvables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "treeChangesCleanup", function() { return treeChangesCleanup; });
/* harmony import */ var _transition_transition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transition/transition */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transition.js");
/* harmony import */ var _router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../router */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/router.js");
/* harmony import */ var _resolve__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../resolve */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/index.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @internalapi @module hooks */ /** */




function addCoreResolvables(trans) {
    trans.addResolvable(_resolve__WEBPACK_IMPORTED_MODULE_2__["Resolvable"].fromData(_router__WEBPACK_IMPORTED_MODULE_1__["UIRouter"], trans.router), '');
    trans.addResolvable(_resolve__WEBPACK_IMPORTED_MODULE_2__["Resolvable"].fromData(_transition_transition__WEBPACK_IMPORTED_MODULE_0__["Transition"], trans), '');
    trans.addResolvable(_resolve__WEBPACK_IMPORTED_MODULE_2__["Resolvable"].fromData('$transition$', trans), '');
    trans.addResolvable(_resolve__WEBPACK_IMPORTED_MODULE_2__["Resolvable"].fromData('$stateParams', trans.params()), '');
    trans.entering().forEach(function (state) {
        trans.addResolvable(_resolve__WEBPACK_IMPORTED_MODULE_2__["Resolvable"].fromData('$state$', state), state);
    });
}
var registerAddCoreResolvables = function (transitionService) {
    return transitionService.onCreate({}, addCoreResolvables);
};
var TRANSITION_TOKENS = ['$transition$', _transition_transition__WEBPACK_IMPORTED_MODULE_0__["Transition"]];
var isTransition = Object(_common__WEBPACK_IMPORTED_MODULE_3__["inArray"])(TRANSITION_TOKENS);
// References to Transition in the treeChanges pathnodes makes all
// previous Transitions reachable in memory, causing a memory leak
// This function removes resolves for '$transition$' and `Transition` from the treeChanges.
// Do not use this on current transitions, only on old ones.
var treeChangesCleanup = function (trans) {
    var nodes = Object(_common__WEBPACK_IMPORTED_MODULE_3__["values"])(trans.treeChanges())
        .reduce(_common__WEBPACK_IMPORTED_MODULE_3__["unnestR"], [])
        .reduce(_common__WEBPACK_IMPORTED_MODULE_3__["uniqR"], []);
    // If the resolvable is a Transition, return a new resolvable with null data
    var replaceTransitionWithNull = function (r) {
        return isTransition(r.token) ? _resolve__WEBPACK_IMPORTED_MODULE_2__["Resolvable"].fromData(r.token, null) : r;
    };
    nodes.forEach(function (node) {
        node.resolvables = node.resolvables.map(replaceTransitionWithNull);
    });
};
//# sourceMappingURL=coreResolvables.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/ignoredTransition.js":
/*!*************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/ignoredTransition.js ***!
  \*************************************************************************************************************/
/*! exports provided: registerIgnoredTransitionHook */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerIgnoredTransitionHook", function() { return registerIgnoredTransitionHook; });
/* harmony import */ var _common_trace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/* harmony import */ var _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transition/rejectFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js");
/** @internalapi @module hooks */ /** */


/**
 * A [[TransitionHookFn]] that skips a transition if it should be ignored
 *
 * This hook is invoked at the end of the onBefore phase.
 *
 * If the transition should be ignored (because no parameter or states changed)
 * then the transition is ignored and not processed.
 */
function ignoredHook(trans) {
    var ignoredReason = trans._ignoredReason();
    if (!ignoredReason)
        return;
    _common_trace__WEBPACK_IMPORTED_MODULE_0__["trace"].traceTransitionIgnored(trans);
    var pending = trans.router.globals.transition;
    // The user clicked a link going back to the *current state* ('A')
    // However, there is also a pending transition in flight (to 'B')
    // Abort the transition to 'B' because the user now wants to be back at 'A'.
    if (ignoredReason === 'SameAsCurrent' && pending) {
        pending.abort();
    }
    return _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_1__["Rejection"].ignored().toPromise();
}
var registerIgnoredTransitionHook = function (transitionService) {
    return transitionService.onBefore({}, ignoredHook, { priority: -9999 });
};
//# sourceMappingURL=ignoredTransition.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/invalidTransition.js":
/*!*************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/invalidTransition.js ***!
  \*************************************************************************************************************/
/*! exports provided: registerInvalidTransitionHook */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerInvalidTransitionHook", function() { return registerInvalidTransitionHook; });
/** @internalapi @module hooks */ /** */
/**
 * A [[TransitionHookFn]] that rejects the Transition if it is invalid
 *
 * This hook is invoked at the end of the onBefore phase.
 * If the transition is invalid (for example, param values do not validate)
 * then the transition is rejected.
 */
function invalidTransitionHook(trans) {
    if (!trans.valid()) {
        throw new Error(trans.error().toString());
    }
}
var registerInvalidTransitionHook = function (transitionService) {
    return transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });
};
//# sourceMappingURL=invalidTransition.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/lazyLoad.js":
/*!****************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/lazyLoad.js ***!
  \****************************************************************************************************/
/*! exports provided: registerLazyLoadHook, lazyLoadState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerLazyLoadHook", function() { return registerLazyLoadHook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lazyLoadState", function() { return lazyLoadState; });
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");

/**
 * A [[TransitionHookFn]] that performs lazy loading
 *
 * When entering a state "abc" which has a `lazyLoad` function defined:
 * - Invoke the `lazyLoad` function (unless it is already in process)
 *   - Flag the hook function as "in process"
 *   - The function should return a promise (that resolves when lazy loading is complete)
 * - Wait for the promise to settle
 *   - If the promise resolves to a [[LazyLoadResult]], then register those states
 *   - Flag the hook function as "not in process"
 * - If the hook was successful
 *   - Remove the `lazyLoad` function from the state declaration
 * - If all the hooks were successful
 *   - Retry the transition (by returning a TargetState)
 *
 * ```
 * .state('abc', {
 *   component: 'fooComponent',
 *   lazyLoad: () => System.import('./fooComponent')
 *   });
 * ```
 *
 * See [[StateDeclaration.lazyLoad]]
 */
var lazyLoadHook = function (transition) {
    var router = transition.router;
    function retryTransition() {
        if (transition.originalTransition().options().source !== 'url') {
            // The original transition was not triggered via url sync
            // The lazy state should be loaded now, so re-try the original transition
            var orig = transition.targetState();
            return router.stateService.target(orig.identifier(), orig.params(), orig.options());
        }
        // The original transition was triggered via url sync
        // Run the URL rules and find the best match
        var $url = router.urlService;
        var result = $url.match($url.parts());
        var rule = result && result.rule;
        // If the best match is a state, redirect the transition (instead
        // of calling sync() which supersedes the current transition)
        if (rule && rule.type === 'STATE') {
            var state = rule.state;
            var params = result.match;
            return router.stateService.target(state, params, transition.options());
        }
        // No matching state found, so let .sync() choose the best non-state match/otherwise
        router.urlService.sync();
    }
    var promises = transition
        .entering()
        .filter(function (state) { return !!state.$$state().lazyLoad; })
        .map(function (state) { return lazyLoadState(transition, state); });
    return _common_coreservices__WEBPACK_IMPORTED_MODULE_0__["services"].$q.all(promises).then(retryTransition);
};
var registerLazyLoadHook = function (transitionService) {
    return transitionService.onBefore({ entering: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);
};
/**
 * Invokes a state's lazy load function
 *
 * @param transition a Transition context
 * @param state the state to lazy load
 * @returns A promise for the lazy load result
 */
function lazyLoadState(transition, state) {
    var lazyLoadFn = state.$$state().lazyLoad;
    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked
    var promise = lazyLoadFn['_promise'];
    if (!promise) {
        var success = function (result) {
            delete state.lazyLoad;
            delete state.$$state().lazyLoad;
            delete lazyLoadFn['_promise'];
            return result;
        };
        var error = function (err) {
            delete lazyLoadFn['_promise'];
            return _common_coreservices__WEBPACK_IMPORTED_MODULE_0__["services"].$q.reject(err);
        };
        promise = lazyLoadFn['_promise'] = _common_coreservices__WEBPACK_IMPORTED_MODULE_0__["services"].$q
            .when(lazyLoadFn(transition, state))
            .then(updateStateRegistry)
            .then(success, error);
    }
    /** Register any lazy loaded state definitions */
    function updateStateRegistry(result) {
        if (result && Array.isArray(result.states)) {
            result.states.forEach(function (_state) { return transition.router.stateRegistry.register(_state); });
        }
        return result;
    }
    return promise;
}
//# sourceMappingURL=lazyLoad.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/onEnterExitRetain.js":
/*!*************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/onEnterExitRetain.js ***!
  \*************************************************************************************************************/
/*! exports provided: registerOnExitHook, registerOnRetainHook, registerOnEnterHook */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerOnExitHook", function() { return registerOnExitHook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerOnRetainHook", function() { return registerOnRetainHook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerOnEnterHook", function() { return registerOnEnterHook; });
/**
 * A factory which creates an onEnter, onExit or onRetain transition hook function
 *
 * The returned function invokes the (for instance) state.onEnter hook when the
 * state is being entered.
 *
 * @hidden
 */
function makeEnterExitRetainHook(hookName) {
    return function (transition, state) {
        var _state = state.$$state();
        var hookFn = _state[hookName];
        return hookFn(transition, state);
    };
}
/**
 * The [[TransitionStateHookFn]] for onExit
 *
 * When the state is being exited, the state's .onExit function is invoked.
 *
 * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`
 *
 * See: [[IHookRegistry.onExit]]
 */
var onExitHook = makeEnterExitRetainHook('onExit');
var registerOnExitHook = function (transitionService) {
    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);
};
/**
 * The [[TransitionStateHookFn]] for onRetain
 *
 * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.
 *
 * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`
 *
 * See: [[IHookRegistry.onRetain]]
 */
var onRetainHook = makeEnterExitRetainHook('onRetain');
var registerOnRetainHook = function (transitionService) {
    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);
};
/**
 * The [[TransitionStateHookFn]] for onEnter
 *
 * When the state is being entered, the state's .onEnter function is invoked.
 *
 * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`
 *
 * See: [[IHookRegistry.onEnter]]
 */
var onEnterHook = makeEnterExitRetainHook('onEnter');
var registerOnEnterHook = function (transitionService) {
    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);
};
//# sourceMappingURL=onEnterExitRetain.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/redirectTo.js":
/*!******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/redirectTo.js ***!
  \******************************************************************************************************/
/*! exports provided: registerRedirectToHook */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerRedirectToHook", function() { return registerRedirectToHook; });
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _state_targetState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../state/targetState */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js");
/** @internalapi @module hooks */ /** */



/**
 * A [[TransitionHookFn]] that redirects to a different state or params
 *
 * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`
 *
 * See [[StateDeclaration.redirectTo]]
 */
var redirectToHook = function (trans) {
    var redirect = trans.to().redirectTo;
    if (!redirect)
        return;
    var $state = trans.router.stateService;
    function handleResult(result) {
        if (!result)
            return;
        if (result instanceof _state_targetState__WEBPACK_IMPORTED_MODULE_2__["TargetState"])
            return result;
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isString"])(result))
            return $state.target(result, trans.params(), trans.options());
        if (result['state'] || result['params'])
            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());
    }
    if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(redirect)) {
        return _common_coreservices__WEBPACK_IMPORTED_MODULE_1__["services"].$q.when(redirect(trans)).then(handleResult);
    }
    return handleResult(redirect);
};
var registerRedirectToHook = function (transitionService) {
    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);
};
//# sourceMappingURL=redirectTo.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/resolve.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/resolve.js ***!
  \***************************************************************************************************/
/*! exports provided: RESOLVE_HOOK_PRIORITY, registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESOLVE_HOOK_PRIORITY", function() { return RESOLVE_HOOK_PRIORITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerEagerResolvePath", function() { return registerEagerResolvePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerLazyResolveState", function() { return registerLazyResolveState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerResolveRemaining", function() { return registerResolveRemaining; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resolve/resolveContext */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolveContext.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/** @internalapi @module hooks */ /** */



var RESOLVE_HOOK_PRIORITY = 1000;
/**
 * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path
 *
 * Registered using `transitionService.onStart({}, eagerResolvePath, { priority: 1000 });`
 *
 * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.
 *
 * See [[StateDeclaration.resolve]]
 */
var eagerResolvePath = function (trans) {
    return new _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_1__["ResolveContext"](trans.treeChanges().to).resolvePath('EAGER', trans).then(_common_common__WEBPACK_IMPORTED_MODULE_0__["noop"]);
};
var registerEagerResolvePath = function (transitionService) {
    return transitionService.onStart({}, eagerResolvePath, { priority: RESOLVE_HOOK_PRIORITY });
};
/**
 * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path
 *
 * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState, { priority: 1000 });`
 *
 * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.
 *
 * See [[StateDeclaration.resolve]]
 */
var lazyResolveState = function (trans, state) {
    return new _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_1__["ResolveContext"](trans.treeChanges().to)
        .subContext(state.$$state())
        .resolvePath('LAZY', trans)
        .then(_common_common__WEBPACK_IMPORTED_MODULE_0__["noop"]);
};
var registerLazyResolveState = function (transitionService) {
    return transitionService.onEnter({ entering: Object(_common_hof__WEBPACK_IMPORTED_MODULE_2__["val"])(true) }, lazyResolveState, { priority: RESOLVE_HOOK_PRIORITY });
};
/**
 * A [[TransitionHookFn]] which resolves any dynamically added (LAZY or EAGER) Resolvables.
 *
 * Registered using `transitionService.onFinish({}, eagerResolvePath, { priority: 1000 });`
 *
 * After all entering states have been entered, this hook resolves any remaining Resolvables.
 * These are typically dynamic resolves which were added by some Transition Hook using [[Transition.addResolvable]].
 *
 * See [[StateDeclaration.resolve]]
 */
var resolveRemaining = function (trans) {
    return new _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_1__["ResolveContext"](trans.treeChanges().to).resolvePath('LAZY', trans).then(_common_common__WEBPACK_IMPORTED_MODULE_0__["noop"]);
};
var registerResolveRemaining = function (transitionService) {
    return transitionService.onFinish({}, resolveRemaining, { priority: RESOLVE_HOOK_PRIORITY });
};
//# sourceMappingURL=resolve.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/updateGlobals.js":
/*!*********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/updateGlobals.js ***!
  \*********************************************************************************************************/
/*! exports provided: registerUpdateGlobalState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerUpdateGlobalState", function() { return registerUpdateGlobalState; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");

/**
 * A [[TransitionHookFn]] which updates global UI-Router state
 *
 * Registered using `transitionService.onBefore({}, updateGlobalState);`
 *
 * Before a [[Transition]] starts, updates the global value of "the current transition" ([[Globals.transition]]).
 * After a successful [[Transition]], updates the global values of "the current state"
 * ([[Globals.current]] and [[Globals.$current]]) and "the current param values" ([[Globals.params]]).
 *
 * See also the deprecated properties:
 * [[StateService.transition]], [[StateService.current]], [[StateService.params]]
 */
var updateGlobalState = function (trans) {
    var globals = trans.router.globals;
    var transitionSuccessful = function () {
        globals.successfulTransitions.enqueue(trans);
        globals.$current = trans.$to();
        globals.current = globals.$current.self;
        Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["copy"])(trans.params(), globals.params);
    };
    var clearCurrentTransition = function () {
        // Do not clear globals.transition if a different transition has started in the meantime
        if (globals.transition === trans)
            globals.transition = null;
    };
    trans.onSuccess({}, transitionSuccessful, { priority: 10000 });
    trans.promise.then(clearCurrentTransition, clearCurrentTransition);
};
var registerUpdateGlobalState = function (transitionService) {
    return transitionService.onCreate({}, updateGlobalState);
};
//# sourceMappingURL=updateGlobals.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/url.js":
/*!***********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/url.js ***!
  \***********************************************************************************************/
/*! exports provided: registerUpdateUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerUpdateUrl", function() { return registerUpdateUrl; });
/**
 * A [[TransitionHookFn]] which updates the URL after a successful transition
 *
 * Registered using `transitionService.onSuccess({}, updateUrl);`
 */
var updateUrl = function (transition) {
    var options = transition.options();
    var $state = transition.router.stateService;
    var $urlRouter = transition.router.urlRouter;
    // Dont update the url in these situations:
    // The transition was triggered by a URL sync (options.source === 'url')
    // The user doesn't want the url to update (options.location === false)
    // The destination state, and all parents have no navigable url
    if (options.source !== 'url' && options.location && $state.$current.navigable) {
        var urlOptions = { replace: options.location === 'replace' };
        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);
    }
    $urlRouter.update(true);
};
var registerUpdateUrl = function (transitionService) {
    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });
};
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/views.js":
/*!*************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/views.js ***!
  \*************************************************************************************************/
/*! exports provided: registerLoadEnteringViews, registerActivateViews */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerLoadEnteringViews", function() { return registerLoadEnteringViews; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerActivateViews", function() { return registerActivateViews; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/** @internalapi @module hooks */ /** */


/**
 * A [[TransitionHookFn]] which waits for the views to load
 *
 * Registered using `transitionService.onStart({}, loadEnteringViews);`
 *
 * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.
 * In angular 1, this includes loading the templates.
 */
var loadEnteringViews = function (transition) {
    var $q = _common_coreservices__WEBPACK_IMPORTED_MODULE_1__["services"].$q;
    var enteringViews = transition.views('entering');
    if (!enteringViews.length)
        return;
    return $q.all(enteringViews.map(function (view) { return $q.when(view.load()); })).then(_common_common__WEBPACK_IMPORTED_MODULE_0__["noop"]);
};
var registerLoadEnteringViews = function (transitionService) {
    return transitionService.onFinish({}, loadEnteringViews);
};
/**
 * A [[TransitionHookFn]] which activates the new views when a transition is successful.
 *
 * Registered using `transitionService.onSuccess({}, activateViews);`
 *
 * After a transition is complete, this hook deactivates the old views from the previous state,
 * and activates the new views from the destination state.
 *
 * See [[ViewService]]
 */
var activateViews = function (transition) {
    var enteringViews = transition.views('entering');
    var exitingViews = transition.views('exiting');
    if (!enteringViews.length && !exitingViews.length)
        return;
    var $view = transition.router.viewService;
    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });
    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });
    $view.sync();
};
var registerActivateViews = function (transitionService) {
    return transitionService.onSuccess({}, activateViews);
};
//# sourceMappingURL=views.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js":
/*!*******************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js ***!
  \*******************************************************************************************/
/*! exports provided: UrlRules, UrlConfig, UIRouterGlobals, UIRouter, UIRouterPluginBase, root, fromJson, toJson, forEach, extend, equals, identity, noop, createProxyFunctions, inherit, inArray, _inArray, removeFrom, _removeFrom, pushTo, _pushTo, deregAll, defaults, mergeR, ancestors, pick, omit, pluck, filter, find, mapObj, map, values, allTrueR, anyTrueR, unnestR, flattenR, pushR, uniqR, unnest, flatten, assertPredicate, assertMap, assertFn, pairs, arrayTuples, applyPairs, tail, copy, _extend, silenceUncaughtInPromise, silentRejection, makeStub, services, Glob, curry, compose, pipe, prop, propEq, parse, not, and, or, all, any, is, eq, val, invoke, pattern, isUndefined, isDefined, isNull, isNullOrUndefined, isFunction, isNumber, isString, isObject, isArray, isDate, isRegExp, isInjectable, isPromise, Queue, maxLength, padString, kebobString, functionToString, fnToString, stringify, beforeAfterSubstr, hostRegex, stripLastPathElement, splitHash, splitQuery, splitEqual, trimHashVal, splitOnDelim, joinNeighborsR, Category, Trace, trace, DefType, Param, ParamTypes, StateParams, ParamType, PathNode, PathUtils, resolvePolicies, defaultResolvePolicy, Resolvable, NATIVE_INJECTOR_TOKEN, ResolveContext, resolvablesBuilder, StateBuilder, StateObject, StateMatcher, StateQueueManager, StateRegistry, StateService, TargetState, TransitionHookPhase, TransitionHookScope, HookBuilder, matchState, RegisteredHook, makeEvent, RejectType, Rejection, Transition, TransitionHook, TransitionEventType, defaultTransOpts, TransitionService, UrlMatcher, ParamFactory, UrlMatcherFactory, UrlRouter, UrlRuleFactory, BaseUrlRule, UrlService, ViewService, $q, $injector, BaseLocationServices, HashLocationService, MemoryLocationService, PushStateLocationService, MemoryLocationConfig, BrowserLocationConfig, keyValsToObjectR, getParams, parseUrl, buildUrl, locationPluginFactory, servicesPlugin, hashLocationPlugin, pushStateLocationPlugin, memoryLocationPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "root", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["root"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromJson", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["fromJson"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toJson", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["toJson"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["forEach"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["equals"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["identity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["noop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createProxyFunctions", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["createProxyFunctions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inherit", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["inherit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inArray", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["inArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_inArray", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["_inArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeFrom", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["removeFrom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_removeFrom", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["_removeFrom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushTo", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["pushTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_pushTo", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["_pushTo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deregAll", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["deregAll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaults", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["defaults"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["mergeR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ancestors", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["ancestors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pick", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["pick"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "omit", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["omit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pluck", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["pluck"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["filter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "find", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["find"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mapObj", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["mapObj"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "map", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["map"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "values", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["values"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "allTrueR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["allTrueR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "anyTrueR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["anyTrueR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unnestR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["unnestR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flattenR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["flattenR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["pushR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "uniqR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["uniqR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unnest", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["unnest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["flatten"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertPredicate", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["assertPredicate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertMap", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["assertMap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertFn", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["assertFn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["pairs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrayTuples", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["arrayTuples"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyPairs", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["applyPairs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tail", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["tail"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["copy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_extend", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["_extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "silenceUncaughtInPromise", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["silenceUncaughtInPromise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "silentRejection", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["silentRejection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeStub", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["makeStub"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "services", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["services"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Glob", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["Glob"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "curry", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["curry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["compose"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["pipe"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["prop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propEq", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["propEq"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["parse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "not", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["not"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "and", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["and"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "or", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["or"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "all", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["all"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "any", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["any"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "is", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["is"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["eq"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "val", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["val"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "invoke", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["invoke"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pattern", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["pattern"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isUndefined", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isUndefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDefined", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isDefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNull", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isNull"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNullOrUndefined", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isNullOrUndefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDate", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isDate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isRegExp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isInjectable", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isInjectable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["isPromise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["Queue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "maxLength", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["maxLength"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "padString", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["padString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "kebobString", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["kebobString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "functionToString", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["functionToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fnToString", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["fnToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["stringify"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeAfterSubstr", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["beforeAfterSubstr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hostRegex", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["hostRegex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripLastPathElement", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["stripLastPathElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitHash", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["splitHash"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitQuery", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["splitQuery"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitEqual", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["splitEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trimHashVal", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["trimHashVal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "splitOnDelim", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["splitOnDelim"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "joinNeighborsR", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["joinNeighborsR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Category", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["Category"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Trace", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["Trace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return _common_index__WEBPACK_IMPORTED_MODULE_0__["trace"]; });

/* harmony import */ var _params_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./params/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefType", function() { return _params_index__WEBPACK_IMPORTED_MODULE_1__["DefType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Param", function() { return _params_index__WEBPACK_IMPORTED_MODULE_1__["Param"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamTypes", function() { return _params_index__WEBPACK_IMPORTED_MODULE_1__["ParamTypes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateParams", function() { return _params_index__WEBPACK_IMPORTED_MODULE_1__["StateParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamType", function() { return _params_index__WEBPACK_IMPORTED_MODULE_1__["ParamType"]; });

/* harmony import */ var _path_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PathNode", function() { return _path_index__WEBPACK_IMPORTED_MODULE_2__["PathNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PathUtils", function() { return _path_index__WEBPACK_IMPORTED_MODULE_2__["PathUtils"]; });

/* harmony import */ var _resolve_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolve/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolvePolicies", function() { return _resolve_index__WEBPACK_IMPORTED_MODULE_3__["resolvePolicies"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultResolvePolicy", function() { return _resolve_index__WEBPACK_IMPORTED_MODULE_3__["defaultResolvePolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Resolvable", function() { return _resolve_index__WEBPACK_IMPORTED_MODULE_3__["Resolvable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NATIVE_INJECTOR_TOKEN", function() { return _resolve_index__WEBPACK_IMPORTED_MODULE_3__["NATIVE_INJECTOR_TOKEN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResolveContext", function() { return _resolve_index__WEBPACK_IMPORTED_MODULE_3__["ResolveContext"]; });

/* harmony import */ var _state_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolvablesBuilder", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["resolvablesBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateBuilder", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["StateBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateObject", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["StateObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateMatcher", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["StateMatcher"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateQueueManager", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["StateQueueManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateRegistry", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["StateRegistry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateService", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["StateService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TargetState", function() { return _state_index__WEBPACK_IMPORTED_MODULE_4__["TargetState"]; });

/* harmony import */ var _transition_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transition/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHookPhase", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["TransitionHookPhase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHookScope", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["TransitionHookScope"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HookBuilder", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["HookBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matchState", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["matchState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RegisteredHook", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["RegisteredHook"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeEvent", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["makeEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RejectType", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["RejectType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rejection", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["Rejection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transition", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["Transition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHook", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["TransitionHook"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionEventType", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["TransitionEventType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultTransOpts", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["defaultTransOpts"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionService", function() { return _transition_index__WEBPACK_IMPORTED_MODULE_5__["TransitionService"]; });

/* harmony import */ var _url_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRules", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["UrlRules"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlConfig", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["UrlConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlMatcher", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["UrlMatcher"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamFactory", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["ParamFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlMatcherFactory", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["UrlMatcherFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRouter", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["UrlRouter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRuleFactory", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["UrlRuleFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseUrlRule", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["BaseUrlRule"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlService", function() { return _url_index__WEBPACK_IMPORTED_MODULE_6__["UrlService"]; });

/* harmony import */ var _view_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./view/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/view/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewService", function() { return _view_index__WEBPACK_IMPORTED_MODULE_7__["ViewService"]; });

/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./globals */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/globals.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterGlobals", function() { return _globals__WEBPACK_IMPORTED_MODULE_8__["UIRouterGlobals"]; });

/* harmony import */ var _router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./router */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/router.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouter", function() { return _router__WEBPACK_IMPORTED_MODULE_9__["UIRouter"]; });

/* harmony import */ var _vanilla__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./vanilla */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$q", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["$q"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$injector", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["$injector"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseLocationServices", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["BaseLocationServices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HashLocationService", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["HashLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationService", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["MemoryLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PushStateLocationService", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["PushStateLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationConfig", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["MemoryLocationConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserLocationConfig", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["BrowserLocationConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keyValsToObjectR", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["keyValsToObjectR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["getParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["parseUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildUrl", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["buildUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "locationPluginFactory", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["locationPluginFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "servicesPlugin", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["servicesPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hashLocationPlugin", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["hashLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushStateLocationPlugin", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["pushStateLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoryLocationPlugin", function() { return _vanilla__WEBPACK_IMPORTED_MODULE_10__["memoryLocationPlugin"]; });

/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/interface.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UIRouterPluginBase", function() { return _interface__WEBPACK_IMPORTED_MODULE_11__["UIRouterPluginBase"]; });

/** @publicapi @module common */ /** */












//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/interface.js":
/*!***********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/interface.js ***!
  \***********************************************************************************************/
/*! exports provided: UIRouterPluginBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouterPluginBase", function() { return UIRouterPluginBase; });
/**
 * # Core classes and interfaces
 *
 * The classes and interfaces that are core to ui-router and do not belong
 * to a more specific subsystem (such as resolve).
 *
 * @preferred @publicapi @module core
 */ /** */
/** @internalapi */
var UIRouterPluginBase = /** @class */ (function () {
    function UIRouterPluginBase() {
    }
    UIRouterPluginBase.prototype.dispose = function (router) { };
    return UIRouterPluginBase;
}());

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/index.js":
/*!**************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/index.js ***!
  \**************************************************************************************************/
/*! exports provided: DefType, Param, ParamTypes, StateParams, ParamType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _param__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./param */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefType", function() { return _param__WEBPACK_IMPORTED_MODULE_0__["DefType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Param", function() { return _param__WEBPACK_IMPORTED_MODULE_0__["Param"]; });

/* harmony import */ var _paramTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./paramTypes */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramTypes.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamTypes", function() { return _paramTypes__WEBPACK_IMPORTED_MODULE_1__["ParamTypes"]; });

/* harmony import */ var _stateParams__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stateParams */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/stateParams.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateParams", function() { return _stateParams__WEBPACK_IMPORTED_MODULE_2__["StateParams"]; });

/* harmony import */ var _paramType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./paramType */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramType.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamType", function() { return _paramType__WEBPACK_IMPORTED_MODULE_3__["ParamType"]; });





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js":
/*!**************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js ***!
  \**************************************************************************************************/
/*! exports provided: DefType, Param */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefType", function() { return DefType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Param", function() { return Param; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _paramType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paramType */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramType.js");
/** @publicapi @module params */ /** */





/** @hidden */
var hasOwn = Object.prototype.hasOwnProperty;
/** @hidden */
var isShorthand = function (cfg) {
    return ['value', 'type', 'squash', 'array', 'dynamic'].filter(hasOwn.bind(cfg || {})).length === 0;
};
/** @internalapi */
var DefType;
(function (DefType) {
    DefType[DefType["PATH"] = 0] = "PATH";
    DefType[DefType["SEARCH"] = 1] = "SEARCH";
    DefType[DefType["CONFIG"] = 2] = "CONFIG";
})(DefType || (DefType = {}));

/** @internalapi */
function getParamDeclaration(paramName, location, state) {
    var noReloadOnSearch = (state.reloadOnSearch === false && location === DefType.SEARCH) || undefined;
    var dynamic = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])([state.dynamic, noReloadOnSearch], _common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"]);
    var defaultConfig = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(dynamic) ? { dynamic: dynamic } : {};
    var paramConfig = unwrapShorthand(state && state.params && state.params[paramName]);
    return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(defaultConfig, paramConfig);
}
/** @hidden */
function unwrapShorthand(cfg) {
    cfg = isShorthand(cfg) ? { value: cfg } : cfg;
    getStaticDefaultValue['__cacheable'] = true;
    function getStaticDefaultValue() {
        return cfg.value;
    }
    var $$fn = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isInjectable"])(cfg.value) ? cfg.value : getStaticDefaultValue;
    return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(cfg, { $$fn: $$fn });
}
/** @hidden */
function getType(cfg, urlType, location, id, paramTypes) {
    if (cfg.type && urlType && urlType.name !== 'string')
        throw new Error("Param '" + id + "' has two type configurations.");
    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))
        return paramTypes.type(cfg.type);
    if (urlType)
        return urlType;
    if (!cfg.type) {
        var type = location === DefType.CONFIG
            ? 'any'
            : location === DefType.PATH
                ? 'path'
                : location === DefType.SEARCH
                    ? 'query'
                    : 'string';
        return paramTypes.type(type);
    }
    return cfg.type instanceof _paramType__WEBPACK_IMPORTED_MODULE_4__["ParamType"] ? cfg.type : paramTypes.type(cfg.type);
}
/**
 * @internalapi
 * returns false, true, or the squash value to indicate the "default parameter url squash policy".
 */
function getSquashPolicy(config, isOptional, defaultPolicy) {
    var squash = config.squash;
    if (!isOptional || squash === false)
        return false;
    if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(squash) || squash == null)
        return defaultPolicy;
    if (squash === true || Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(squash))
        return squash;
    throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
}
/** @internalapi */
function getReplace(config, arrayMode, isOptional, squash) {
    var defaultPolicy = [
        { from: '', to: isOptional || arrayMode ? undefined : '' },
        { from: null, to: isOptional || arrayMode ? undefined : '' },
    ];
    var replace = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isArray"])(config.replace) ? config.replace : [];
    if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(squash))
        replace.push({ from: squash, to: undefined });
    var configuredKeys = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["map"])(replace, Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])('from'));
    return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["filter"])(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);
}
/** @internalapi */
var Param = /** @class */ (function () {
    function Param(id, type, location, urlConfig, state) {
        var config = getParamDeclaration(id, location, state);
        type = getType(config, type, location, id, urlConfig.paramTypes);
        var arrayMode = getArrayMode();
        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;
        var isOptional = config.value !== undefined || location === DefType.SEARCH;
        var dynamic = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(config.dynamic) ? !!config.dynamic : !!type.dynamic;
        var raw = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(config.raw) ? !!config.raw : !!type.raw;
        var squash = getSquashPolicy(config, isOptional, urlConfig.defaultSquashPolicy());
        var replace = getReplace(config, arrayMode, isOptional, squash);
        var inherit = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(config.inherit) ? !!config.inherit : !!type.inherit;
        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
        function getArrayMode() {
            var arrayDefaults = { array: location === DefType.SEARCH ? 'auto' : false };
            var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
            return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(arrayDefaults, arrayParamNomenclature, config).array;
        }
        Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this, { id: id, type: type, location: location, isOptional: isOptional, dynamic: dynamic, raw: raw, squash: squash, replace: replace, inherit: inherit, array: arrayMode, config: config });
    }
    Param.values = function (params, values) {
        if (values === void 0) { values = {}; }
        var paramValues = {};
        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
            var param = params_1[_i];
            paramValues[param.id] = param.value(values[param.id]);
        }
        return paramValues;
    };
    /**
     * Finds [[Param]] objects which have different param values
     *
     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects
     *
     * @param params: The list of Param objects to filter
     * @param values1: The first set of parameter values
     * @param values2: the second set of parameter values
     *
     * @returns any Param objects whose values were different between values1 and values2
     */
    Param.changed = function (params, values1, values2) {
        if (values1 === void 0) { values1 = {}; }
        if (values2 === void 0) { values2 = {}; }
        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });
    };
    /**
     * Checks if two param value objects are equal (for a set of [[Param]] objects)
     *
     * @param params The list of [[Param]] objects to check
     * @param values1 The first set of param values
     * @param values2 The second set of param values
     *
     * @returns true if the param values in values1 and values2 are equal
     */
    Param.equals = function (params, values1, values2) {
        if (values1 === void 0) { values1 = {}; }
        if (values2 === void 0) { values2 = {}; }
        return Param.changed(params, values1, values2).length === 0;
    };
    /** Returns true if a the parameter values are valid, according to the Param definitions */
    Param.validates = function (params, values) {
        if (values === void 0) { values = {}; }
        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["allTrueR"], true);
    };
    Param.prototype.isDefaultValue = function (value) {
        return this.isOptional && this.type.equals(this.value(), value);
    };
    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    Param.prototype.value = function (value) {
        var _this = this;
        /**
         * [Internal] Get the default value of a parameter, which may be an injectable function.
         */
        var getDefaultValue = function () {
            if (_this._defaultValueCache)
                return _this._defaultValueCache.defaultValue;
            if (!_common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$injector)
                throw new Error('Injectable functions cannot be called at configuration time');
            var defaultValue = _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$injector.invoke(_this.config.$$fn);
            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))
                throw new Error("Default value (" + defaultValue + ") for parameter '" + _this.id + "' is not an instance of ParamType (" + _this.type.name + ")");
            if (_this.config.$$fn['__cacheable']) {
                _this._defaultValueCache = { defaultValue: defaultValue };
            }
            return defaultValue;
        };
        var replaceSpecialValues = function (val) {
            for (var _i = 0, _a = _this.replace; _i < _a.length; _i++) {
                var tuple = _a[_i];
                if (tuple.from === val)
                    return tuple.to;
            }
            return val;
        };
        value = replaceSpecialValues(value);
        return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(value) ? getDefaultValue() : this.type.$normalize(value);
    };
    Param.prototype.isSearch = function () {
        return this.location === DefType.SEARCH;
    };
    Param.prototype.validates = function (value) {
        // There was no parameter value, but the param is optional
        if ((Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(value) || value === null) && this.isOptional)
            return true;
        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType
        var normalized = this.type.$normalize(value);
        if (!this.type.is(normalized))
            return false;
        // The value was of the correct type, but when encoded, did not match the ParamType's regexp
        var encoded = this.type.encode(normalized);
        return !(Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(encoded) && !this.type.pattern.exec(encoded));
    };
    Param.prototype.toString = function () {
        return "{Param:" + this.id + " " + this.type + " squash: '" + this.squash + "' optional: " + this.isOptional + "}";
    };
    return Param;
}());

//# sourceMappingURL=param.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramType.js":
/*!******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramType.js ***!
  \******************************************************************************************************/
/*! exports provided: ParamType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamType", function() { return ParamType; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/** @publicapi @module params */ /** */


/**
 * An internal class which implements [[ParamTypeDefinition]].
 *
 * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.
 * When a param type definition is registered, an instance of this class is created internally.
 *
 * This class has naive implementations for all the [[ParamTypeDefinition]] methods.
 *
 * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.
 *
 * #### Example:
 * ```js
 * var paramTypeDef = {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 *
 * var paramType = new ParamType(paramTypeDef);
 * ```
 * @internalapi
 */
var ParamType = /** @class */ (function () {
    /**
     * @param def  A configuration object which contains the custom type definition.  The object's
     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.
     * @returns a new ParamType object
     */
    function ParamType(def) {
        /** @inheritdoc */
        this.pattern = /.*/;
        /** @inheritdoc */
        this.inherit = true;
        Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this, def);
    }
    // consider these four methods to be "abstract methods" that should be overridden
    /** @inheritdoc */
    ParamType.prototype.is = function (val, key) {
        return true;
    };
    /** @inheritdoc */
    ParamType.prototype.encode = function (val, key) {
        return val;
    };
    /** @inheritdoc */
    ParamType.prototype.decode = function (val, key) {
        return val;
    };
    /** @inheritdoc */
    ParamType.prototype.equals = function (a, b) {
        // tslint:disable-next-line:triple-equals
        return a == b;
    };
    ParamType.prototype.$subPattern = function () {
        var sub = this.pattern.toString();
        return sub.substr(1, sub.length - 2);
    };
    ParamType.prototype.toString = function () {
        return "{ParamType:" + this.name + "}";
    };
    /** Given an encoded string, or a decoded object, returns a decoded object */
    ParamType.prototype.$normalize = function (val) {
        return this.is(val) ? val : this.decode(val);
    };
    /**
     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.
     * e.g.:
     * - urlmatcher pattern "/path?{queryParam[]:int}"
     * - url: "/path?queryParam=1&queryParam=2
     * - $stateParams.queryParam will be [1, 2]
     * if `mode` is "auto", then
     * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
     * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
     */
    ParamType.prototype.$asArray = function (mode, isSearch) {
        if (!mode)
            return this;
        if (mode === 'auto' && !isSearch)
            throw new Error("'auto' array mode is for query parameters only");
        return new ArrayType(this, mode);
    };
    return ParamType;
}());

/**
 * Wraps up a `ParamType` object to handle array values.
 * @internalapi
 */
function ArrayType(type, mode) {
    var _this = this;
    // Wrap non-array value as array
    function arrayWrap(val) {
        return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isArray"])(val) ? val : Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(val) ? [val] : [];
    }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
        switch (val.length) {
            case 0:
                return undefined;
            case 1:
                return mode === 'auto' ? val[0] : val;
            default:
                return val;
        }
    }
    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
        return function handleArray(val) {
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isArray"])(val) && val.length === 0)
                return val;
            var arr = arrayWrap(val);
            var result = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["map"])(arr, callback);
            return allTruthyMode === true ? Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["filter"])(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);
        };
    }
    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
        return function handleArray(val1, val2) {
            var left = arrayWrap(val1), right = arrayWrap(val2);
            if (left.length !== right.length)
                return false;
            for (var i = 0; i < left.length; i++) {
                if (!callback(left[i], right[i]))
                    return false;
            }
            return true;
        };
    }
    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {
        var paramTypeFn = type[name].bind(type);
        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;
        _this[name] = wrapperFn(paramTypeFn);
    });
    Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this, {
        dynamic: type.dynamic,
        name: type.name,
        pattern: type.pattern,
        inherit: type.inherit,
        raw: type.raw,
        is: arrayHandler(type.is.bind(type), true),
        $arrayMode: mode,
    });
}
//# sourceMappingURL=paramType.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramTypes.js":
/*!*******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramTypes.js ***!
  \*******************************************************************************************************/
/*! exports provided: ParamTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamTypes", function() { return ParamTypes; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _paramType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paramType */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramType.js");
/** @publicapi @module params */ /** */





/**
 * A registry for parameter types.
 *
 * This registry manages the built-in (and custom) parameter types.
 *
 * The built-in parameter types are:
 *
 * - [[string]]
 * - [[path]]
 * - [[query]]
 * - [[hash]]
 * - [[int]]
 * - [[bool]]
 * - [[date]]
 * - [[json]]
 * - [[any]]
 *
 * To register custom parameter types, use [[UrlConfig.type]], i.e.,
 *
 * ```js
 * router.urlService.config.type(customType)
 * ```
 */
var ParamTypes = /** @class */ (function () {
    /** @internalapi */
    function ParamTypes() {
        /** @hidden */
        this.enqueue = true;
        /** @hidden */
        this.typeQueue = [];
        /** @internalapi */
        this.defaultTypes = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["pick"])(ParamTypes.prototype, [
            'hash',
            'string',
            'query',
            'path',
            'int',
            'bool',
            'date',
            'json',
            'any',
        ]);
        // Register default types. Store them in the prototype of this.types.
        var makeType = function (definition, name) { return new _paramType__WEBPACK_IMPORTED_MODULE_4__["ParamType"](Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({ name: name }, definition)); };
        this.types = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inherit"])(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["map"])(this.defaultTypes, makeType), {});
    }
    /** @internalapi */
    ParamTypes.prototype.dispose = function () {
        this.types = {};
    };
    /**
     * Registers a parameter type
     *
     * End users should call [[UrlMatcherFactory.type]], which delegates to this method.
     */
    ParamTypes.prototype.type = function (name, definition, definitionFn) {
        if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(definition))
            return this.types[name];
        if (this.types.hasOwnProperty(name))
            throw new Error("A type named '" + name + "' has already been defined.");
        this.types[name] = new _paramType__WEBPACK_IMPORTED_MODULE_4__["ParamType"](Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({ name: name }, definition));
        if (definitionFn) {
            this.typeQueue.push({ name: name, def: definitionFn });
            if (!this.enqueue)
                this._flushTypeQueue();
        }
        return this;
    };
    /** @internalapi */
    ParamTypes.prototype._flushTypeQueue = function () {
        while (this.typeQueue.length) {
            var type = this.typeQueue.shift();
            if (type.pattern)
                throw new Error("You cannot override a type's .pattern at runtime.");
            Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this.types[type.name], _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$injector.invoke(type.def));
        }
    };
    return ParamTypes;
}());

/** @hidden */
function initDefaultTypes() {
    var makeDefaultType = function (def) {
        var valToString = function (val) { return (val != null ? val.toString() : val); };
        var defaultTypeBase = {
            encode: valToString,
            decode: valToString,
            is: Object(_common_hof__WEBPACK_IMPORTED_MODULE_2__["is"])(String),
            pattern: /.*/,
            // tslint:disable-next-line:triple-equals
            equals: function (a, b) { return a == b; },
        };
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, defaultTypeBase, def);
    };
    // Default Parameter Type Definitions
    Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(ParamTypes.prototype, {
        string: makeDefaultType({}),
        path: makeDefaultType({
            pattern: /[^/]*/,
        }),
        query: makeDefaultType({}),
        hash: makeDefaultType({
            inherit: false,
        }),
        int: makeDefaultType({
            decode: function (val) { return parseInt(val, 10); },
            is: function (val) {
                return !Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isNullOrUndefined"])(val) && this.decode(val.toString()) === val;
            },
            pattern: /-?\d+/,
        }),
        bool: makeDefaultType({
            encode: function (val) { return (val && 1) || 0; },
            decode: function (val) { return parseInt(val, 10) !== 0; },
            is: Object(_common_hof__WEBPACK_IMPORTED_MODULE_2__["is"])(Boolean),
            pattern: /0|1/,
        }),
        date: makeDefaultType({
            encode: function (val) {
                return !this.is(val)
                    ? undefined
                    : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join('-');
            },
            decode: function (val) {
                if (this.is(val))
                    return val;
                var match = this.capture.exec(val);
                return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
            },
            is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },
            equals: function (l, r) {
                return ['getFullYear', 'getMonth', 'getDate'].reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);
            },
            pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
            capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/,
        }),
        json: makeDefaultType({
            encode: _common_common__WEBPACK_IMPORTED_MODULE_0__["toJson"],
            decode: _common_common__WEBPACK_IMPORTED_MODULE_0__["fromJson"],
            is: Object(_common_hof__WEBPACK_IMPORTED_MODULE_2__["is"])(Object),
            equals: _common_common__WEBPACK_IMPORTED_MODULE_0__["equals"],
            pattern: /[^/]*/,
        }),
        // does not encode/decode
        any: makeDefaultType({
            encode: _common_common__WEBPACK_IMPORTED_MODULE_0__["identity"],
            decode: _common_common__WEBPACK_IMPORTED_MODULE_0__["identity"],
            is: function () { return true; },
            equals: _common_common__WEBPACK_IMPORTED_MODULE_0__["equals"],
        }),
    });
}
initDefaultTypes();
//# sourceMappingURL=paramTypes.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/stateParams.js":
/*!********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/stateParams.js ***!
  \********************************************************************************************************/
/*! exports provided: StateParams */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateParams", function() { return StateParams; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/** @publicapi @module params */ /** */

/** @internalapi */
var StateParams = /** @class */ (function () {
    function StateParams(params) {
        if (params === void 0) { params = {}; }
        Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this, params);
    }
    /**
     * Merges a set of parameters with all parameters inherited between the common parents of the
     * current state and a given destination state.
     *
     * @param {Object} newParams The set of parameters which will be composited with inherited params.
     * @param {Object} $current Internal definition of object representing the current state.
     * @param {Object} $to Internal definition of object representing state to transition to.
     */
    StateParams.prototype.$inherit = function (newParams, $current, $to) {
        var parentParams;
        var parents = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["ancestors"])($current, $to), inherited = {}, inheritList = [];
        for (var i in parents) {
            if (!parents[i] || !parents[i].params)
                continue;
            parentParams = Object.keys(parents[i].params);
            if (!parentParams.length)
                continue;
            for (var j in parentParams) {
                if (inheritList.indexOf(parentParams[j]) >= 0)
                    continue;
                inheritList.push(parentParams[j]);
                inherited[parentParams[j]] = this[parentParams[j]];
            }
        }
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, inherited, newParams);
    };
    return StateParams;
}());

//# sourceMappingURL=stateParams.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/index.js":
/*!************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/index.js ***!
  \************************************************************************************************/
/*! exports provided: PathNode, PathUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _pathNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pathNode */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathNode.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PathNode", function() { return _pathNode__WEBPACK_IMPORTED_MODULE_0__["PathNode"]; });

/* harmony import */ var _pathUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pathUtils */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathUtils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PathUtils", function() { return _pathUtils__WEBPACK_IMPORTED_MODULE_1__["PathUtils"]; });

/** @internalapi @module path */ /** */


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathNode.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathNode.js ***!
  \***************************************************************************************************/
/*! exports provided: PathNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathNode", function() { return PathNode; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _params_param__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../params/param */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js");
/** @internalapi @module path */ /** */



/**
 * A node in a [[TreeChanges]] path
 *
 * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.
 * Each PathNode corresponds to a state being entered, exited, or retained.
 * The stateful information includes parameter values and resolve data.
 */
var PathNode = /** @class */ (function () {
    function PathNode(stateOrNode) {
        if (stateOrNode instanceof PathNode) {
            var node = stateOrNode;
            this.state = node.state;
            this.paramSchema = node.paramSchema.slice();
            this.paramValues = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, node.paramValues);
            this.resolvables = node.resolvables.slice();
            this.views = node.views && node.views.slice();
        }
        else {
            var state = stateOrNode;
            this.state = state;
            this.paramSchema = state.parameters({ inherit: false });
            this.paramValues = {};
            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });
        }
    }
    PathNode.prototype.clone = function () {
        return new PathNode(this);
    };
    /** Sets [[paramValues]] for the node, from the values of an object hash */
    PathNode.prototype.applyRawParams = function (params) {
        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };
        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["applyPairs"])(memo, getParamVal(pDef)); }, {});
        return this;
    };
    /** Gets a specific [[Param]] metadata that belongs to the node */
    PathNode.prototype.parameter = function (name) {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(this.paramSchema, Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["propEq"])('id', name));
    };
    /**
     * @returns true if the state and parameter values for another PathNode are
     * equal to the state and param values for this PathNode
     */
    PathNode.prototype.equals = function (node, paramsFn) {
        var diff = this.diff(node, paramsFn);
        return diff && diff.length === 0;
    };
    /**
     * Finds Params with different parameter values on another PathNode.
     *
     * Given another node (of the same state), finds the parameter values which differ.
     * Returns the [[Param]] (schema objects) whose parameter values differ.
     *
     * Given another node for a different state, returns `false`
     *
     * @param node The node to compare to
     * @param paramsFn A function that returns which parameters should be compared.
     * @returns The [[Param]]s which differ, or null if the two nodes are for different states
     */
    PathNode.prototype.diff = function (node, paramsFn) {
        if (this.state !== node.state)
            return false;
        var params = paramsFn ? paramsFn(this) : this.paramSchema;
        return _params_param__WEBPACK_IMPORTED_MODULE_2__["Param"].changed(params, this.paramValues, node.paramValues);
    };
    /**
     * Returns a clone of the PathNode
     * @deprecated use instance method `node.clone()`
     */
    PathNode.clone = function (node) { return node.clone(); };
    return PathNode;
}());

//# sourceMappingURL=pathNode.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathUtils.js":
/*!****************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathUtils.js ***!
  \****************************************************************************************************/
/*! exports provided: PathUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathUtils", function() { return PathUtils; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _state_targetState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../state/targetState */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js");
/* harmony import */ var _pathNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pathNode */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathNode.js");
/** @internalapi @module path */ /** */




/**
 * This class contains functions which convert TargetStates, Nodes and paths from one type to another.
 */
var PathUtils = /** @class */ (function () {
    function PathUtils() {
    }
    /** Given a PathNode[], create an TargetState */
    PathUtils.makeTargetState = function (registry, path) {
        var state = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["tail"])(path).state;
        return new _state_targetState__WEBPACK_IMPORTED_MODULE_2__["TargetState"](registry, state, path.map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])('paramValues')).reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["mergeR"], {}), {});
    };
    PathUtils.buildPath = function (targetState) {
        var toParams = targetState.params();
        return targetState.$state().path.map(function (state) { return new _pathNode__WEBPACK_IMPORTED_MODULE_3__["PathNode"](state).applyRawParams(toParams); });
    };
    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */
    PathUtils.buildToPath = function (fromPath, targetState) {
        var toPath = PathUtils.buildPath(targetState);
        if (targetState.options().inherit) {
            return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));
        }
        return toPath;
    };
    /**
     * Creates ViewConfig objects and adds to nodes.
     *
     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state
     */
    PathUtils.applyViewConfigs = function ($view, path, states) {
        // Only apply the viewConfigs to the nodes for the given states
        path.filter(function (node) { return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inArray"])(states, node.state); }).forEach(function (node) {
            var viewDecls = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["values"])(node.state.views || {});
            var subPath = PathUtils.subPath(path, function (n) { return n === node; });
            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });
            node.views = viewConfigs.reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], []);
        });
    };
    /**
     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath
     *
     * For a parameter in a node to be inherited from the from path:
     * - The toPath's node must have a matching node in the fromPath (by state).
     * - The parameter name must not be found in the toKeys parameter array.
     *
     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some
     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,
     * it is not inherited from the fromPath.
     */
    PathUtils.inheritParams = function (fromPath, toPath, toKeys) {
        if (toKeys === void 0) { toKeys = []; }
        function nodeParamVals(path, state) {
            var node = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(path, Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["propEq"])('state', state));
            return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, node && node.paramValues);
        }
        var noInherit = fromPath
            .map(function (node) { return node.paramSchema; })
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .filter(function (param) { return !param.inherit; })
            .map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])('id'));
        /**
         * Given an [[PathNode]] "toNode", return a new [[PathNode]] with param values inherited from the
         * matching node in fromPath.  Only inherit keys that aren't found in "toKeys" from the node in "fromPath""
         */
        function makeInheritedParamsNode(toNode) {
            // All param values for the node (may include default key/vals, when key was not found in toParams)
            var toParamVals = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, toNode && toNode.paramValues);
            // limited to only those keys found in toParams
            var incomingParamVals = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["pick"])(toParamVals, toKeys);
            toParamVals = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["omit"])(toParamVals, toKeys);
            var fromParamVals = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["omit"])(nodeParamVals(fromPath, toNode.state) || {}, noInherit);
            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals
            var ownParamVals = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(toParamVals, fromParamVals, incomingParamVals);
            return new _pathNode__WEBPACK_IMPORTED_MODULE_3__["PathNode"](toNode.state).applyRawParams(ownParamVals);
        }
        // The param keys specified by the incoming toParams
        return toPath.map(makeInheritedParamsNode);
    };
    /**
     * Computes the tree changes (entering, exiting) between a fromPath and toPath.
     */
    PathUtils.treeChanges = function (fromPath, toPath, reloadState) {
        var max = Math.min(fromPath.length, toPath.length);
        var keep = 0;
        var nodesMatch = function (node1, node2) { return node1.equals(node2, PathUtils.nonDynamicParams); };
        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {
            keep++;
        }
        /** Given a retained node, return a new node which uses the to node's param values */
        function applyToParams(retainedNode, idx) {
            var cloned = retainedNode.clone();
            cloned.paramValues = toPath[idx].paramValues;
            return cloned;
        }
        var from, retained, exiting, entering, to;
        from = fromPath;
        retained = from.slice(0, keep);
        exiting = from.slice(keep);
        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped
        var retainedWithToParams = retained.map(applyToParams);
        entering = toPath.slice(keep);
        to = retainedWithToParams.concat(entering);
        return { from: from, to: to, retained: retained, retainedWithToParams: retainedWithToParams, exiting: exiting, entering: entering };
    };
    /**
     * Returns a new path which is: the subpath of the first path which matches the second path.
     *
     * The new path starts from root and contains any nodes that match the nodes in the second path.
     * It stops before the first non-matching node.
     *
     * Nodes are compared using their state property and their parameter values.
     * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.
     *
     * @param pathA the first path
     * @param pathB the second path
     * @param paramsFn a function which returns the parameters to consider when comparing
     *
     * @returns an array of PathNodes from the first path which match the nodes in the second path
     */
    PathUtils.matching = function (pathA, pathB, paramsFn) {
        var done = false;
        var tuples = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["arrayTuples"])(pathA, pathB);
        return tuples.reduce(function (matching, _a) {
            var nodeA = _a[0], nodeB = _a[1];
            done = done || !nodeA.equals(nodeB, paramsFn);
            return done ? matching : matching.concat(nodeA);
        }, []);
    };
    /**
     * Returns true if two paths are identical.
     *
     * @param pathA
     * @param pathB
     * @param paramsFn a function which returns the parameters to consider when comparing
     * @returns true if the the states and parameter values for both paths are identical
     */
    PathUtils.equals = function (pathA, pathB, paramsFn) {
        return pathA.length === pathB.length && PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;
    };
    /**
     * Return a subpath of a path, which stops at the first matching node
     *
     * Given an array of nodes, returns a subset of the array starting from the first node,
     * stopping when the first node matches the predicate.
     *
     * @param path a path of [[PathNode]]s
     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s
     * @returns a subpath up to the matching node, or undefined if no match is found
     */
    PathUtils.subPath = function (path, predicate) {
        var node = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(path, predicate);
        var elementIdx = path.indexOf(node);
        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);
    };
    PathUtils.nonDynamicParams = function (node) {
        return node.state.parameters({ inherit: false }).filter(function (param) { return !param.dynamic; });
    };
    /** Gets the raw parameter values from a path */
    PathUtils.paramValues = function (path) { return path.reduce(function (acc, node) { return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(acc, node.paramValues); }, {}); };
    return PathUtils;
}());

//# sourceMappingURL=pathUtils.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/index.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/index.js ***!
  \***************************************************************************************************/
/*! exports provided: resolvePolicies, defaultResolvePolicy, Resolvable, NATIVE_INJECTOR_TOKEN, ResolveContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/interface.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolvePolicies", function() { return _interface__WEBPACK_IMPORTED_MODULE_0__["resolvePolicies"]; });

/* harmony import */ var _resolvable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolvable */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolvable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultResolvePolicy", function() { return _resolvable__WEBPACK_IMPORTED_MODULE_1__["defaultResolvePolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Resolvable", function() { return _resolvable__WEBPACK_IMPORTED_MODULE_1__["Resolvable"]; });

/* harmony import */ var _resolveContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolveContext */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolveContext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NATIVE_INJECTOR_TOKEN", function() { return _resolveContext__WEBPACK_IMPORTED_MODULE_2__["NATIVE_INJECTOR_TOKEN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResolveContext", function() { return _resolveContext__WEBPACK_IMPORTED_MODULE_2__["ResolveContext"]; });

/** @publicapi @module resolve */ /** */



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/interface.js":
/*!*******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/interface.js ***!
  \*******************************************************************************************************/
/*! exports provided: resolvePolicies */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolvePolicies", function() { return resolvePolicies; });
/** @internalapi */
var resolvePolicies = {
    when: {
        LAZY: 'LAZY',
        EAGER: 'EAGER',
    },
    async: {
        WAIT: 'WAIT',
        NOWAIT: 'NOWAIT',
        RXWAIT: 'RXWAIT',
    },
};
//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolvable.js":
/*!********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolvable.js ***!
  \********************************************************************************************************/
/*! exports provided: defaultResolvePolicy, Resolvable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultResolvePolicy", function() { return defaultResolvePolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Resolvable", function() { return Resolvable; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _common_trace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/** @publicapi @module resolve */ /** */






// TODO: explicitly make this user configurable
var defaultResolvePolicy = {
    when: 'LAZY',
    async: 'WAIT',
};
/**
 * The basic building block for the resolve system.
 *
 * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),
 * and the unwrapped-when-complete (.data) result of the resolveFn.
 *
 * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the
 * resolveFn) and returns the resulting promise.
 *
 * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first
 * parameter to those fns.
 */
var Resolvable = /** @class */ (function () {
    function Resolvable(arg1, resolveFn, deps, policy, data) {
        this.resolved = false;
        this.promise = undefined;
        if (arg1 instanceof Resolvable) {
            Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this, arg1);
        }
        else if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_4__["isFunction"])(resolveFn)) {
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_4__["isNullOrUndefined"])(arg1))
                throw new Error('new Resolvable(): token argument is required');
            if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_4__["isFunction"])(resolveFn))
                throw new Error('new Resolvable(): resolveFn argument must be a function');
            this.token = arg1;
            this.policy = policy;
            this.resolveFn = resolveFn;
            this.deps = deps || [];
            this.data = data;
            this.resolved = data !== undefined;
            this.promise = this.resolved ? _common_coreservices__WEBPACK_IMPORTED_MODULE_1__["services"].$q.when(this.data) : undefined;
        }
        else if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_4__["isObject"])(arg1) && arg1.token && (arg1.hasOwnProperty('resolveFn') || arg1.hasOwnProperty('data'))) {
            var literal = arg1;
            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);
        }
    }
    Resolvable.prototype.getPolicy = function (state) {
        var thisPolicy = this.policy || {};
        var statePolicy = (state && state.resolvePolicy) || {};
        return {
            when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,
            async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,
        };
    };
    /**
     * Asynchronously resolve this Resolvable's data
     *
     * Given a ResolveContext that this Resolvable is found in:
     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function
     * and update the Resolvable's state
     */
    Resolvable.prototype.resolve = function (resolveContext, trans) {
        var _this = this;
        var $q = _common_coreservices__WEBPACK_IMPORTED_MODULE_1__["services"].$q;
        // Gets all dependencies from ResolveContext and wait for them to be resolved
        var getResolvableDependencies = function () {
            return $q.all(resolveContext.getDependencies(_this).map(function (resolvable) { return resolvable.get(resolveContext, trans); }));
        };
        // Invokes the resolve function passing the resolved dependencies as arguments
        var invokeResolveFn = function (resolvedDeps) { return _this.resolveFn.apply(null, resolvedDeps); };
        /**
         * For RXWAIT policy:
         *
         * Given an observable returned from a resolve function:
         * - enables .cache() mode (this allows multicast subscribers)
         * - then calls toPromise() (this triggers subscribe() and thus fetches)
         * - Waits for the promise, then return the cached observable (not the first emitted value).
         */
        var waitForRx = function (observable$) {
            var cached = observable$.cache(1);
            return cached
                .take(1)
                .toPromise()
                .then(function () { return cached; });
        };
        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.
        var node = resolveContext.findNode(this);
        var state = node && node.state;
        var maybeWaitForRx = this.getPolicy(state).async === 'RXWAIT' ? waitForRx : _common_common__WEBPACK_IMPORTED_MODULE_0__["identity"];
        // After the final value has been resolved, update the state of the Resolvable
        var applyResolvedValue = function (resolvedValue) {
            _this.data = resolvedValue;
            _this.resolved = true;
            _this.resolveFn = null;
            _common_trace__WEBPACK_IMPORTED_MODULE_2__["trace"].traceResolvableResolved(_this, trans);
            return _this.data;
        };
        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.
        return (this.promise = $q
            .when()
            .then(getResolvableDependencies)
            .then(invokeResolveFn)
            .then(maybeWaitForRx)
            .then(applyResolvedValue));
    };
    /**
     * Gets a promise for this Resolvable's data.
     *
     * Fetches the data and returns a promise.
     * Returns the existing promise if it has already been fetched once.
     */
    Resolvable.prototype.get = function (resolveContext, trans) {
        return this.promise || this.resolve(resolveContext, trans);
    };
    Resolvable.prototype.toString = function () {
        return "Resolvable(token: " + Object(_common_strings__WEBPACK_IMPORTED_MODULE_3__["stringify"])(this.token) + ", requires: [" + this.deps.map(_common_strings__WEBPACK_IMPORTED_MODULE_3__["stringify"]) + "])";
    };
    Resolvable.prototype.clone = function () {
        return new Resolvable(this);
    };
    Resolvable.fromData = function (token, data) { return new Resolvable(token, function () { return data; }, null, null, data); };
    return Resolvable;
}());

//# sourceMappingURL=resolvable.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolveContext.js":
/*!************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolveContext.js ***!
  \************************************************************************************************************/
/*! exports provided: NATIVE_INJECTOR_TOKEN, ResolveContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NATIVE_INJECTOR_TOKEN", function() { return NATIVE_INJECTOR_TOKEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResolveContext", function() { return ResolveContext; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_trace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/interface.js");
/* harmony import */ var _resolvable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resolvable */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolvable.js");
/* harmony import */ var _path_pathUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../path/pathUtils */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathUtils.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @publicapi @module resolve */ /** */









var whens = _interface__WEBPACK_IMPORTED_MODULE_4__["resolvePolicies"].when;
var ALL_WHENS = [whens.EAGER, whens.LAZY];
var EAGER_WHENS = [whens.EAGER];
// tslint:disable-next-line:no-inferrable-types
var NATIVE_INJECTOR_TOKEN = 'Native Injector';
/**
 * Encapsulates Dependency Injection for a path of nodes
 *
 * UI-Router states are organized as a tree.
 * A nested state has a path of ancestors to the root of the tree.
 * When a state is being activated, each element in the path is wrapped as a [[PathNode]].
 * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.
 *
 * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.
 */
var ResolveContext = /** @class */ (function () {
    function ResolveContext(_path) {
        this._path = _path;
    }
    /** Gets all the tokens found in the resolve context, de-duplicated */
    ResolveContext.prototype.getTokens = function () {
        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["uniqR"], []);
    };
    /**
     * Gets the Resolvable that matches the token
     *
     * Gets the last Resolvable that matches the token in this context, or undefined.
     * Throws an error if it doesn't exist in the ResolveContext
     */
    ResolveContext.prototype.getResolvable = function (token) {
        var matching = this._path
            .map(function (node) { return node.resolvables; })
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .filter(function (r) { return r.token === token; });
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["tail"])(matching);
    };
    /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */
    ResolveContext.prototype.getPolicy = function (resolvable) {
        var node = this.findNode(resolvable);
        return resolvable.getPolicy(node.state);
    };
    /**
     * Returns a ResolveContext that includes a portion of this one
     *
     * Given a state, this method creates a new ResolveContext from this one.
     * The new context starts at the first node (root) and stops at the node for the `state` parameter.
     *
     * #### Why
     *
     * When a transition is created, the nodes in the "To Path" are injected from a ResolveContext.
     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.
     * The "To State" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).
     * This method is used to create a narrower context when injecting ancestor nodes.
     *
     * @example
     * `let ABCD = new ResolveContext([A, B, C, D]);`
     *
     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:
     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.
     * However, `B` should only be able to access resolvables from `A`, `B`.
     *
     * When resolving for the `B` node, first take the full "To Path" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.
     * `let AB = ABCD.subcontext(a)`
     */
    ResolveContext.prototype.subContext = function (state) {
        return new ResolveContext(_path_pathUtils__WEBPACK_IMPORTED_MODULE_6__["PathUtils"].subPath(this._path, function (node) { return node.state === state; }));
    };
    /**
     * Adds Resolvables to the node that matches the state
     *
     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).
     * The resolvable is added to the node matching the `state` parameter.
     *
     * These new resolvables are not automatically fetched.
     * The calling code should either fetch them, fetch something that depends on them,
     * or rely on [[resolvePath]] being called when some state is being entered.
     *
     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.
     *
     * @param newResolvables the new Resolvables
     * @param state Used to find the node to put the resolvable on
     */
    ResolveContext.prototype.addResolvables = function (newResolvables, state) {
        var node = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(this._path, Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["propEq"])('state', state));
        var keys = newResolvables.map(function (r) { return r.token; });
        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);
    };
    /**
     * Returns a promise for an array of resolved path Element promises
     *
     * @param when
     * @param trans
     * @returns {Promise<any>|any}
     */
    ResolveContext.prototype.resolvePath = function (when, trans) {
        var _this = this;
        if (when === void 0) { when = 'LAZY'; }
        // This option determines which 'when' policy Resolvables we are about to fetch.
        var whenOption = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inArray"])(ALL_WHENS, when) ? when : 'LAZY';
        // If the caller specified EAGER, only the EAGER Resolvables are fetched.
        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`
        var matchedWhens = whenOption === _interface__WEBPACK_IMPORTED_MODULE_4__["resolvePolicies"].when.EAGER ? EAGER_WHENS : ALL_WHENS;
        // get the subpath to the state argument, if provided
        _common_trace__WEBPACK_IMPORTED_MODULE_2__["trace"].traceResolvePath(this._path, when, trans);
        var matchesPolicy = function (acceptedVals, whenOrAsync) { return function (resolvable) {
            return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inArray"])(acceptedVals, _this.getPolicy(resolvable)[whenOrAsync]);
        }; };
        // Trigger all the (matching) Resolvables in the path
        // Reduce all the "WAIT" Resolvables into an array
        var promises = this._path.reduce(function (acc, node) {
            var nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));
            var nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));
            var wait = nodeResolvables.filter(Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["not"])(matchesPolicy(['NOWAIT'], 'async')));
            // For the matching Resolvables, start their async fetch process.
            var subContext = _this.subContext(node.state);
            var getResult = function (r) {
                return r
                    .get(subContext, trans)
                    // Return a tuple that includes the Resolvable's token
                    .then(function (value) { return ({ token: r.token, value: value }); });
            };
            nowait.forEach(getResult);
            return acc.concat(wait.map(getResult));
        }, []);
        // Wait for all the "WAIT" resolvables
        return _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$q.all(promises);
    };
    ResolveContext.prototype.injector = function () {
        return this._injector || (this._injector = new UIInjectorImpl(this));
    };
    ResolveContext.prototype.findNode = function (resolvable) {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(this._path, function (node) { return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inArray"])(node.resolvables, resolvable); });
    };
    /**
     * Gets the async dependencies of a Resolvable
     *
     * Given a Resolvable, returns its dependencies as a Resolvable[]
     */
    ResolveContext.prototype.getDependencies = function (resolvable) {
        var _this = this;
        var node = this.findNode(resolvable);
        // Find which other resolvables are "visible" to the `resolvable` argument
        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)
        var subPath = _path_pathUtils__WEBPACK_IMPORTED_MODULE_6__["PathUtils"].subPath(this._path, function (x) { return x === node; }) || this._path;
        var availableResolvables = subPath
            .reduce(function (acc, _node) { return acc.concat(_node.resolvables); }, []) // all of subpath's resolvables
            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument
        var getDependency = function (token) {
            var matching = availableResolvables.filter(function (r) { return r.token === token; });
            if (matching.length)
                return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["tail"])(matching);
            var fromInjector = _this.injector().getNative(token);
            if (Object(_common__WEBPACK_IMPORTED_MODULE_8__["isUndefined"])(fromInjector)) {
                throw new Error('Could not find Dependency Injection token: ' + Object(_common_strings__WEBPACK_IMPORTED_MODULE_7__["stringify"])(token));
            }
            return new _resolvable__WEBPACK_IMPORTED_MODULE_5__["Resolvable"](token, function () { return fromInjector; }, [], fromInjector);
        };
        return resolvable.deps.map(getDependency);
    };
    return ResolveContext;
}());

/** @internalapi */
var UIInjectorImpl = /** @class */ (function () {
    function UIInjectorImpl(context) {
        this.context = context;
        this.native = this.get(NATIVE_INJECTOR_TOKEN) || _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$injector;
    }
    UIInjectorImpl.prototype.get = function (token) {
        var resolvable = this.context.getResolvable(token);
        if (resolvable) {
            if (this.context.getPolicy(resolvable).async === 'NOWAIT') {
                return resolvable.get(this.context);
            }
            if (!resolvable.resolved) {
                throw new Error('Resolvable async .get() not complete:' + Object(_common_strings__WEBPACK_IMPORTED_MODULE_7__["stringify"])(resolvable.token));
            }
            return resolvable.data;
        }
        return this.getNative(token);
    };
    UIInjectorImpl.prototype.getAsync = function (token) {
        var resolvable = this.context.getResolvable(token);
        if (resolvable)
            return resolvable.get(this.context);
        return _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$q.when(this.native.get(token));
    };
    UIInjectorImpl.prototype.getNative = function (token) {
        return this.native && this.native.get(token);
    };
    return UIInjectorImpl;
}());
//# sourceMappingURL=resolveContext.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/router.js":
/*!********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/router.js ***!
  \********************************************************************************************/
/*! exports provided: UIRouter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIRouter", function() { return UIRouter; });
/* harmony import */ var _url_urlMatcherFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url/urlMatcherFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcherFactory.js");
/* harmony import */ var _url_urlRouter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url/urlRouter */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRouter.js");
/* harmony import */ var _transition_transitionService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transition/transitionService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionService.js");
/* harmony import */ var _view_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view/view */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/view/view.js");
/* harmony import */ var _state_stateRegistry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state/stateRegistry */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateRegistry.js");
/* harmony import */ var _state_stateService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./state/stateService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateService.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./globals */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/globals.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _url_urlService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./url/urlService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlService.js");
/* harmony import */ var _common_trace__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./common/trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @publicapi @module core */ /** */












/** @hidden */
var _routerInstance = 0;
/** @hidden */
var locSvcFns = ['url', 'path', 'search', 'hash', 'onChange'];
/** @hidden */
var locCfgFns = ['port', 'protocol', 'host', 'baseHref', 'html5Mode', 'hashPrefix'];
/** @hidden */
var locationServiceStub = Object(_common__WEBPACK_IMPORTED_MODULE_11__["makeStub"])('LocationServices', locSvcFns);
/** @hidden */
var locationConfigStub = Object(_common__WEBPACK_IMPORTED_MODULE_11__["makeStub"])('LocationConfig', locCfgFns);
/**
 * The master class used to instantiate an instance of UI-Router.
 *
 * UI-Router (for each specific framework) will create an instance of this class during bootstrap.
 * This class instantiates and wires the UI-Router services together.
 *
 * After a new instance of the UIRouter class is created, it should be configured for your app.
 * For instance, app states should be registered with the [[UIRouter.stateRegistry]].
 *
 * ---
 *
 * Normally the framework code will bootstrap UI-Router.
 * If you are bootstrapping UIRouter manually, tell it to monitor the URL by calling
 * [[UrlService.listen]] then [[UrlService.sync]].
 */
var UIRouter = /** @class */ (function () {
    /**
     * Creates a new `UIRouter` object
     *
     * @param locationService a [[LocationServices]] implementation
     * @param locationConfig a [[LocationConfig]] implementation
     * @internalapi
     */
    function UIRouter(locationService, locationConfig) {
        if (locationService === void 0) { locationService = locationServiceStub; }
        if (locationConfig === void 0) { locationConfig = locationConfigStub; }
        this.locationService = locationService;
        this.locationConfig = locationConfig;
        /** @hidden */ this.$id = _routerInstance++;
        /** @hidden */ this._disposed = false;
        /** @hidden */ this._disposables = [];
        /** Provides trace information to the console */
        this.trace = _common_trace__WEBPACK_IMPORTED_MODULE_10__["trace"];
        /** Provides services related to ui-view synchronization */
        this.viewService = new _view_view__WEBPACK_IMPORTED_MODULE_3__["ViewService"](this);
        /** Global router state */
        this.globals = new _globals__WEBPACK_IMPORTED_MODULE_6__["UIRouterGlobals"]();
        /** Provides services related to Transitions */
        this.transitionService = new _transition_transitionService__WEBPACK_IMPORTED_MODULE_2__["TransitionService"](this);
        /**
         * Deprecated for public use. Use [[urlService]] instead.
         * @deprecated Use [[urlService]] instead
         */
        this.urlMatcherFactory = new _url_urlMatcherFactory__WEBPACK_IMPORTED_MODULE_0__["UrlMatcherFactory"](this);
        /**
         * Deprecated for public use. Use [[urlService]] instead.
         * @deprecated Use [[urlService]] instead
         */
        this.urlRouter = new _url_urlRouter__WEBPACK_IMPORTED_MODULE_1__["UrlRouter"](this);
        /** Provides services related to the URL */
        this.urlService = new _url_urlService__WEBPACK_IMPORTED_MODULE_9__["UrlService"](this);
        /** Provides a registry for states, and related registration services */
        this.stateRegistry = new _state_stateRegistry__WEBPACK_IMPORTED_MODULE_4__["StateRegistry"](this);
        /** Provides services related to states */
        this.stateService = new _state_stateService__WEBPACK_IMPORTED_MODULE_5__["StateService"](this);
        /** @hidden plugin instances are registered here */
        this._plugins = {};
        this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());
        this.globals.$current = this.stateRegistry.root();
        this.globals.current = this.globals.$current.self;
        this.disposable(this.globals);
        this.disposable(this.stateService);
        this.disposable(this.stateRegistry);
        this.disposable(this.transitionService);
        this.disposable(this.urlService);
        this.disposable(locationService);
        this.disposable(locationConfig);
    }
    /** Registers an object to be notified when the router is disposed */
    UIRouter.prototype.disposable = function (disposable) {
        this._disposables.push(disposable);
    };
    /**
     * Disposes this router instance
     *
     * When called, clears resources retained by the router by calling `dispose(this)` on all
     * registered [[disposable]] objects.
     *
     * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.
     *
     * @param disposable (optional) the disposable to dispose
     */
    UIRouter.prototype.dispose = function (disposable) {
        var _this = this;
        if (disposable && Object(_common_predicates__WEBPACK_IMPORTED_MODULE_8__["isFunction"])(disposable.dispose)) {
            disposable.dispose(this);
            return undefined;
        }
        this._disposed = true;
        this._disposables.slice().forEach(function (d) {
            try {
                typeof d.dispose === 'function' && d.dispose(_this);
                Object(_common_common__WEBPACK_IMPORTED_MODULE_7__["removeFrom"])(_this._disposables, d);
            }
            catch (ignored) { }
        });
    };
    /**
     * Adds a plugin to UI-Router
     *
     * This method adds a UI-Router Plugin.
     * A plugin can enhance or change UI-Router behavior using any public API.
     *
     * #### Example:
     * ```js
     * import { MyCoolPlugin } from "ui-router-cool-plugin";
     *
     * var plugin = router.addPlugin(MyCoolPlugin);
     * ```
     *
     * ### Plugin authoring
     *
     * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.
     *
     * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].
     * For example, it may configure router options or add a Transition Hook.
     *
     * The plugin can then be published as a separate module.
     *
     * #### Example:
     * ```js
     * export class MyAuthPlugin implements UIRouterPlugin {
     *   constructor(router: UIRouter, options: any) {
     *     this.name = "MyAuthPlugin";
     *     let $transitions = router.transitionService;
     *     let $state = router.stateService;
     *
     *     let authCriteria = {
     *       to: (state) => state.data && state.data.requiresAuth
     *     };
     *
     *     function authHook(transition: Transition) {
     *       let authService = transition.injector().get('AuthService');
     *       if (!authService.isAuthenticated()) {
     *         return $state.target('login');
     *       }
     *     }
     *
     *     $transitions.onStart(authCriteria, authHook);
     *   }
     * }
     * ```
     *
     * @param plugin one of:
     *        - a plugin class which implements [[UIRouterPlugin]]
     *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance
     *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance
     * @param options options to pass to the plugin class/factory
     * @returns the registered plugin instance
     */
    UIRouter.prototype.plugin = function (plugin, options) {
        if (options === void 0) { options = {}; }
        var pluginInstance = new plugin(this, options);
        if (!pluginInstance.name)
            throw new Error('Required property `name` missing on plugin: ' + pluginInstance);
        this._disposables.push(pluginInstance);
        return (this._plugins[pluginInstance.name] = pluginInstance);
    };
    UIRouter.prototype.getPlugin = function (pluginName) {
        return pluginName ? this._plugins[pluginName] : Object(_common_common__WEBPACK_IMPORTED_MODULE_7__["values"])(this._plugins);
    };
    return UIRouter;
}());

//# sourceMappingURL=router.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/index.js":
/*!*************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/index.js ***!
  \*************************************************************************************************/
/*! exports provided: resolvablesBuilder, StateBuilder, StateObject, StateMatcher, StateQueueManager, StateRegistry, StateService, TargetState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _stateBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stateBuilder */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolvablesBuilder", function() { return _stateBuilder__WEBPACK_IMPORTED_MODULE_0__["resolvablesBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateBuilder", function() { return _stateBuilder__WEBPACK_IMPORTED_MODULE_0__["StateBuilder"]; });

/* harmony import */ var _stateObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stateObject */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateObject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateObject", function() { return _stateObject__WEBPACK_IMPORTED_MODULE_1__["StateObject"]; });

/* harmony import */ var _stateMatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stateMatcher */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateMatcher.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateMatcher", function() { return _stateMatcher__WEBPACK_IMPORTED_MODULE_2__["StateMatcher"]; });

/* harmony import */ var _stateQueueManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateQueueManager */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateQueueManager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateQueueManager", function() { return _stateQueueManager__WEBPACK_IMPORTED_MODULE_3__["StateQueueManager"]; });

/* harmony import */ var _stateRegistry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stateRegistry */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateRegistry.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateRegistry", function() { return _stateRegistry__WEBPACK_IMPORTED_MODULE_4__["StateRegistry"]; });

/* harmony import */ var _stateService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stateService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StateService", function() { return _stateService__WEBPACK_IMPORTED_MODULE_5__["StateService"]; });

/* harmony import */ var _targetState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./targetState */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TargetState", function() { return _targetState__WEBPACK_IMPORTED_MODULE_6__["TargetState"]; });








//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateBuilder.js":
/*!********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateBuilder.js ***!
  \********************************************************************************************************/
/*! exports provided: resolvablesBuilder, StateBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolvablesBuilder", function() { return resolvablesBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateBuilder", function() { return StateBuilder; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../resolve/resolvable */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolvable.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/** @publicapi @module state */ /** */






var parseUrl = function (url) {
    if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(url))
        return false;
    var root = url.charAt(0) === '^';
    return { val: root ? url.substring(1) : url, root: root };
};
function nameBuilder(state) {
    return state.name;
}
function selfBuilder(state) {
    state.self.$$state = function () { return state; };
    return state.self;
}
function dataBuilder(state) {
    if (state.parent && state.parent.data) {
        state.data = state.self.data = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inherit"])(state.parent.data, state.data);
    }
    return state.data;
}
var getUrlBuilder = function ($urlMatcherFactoryProvider, root) {
    return function urlBuilder(stateObject) {
        var state = stateObject.self;
        // For future states, i.e., states whose name ends with `.**`,
        // match anything that starts with the url prefix
        if (state && state.url && state.name && state.name.match(/\.\*\*$/)) {
            state.url += '{remainder:any}'; // match any path (.*)
        }
        var parent = stateObject.parent;
        var parsed = parseUrl(state.url);
        var url = !parsed ? state.url : $urlMatcherFactoryProvider.compile(parsed.val, { state: state });
        if (!url)
            return null;
        if (!$urlMatcherFactoryProvider.isMatcher(url))
            throw new Error("Invalid url '" + url + "' in state '" + stateObject + "'");
        return parsed && parsed.root ? url : ((parent && parent.navigable) || root()).url.append(url);
    };
};
var getNavigableBuilder = function (isRoot) {
    return function navigableBuilder(state) {
        return !isRoot(state) && state.url ? state : state.parent ? state.parent.navigable : null;
    };
};
var getParamsBuilder = function (paramFactory) {
    return function paramsBuilder(state) {
        var makeConfigParam = function (config, id) { return paramFactory.fromConfig(id, null, state.self); };
        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];
        var nonUrlParams = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["values"])(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["mapObj"])(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["omit"])(state.params || {}, urlParams.map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('id'))), makeConfigParam));
        return urlParams
            .concat(nonUrlParams)
            .map(function (p) { return [p.id, p]; })
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["applyPairs"], {});
    };
};
function pathBuilder(state) {
    return state.parent ? state.parent.path.concat(state) : /*root*/ [state];
}
function includesBuilder(state) {
    var includes = state.parent ? Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, state.parent.includes) : {};
    includes[state.name] = true;
    return includes;
}
/**
 * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].
 *
 * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder
 * validates the `resolve` property and converts it to a [[Resolvable]] array.
 *
 * resolve: input value can be:
 *
 * {
 *   // analyzed but not injected
 *   myFooResolve: function() { return "myFooData"; },
 *
 *   // function.toString() parsed, "DependencyName" dep as string (not min-safe)
 *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },
 *
 *   // Array split; "DependencyName" dep as string
 *   myBazResolve: [ "DependencyName", function(dep) { return dep.fetchSomethingAsPromise() },
 *
 *   // Array split; DependencyType dep as token (compared using ===)
 *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },
 *
 *   // val.$inject used as deps
 *   // where:
 *   //     corgeResolve.$inject = ["DependencyName"];
 *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }
 *   // then "DependencyName" dep as string
 *   myCorgeResolve: corgeResolve,
 *
 *  // inject service by name
 *  // When a string is found, desugar creating a resolve that injects the named service
 *   myGraultResolve: "SomeService"
 * }
 *
 * or:
 *
 * [
 *   new Resolvable("myFooResolve", function() { return "myFooData" }),
 *   new Resolvable("myBarResolve", function(dep) { return dep.fetchSomethingAsPromise() }, [ "DependencyName" ]),
 *   { provide: "myBazResolve", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ "DependencyName" ] }
 * ]
 */
function resolvablesBuilder(state) {
    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */
    var objects2Tuples = function (resolveObj, resolvePolicies) {
        return Object.keys(resolveObj || {}).map(function (token) { return ({
            token: token,
            val: resolveObj[token],
            deps: undefined,
            policy: resolvePolicies[token],
        }); });
    };
    /** fetch DI annotations from a function or ng1-style array */
    var annotate = function (fn) {
        var $injector = _common_coreservices__WEBPACK_IMPORTED_MODULE_5__["services"].$injector;
        // ng1 doesn't have an $injector until runtime.
        // If the $injector doesn't exist, use "deferred" literal as a
        // marker indicating they should be annotated when runtime starts
        return fn['$inject'] || ($injector && $injector.annotate(fn, $injector.strictDi)) || 'deferred';
    };
    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */
    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };
    /** true if the object looks like a provide literal, or a ng2 Provider */
    var isLikeNg2Provider = function (obj) {
        return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));
    };
    /** true if the object looks like a tuple from obj2Tuples */
    var isTupleFromObj = function (obj) {
        return !!(obj && obj.val && (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(obj.val) || Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isArray"])(obj.val) || Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(obj.val)));
    };
    /** extracts the token from a Provider or provide literal */
    var getToken = function (p) { return p.provide || p.token; };
    // prettier-ignore: Given a literal resolve or provider object, returns a Resolvable
    var literal2Resolvable = Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["pattern"])([
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('resolveFn'), function (p) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](getToken(p), p.resolveFn, p.deps, p.policy); }],
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('useFactory'), function (p) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](getToken(p), p.useFactory, p.deps || p.dependencies, p.policy); }],
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('useClass'), function (p) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](getToken(p), function () { return new p.useClass(); }, [], p.policy); }],
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('useValue'), function (p) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](getToken(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('useExisting'), function (p) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](getToken(p), _common_common__WEBPACK_IMPORTED_MODULE_0__["identity"], [p.useExisting], p.policy); }],
    ]);
    // prettier-ignore
    var tuple2Resolvable = Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["pattern"])([
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('val'), _common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"]), function (tuple) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](tuple.token, _common_common__WEBPACK_IMPORTED_MODULE_0__["identity"], [tuple.val], tuple.policy); }],
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('val'), _common_predicates__WEBPACK_IMPORTED_MODULE_1__["isArray"]), function (tuple) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](tuple.token, Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["tail"])(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["prop"])('val'), _common_predicates__WEBPACK_IMPORTED_MODULE_1__["isFunction"]), function (tuple) { return new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"](tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],
    ]);
    // prettier-ignore
    var item2Resolvable = Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["pattern"])([
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["is"])(_resolve_resolvable__WEBPACK_IMPORTED_MODULE_4__["Resolvable"]), function (r) { return r; }],
        [isResolveLiteral, literal2Resolvable],
        [isLikeNg2Provider, literal2Resolvable],
        [isTupleFromObj, tuple2Resolvable],
        [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["val"])(true), function (obj) { throw new Error('Invalid resolve value: ' + Object(_common_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(obj)); },],
    ]);
    // If resolveBlock is already an array, use it as-is.
    // Otherwise, assume it's an object and convert to an Array of tuples
    var decl = state.resolve;
    var items = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isArray"])(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});
    return items.map(item2Resolvable);
}
/**
 * @internalapi A internal global service
 *
 * StateBuilder is a factory for the internal [[StateObject]] objects.
 *
 * When you register a state with the [[StateRegistry]], you register a plain old javascript object which
 * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding
 * [[StateObject]] object, which has an API and is used internally.
 *
 * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function
 * using the [[builder]] method.
 */
var StateBuilder = /** @class */ (function () {
    function StateBuilder(matcher, urlMatcherFactory) {
        this.matcher = matcher;
        var self = this;
        var root = function () { return matcher.find(''); };
        var isRoot = function (state) { return state.name === ''; };
        function parentBuilder(state) {
            if (isRoot(state))
                return null;
            return matcher.find(self.parentName(state)) || root();
        }
        this.builders = {
            name: [nameBuilder],
            self: [selfBuilder],
            parent: [parentBuilder],
            data: [dataBuilder],
            // Build a URLMatcher if necessary, either via a relative or absolute URL
            url: [getUrlBuilder(urlMatcherFactory, root)],
            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
            navigable: [getNavigableBuilder(isRoot)],
            params: [getParamsBuilder(urlMatcherFactory.paramFactory)],
            // Each framework-specific ui-router implementation should define its own `views` builder
            // e.g., src/ng1/statebuilders/views.ts
            views: [],
            // Keep a full path from the root down to this state as this is needed for state activation.
            path: [pathBuilder],
            // Speed up $state.includes() as it's used a lot
            includes: [includesBuilder],
            resolvables: [resolvablesBuilder],
        };
    }
    /**
     * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).
     * More than one BuilderFunction can be registered for a given property.
     *
     * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.
     *
     * @param name The name of the State property being registered for.
     * @param fn The BuilderFunction which will be used to build the State property
     * @returns a function which deregisters the BuilderFunction
     */
    StateBuilder.prototype.builder = function (name, fn) {
        var builders = this.builders;
        var array = builders[name] || [];
        // Backwards compat: if only one builder exists, return it, else return whole arary.
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(name) && !Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(fn))
            return array.length > 1 ? array : array[0];
        if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(name) || !Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(fn))
            return;
        builders[name] = array;
        builders[name].push(fn);
        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };
    };
    /**
     * Builds all of the properties on an essentially blank State object, returning a State object which has all its
     * properties and API built.
     *
     * @param state an uninitialized State object
     * @returns the built State object
     */
    StateBuilder.prototype.build = function (state) {
        var _a = this, matcher = _a.matcher, builders = _a.builders;
        var parent = this.parentName(state);
        if (parent && !matcher.find(parent, undefined, false)) {
            return null;
        }
        for (var key in builders) {
            if (!builders.hasOwnProperty(key))
                continue;
            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, _common_common__WEBPACK_IMPORTED_MODULE_0__["noop"]);
            state[key] = chain(state);
        }
        return state;
    };
    StateBuilder.prototype.parentName = function (state) {
        // name = 'foo.bar.baz.**'
        var name = state.name || '';
        // segments = ['foo', 'bar', 'baz', '.**']
        var segments = name.split('.');
        // segments = ['foo', 'bar', 'baz']
        var lastSegment = segments.pop();
        // segments = ['foo', 'bar'] (ignore .** segment for future states)
        if (lastSegment === '**')
            segments.pop();
        if (segments.length) {
            if (state.parent) {
                throw new Error("States that specify the 'parent:' property should not have a '.' in their name (" + name + ")");
            }
            // 'foo.bar'
            return segments.join('.');
        }
        if (!state.parent)
            return '';
        return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(state.parent) ? state.parent : state.parent.name;
    };
    StateBuilder.prototype.name = function (state) {
        var name = state.name;
        if (name.indexOf('.') !== -1 || !state.parent)
            return name;
        var parentName = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(state.parent) ? state.parent : state.parent.name;
        return parentName ? parentName + '.' + name : name;
    };
    return StateBuilder;
}());

//# sourceMappingURL=stateBuilder.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateMatcher.js":
/*!********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateMatcher.js ***!
  \********************************************************************************************************/
/*! exports provided: StateMatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateMatcher", function() { return StateMatcher; });
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/** @publicapi @module state */ /** */


var StateMatcher = /** @class */ (function () {
    function StateMatcher(_states) {
        this._states = _states;
    }
    StateMatcher.prototype.isRelative = function (stateName) {
        stateName = stateName || '';
        return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;
    };
    StateMatcher.prototype.find = function (stateOrName, base, matchGlob) {
        if (matchGlob === void 0) { matchGlob = true; }
        if (!stateOrName && stateOrName !== '')
            return undefined;
        var isStr = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isString"])(stateOrName);
        var name = isStr ? stateOrName : stateOrName.name;
        if (this.isRelative(name))
            name = this.resolvePath(name, base);
        var state = this._states[name];
        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
            return state;
        }
        else if (isStr && matchGlob) {
            var _states = Object(_common_common__WEBPACK_IMPORTED_MODULE_1__["values"])(this._states);
            var matches = _states.filter(function (_state) { return _state.__stateObjectCache.nameGlob && _state.__stateObjectCache.nameGlob.matches(name); });
            if (matches.length > 1) {
                // tslint:disable-next-line:no-console
                console.log("stateMatcher.find: Found multiple matches for " + name + " using glob: ", matches.map(function (match) { return match.name; }));
            }
            return matches[0];
        }
        return undefined;
    };
    StateMatcher.prototype.resolvePath = function (name, base) {
        if (!base)
            throw new Error("No reference point given for path '" + name + "'");
        var baseState = this.find(base);
        var splitName = name.split('.');
        var pathLength = splitName.length;
        var i = 0, current = baseState;
        for (; i < pathLength; i++) {
            if (splitName[i] === '' && i === 0) {
                current = baseState;
                continue;
            }
            if (splitName[i] === '^') {
                if (!current.parent)
                    throw new Error("Path '" + name + "' not valid for state '" + baseState.name + "'");
                current = current.parent;
                continue;
            }
            break;
        }
        var relName = splitName.slice(i).join('.');
        return current.name + (current.name && relName ? '.' : '') + relName;
    };
    return StateMatcher;
}());

//# sourceMappingURL=stateMatcher.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateObject.js":
/*!*******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateObject.js ***!
  \*******************************************************************************************************/
/*! exports provided: StateObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateObject", function() { return StateObject; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_glob__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/glob */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/glob.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");




/**
 * Internal representation of a UI-Router state.
 *
 * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].
 *
 * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.
 *
 * This class prototypally inherits from the corresponding [[StateDeclaration]].
 * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].
 */
var StateObject = /** @class */ (function () {
    /** @deprecated use State.create() */
    function StateObject(config) {
        return StateObject.create(config || {});
    }
    /**
     * Create a state object to put the private/internal implementation details onto.
     * The object's prototype chain looks like:
     * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)
     *
     * @param stateDecl the user-supplied State Declaration
     * @returns {StateObject} an internal State object
     */
    StateObject.create = function (stateDecl) {
        stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;
        var state = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inherit"])(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inherit"])(stateDecl, StateObject.prototype));
        stateDecl.$$state = function () { return state; };
        state.self = stateDecl;
        state.__stateObjectCache = {
            nameGlob: _common_glob__WEBPACK_IMPORTED_MODULE_2__["Glob"].fromString(state.name),
        };
        return state;
    };
    /**
     * Returns true if the provided parameter is the same state.
     *
     * Compares the identity of the state against the passed value, which is either an object
     * reference to the actual `State` instance, the original definition object passed to
     * `$stateProvider.state()`, or the fully-qualified name.
     *
     * @param ref Can be one of (a) a `State` instance, (b) an object that was passed
     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.
     * @returns Returns `true` if `ref` matches the current `State` instance.
     */
    StateObject.prototype.is = function (ref) {
        return this === ref || this.self === ref || this.fqn() === ref;
    };
    /**
     * @deprecated this does not properly handle dot notation
     * @returns Returns a dot-separated name of the state.
     */
    StateObject.prototype.fqn = function () {
        if (!this.parent || !(this.parent instanceof this.constructor))
            return this.name;
        var name = this.parent.fqn();
        return name ? name + '.' + this.name : this.name;
    };
    /**
     * Returns the root node of this state's tree.
     *
     * @returns The root of this state's tree.
     */
    StateObject.prototype.root = function () {
        return (this.parent && this.parent.root()) || this;
    };
    /**
     * Gets the state's `Param` objects
     *
     * Gets the list of [[Param]] objects owned by the state.
     * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.
     * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object
     *
     * @param opts options
     */
    StateObject.prototype.parameters = function (opts) {
        opts = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["defaults"])(opts, { inherit: true, matchingKeys: null });
        var inherited = (opts.inherit && this.parent && this.parent.parameters()) || [];
        return inherited
            .concat(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["values"])(this.params))
            .filter(function (param) { return !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id); });
    };
    /**
     * Returns a single [[Param]] that is owned by the state
     *
     * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.
     * @param id the name of the [[Param]] to return
     * @param opts options
     */
    StateObject.prototype.parameter = function (id, opts) {
        if (opts === void 0) { opts = {}; }
        return ((this.url && this.url.parameter(id, opts)) ||
            Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["values"])(this.params), Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["propEq"])('id', id)) ||
            (opts.inherit && this.parent && this.parent.parameter(id)));
    };
    StateObject.prototype.toString = function () {
        return this.fqn();
    };
    /** Predicate which returns true if the object is an class with @State() decorator */
    StateObject.isStateClass = function (stateDecl) {
        return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(stateDecl) && stateDecl['__uiRouterState'] === true;
    };
    /** Predicate which returns true if the object is an internal [[StateObject]] object */
    StateObject.isState = function (obj) { return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_3__["isObject"])(obj['__stateObjectCache']); };
    return StateObject;
}());

//# sourceMappingURL=stateObject.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateQueueManager.js":
/*!*************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateQueueManager.js ***!
  \*************************************************************************************************************/
/*! exports provided: StateQueueManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateQueueManager", function() { return StateQueueManager; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _stateObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stateObject */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateObject.js");
/** @publicapi @module state */ /** */


/** @internalapi */
var StateQueueManager = /** @class */ (function () {
    function StateQueueManager(router, states, builder, listeners) {
        this.router = router;
        this.states = states;
        this.builder = builder;
        this.listeners = listeners;
        this.queue = [];
    }
    /** @internalapi */
    StateQueueManager.prototype.dispose = function () {
        this.queue = [];
    };
    StateQueueManager.prototype.register = function (stateDecl) {
        var queue = this.queue;
        var state = _stateObject__WEBPACK_IMPORTED_MODULE_1__["StateObject"].create(stateDecl);
        var name = state.name;
        if (!Object(_common__WEBPACK_IMPORTED_MODULE_0__["isString"])(name))
            throw new Error('State must have a valid name');
        if (this.states.hasOwnProperty(name) || Object(_common__WEBPACK_IMPORTED_MODULE_0__["inArray"])(queue.map(Object(_common__WEBPACK_IMPORTED_MODULE_0__["prop"])('name')), name))
            throw new Error("State '" + name + "' is already defined");
        queue.push(state);
        this.flush();
        return state;
    };
    StateQueueManager.prototype.flush = function () {
        var _this = this;
        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;
        var registered = [], // states that got registered
        orphans = [], // states that don't yet have a parent registered
        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered
        var getState = function (name) { return _this.states.hasOwnProperty(name) && _this.states[name]; };
        var notifyListeners = function () {
            if (registered.length) {
                _this.listeners.forEach(function (listener) { return listener('registered', registered.map(function (s) { return s.self; })); });
            }
        };
        while (queue.length > 0) {
            var state = queue.shift();
            var name_1 = state.name;
            var result = builder.build(state);
            var orphanIdx = orphans.indexOf(state);
            if (result) {
                var existingState = getState(name_1);
                if (existingState && existingState.name === name_1) {
                    throw new Error("State '" + name_1 + "' is already defined");
                }
                var existingFutureState = getState(name_1 + '.**');
                if (existingFutureState) {
                    // Remove future state of the same name
                    this.router.stateRegistry.deregister(existingFutureState);
                }
                states[name_1] = state;
                this.attachRoute(state);
                if (orphanIdx >= 0)
                    orphans.splice(orphanIdx, 1);
                registered.push(state);
                continue;
            }
            var prev = previousQueueLength[name_1];
            previousQueueLength[name_1] = queue.length;
            if (orphanIdx >= 0 && prev === queue.length) {
                // Wait until two consecutive iterations where no additional states were dequeued successfully.
                // throw new Error(`Cannot register orphaned state '${name}'`);
                queue.push(state);
                notifyListeners();
                return states;
            }
            else if (orphanIdx < 0) {
                orphans.push(state);
            }
            queue.push(state);
        }
        notifyListeners();
        return states;
    };
    StateQueueManager.prototype.attachRoute = function (state) {
        if (state.abstract || !state.url)
            return;
        var rulesApi = this.router.urlService.rules;
        rulesApi.rule(rulesApi.urlRuleFactory.create(state));
    };
    return StateQueueManager;
}());

//# sourceMappingURL=stateQueueManager.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateRegistry.js":
/*!*********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateRegistry.js ***!
  \*********************************************************************************************************/
/*! exports provided: StateRegistry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateRegistry", function() { return StateRegistry; });
/* harmony import */ var _stateMatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stateMatcher */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateMatcher.js");
/* harmony import */ var _stateBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stateBuilder */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateBuilder.js");
/* harmony import */ var _stateQueueManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stateQueueManager */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateQueueManager.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/** @publicapi @module state */ /** */





var StateRegistry = /** @class */ (function () {
    /** @internalapi */
    function StateRegistry(router) {
        this.router = router;
        this.states = {};
        this.listeners = [];
        this.matcher = new _stateMatcher__WEBPACK_IMPORTED_MODULE_0__["StateMatcher"](this.states);
        this.builder = new _stateBuilder__WEBPACK_IMPORTED_MODULE_1__["StateBuilder"](this.matcher, router.urlMatcherFactory);
        this.stateQueue = new _stateQueueManager__WEBPACK_IMPORTED_MODULE_2__["StateQueueManager"](router, this.states, this.builder, this.listeners);
        this._registerRoot();
    }
    /** @internalapi */
    StateRegistry.prototype._registerRoot = function () {
        var rootStateDef = {
            name: '',
            url: '^',
            views: null,
            params: {
                '#': { value: null, type: 'hash', dynamic: true },
            },
            abstract: true,
        };
        var _root = (this._root = this.stateQueue.register(rootStateDef));
        _root.navigable = null;
    };
    /** @internalapi */
    StateRegistry.prototype.dispose = function () {
        var _this = this;
        this.stateQueue.dispose();
        this.listeners = [];
        this.get().forEach(function (state) { return _this.get(state) && _this.deregister(state); });
    };
    /**
     * Listen for a State Registry events
     *
     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.
     *
     * #### Example:
     * ```js
     * let allStates = registry.get();
     *
     * // Later, invoke deregisterFn() to remove the listener
     * let deregisterFn = registry.onStatesChanged((event, states) => {
     *   switch(event) {
     *     case: 'registered':
     *       states.forEach(state => allStates.push(state));
     *       break;
     *     case: 'deregistered':
     *       states.forEach(state => {
     *         let idx = allStates.indexOf(state);
     *         if (idx !== -1) allStates.splice(idx, 1);
     *       });
     *       break;
     *   }
     * });
     * ```
     *
     * @param listener a callback function invoked when the registered states changes.
     *        The function receives two parameters, `event` and `state`.
     *        See [[StateRegistryListener]]
     * @return a function that deregisters the listener
     */
    StateRegistry.prototype.onStatesChanged = function (listener) {
        this.listeners.push(listener);
        return function deregisterListener() {
            Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["removeFrom"])(this.listeners)(listener);
        }.bind(this);
    };
    /**
     * Gets the implicit root state
     *
     * Gets the root of the state tree.
     * The root state is implicitly created by UI-Router.
     * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]
     *
     * @return the root [[StateObject]]
     */
    StateRegistry.prototype.root = function () {
        return this._root;
    };
    /**
     * Adds a state to the registry
     *
     * Registers a [[StateDeclaration]] or queues it for registration.
     *
     * Note: a state will be queued if the state's parent isn't yet registered.
     *
     * @param stateDefinition the definition of the state to register.
     * @returns the internal [[StateObject]] object.
     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).
     *          If the state was only queued, then the object is not fully built.
     */
    StateRegistry.prototype.register = function (stateDefinition) {
        return this.stateQueue.register(stateDefinition);
    };
    /** @hidden */
    StateRegistry.prototype._deregisterTree = function (state) {
        var _this = this;
        var all = this.get().map(function (s) { return s.$$state(); });
        var getChildren = function (states) {
            var _children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });
            return _children.length === 0 ? _children : _children.concat(getChildren(_children));
        };
        var children = getChildren([state]);
        var deregistered = [state].concat(children).reverse();
        deregistered.forEach(function (_state) {
            var rulesApi = _this.router.urlService.rules;
            // Remove URL rule
            rulesApi
                .rules()
                .filter(Object(_common_hof__WEBPACK_IMPORTED_MODULE_4__["propEq"])('state', _state))
                .forEach(function (rule) { return rulesApi.removeRule(rule); });
            // Remove state from registry
            delete _this.states[_state.name];
        });
        return deregistered;
    };
    /**
     * Removes a state from the registry
     *
     * This removes a state from the registry.
     * If the state has children, they are are also removed from the registry.
     *
     * @param stateOrName the state's name or object representation
     * @returns {StateObject[]} a list of removed states
     */
    StateRegistry.prototype.deregister = function (stateOrName) {
        var _state = this.get(stateOrName);
        if (!_state)
            throw new Error("Can't deregister state; not found: " + stateOrName);
        var deregisteredStates = this._deregisterTree(_state.$$state());
        this.listeners.forEach(function (listener) { return listener('deregistered', deregisteredStates.map(function (s) { return s.self; })); });
        return deregisteredStates;
    };
    StateRegistry.prototype.get = function (stateOrName, base) {
        var _this = this;
        if (arguments.length === 0)
            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });
        var found = this.matcher.find(stateOrName, base);
        return (found && found.self) || null;
    };
    StateRegistry.prototype.decorator = function (name, func) {
        return this.builder.builder(name, func);
    };
    return StateRegistry;
}());

//# sourceMappingURL=stateRegistry.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateService.js":
/*!********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateService.js ***!
  \********************************************************************************************************/
/*! exports provided: StateService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateService", function() { return StateService; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/queue */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/queue.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _path_pathUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../path/pathUtils */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathUtils.js");
/* harmony import */ var _path_pathNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../path/pathNode */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathNode.js");
/* harmony import */ var _transition_transitionService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../transition/transitionService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionService.js");
/* harmony import */ var _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../transition/rejectFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js");
/* harmony import */ var _targetState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./targetState */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js");
/* harmony import */ var _params_param__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../params/param */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js");
/* harmony import */ var _common_glob__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/glob */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/glob.js");
/* harmony import */ var _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../resolve/resolveContext */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolveContext.js");
/* harmony import */ var _hooks_lazyLoad__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../hooks/lazyLoad */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/lazyLoad.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/** @publicapi @module state */ /** */














/**
 * Provides state related service functions
 *
 * This class provides services related to ui-router states.
 * An instance of this class is located on the global [[UIRouter]] object.
 */
var StateService = /** @class */ (function () {
    /** @internalapi */
    function StateService(/** @hidden */ router) {
        this.router = router;
        /** @internalapi */
        this.invalidCallbacks = [];
        /** @hidden */
        this._defaultErrorHandler = function $defaultErrorHandler($error$) {
            if ($error$ instanceof Error && $error$.stack) {
                console.error($error$);
                console.error($error$.stack);
            }
            else if ($error$ instanceof _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"]) {
                console.error($error$.toString());
                if ($error$.detail && $error$.detail.stack)
                    console.error($error$.detail.stack);
            }
            else {
                console.error($error$);
            }
        };
        var getters = ['current', '$current', 'params', 'transition'];
        var boundFns = Object.keys(StateService.prototype).filter(Object(_common_hof__WEBPACK_IMPORTED_MODULE_13__["not"])(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inArray"])(getters)));
        Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["createProxyFunctions"])(Object(_common_hof__WEBPACK_IMPORTED_MODULE_13__["val"])(StateService.prototype), this, Object(_common_hof__WEBPACK_IMPORTED_MODULE_13__["val"])(this), boundFns);
    }
    Object.defineProperty(StateService.prototype, "transition", {
        /**
         * The [[Transition]] currently in progress (or null)
         *
         * This is a passthrough through to [[UIRouterGlobals.transition]]
         */
        get: function () {
            return this.router.globals.transition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateService.prototype, "params", {
        /**
         * The latest successful state parameters
         *
         * This is a passthrough through to [[UIRouterGlobals.params]]
         */
        get: function () {
            return this.router.globals.params;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateService.prototype, "current", {
        /**
         * The current [[StateDeclaration]]
         *
         * This is a passthrough through to [[UIRouterGlobals.current]]
         */
        get: function () {
            return this.router.globals.current;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateService.prototype, "$current", {
        /**
         * The current [[StateObject]]
         *
         * This is a passthrough through to [[UIRouterGlobals.$current]]
         */
        get: function () {
            return this.router.globals.$current;
        },
        enumerable: true,
        configurable: true
    });
    /** @internalapi */
    StateService.prototype.dispose = function () {
        this.defaultErrorHandler(_common_common__WEBPACK_IMPORTED_MODULE_0__["noop"]);
        this.invalidCallbacks = [];
    };
    /**
     * Handler for when [[transitionTo]] is called with an invalid state.
     *
     * Invokes the [[onInvalid]] callbacks, in natural order.
     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.
     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.
     *
     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.
     *
     * @internalapi
     */
    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {
        var _this = this;
        var fromState = _path_pathUtils__WEBPACK_IMPORTED_MODULE_4__["PathUtils"].makeTargetState(this.router.stateRegistry, fromPath);
        var globals = this.router.globals;
        var latestThing = function () { return globals.transitionHistory.peekTail(); };
        var latest = latestThing();
        var callbackQueue = new _common_queue__WEBPACK_IMPORTED_MODULE_2__["Queue"](this.invalidCallbacks.slice());
        var injector = new _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_11__["ResolveContext"](fromPath).injector();
        var checkForRedirect = function (result) {
            if (!(result instanceof _targetState__WEBPACK_IMPORTED_MODULE_8__["TargetState"])) {
                return;
            }
            var target = result;
            // Recreate the TargetState, in case the state is now defined.
            target = _this.target(target.identifier(), target.params(), target.options());
            if (!target.valid()) {
                return _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].invalid(target.error()).toPromise();
            }
            if (latestThing() !== latest) {
                return _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].superseded().toPromise();
            }
            return _this.transitionTo(target.identifier(), target.params(), target.options());
        };
        function invokeNextCallback() {
            var nextCallback = callbackQueue.dequeue();
            if (nextCallback === undefined)
                return _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].invalid(toState.error()).toPromise();
            var callbackResult = _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$q.when(nextCallback(toState, fromState, injector));
            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });
        }
        return invokeNextCallback();
    };
    /**
     * Registers an Invalid State handler
     *
     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]
     * has been called with an invalid state reference parameter
     *
     * Example:
     * ```js
     * stateService.onInvalid(function(to, from, injector) {
     *   if (to.name() === 'foo') {
     *     let lazyLoader = injector.get('LazyLoadService');
     *     return lazyLoader.load('foo')
     *         .then(() => stateService.target('foo'));
     *   }
     * });
     * ```
     *
     * @param {function} callback invoked when the toState is invalid
     *   This function receives the (invalid) toState, the fromState, and an injector.
     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.
     *   If one is returned, it is treated as a redirect.
     *
     * @returns a function which deregisters the callback
     */
    StateService.prototype.onInvalid = function (callback) {
        this.invalidCallbacks.push(callback);
        return function deregisterListener() {
            Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["removeFrom"])(this.invalidCallbacks)(callback);
        }.bind(this);
    };
    /**
     * Reloads the current state
     *
     * A method that force reloads the current state, or a partial state hierarchy.
     * All resolves are re-resolved, and components reinstantiated.
     *
     * #### Example:
     * ```js
     * let app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * ```
     *
     * Note: `reload()` is just an alias for:
     *
     * ```js
     * $state.transitionTo($state.current, $state.params, {
     *   reload: true, inherit: false
     * });
     * ```
     *
     * @param reloadState A state name or a state object.
     *    If present, this state and all its children will be reloaded, but ancestors will not reload.
     *
     * #### Example:
     * ```js
     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'
     * //and current state is 'contacts.detail.item'
     * let app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     //will reload 'contact.detail' and nested 'contact.detail.item' states
     *     $state.reload('contact.detail');
     *   }
     * });
     * ```
     *
     * @returns A promise representing the state of the new transition. See [[StateService.go]]
     */
    StateService.prototype.reload = function (reloadState) {
        return this.transitionTo(this.current, this.params, {
            reload: Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(reloadState) ? reloadState : true,
            inherit: false,
            notify: false,
        });
    };
    /**
     * Transition to a different state and/or parameters
     *
     * Convenience method for transitioning to a new state.
     *
     * `$state.go` calls `$state.transitionTo` internally but automatically sets options to
     * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.
     * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).
     * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters
     * inherit from the current parameter values (because of `inherit: true`).
     *
     * #### Example:
     * ```js
     * let app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * ```
     *
     * @param to Absolute state name, state object, or relative state path (relative to current state).
     *
     * Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to the parent state
     * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state
     * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state
     *
     * @param params A map of the parameters that will be sent to the state, will populate $stateParams.
     *
     *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).
     *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.
     *
     * @param options Transition options
     *
     * @returns {promise} A promise representing the state of the new transition.
     */
    StateService.prototype.go = function (to, params, options) {
        var defautGoOpts = { relative: this.$current, inherit: true };
        var transOpts = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["defaults"])(options, defautGoOpts, _transition_transitionService__WEBPACK_IMPORTED_MODULE_6__["defaultTransOpts"]);
        return this.transitionTo(to, params, transOpts);
    };
    /**
     * Creates a [[TargetState]]
     *
     * This is a factory method for creating a TargetState
     *
     * This may be returned from a Transition Hook to redirect a transition, for example.
     */
    StateService.prototype.target = function (identifier, params, options) {
        if (options === void 0) { options = {}; }
        // If we're reloading, find the state object to reload from
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isObject"])(options.reload) && !options.reload.name)
            throw new Error('Invalid reload state object');
        var reg = this.router.stateRegistry;
        options.reloadState =
            options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);
        if (options.reload && !options.reloadState)
            throw new Error("No such reload state '" + (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(options.reload) ? options.reload : options.reload.name) + "'");
        return new _targetState__WEBPACK_IMPORTED_MODULE_8__["TargetState"](this.router.stateRegistry, identifier, params, options);
    };
    StateService.prototype.getCurrentPath = function () {
        var _this = this;
        var globals = this.router.globals;
        var latestSuccess = globals.successfulTransitions.peekTail();
        var rootPath = function () { return [new _path_pathNode__WEBPACK_IMPORTED_MODULE_5__["PathNode"](_this.router.stateRegistry.root())]; };
        return latestSuccess ? latestSuccess.treeChanges().to : rootPath();
    };
    /**
     * Low-level method for transitioning to a new state.
     *
     * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.
     *
     * #### Example:
     * ```js
     * let app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * ```
     *
     * @param to State name or state object.
     * @param toParams A map of the parameters that will be sent to the state,
     *      will populate $stateParams.
     * @param options Transition options
     *
     * @returns A promise representing the state of the new transition. See [[go]]
     */
    StateService.prototype.transitionTo = function (to, toParams, options) {
        var _this = this;
        if (toParams === void 0) { toParams = {}; }
        if (options === void 0) { options = {}; }
        var router = this.router;
        var globals = router.globals;
        options = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["defaults"])(options, _transition_transitionService__WEBPACK_IMPORTED_MODULE_6__["defaultTransOpts"]);
        var getCurrent = function () { return globals.transition; };
        options = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(options, { current: getCurrent });
        var ref = this.target(to, toParams, options);
        var currentPath = this.getCurrentPath();
        if (!ref.exists())
            return this._handleInvalidTargetState(currentPath, ref);
        if (!ref.valid())
            return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["silentRejection"])(ref.error());
        /**
         * Special handling for Ignored, Aborted, and Redirected transitions
         *
         * The semantics for the transition.run() promise and the StateService.transitionTo()
         * promise differ. For instance, the run() promise may be rejected because it was
         * IGNORED, but the transitionTo() promise is resolved because from the user perspective
         * no error occurred.  Likewise, the transition.run() promise may be rejected because of
         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.
         */
        var rejectedTransitionHandler = function (trans) { return function (error) {
            if (error instanceof _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"]) {
                var isLatest = router.globals.lastStartedTransitionId === trans.$id;
                if (error.type === _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["RejectType"].IGNORED) {
                    isLatest && router.urlRouter.update();
                    // Consider ignored `Transition.run()` as a successful `transitionTo`
                    return _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$q.when(globals.current);
                }
                var detail = error.detail;
                if (error.type === _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["RejectType"].SUPERSEDED && error.redirected && detail instanceof _targetState__WEBPACK_IMPORTED_MODULE_8__["TargetState"]) {
                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully
                    // by returning the promise for the new (redirect) `Transition.run()`.
                    var redirect = trans.redirect(detail);
                    return redirect.run().catch(rejectedTransitionHandler(redirect));
                }
                if (error.type === _transition_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["RejectType"].ABORTED) {
                    isLatest && router.urlRouter.update();
                    return _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$q.reject(error);
                }
            }
            var errorHandler = _this.defaultErrorHandler();
            errorHandler(error);
            return _common_coreservices__WEBPACK_IMPORTED_MODULE_3__["services"].$q.reject(error);
        }; };
        var transition = this.router.transitionService.create(currentPath, ref);
        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));
        Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["silenceUncaughtInPromise"])(transitionToPromise); // issue #2676
        // Return a promise for the transition, which also has the transition object on it.
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(transitionToPromise, { transition: transition });
    };
    /**
     * Checks if the current state *is* the provided state
     *
     * Similar to [[includes]] but only checks for the full state name.
     * If params is supplied then it will be tested for strict equality against the current
     * active params object, so all params must match with none missing and no extras.
     *
     * #### Example:
     * ```js
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     * ```
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * ```html
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * ```
     *
     * @param stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param options An options object. The options are:
     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will
     *     test relative to `options.relative` state (or name).
     *
     * @returns Returns true if it is the state.
     */
    StateService.prototype.is = function (stateOrName, params, options) {
        options = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["defaults"])(options, { relative: this.$current });
        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
        if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(state))
            return undefined;
        if (this.$current !== state)
            return false;
        if (!params)
            return true;
        var schema = state.parameters({ inherit: true, matchingKeys: params });
        return _params_param__WEBPACK_IMPORTED_MODULE_9__["Param"].equals(schema, _params_param__WEBPACK_IMPORTED_MODULE_9__["Param"].values(schema, params), this.params);
    };
    /**
     * Checks if the current state *includes* the provided state
     *
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * #### Example when `$state.$current.name === 'contacts.details.item'`
     * ```js
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     * ```
     *
     * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:
     * ```js
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * ```
     *
     * @param stateOrName A partial name, relative name, glob pattern,
     *   or state object to be searched for within the current state name.
     * @param params A param object, e.g. `{sectionId: section.id}`,
     *   that you'd like to test against the current active state.
     * @param options An options object. The options are:
     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will
     *     test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    StateService.prototype.includes = function (stateOrName, params, options) {
        options = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["defaults"])(options, { relative: this.$current });
        var glob = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(stateOrName) && _common_glob__WEBPACK_IMPORTED_MODULE_10__["Glob"].fromString(stateOrName);
        if (glob) {
            if (!glob.matches(this.$current.name))
                return false;
            stateOrName = this.$current.name;
        }
        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;
        if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(state))
            return undefined;
        if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(include[state.name]))
            return false;
        if (!params)
            return true;
        var schema = state.parameters({ inherit: true, matchingKeys: params });
        return _params_param__WEBPACK_IMPORTED_MODULE_9__["Param"].equals(schema, _params_param__WEBPACK_IMPORTED_MODULE_9__["Param"].values(schema, params), this.params);
    };
    /**
     * Generates a URL for a state and parameters
     *
     * Returns the url for the given state populated with the given params.
     *
     * #### Example:
     * ```js
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * ```
     *
     * @param stateOrName The state name or state object you'd like to generate a url from.
     * @param params An object of parameter values to fill the state's required parameters.
     * @param options Options object. The options are:
     *
     * @returns {string} compiled state url
     */
    StateService.prototype.href = function (stateOrName, params, options) {
        var defaultHrefOpts = {
            lossy: true,
            inherit: true,
            absolute: false,
            relative: this.$current,
        };
        options = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["defaults"])(options, defaultHrefOpts);
        params = params || {};
        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
        if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(state))
            return null;
        if (options.inherit)
            params = this.params.$inherit(params, this.$current, state);
        var nav = state && options.lossy ? state.navigable : state;
        if (!nav || nav.url === undefined || nav.url === null) {
            return null;
        }
        return this.router.urlRouter.href(nav.url, params, { absolute: options.absolute });
    };
    /**
     * Sets or gets the default [[transitionTo]] error handler.
     *
     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.
     * This includes errors caused by resolves and transition hooks.
     *
     * Note:
     * This handler does not receive certain Transition rejections.
     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].
     *
     * The built-in default error handler logs the error to the console.
     *
     * You can provide your own custom handler.
     *
     * #### Example:
     * ```js
     * stateService.defaultErrorHandler(function() {
     *   // Do not log transitionTo errors
     * });
     * ```
     *
     * @param handler a global error handler function
     * @returns the current global error handler
     */
    StateService.prototype.defaultErrorHandler = function (handler) {
        return (this._defaultErrorHandler = handler || this._defaultErrorHandler);
    };
    StateService.prototype.get = function (stateOrName, base) {
        var reg = this.router.stateRegistry;
        if (arguments.length === 0)
            return reg.get();
        return reg.get(stateOrName, base || this.$current);
    };
    /**
     * Lazy loads a state
     *
     * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.
     *
     * @param stateOrName the state that should be lazy loaded
     * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)
     * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.
     * This noop transition is not actually run.
     *
     * @returns a promise to lazy load
     */
    StateService.prototype.lazyLoad = function (stateOrName, transition) {
        var state = this.get(stateOrName);
        if (!state || !state.lazyLoad)
            throw new Error('Can not lazy load ' + stateOrName);
        var currentPath = this.getCurrentPath();
        var target = _path_pathUtils__WEBPACK_IMPORTED_MODULE_4__["PathUtils"].makeTargetState(this.router.stateRegistry, currentPath);
        transition = transition || this.router.transitionService.create(currentPath, target);
        return Object(_hooks_lazyLoad__WEBPACK_IMPORTED_MODULE_12__["lazyLoadState"])(transition, state);
    };
    return StateService;
}());

//# sourceMappingURL=stateService.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js":
/*!*******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js ***!
  \*******************************************************************************************************/
/*! exports provided: TargetState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TargetState", function() { return TargetState; });
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @publicapi @module state */ /** */



/**
 * Encapsulate the target (destination) state/params/options of a [[Transition]].
 *
 * This class is frequently used to redirect a transition to a new destination.
 *
 * See:
 *
 * - [[HookResult]]
 * - [[TransitionHookFn]]
 * - [[TransitionService.onStart]]
 *
 * To create a `TargetState`, use [[StateService.target]].
 *
 * ---
 *
 * This class wraps:
 *
 * 1) an identifier for a state
 * 2) a set of parameters
 * 3) and transition options
 * 4) the registered state object (the [[StateDeclaration]])
 *
 * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can
 * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).
 * The `TargetState` class normalizes those options.
 *
 * A `TargetState` may be valid (the state being targeted exists in the registry)
 * or invalid (the state being targeted is not registered).
 */
var TargetState = /** @class */ (function () {
    /**
     * The TargetState constructor
     *
     * Note: Do not construct a `TargetState` manually.
     * To create a `TargetState`, use the [[StateService.target]] factory method.
     *
     * @param _stateRegistry The StateRegistry to use to look up the _definition
     * @param _identifier An identifier for a state.
     *    Either a fully-qualified state name, or the object used to define the state.
     * @param _params Parameters for the target state
     * @param _options Transition options.
     *
     * @internalapi
     */
    function TargetState(_stateRegistry, _identifier, _params, _options) {
        this._stateRegistry = _stateRegistry;
        this._identifier = _identifier;
        this._identifier = _identifier;
        this._params = Object(_common__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, _params || {});
        this._options = Object(_common__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, _options || {});
        this._definition = _stateRegistry.matcher.find(_identifier, this._options.relative);
    }
    /** The name of the state this object targets */
    TargetState.prototype.name = function () {
        return (this._definition && this._definition.name) || this._identifier;
    };
    /** The identifier used when creating this TargetState */
    TargetState.prototype.identifier = function () {
        return this._identifier;
    };
    /** The target parameter values */
    TargetState.prototype.params = function () {
        return this._params;
    };
    /** The internal state object (if it was found) */
    TargetState.prototype.$state = function () {
        return this._definition;
    };
    /** The internal state declaration (if it was found) */
    TargetState.prototype.state = function () {
        return this._definition && this._definition.self;
    };
    /** The target options */
    TargetState.prototype.options = function () {
        return this._options;
    };
    /** True if the target state was found */
    TargetState.prototype.exists = function () {
        return !!(this._definition && this._definition.self);
    };
    /** True if the object is valid */
    TargetState.prototype.valid = function () {
        return !this.error();
    };
    /** If the object is invalid, returns the reason why */
    TargetState.prototype.error = function () {
        var base = this.options().relative;
        if (!this._definition && !!base) {
            var stateName = base.name ? base.name : base;
            return "Could not resolve '" + this.name() + "' from state '" + stateName + "'";
        }
        if (!this._definition)
            return "No such state '" + this.name() + "'";
        if (!this._definition.self)
            return "State '" + this.name() + "' has an invalid definition";
    };
    TargetState.prototype.toString = function () {
        return "'" + this.name() + "'" + Object(_common_strings__WEBPACK_IMPORTED_MODULE_1__["stringify"])(this.params());
    };
    /**
     * Returns a copy of this TargetState which targets a different state.
     * The new TargetState has the same parameter values and transition options.
     *
     * @param state The new state that should be targeted
     */
    TargetState.prototype.withState = function (state) {
        return new TargetState(this._stateRegistry, state, this._params, this._options);
    };
    /**
     * Returns a copy of this TargetState, using the specified parameter values.
     *
     * @param params the new parameter values to use
     * @param replace When false (default) the new parameter values will be merged with the current values.
     *                When true the parameter values will be used instead of the current values.
     */
    TargetState.prototype.withParams = function (params, replace) {
        if (replace === void 0) { replace = false; }
        var newParams = replace ? params : Object(_common__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, this._params, params);
        return new TargetState(this._stateRegistry, this._identifier, newParams, this._options);
    };
    /**
     * Returns a copy of this TargetState, using the specified Transition Options.
     *
     * @param options the new options to use
     * @param replace When false (default) the new options will be merged with the current options.
     *                When true the options will be used instead of the current options.
     */
    TargetState.prototype.withOptions = function (options, replace) {
        if (replace === void 0) { replace = false; }
        var newOpts = replace ? options : Object(_common__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, this._options, options);
        return new TargetState(this._stateRegistry, this._identifier, this._params, newOpts);
    };
    /** Returns true if the object has a state property that might be a state or state name */
    TargetState.isDef = function (obj) { return obj && obj.state && (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isString"])(obj.state) || Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isString"])(obj.state.name)); };
    return TargetState;
}());

//# sourceMappingURL=targetState.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookBuilder.js":
/*!************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookBuilder.js ***!
  \************************************************************************************************************/
/*! exports provided: HookBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HookBuilder", function() { return HookBuilder; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js");
/* harmony import */ var _transitionHook__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transitionHook */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js");
/** @publicapi @module transition */ /** */




/**
 * This class returns applicable TransitionHooks for a specific Transition instance.
 *
 * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.
 * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is
 * determined by the type of hook)
 *
 * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.
 *
 * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder
 * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private
 * in the Transition class, so we must also provide the Transition's _treeChanges)
 *
 */
var HookBuilder = /** @class */ (function () {
    function HookBuilder(transition) {
        this.transition = transition;
    }
    HookBuilder.prototype.buildHooksForPhase = function (phase) {
        var _this = this;
        var $transitions = this.transition.router.transitionService;
        return $transitions._pluginapi
            ._getEvents(phase)
            .map(function (type) { return _this.buildHooks(type); })
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .filter(_common_common__WEBPACK_IMPORTED_MODULE_0__["identity"]);
    };
    /**
     * Returns an array of newly built TransitionHook objects.
     *
     * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].
     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)
     * - For each of the [[PathNode]]s, creates a TransitionHook
     *
     * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.
     */
    HookBuilder.prototype.buildHooks = function (hookType) {
        var transition = this.transition;
        var treeChanges = transition.treeChanges();
        // Find all the matching registered hooks for a given hook type
        var matchingHooks = this.getMatchingHooks(hookType, treeChanges);
        if (!matchingHooks)
            return [];
        var baseHookOptions = {
            transition: transition,
            current: transition.options().current,
        };
        var makeTransitionHooks = function (hook) {
            // Fetch the Nodes that caused this hook to match.
            var matches = hook.matches(treeChanges);
            // Select the PathNode[] that will be used as TransitionHook context objects
            var matchingNodes = matches[hookType.criteriaMatchPath.name];
            // Return an array of HookTuples
            return matchingNodes.map(function (node) {
                var _options = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({
                    bind: hook.bind,
                    traceData: { hookType: hookType.name, context: node },
                }, baseHookOptions);
                var state = hookType.criteriaMatchPath.scope === _interface__WEBPACK_IMPORTED_MODULE_2__["TransitionHookScope"].STATE ? node.state.self : null;
                var transitionHook = new _transitionHook__WEBPACK_IMPORTED_MODULE_3__["TransitionHook"](transition, state, hook, _options);
                return { hook: hook, node: node, transitionHook: transitionHook };
            });
        };
        return matchingHooks
            .map(makeTransitionHooks)
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .sort(tupleSort(hookType.reverseSort))
            .map(function (tuple) { return tuple.transitionHook; });
    };
    /**
     * Finds all RegisteredHooks from:
     * - The Transition object instance hook registry
     * - The TransitionService ($transitions) global hook registry
     *
     * which matched:
     * - the eventType
     * - the matchCriteria (to, from, exiting, retained, entering)
     *
     * @returns an array of matched [[RegisteredHook]]s
     */
    HookBuilder.prototype.getMatchingHooks = function (hookType, treeChanges) {
        var isCreate = hookType.hookPhase === _interface__WEBPACK_IMPORTED_MODULE_2__["TransitionHookPhase"].CREATE;
        // Instance and Global hook registries
        var $transitions = this.transition.router.transitionService;
        var registries = isCreate ? [$transitions] : [this.transition, $transitions];
        return registries
            .map(function (reg) { return reg.getHooks(hookType.name); }) // Get named hooks from registries
            .filter(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["assertPredicate"])(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isArray"], "broken event named: " + hookType.name)) // Sanity check
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], []) // Un-nest RegisteredHook[][] to RegisteredHook[] array
            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria
    };
    return HookBuilder;
}());

/**
 * A factory for a sort function for HookTuples.
 *
 * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares
 * the EventHook priority.
 *
 * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth
 * @returns a tuple sort function
 */
function tupleSort(reverseDepthSort) {
    if (reverseDepthSort === void 0) { reverseDepthSort = false; }
    return function nodeDepthThenPriority(l, r) {
        var factor = reverseDepthSort ? -1 : 1;
        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;
        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;
    };
}
//# sourceMappingURL=hookBuilder.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookRegistry.js":
/*!*************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookRegistry.js ***!
  \*************************************************************************************************************/
/*! exports provided: matchState, RegisteredHook, makeEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchState", function() { return matchState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegisteredHook", function() { return RegisteredHook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeEvent", function() { return makeEvent; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js");
/** @publicapi @module transition */ /** */


/**
 * Determines if the given state matches the matchCriteria
 *
 * @hidden
 *
 * @param state a State Object to test against
 * @param criterion
 * - If a string, matchState uses the string as a glob-matcher against the state name
 * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name
 *   and returns a positive match if any of the globs match.
 * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.
 * @returns {boolean}
 */
function matchState(state, criterion) {
    var toMatch = Object(_common__WEBPACK_IMPORTED_MODULE_0__["isString"])(criterion) ? [criterion] : criterion;
    function matchGlobs(_state) {
        var globStrings = toMatch;
        for (var i = 0; i < globStrings.length; i++) {
            var glob = new _common__WEBPACK_IMPORTED_MODULE_0__["Glob"](globStrings[i]);
            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {
                return true;
            }
        }
        return false;
    }
    var matchFn = (Object(_common__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(toMatch) ? toMatch : matchGlobs);
    return !!matchFn(state);
}
/**
 * @internalapi
 * The registration data for a registered transition hook
 */
var RegisteredHook = /** @class */ (function () {
    function RegisteredHook(tranSvc, eventType, callback, matchCriteria, removeHookFromRegistry, options) {
        if (options === void 0) { options = {}; }
        this.tranSvc = tranSvc;
        this.eventType = eventType;
        this.callback = callback;
        this.matchCriteria = matchCriteria;
        this.removeHookFromRegistry = removeHookFromRegistry;
        this.invokeCount = 0;
        this._deregistered = false;
        this.priority = options.priority || 0;
        this.bind = options.bind || null;
        this.invokeLimit = options.invokeLimit;
    }
    /**
     * Gets the matching [[PathNode]]s
     *
     * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing
     * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.
     *
     * Returning `null` is significant to distinguish between the default
     * "match-all criterion value" of `true` compared to a `() => true` function,
     * when the nodes is an empty array.
     *
     * This is useful to allow a transition match criteria of `entering: true`
     * to still match a transition, even when `entering === []`.  Contrast that
     * with `entering: (state) => true` which only matches when a state is actually
     * being entered.
     */
    RegisteredHook.prototype._matchingNodes = function (nodes, criterion) {
        if (criterion === true)
            return nodes;
        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });
        return matching.length ? matching : null;
    };
    /**
     * Gets the default match criteria (all `true`)
     *
     * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:
     *
     * ```js
     * {
     *   to: true,
     *   from: true,
     *   entering: true,
     *   exiting: true,
     *   retained: true,
     * }
     */
    RegisteredHook.prototype._getDefaultMatchCriteria = function () {
        return Object(_common__WEBPACK_IMPORTED_MODULE_0__["mapObj"])(this.tranSvc._pluginapi._getPathTypes(), function () { return true; });
    };
    /**
     * Gets matching nodes as [[IMatchingNodes]]
     *
     * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:
     *
     * ```js
     * let matches: IMatchingNodes = {
     *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),
     *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),
     *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),
     *   retained: _matchingNodes(treeChanges.retained,     mc.retained),
     *   entering: _matchingNodes(treeChanges.entering,     mc.entering),
     * };
     * ```
     */
    RegisteredHook.prototype._getMatchingNodes = function (treeChanges) {
        var _this = this;
        var criteria = Object(_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this._getDefaultMatchCriteria(), this.matchCriteria);
        var paths = Object(_common__WEBPACK_IMPORTED_MODULE_0__["values"])(this.tranSvc._pluginapi._getPathTypes());
        return paths.reduce(function (mn, pathtype) {
            // STATE scope criteria matches against every node in the path.
            // TRANSITION scope criteria matches against only the last node in the path
            var isStateHook = pathtype.scope === _interface__WEBPACK_IMPORTED_MODULE_1__["TransitionHookScope"].STATE;
            var path = treeChanges[pathtype.name] || [];
            var nodes = isStateHook ? path : [Object(_common__WEBPACK_IMPORTED_MODULE_0__["tail"])(path)];
            mn[pathtype.name] = _this._matchingNodes(nodes, criteria[pathtype.name]);
            return mn;
        }, {});
    };
    /**
     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]
     *
     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values
     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)
     */
    RegisteredHook.prototype.matches = function (treeChanges) {
        var matches = this._getMatchingNodes(treeChanges);
        // Check if all the criteria matched the TreeChanges object
        var allMatched = Object(_common__WEBPACK_IMPORTED_MODULE_0__["values"])(matches).every(_common__WEBPACK_IMPORTED_MODULE_0__["identity"]);
        return allMatched ? matches : null;
    };
    RegisteredHook.prototype.deregister = function () {
        this.removeHookFromRegistry(this);
        this._deregistered = true;
    };
    return RegisteredHook;
}());

/** @hidden Return a registration function of the requested type. */
function makeEvent(registry, transitionService, eventType) {
    // Create the object which holds the registered transition hooks.
    var _registeredHooks = (registry._registeredHooks = registry._registeredHooks || {});
    var hooks = (_registeredHooks[eventType.name] = []);
    var removeHookFn = Object(_common__WEBPACK_IMPORTED_MODULE_0__["removeFrom"])(hooks);
    // Create hook registration function on the IHookRegistry for the event
    registry[eventType.name] = hookRegistrationFn;
    function hookRegistrationFn(matchObject, callback, options) {
        if (options === void 0) { options = {}; }
        var registeredHook = new RegisteredHook(transitionService, eventType, callback, matchObject, removeHookFn, options);
        hooks.push(registeredHook);
        return registeredHook.deregister.bind(registeredHook);
    }
    return hookRegistrationFn;
}
//# sourceMappingURL=hookRegistry.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/index.js":
/*!******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/index.js ***!
  \******************************************************************************************************/
/*! exports provided: TransitionHookPhase, TransitionHookScope, HookBuilder, matchState, RegisteredHook, makeEvent, RejectType, Rejection, Transition, TransitionHook, TransitionEventType, defaultTransOpts, TransitionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHookPhase", function() { return _interface__WEBPACK_IMPORTED_MODULE_0__["TransitionHookPhase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHookScope", function() { return _interface__WEBPACK_IMPORTED_MODULE_0__["TransitionHookScope"]; });

/* harmony import */ var _hookBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hookBuilder */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HookBuilder", function() { return _hookBuilder__WEBPACK_IMPORTED_MODULE_1__["HookBuilder"]; });

/* harmony import */ var _hookRegistry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hookRegistry */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookRegistry.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matchState", function() { return _hookRegistry__WEBPACK_IMPORTED_MODULE_2__["matchState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RegisteredHook", function() { return _hookRegistry__WEBPACK_IMPORTED_MODULE_2__["RegisteredHook"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeEvent", function() { return _hookRegistry__WEBPACK_IMPORTED_MODULE_2__["makeEvent"]; });

/* harmony import */ var _rejectFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rejectFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RejectType", function() { return _rejectFactory__WEBPACK_IMPORTED_MODULE_3__["RejectType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rejection", function() { return _rejectFactory__WEBPACK_IMPORTED_MODULE_3__["Rejection"]; });

/* harmony import */ var _transition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transition */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transition.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transition", function() { return _transition__WEBPACK_IMPORTED_MODULE_4__["Transition"]; });

/* harmony import */ var _transitionHook__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transitionHook */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionHook", function() { return _transitionHook__WEBPACK_IMPORTED_MODULE_5__["TransitionHook"]; });

/* harmony import */ var _transitionEventType__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transitionEventType */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionEventType.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionEventType", function() { return _transitionEventType__WEBPACK_IMPORTED_MODULE_6__["TransitionEventType"]; });

/* harmony import */ var _transitionService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transitionService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultTransOpts", function() { return _transitionService__WEBPACK_IMPORTED_MODULE_7__["defaultTransOpts"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransitionService", function() { return _transitionService__WEBPACK_IMPORTED_MODULE_7__["TransitionService"]; });

/**
 * # Transition subsystem
 *
 * This module contains APIs related to a Transition.
 *
 * See:
 * - [[TransitionService]]
 * - [[Transition]]
 * - [[HookFn]], [[TransitionHookFn]], [[TransitionStateHookFn]], [[HookMatchCriteria]], [[HookResult]]
 *
 * @preferred @publicapi @module transition
 */ /** */








//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js":
/*!**********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js ***!
  \**********************************************************************************************************/
/*! exports provided: TransitionHookPhase, TransitionHookScope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionHookPhase", function() { return TransitionHookPhase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionHookScope", function() { return TransitionHookScope; });
var TransitionHookPhase;
(function (TransitionHookPhase) {
    TransitionHookPhase[TransitionHookPhase["CREATE"] = 0] = "CREATE";
    TransitionHookPhase[TransitionHookPhase["BEFORE"] = 1] = "BEFORE";
    TransitionHookPhase[TransitionHookPhase["RUN"] = 2] = "RUN";
    TransitionHookPhase[TransitionHookPhase["SUCCESS"] = 3] = "SUCCESS";
    TransitionHookPhase[TransitionHookPhase["ERROR"] = 4] = "ERROR";
})(TransitionHookPhase || (TransitionHookPhase = {}));
var TransitionHookScope;
(function (TransitionHookScope) {
    TransitionHookScope[TransitionHookScope["TRANSITION"] = 0] = "TRANSITION";
    TransitionHookScope[TransitionHookScope["STATE"] = 1] = "STATE";
})(TransitionHookScope || (TransitionHookScope = {}));

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js":
/*!**************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js ***!
  \**************************************************************************************************************/
/*! exports provided: RejectType, Rejection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RejectType", function() { return RejectType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rejection", function() { return Rejection; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/** @publicapi @module transition */ /** */




var RejectType;
(function (RejectType) {
    /**
     * A new transition superseded this one.
     *
     * While this transition was running, a new transition started.
     * This transition is cancelled because it was superseded by new transition.
     */
    RejectType[RejectType["SUPERSEDED"] = 2] = "SUPERSEDED";
    /**
     * The transition was aborted
     *
     * The transition was aborted by a hook which returned `false`
     */
    RejectType[RejectType["ABORTED"] = 3] = "ABORTED";
    /**
     * The transition was invalid
     *
     * The transition was never started because it was invalid
     */
    RejectType[RejectType["INVALID"] = 4] = "INVALID";
    /**
     * The transition was ignored
     *
     * The transition was ignored because it would have no effect.
     *
     * Either:
     *
     * - The transition is targeting the current state and parameter values
     * - The transition is targeting the same state and parameter values as the currently running transition.
     */
    RejectType[RejectType["IGNORED"] = 5] = "IGNORED";
    /**
     * The transition errored.
     *
     * This generally means a hook threw an error or returned a rejected promise
     */
    RejectType[RejectType["ERROR"] = 6] = "ERROR";
})(RejectType || (RejectType = {}));

/** @hidden */
var id = 0;
var Rejection = /** @class */ (function () {
    function Rejection(type, message, detail) {
        /** @hidden */
        this.$id = id++;
        this.type = type;
        this.message = message;
        this.detail = detail;
    }
    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */
    Rejection.isRejectionPromise = function (obj) {
        return obj && typeof obj.then === 'function' && Object(_common_hof__WEBPACK_IMPORTED_MODULE_2__["is"])(Rejection)(obj._transitionRejection);
    };
    /** Returns a Rejection due to transition superseded */
    Rejection.superseded = function (detail, options) {
        var message = 'The transition has been superseded by a different transition';
        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);
        if (options && options.redirected) {
            rejection.redirected = true;
        }
        return rejection;
    };
    /** Returns a Rejection due to redirected transition */
    Rejection.redirected = function (detail) {
        return Rejection.superseded(detail, { redirected: true });
    };
    /** Returns a Rejection due to invalid transition */
    Rejection.invalid = function (detail) {
        var message = 'This transition is invalid';
        return new Rejection(RejectType.INVALID, message, detail);
    };
    /** Returns a Rejection due to ignored transition */
    Rejection.ignored = function (detail) {
        var message = 'The transition was ignored';
        return new Rejection(RejectType.IGNORED, message, detail);
    };
    /** Returns a Rejection due to aborted transition */
    Rejection.aborted = function (detail) {
        var message = 'The transition has been aborted';
        return new Rejection(RejectType.ABORTED, message, detail);
    };
    /** Returns a Rejection due to aborted transition */
    Rejection.errored = function (detail) {
        var message = 'The transition errored';
        return new Rejection(RejectType.ERROR, message, detail);
    };
    /**
     * Returns a Rejection
     *
     * Normalizes a value as a Rejection.
     * If the value is already a Rejection, returns it.
     * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).
     *
     * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.
     */
    Rejection.normalize = function (detail) {
        return Object(_common_hof__WEBPACK_IMPORTED_MODULE_2__["is"])(Rejection)(detail) ? detail : Rejection.errored(detail);
    };
    Rejection.prototype.toString = function () {
        var detailString = function (d) { return (d && d.toString !== Object.prototype.toString ? d.toString() : Object(_common_strings__WEBPACK_IMPORTED_MODULE_1__["stringify"])(d)); };
        var detail = detailString(this.detail);
        var _a = this, $id = _a.$id, type = _a.type, message = _a.message;
        return "Transition Rejection($id: " + $id + " type: " + type + ", message: " + message + ", detail: " + detail + ")";
    };
    Rejection.prototype.toPromise = function () {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["silentRejection"])(this), { _transitionRejection: this });
    };
    return Rejection;
}());

//# sourceMappingURL=rejectFactory.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transition.js":
/*!***********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transition.js ***!
  \***********************************************************************************************************/
/*! exports provided: Transition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transition", function() { return Transition; });
/* harmony import */ var _common_trace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js");
/* harmony import */ var _transitionHook__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transitionHook */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js");
/* harmony import */ var _hookRegistry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hookRegistry */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookRegistry.js");
/* harmony import */ var _hookBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hookBuilder */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookBuilder.js");
/* harmony import */ var _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../path/pathUtils */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathUtils.js");
/* harmony import */ var _params_param__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../params/param */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js");
/* harmony import */ var _resolve_resolvable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../resolve/resolvable */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolvable.js");
/* harmony import */ var _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../resolve/resolveContext */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolveContext.js");
/* harmony import */ var _rejectFactory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./rejectFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @publicapi @module transition */ /** */






 // has or is using









/** @hidden */
var stateSelf = Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["prop"])('self');
/**
 * Represents a transition between two states.
 *
 * When navigating to a state, we are transitioning **from** the current state **to** the new state.
 *
 * This object contains all contextual information about the to/from states, parameters, resolves.
 * It has information about all states being entered and exited as a result of the transition.
 */
var Transition = /** @class */ (function () {
    /**
     * Creates a new Transition object.
     *
     * If the target state is not valid, an error is thrown.
     *
     * @internalapi
     *
     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`
     *        encapsulates the "from state".
     * @param targetState The target state and parameters being transitioned to (also, the transition options)
     * @param router The [[UIRouter]] instance
     */
    function Transition(fromPath, targetState, router) {
        var _this = this;
        /** @hidden */
        this._deferred = _common_coreservices__WEBPACK_IMPORTED_MODULE_1__["services"].$q.defer();
        /**
         * This promise is resolved or rejected based on the outcome of the Transition.
         *
         * When the transition is successful, the promise is resolved
         * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error
         */
        this.promise = this._deferred.promise;
        /** @hidden Holds the hook registration functions such as those passed to Transition.onStart() */
        this._registeredHooks = {};
        /** @hidden */
        this._hookBuilder = new _hookBuilder__WEBPACK_IMPORTED_MODULE_9__["HookBuilder"](this);
        /** Checks if this transition is currently active/running. */
        this.isActive = function () { return _this.router.globals.transition === _this; };
        this.router = router;
        this._targetState = targetState;
        if (!targetState.valid()) {
            throw new Error(targetState.error());
        }
        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.
        this._options = Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["extend"])({ current: Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["val"])(this) }, targetState.options());
        this.$id = router.transitionService._transitionCount++;
        var toPath = _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__["PathUtils"].buildToPath(fromPath, targetState);
        this._treeChanges = _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__["PathUtils"].treeChanges(fromPath, toPath, this._options.reloadState);
        this.createTransitionHookRegFns();
        var onCreateHooks = this._hookBuilder.buildHooksForPhase(_interface__WEBPACK_IMPORTED_MODULE_6__["TransitionHookPhase"].CREATE);
        _transitionHook__WEBPACK_IMPORTED_MODULE_7__["TransitionHook"].invokeHooks(onCreateHooks, function () { return null; });
        this.applyViewConfigs(router);
    }
    /** @hidden */
    Transition.prototype.onBefore = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    Transition.prototype.onStart = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    Transition.prototype.onExit = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    Transition.prototype.onRetain = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    Transition.prototype.onEnter = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    Transition.prototype.onFinish = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    Transition.prototype.onSuccess = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    Transition.prototype.onError = function (criteria, callback, options) {
        return;
    };
    /** @hidden
     * Creates the transition-level hook registration functions
     * (which can then be used to register hooks)
     */
    Transition.prototype.createTransitionHookRegFns = function () {
        var _this = this;
        this.router.transitionService._pluginapi
            ._getEvents()
            .filter(function (type) { return type.hookPhase !== _interface__WEBPACK_IMPORTED_MODULE_6__["TransitionHookPhase"].CREATE; })
            .forEach(function (type) { return Object(_hookRegistry__WEBPACK_IMPORTED_MODULE_8__["makeEvent"])(_this, _this.router.transitionService, type); });
    };
    /** @internalapi */
    Transition.prototype.getHooks = function (hookName) {
        return this._registeredHooks[hookName];
    };
    Transition.prototype.applyViewConfigs = function (router) {
        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });
        _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__["PathUtils"].applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);
    };
    /**
     * @internalapi
     *
     * @returns the internal from [State] object
     */
    Transition.prototype.$from = function () {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["tail"])(this._treeChanges.from).state;
    };
    /**
     * @internalapi
     *
     * @returns the internal to [State] object
     */
    Transition.prototype.$to = function () {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["tail"])(this._treeChanges.to).state;
    };
    /**
     * Returns the "from state"
     *
     * Returns the state that the transition is coming *from*.
     *
     * @returns The state declaration object for the Transition's ("from state").
     */
    Transition.prototype.from = function () {
        return this.$from().self;
    };
    /**
     * Returns the "to state"
     *
     * Returns the state that the transition is going *to*.
     *
     * @returns The state declaration object for the Transition's target state ("to state").
     */
    Transition.prototype.to = function () {
        return this.$to().self;
    };
    /**
     * Gets the Target State
     *
     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.
     *
     * @returns the [[TargetState]] of this Transition
     */
    Transition.prototype.targetState = function () {
        return this._targetState;
    };
    /**
     * Determines whether two transitions are equivalent.
     * @deprecated
     */
    Transition.prototype.is = function (compare) {
        if (compare instanceof Transition) {
            // TODO: Also compare parameters
            return this.is({ to: compare.$to().name, from: compare.$from().name });
        }
        return !((compare.to && !Object(_hookRegistry__WEBPACK_IMPORTED_MODULE_8__["matchState"])(this.$to(), compare.to)) ||
            (compare.from && !Object(_hookRegistry__WEBPACK_IMPORTED_MODULE_8__["matchState"])(this.$from(), compare.from)));
    };
    Transition.prototype.params = function (pathname) {
        if (pathname === void 0) { pathname = 'to'; }
        return Object.freeze(this._treeChanges[pathname].map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["prop"])('paramValues')).reduce(_common_common__WEBPACK_IMPORTED_MODULE_3__["mergeR"], {}));
    };
    Transition.prototype.paramsChanged = function () {
        var fromParams = this.params('from');
        var toParams = this.params('to');
        // All the parameters declared on both the "to" and "from" paths
        var allParamDescriptors = []
            .concat(this._treeChanges.to)
            .concat(this._treeChanges.from)
            .map(function (pathNode) { return pathNode.paramSchema; })
            .reduce(_common__WEBPACK_IMPORTED_MODULE_15__["flattenR"], [])
            .reduce(_common__WEBPACK_IMPORTED_MODULE_15__["uniqR"], []);
        var changedParamDescriptors = _params_param__WEBPACK_IMPORTED_MODULE_11__["Param"].changed(allParamDescriptors, fromParams, toParams);
        return changedParamDescriptors.reduce(function (changedValues, descriptor) {
            changedValues[descriptor.id] = toParams[descriptor.id];
            return changedValues;
        }, {});
    };
    /**
     * Creates a [[UIInjector]] Dependency Injector
     *
     * Returns a Dependency Injector for the Transition's target state (to state).
     * The injector provides resolve values which the target state has access to.
     *
     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).
     *
     * #### Example:
     * ```js
     * .onEnter({ entering: 'myState' }, trans => {
     *   var myResolveValue = trans.injector().get('myResolve');
     *   // Inject a global service from the global/native injector (if it exists)
     *   var MyService = trans.injector().get('MyService');
     * })
     * ```
     *
     * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.
     * You can use [[UIInjector.getAsync]] to get a promise for the data.
     * #### Example:
     * ```js
     * .onBefore({}, trans => {
     *   return trans.injector().getAsync('myResolve').then(myResolveValue =>
     *     return myResolveValue !== 'ABORT';
     *   });
     * });
     * ```
     *
     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.
     * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.
     * #### Example:
     * ```js
     * .onEnter({ to: 'foo.bar' }, trans => {
     *   // returns result of `foo` state's `myResolve` resolve
     *   // even though `foo.bar` also has a `myResolve` resolve
     *   var fooData = trans.injector('foo').get('myResolve');
     * });
     * ```
     *
     * If you need resolve data from the exiting states, pass `'from'` as `pathName`.
     * The resolve data from the `from` path will be returned.
     * #### Example:
     * ```js
     * .onExit({ exiting: 'foo.bar' }, trans => {
     *   // Gets the resolve value of `myResolve` from the state being exited
     *   var fooData = trans.injector(null, 'from').get('myResolve');
     * });
     * ```
     *
     *
     * @param state Limits the resolves provided to only the resolves the provided state has access to.
     * @param pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.
     *
     * @returns a [[UIInjector]]
     */
    Transition.prototype.injector = function (state, pathName) {
        if (pathName === void 0) { pathName = 'to'; }
        var path = this._treeChanges[pathName];
        if (state)
            path = _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__["PathUtils"].subPath(path, function (node) { return node.state === state || node.state.name === state; });
        return new _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_13__["ResolveContext"](path).injector();
    };
    /**
     * Gets all available resolve tokens (keys)
     *
     * This method can be used in conjunction with [[injector]] to inspect the resolve values
     * available to the Transition.
     *
     * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states
     * in the Transition's [[TreeChanges.to]] path.
     *
     * #### Example:
     * This example logs all resolve values
     * ```js
     * let tokens = trans.getResolveTokens();
     * tokens.forEach(token => console.log(token + " = " + trans.injector().get(token)));
     * ```
     *
     * #### Example:
     * This example creates promises for each resolve value.
     * This triggers fetches of resolves (if any have not yet been fetched).
     * When all promises have all settled, it logs the resolve values.
     * ```js
     * let tokens = trans.getResolveTokens();
     * let promise = tokens.map(token => trans.injector().getAsync(token));
     * Promise.all(promises).then(values => console.log("Resolved values: " + values));
     * ```
     *
     * Note: Angular 1 users whould use `$q.all()`
     *
     * @param pathname resolve context's path name (e.g., `to` or `from`)
     *
     * @returns an array of resolve tokens (keys)
     */
    Transition.prototype.getResolveTokens = function (pathname) {
        if (pathname === void 0) { pathname = 'to'; }
        return new _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_13__["ResolveContext"](this._treeChanges[pathname]).getTokens();
    };
    /**
     * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.
     *
     * Allows a transition hook to dynamically add a Resolvable to this Transition.
     *
     * Use the [[Transition.injector]] to retrieve the resolved data in subsequent hooks ([[UIInjector.get]]).
     *
     * If a `state` argument is provided, the Resolvable is processed when that state is being entered.
     * If no `state` is provided then the root state is used.
     * If the given `state` has already been entered, the Resolvable is processed when any child state is entered.
     * If no child states will be entered, the Resolvable is processed during the `onFinish` phase of the Transition.
     *
     * The `state` argument also scopes the resolved data.
     * The resolved data is available from the injector for that `state` and any children states.
     *
     * #### Example:
     * ```js
     * transitionService.onBefore({}, transition => {
     *   transition.addResolvable({
     *     token: 'myResolve',
     *     deps: ['MyService'],
     *     resolveFn: myService => myService.getData()
     *   });
     * });
     * ```
     *
     * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])
     * @param state the state in the "to path" which should receive the new resolve (otherwise, the root state)
     */
    Transition.prototype.addResolvable = function (resolvable, state) {
        if (state === void 0) { state = ''; }
        resolvable = Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["is"])(_resolve_resolvable__WEBPACK_IMPORTED_MODULE_12__["Resolvable"])(resolvable) ? resolvable : new _resolve_resolvable__WEBPACK_IMPORTED_MODULE_12__["Resolvable"](resolvable);
        var stateName = typeof state === 'string' ? state : state.name;
        var topath = this._treeChanges.to;
        var targetNode = Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["find"])(topath, function (node) { return node.state.name === stateName; });
        var resolveContext = new _resolve_resolveContext__WEBPACK_IMPORTED_MODULE_13__["ResolveContext"](topath);
        resolveContext.addResolvables([resolvable], targetNode.state);
    };
    /**
     * Gets the transition from which this transition was redirected.
     *
     * If the current transition is a redirect, this method returns the transition that was redirected.
     *
     * #### Example:
     * ```js
     * let transitionA = $state.go('A').transition
     * transitionA.onStart({}, () => $state.target('B'));
     * $transitions.onSuccess({ to: 'B' }, (trans) => {
     *   trans.to().name === 'B'; // true
     *   trans.redirectedFrom() === transitionA; // true
     * });
     * ```
     *
     * @returns The previous Transition, or null if this Transition is not the result of a redirection
     */
    Transition.prototype.redirectedFrom = function () {
        return this._options.redirectedFrom || null;
    };
    /**
     * Gets the original transition in a redirect chain
     *
     * A transition might belong to a long chain of multiple redirects.
     * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.
     *
     * #### Example:
     * ```js
     * // states
     * registry.register({ name: 'A', redirectTo: 'B' });
     * registry.register({ name: 'B', redirectTo: 'C' });
     * registry.register({ name: 'C', redirectTo: 'D' });
     * registry.register({ name: 'D' });
     *
     * let transitionA = $state.go('A').transition
     *
     * $transitions.onSuccess({ to: 'D' }, (trans) => {
     *   trans.to().name === 'D'; // true
     *   trans.redirectedFrom().to().name === 'C'; // true
     *   trans.originalTransition() === transitionA; // true
     *   trans.originalTransition().to().name === 'A'; // true
     * });
     * ```
     *
     * @returns The original Transition that started a redirect chain
     */
    Transition.prototype.originalTransition = function () {
        var rf = this.redirectedFrom();
        return (rf && rf.originalTransition()) || this;
    };
    /**
     * Get the transition options
     *
     * @returns the options for this Transition.
     */
    Transition.prototype.options = function () {
        return this._options;
    };
    /**
     * Gets the states being entered.
     *
     * @returns an array of states that will be entered during this transition.
     */
    Transition.prototype.entering = function () {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["map"])(this._treeChanges.entering, Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["prop"])('state')).map(stateSelf);
    };
    /**
     * Gets the states being exited.
     *
     * @returns an array of states that will be exited during this transition.
     */
    Transition.prototype.exiting = function () {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["map"])(this._treeChanges.exiting, Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["prop"])('state'))
            .map(stateSelf)
            .reverse();
    };
    /**
     * Gets the states being retained.
     *
     * @returns an array of states that are already entered from a previous Transition, that will not be
     *    exited during this Transition
     */
    Transition.prototype.retained = function () {
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["map"])(this._treeChanges.retained, Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["prop"])('state')).map(stateSelf);
    };
    /**
     * Get the [[ViewConfig]]s associated with this Transition
     *
     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.
     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., "to" or "entering").
     *
     * @param pathname the name of the path to fetch views for:
     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
     * @param state If provided, only returns the `ViewConfig`s for a single state in the path
     *
     * @returns a list of ViewConfig objects for the given path.
     */
    Transition.prototype.views = function (pathname, state) {
        if (pathname === void 0) { pathname = 'entering'; }
        var path = this._treeChanges[pathname];
        path = !state ? path : path.filter(Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["propEq"])('state', state));
        return path
            .map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["prop"])('views'))
            .filter(_common_common__WEBPACK_IMPORTED_MODULE_3__["identity"])
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_3__["unnestR"], []);
    };
    Transition.prototype.treeChanges = function (pathname) {
        return pathname ? this._treeChanges[pathname] : this._treeChanges;
    };
    /**
     * Creates a new transition that is a redirection of the current one.
     *
     * This transition can be returned from a [[TransitionService]] hook to
     * redirect a transition to a new state and/or set of parameters.
     *
     * @internalapi
     *
     * @returns Returns a new [[Transition]] instance.
     */
    Transition.prototype.redirect = function (targetState) {
        var redirects = 1, trans = this;
        // tslint:disable-next-line:no-conditional-assignment
        while ((trans = trans.redirectedFrom()) != null) {
            if (++redirects > 20)
                throw new Error("Too many consecutive Transition redirects (20+)");
        }
        var redirectOpts = { redirectedFrom: this, source: 'redirect' };
        // If the original transition was caused by URL sync, then use { location: 'replace' }
        // on the new transition (unless the target state explicitly specifies location: false).
        // This causes the original url to be replaced with the url for the redirect target
        // so the original url disappears from the browser history.
        if (this.options().source === 'url' && targetState.options().location !== false) {
            redirectOpts.location = 'replace';
        }
        var newOptions = Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["extend"])({}, this.options(), targetState.options(), redirectOpts);
        targetState = targetState.withOptions(newOptions, true);
        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);
        var originalEnteringNodes = this._treeChanges.entering;
        var redirectEnteringNodes = newTransition._treeChanges.entering;
        // --- Re-use resolve data from original transition ---
        // When redirecting from a parent state to a child state where the parent parameter values haven't changed
        // (because of the redirect), the resolves fetched by the original transition are still valid in the
        // redirected transition.
        //
        // This allows you to define a redirect on a parent state which depends on an async resolve value.
        // You can wait for the resolve, then redirect to a child state based on the result.
        // The redirected transition does not have to re-fetch the resolve.
        // ---------------------------------------------------------
        var nodeIsReloading = function (reloadState) { return function (node) {
            return reloadState && node.state.includes[reloadState.name];
        }; };
        // Find any "entering" nodes in the redirect path that match the original path and aren't being reloaded
        var matchingEnteringNodes = _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__["PathUtils"].matching(redirectEnteringNodes, originalEnteringNodes, _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__["PathUtils"].nonDynamicParams).filter(Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["not"])(nodeIsReloading(targetState.options().reloadState)));
        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.
        matchingEnteringNodes.forEach(function (node, idx) {
            node.resolvables = originalEnteringNodes[idx].resolvables;
        });
        return newTransition;
    };
    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */
    Transition.prototype._changedParams = function () {
        var tc = this._treeChanges;
        /** Return undefined if it's not a "dynamic" transition, for the following reasons */
        // If user explicitly wants a reload
        if (this._options.reload)
            return undefined;
        // If any states are exiting or entering
        if (tc.exiting.length || tc.entering.length)
            return undefined;
        // If to/from path lengths differ
        if (tc.to.length !== tc.from.length)
            return undefined;
        // If the to/from paths are different
        var pathsDiffer = Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["arrayTuples"])(tc.to, tc.from)
            .map(function (tuple) { return tuple[0].state !== tuple[1].state; })
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_3__["anyTrueR"], false);
        if (pathsDiffer)
            return undefined;
        // Find any parameter values that differ
        var nodeSchemas = tc.to.map(function (node) { return node.paramSchema; });
        var _a = [tc.to, tc.from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _a[0], fromValues = _a[1];
        var tuples = Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["arrayTuples"])(nodeSchemas, toValues, fromValues);
        return tuples.map(function (_a) {
            var schema = _a[0], toVals = _a[1], fromVals = _a[2];
            return _params_param__WEBPACK_IMPORTED_MODULE_11__["Param"].changed(schema, toVals, fromVals);
        }).reduce(_common_common__WEBPACK_IMPORTED_MODULE_3__["unnestR"], []);
    };
    /**
     * Returns true if the transition is dynamic.
     *
     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.
     *
     * @returns true if the Transition is dynamic
     */
    Transition.prototype.dynamic = function () {
        var changes = this._changedParams();
        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(_common_common__WEBPACK_IMPORTED_MODULE_3__["anyTrueR"], false);
    };
    /**
     * Returns true if the transition is ignored.
     *
     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.
     *
     * @returns true if the Transition is ignored.
     */
    Transition.prototype.ignored = function () {
        return !!this._ignoredReason();
    };
    /** @hidden */
    Transition.prototype._ignoredReason = function () {
        var pending = this.router.globals.transition;
        var reloadState = this._options.reloadState;
        var same = function (pathA, pathB) {
            if (pathA.length !== pathB.length)
                return false;
            var matching = _path_pathUtils__WEBPACK_IMPORTED_MODULE_10__["PathUtils"].matching(pathA, pathB);
            return pathA.length === matching.filter(function (node) { return !reloadState || !node.state.includes[reloadState.name]; }).length;
        };
        var newTC = this.treeChanges();
        var pendTC = pending && pending.treeChanges();
        if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting))
            return 'SameAsPending';
        if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to))
            return 'SameAsCurrent';
    };
    /**
     * Runs the transition
     *
     * This method is generally called from the [[StateService.transitionTo]]
     *
     * @internalapi
     *
     * @returns a promise for a successful transition.
     */
    Transition.prototype.run = function () {
        var _this = this;
        var runAllHooks = _transitionHook__WEBPACK_IMPORTED_MODULE_7__["TransitionHook"].runAllHooks;
        // Gets transition hooks array for the given phase
        var getHooksFor = function (phase) { return _this._hookBuilder.buildHooksForPhase(phase); };
        // When the chain is complete, then resolve or reject the deferred
        var transitionSuccess = function () {
            _common_trace__WEBPACK_IMPORTED_MODULE_0__["trace"].traceSuccess(_this.$to(), _this);
            _this.success = true;
            _this._deferred.resolve(_this.to());
            runAllHooks(getHooksFor(_interface__WEBPACK_IMPORTED_MODULE_6__["TransitionHookPhase"].SUCCESS));
        };
        var transitionError = function (reason) {
            _common_trace__WEBPACK_IMPORTED_MODULE_0__["trace"].traceError(reason, _this);
            _this.success = false;
            _this._deferred.reject(reason);
            _this._error = reason;
            runAllHooks(getHooksFor(_interface__WEBPACK_IMPORTED_MODULE_6__["TransitionHookPhase"].ERROR));
        };
        var runTransition = function () {
            // Wait to build the RUN hook chain until the BEFORE hooks are done
            // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.
            var allRunHooks = getHooksFor(_interface__WEBPACK_IMPORTED_MODULE_6__["TransitionHookPhase"].RUN);
            var done = function () { return _common_coreservices__WEBPACK_IMPORTED_MODULE_1__["services"].$q.when(undefined); };
            return _transitionHook__WEBPACK_IMPORTED_MODULE_7__["TransitionHook"].invokeHooks(allRunHooks, done);
        };
        var startTransition = function () {
            var globals = _this.router.globals;
            globals.lastStartedTransitionId = _this.$id;
            globals.transition = _this;
            globals.transitionHistory.enqueue(_this);
            _common_trace__WEBPACK_IMPORTED_MODULE_0__["trace"].traceTransitionStart(_this);
            return _common_coreservices__WEBPACK_IMPORTED_MODULE_1__["services"].$q.when(undefined);
        };
        var allBeforeHooks = getHooksFor(_interface__WEBPACK_IMPORTED_MODULE_6__["TransitionHookPhase"].BEFORE);
        _transitionHook__WEBPACK_IMPORTED_MODULE_7__["TransitionHook"].invokeHooks(allBeforeHooks, startTransition)
            .then(runTransition)
            .then(transitionSuccess, transitionError);
        return this.promise;
    };
    /**
     * Checks if the Transition is valid
     *
     * @returns true if the Transition is valid
     */
    Transition.prototype.valid = function () {
        return !this.error() || this.success !== undefined;
    };
    /**
     * Aborts this transition
     *
     * Imperative API to abort a Transition.
     * This only applies to Transitions that are not yet complete.
     */
    Transition.prototype.abort = function () {
        // Do not set flag if the transition is already complete
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_4__["isUndefined"])(this.success)) {
            this._aborted = true;
        }
    };
    /**
     * The Transition error reason.
     *
     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.
     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.
     *
     * @returns a transition rejection explaining why the transition is invalid, or the reason the transition failed.
     */
    Transition.prototype.error = function () {
        var state = this.$to();
        if (state.self.abstract) {
            return _rejectFactory__WEBPACK_IMPORTED_MODULE_14__["Rejection"].invalid("Cannot transition to abstract state '" + state.name + "'");
        }
        var paramDefs = state.parameters();
        var values = this.params();
        var invalidParams = paramDefs.filter(function (param) { return !param.validates(values[param.id]); });
        if (invalidParams.length) {
            var invalidValues = invalidParams.map(function (param) { return "[" + param.id + ":" + Object(_common_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(values[param.id]) + "]"; }).join(', ');
            var detail = "The following parameter values are not valid for state '" + state.name + "': " + invalidValues;
            return _rejectFactory__WEBPACK_IMPORTED_MODULE_14__["Rejection"].invalid(detail);
        }
        if (this.success === false)
            return this._error;
    };
    /**
     * A string representation of the Transition
     *
     * @returns A string representation of the Transition
     */
    Transition.prototype.toString = function () {
        var fromStateOrName = this.from();
        var toStateOrName = this.to();
        var avoidEmptyHash = function (params) {
            return params['#'] !== null && params['#'] !== undefined ? params : Object(_common_common__WEBPACK_IMPORTED_MODULE_3__["omit"])(params, ['#']);
        };
        // (X) means the to state is invalid.
        var id = this.$id, from = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_4__["isObject"])(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = Object(_common_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(avoidEmptyHash(this._treeChanges.from.map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_5__["prop"])('paramValues')).reduce(_common_common__WEBPACK_IMPORTED_MODULE_3__["mergeR"], {}))), toValid = this.valid() ? '' : '(X) ', to = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_4__["isObject"])(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = Object(_common_strings__WEBPACK_IMPORTED_MODULE_2__["stringify"])(avoidEmptyHash(this.params()));
        return "Transition#" + id + "( '" + from + "'" + fromParams + " -> " + toValid + "'" + to + "'" + toParams + " )";
    };
    /** @hidden */
    Transition.diToken = Transition;
    return Transition;
}());

//# sourceMappingURL=transition.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionEventType.js":
/*!********************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionEventType.js ***!
  \********************************************************************************************************************/
/*! exports provided: TransitionEventType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionEventType", function() { return TransitionEventType; });
/* harmony import */ var _transitionHook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transitionHook */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js");

/**
 * This class defines a type of hook, such as `onBefore` or `onEnter`.
 * Plugins can define custom hook types, such as sticky states does for `onInactive`.
 *
 * @interalapi
 */
var TransitionEventType = /** @class */ (function () {
    /* tslint:disable:no-inferrable-types */
    function TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {
        if (reverseSort === void 0) { reverseSort = false; }
        if (getResultHandler === void 0) { getResultHandler = _transitionHook__WEBPACK_IMPORTED_MODULE_0__["TransitionHook"].HANDLE_RESULT; }
        if (getErrorHandler === void 0) { getErrorHandler = _transitionHook__WEBPACK_IMPORTED_MODULE_0__["TransitionHook"].REJECT_ERROR; }
        if (synchronous === void 0) { synchronous = false; }
        this.name = name;
        this.hookPhase = hookPhase;
        this.hookOrder = hookOrder;
        this.criteriaMatchPath = criteriaMatchPath;
        this.reverseSort = reverseSort;
        this.getResultHandler = getResultHandler;
        this.getErrorHandler = getErrorHandler;
        this.synchronous = synchronous;
    }
    return TransitionEventType;
}());

//# sourceMappingURL=transitionEventType.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js":
/*!***************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js ***!
  \***************************************************************************************************************/
/*! exports provided: TransitionHook */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionHook", function() { return TransitionHook; });
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_trace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/* harmony import */ var _rejectFactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rejectFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js");
/* harmony import */ var _state_targetState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../state/targetState */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js");
/** @publicapi @module transition */ /** */









var defaultOptions = {
    current: _common_common__WEBPACK_IMPORTED_MODULE_1__["noop"],
    transition: null,
    traceData: {},
    bind: null,
};
/** @hidden */
var TransitionHook = /** @class */ (function () {
    function TransitionHook(transition, stateContext, registeredHook, options) {
        var _this = this;
        this.transition = transition;
        this.stateContext = stateContext;
        this.registeredHook = registeredHook;
        this.options = options;
        this.isSuperseded = function () { return _this.type.hookPhase === _interface__WEBPACK_IMPORTED_MODULE_0__["TransitionHookPhase"].RUN && !_this.options.transition.isActive(); };
        this.options = Object(_common_common__WEBPACK_IMPORTED_MODULE_1__["defaults"])(options, defaultOptions);
        this.type = registeredHook.eventType;
    }
    /**
     * Chains together an array of TransitionHooks.
     *
     * Given a list of [[TransitionHook]] objects, chains them together.
     * Each hook is invoked after the previous one completes.
     *
     * #### Example:
     * ```js
     * var hooks: TransitionHook[] = getHooks();
     * let promise: Promise<any> = TransitionHook.chain(hooks);
     *
     * promise.then(handleSuccess, handleError);
     * ```
     *
     * @param hooks the list of hooks to chain together
     * @param waitFor if provided, the chain is `.then()`'ed off this promise
     * @returns a `Promise` for sequentially invoking the hooks (in order)
     */
    TransitionHook.chain = function (hooks, waitFor) {
        // Chain the next hook off the previous
        var createHookChainR = function (prev, nextHook) { return prev.then(function () { return nextHook.invokeHook(); }); };
        return hooks.reduce(createHookChainR, waitFor || _common_coreservices__WEBPACK_IMPORTED_MODULE_6__["services"].$q.when());
    };
    /**
     * Invokes all the provided TransitionHooks, in order.
     * Each hook's return value is checked.
     * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.
     * If no hook returns a promise, then all hooks are processed synchronously.
     *
     * @param hooks the list of TransitionHooks to invoke
     * @param doneCallback a callback that is invoked after all the hooks have successfully completed
     *
     * @returns a promise for the async result, or the result of the callback
     */
    TransitionHook.invokeHooks = function (hooks, doneCallback) {
        for (var idx = 0; idx < hooks.length; idx++) {
            var hookResult = hooks[idx].invokeHook();
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_3__["isPromise"])(hookResult)) {
                var remainingHooks = hooks.slice(idx + 1);
                return TransitionHook.chain(remainingHooks, hookResult).then(doneCallback);
            }
        }
        return doneCallback();
    };
    /**
     * Run all TransitionHooks, ignoring their return value.
     */
    TransitionHook.runAllHooks = function (hooks) {
        hooks.forEach(function (hook) { return hook.invokeHook(); });
    };
    TransitionHook.prototype.logError = function (err) {
        this.transition.router.stateService.defaultErrorHandler()(err);
    };
    TransitionHook.prototype.invokeHook = function () {
        var _this = this;
        var hook = this.registeredHook;
        if (hook._deregistered)
            return;
        var notCurrent = this.getNotCurrentRejection();
        if (notCurrent)
            return notCurrent;
        var options = this.options;
        _common_trace__WEBPACK_IMPORTED_MODULE_5__["trace"].traceHookInvocation(this, this.transition, options);
        var invokeCallback = function () { return hook.callback.call(options.bind, _this.transition, _this.stateContext); };
        var normalizeErr = function (err) { return _rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].normalize(err).toPromise(); };
        var handleError = function (err) { return hook.eventType.getErrorHandler(_this)(err); };
        var handleResult = function (result) { return hook.eventType.getResultHandler(_this)(result); };
        try {
            var result = invokeCallback();
            if (!this.type.synchronous && Object(_common_predicates__WEBPACK_IMPORTED_MODULE_3__["isPromise"])(result)) {
                return result.catch(normalizeErr).then(handleResult, handleError);
            }
            else {
                return handleResult(result);
            }
        }
        catch (err) {
            // If callback throws (synchronously)
            return handleError(_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].normalize(err));
        }
        finally {
            if (hook.invokeLimit && ++hook.invokeCount >= hook.invokeLimit) {
                hook.deregister();
            }
        }
    };
    /**
     * This method handles the return value of a Transition Hook.
     *
     * A hook can return false (cancel), a TargetState (redirect),
     * or a promise (which may later resolve to false or a redirect)
     *
     * This also handles "transition superseded" -- when a new transition
     * was started while the hook was still running
     */
    TransitionHook.prototype.handleHookResult = function (result) {
        var _this = this;
        var notCurrent = this.getNotCurrentRejection();
        if (notCurrent)
            return notCurrent;
        // Hook returned a promise
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_3__["isPromise"])(result)) {
            // Wait for the promise, then reprocess with the resulting value
            return result.then(function (val) { return _this.handleHookResult(val); });
        }
        _common_trace__WEBPACK_IMPORTED_MODULE_5__["trace"].traceHookResult(result, this.transition, this.options);
        // Hook returned false
        if (result === false) {
            // Abort this Transition
            return _rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].aborted('Hook aborted transition').toPromise();
        }
        var isTargetState = Object(_common_hof__WEBPACK_IMPORTED_MODULE_4__["is"])(_state_targetState__WEBPACK_IMPORTED_MODULE_8__["TargetState"]);
        // hook returned a TargetState
        if (isTargetState(result)) {
            // Halt the current Transition and redirect (a new Transition) to the TargetState.
            return _rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].redirected(result).toPromise();
        }
    };
    /**
     * Return a Rejection promise if the transition is no longer current due
     * to a stopped router (disposed), or a new transition has started and superseded this one.
     */
    TransitionHook.prototype.getNotCurrentRejection = function () {
        var router = this.transition.router;
        // The router is stopped
        if (router._disposed) {
            return _rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].aborted("UIRouter instance #" + router.$id + " has been stopped (disposed)").toPromise();
        }
        if (this.transition._aborted) {
            return _rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].aborted().toPromise();
        }
        // This transition is no longer current.
        // Another transition started while this hook was still running.
        if (this.isSuperseded()) {
            // Abort this transition
            return _rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].superseded(this.options.current()).toPromise();
        }
    };
    TransitionHook.prototype.toString = function () {
        var _a = this, options = _a.options, registeredHook = _a.registeredHook;
        var event = Object(_common_hof__WEBPACK_IMPORTED_MODULE_4__["parse"])('traceData.hookType')(options) || 'internal', context = Object(_common_hof__WEBPACK_IMPORTED_MODULE_4__["parse"])('traceData.context.state.name')(options) || Object(_common_hof__WEBPACK_IMPORTED_MODULE_4__["parse"])('traceData.context')(options) || 'unknown', name = Object(_common_strings__WEBPACK_IMPORTED_MODULE_2__["fnToString"])(registeredHook.callback);
        return event + " context: " + context + ", " + Object(_common_strings__WEBPACK_IMPORTED_MODULE_2__["maxLength"])(200, name);
    };
    /**
     * These GetResultHandler(s) are used by [[invokeHook]] below
     * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])
     */
    TransitionHook.HANDLE_RESULT = function (hook) { return function (result) {
        return hook.handleHookResult(result);
    }; };
    /**
     * If the result is a promise rejection, log it.
     * Otherwise, ignore the result.
     */
    TransitionHook.LOG_REJECTED_RESULT = function (hook) { return function (result) {
        Object(_common_predicates__WEBPACK_IMPORTED_MODULE_3__["isPromise"])(result) && result.catch(function (err) { return hook.logError(_rejectFactory__WEBPACK_IMPORTED_MODULE_7__["Rejection"].normalize(err)); });
        return undefined;
    }; };
    /**
     * These GetErrorHandler(s) are used by [[invokeHook]] below
     * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])
     */
    TransitionHook.LOG_ERROR = function (hook) { return function (error) { return hook.logError(error); }; };
    TransitionHook.REJECT_ERROR = function (hook) { return function (error) { return Object(_common_common__WEBPACK_IMPORTED_MODULE_1__["silentRejection"])(error); }; };
    TransitionHook.THROW_ERROR = function (hook) { return function (error) {
        throw error;
    }; };
    return TransitionHook;
}());

//# sourceMappingURL=transitionHook.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionService.js":
/*!******************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionService.js ***!
  \******************************************************************************************************************/
/*! exports provided: defaultTransOpts, TransitionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultTransOpts", function() { return defaultTransOpts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransitionService", function() { return TransitionService; });
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js");
/* harmony import */ var _transition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transition */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transition.js");
/* harmony import */ var _hookRegistry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hookRegistry */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookRegistry.js");
/* harmony import */ var _hooks_coreResolvables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/coreResolvables */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/coreResolvables.js");
/* harmony import */ var _hooks_redirectTo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hooks/redirectTo */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/redirectTo.js");
/* harmony import */ var _hooks_onEnterExitRetain__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hooks/onEnterExitRetain */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/onEnterExitRetain.js");
/* harmony import */ var _hooks_resolve__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../hooks/resolve */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/resolve.js");
/* harmony import */ var _hooks_views__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../hooks/views */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/views.js");
/* harmony import */ var _hooks_updateGlobals__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../hooks/updateGlobals */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/updateGlobals.js");
/* harmony import */ var _hooks_url__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../hooks/url */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/url.js");
/* harmony import */ var _hooks_lazyLoad__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../hooks/lazyLoad */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/lazyLoad.js");
/* harmony import */ var _transitionEventType__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transitionEventType */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionEventType.js");
/* harmony import */ var _transitionHook__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transitionHook */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _hooks_ignoredTransition__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../hooks/ignoredTransition */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/ignoredTransition.js");
/* harmony import */ var _hooks_invalidTransition__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../hooks/invalidTransition */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/invalidTransition.js");
/** @publicapi @module transition */ /** */


















/**
 * The default [[Transition]] options.
 *
 * Include this object when applying custom defaults:
 * let reloadOpts = { reload: true, notify: true }
 * let options = defaults(theirOpts, customDefaults, defaultOptions);
 */
var defaultTransOpts = {
    location: true,
    relative: null,
    inherit: false,
    notify: true,
    reload: false,
    custom: {},
    current: function () { return null; },
    source: 'unknown',
};
/**
 * This class provides services related to Transitions.
 *
 * - Most importantly, it allows global Transition Hooks to be registered.
 * - It allows the default transition error handler to be set.
 * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).
 *
 * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.
 */
var TransitionService = /** @class */ (function () {
    /** @hidden */
    function TransitionService(_router) {
        /** @hidden */
        this._transitionCount = 0;
        /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */
        this._eventTypes = [];
        /** @hidden The registered transition hooks */
        this._registeredHooks = {};
        /** @hidden The  paths on a criteria object */
        this._criteriaPaths = {};
        this._router = _router;
        this.$view = _router.viewService;
        this._deregisterHookFns = {};
        this._pluginapi = (Object(_common_common__WEBPACK_IMPORTED_MODULE_14__["createProxyFunctions"])(Object(_common_hof__WEBPACK_IMPORTED_MODULE_15__["val"])(this), {}, Object(_common_hof__WEBPACK_IMPORTED_MODULE_15__["val"])(this), [
            '_definePathType',
            '_defineEvent',
            '_getPathTypes',
            '_getEvents',
            'getHooks',
        ]));
        this._defineCorePaths();
        this._defineCoreEvents();
        this._registerCoreTransitionHooks();
        _router.globals.successfulTransitions.onEvict(_hooks_coreResolvables__WEBPACK_IMPORTED_MODULE_3__["treeChangesCleanup"]);
    }
    /**
     * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.
     *
     * Registers a transition lifecycle hook, which is invoked during transition construction.
     *
     * This low level hook should only be used by plugins.
     * This can be a useful time for plugins to add resolves or mutate the transition as needed.
     * The Sticky States plugin uses this hook to modify the treechanges.
     *
     * ### Lifecycle
     *
     * `onCreate` hooks are invoked *while a transition is being constructed*.
     *
     * ### Return value
     *
     * The hook's return value is ignored
     *
     * @internalapi
     * @param criteria defines which Transitions the Hook should be invoked for.
     * @param callback the hook function which will be invoked.
     * @param options the registration options
     * @returns a function which deregisters the hook.
     */
    TransitionService.prototype.onCreate = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onBefore = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onStart = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onExit = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onRetain = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onEnter = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onFinish = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onSuccess = function (criteria, callback, options) {
        return;
    };
    /** @inheritdoc */
    TransitionService.prototype.onError = function (criteria, callback, options) {
        return;
    };
    /**
     * dispose
     * @internalapi
     */
    TransitionService.prototype.dispose = function (router) {
        Object(_common_common__WEBPACK_IMPORTED_MODULE_14__["values"])(this._registeredHooks).forEach(function (hooksArray) {
            return hooksArray.forEach(function (hook) {
                hook._deregistered = true;
                Object(_common_common__WEBPACK_IMPORTED_MODULE_14__["removeFrom"])(hooksArray, hook);
            });
        });
    };
    /**
     * Creates a new [[Transition]] object
     *
     * This is a factory function for creating new Transition objects.
     * It is used internally by the [[StateService]] and should generally not be called by application code.
     *
     * @param fromPath the path to the current state (the from state)
     * @param targetState the target state (destination)
     * @returns a Transition
     */
    TransitionService.prototype.create = function (fromPath, targetState) {
        return new _transition__WEBPACK_IMPORTED_MODULE_1__["Transition"](fromPath, targetState, this._router);
    };
    /** @hidden */
    TransitionService.prototype._defineCoreEvents = function () {
        var Phase = _interface__WEBPACK_IMPORTED_MODULE_0__["TransitionHookPhase"];
        var TH = _transitionHook__WEBPACK_IMPORTED_MODULE_12__["TransitionHook"];
        var paths = this._criteriaPaths;
        var NORMAL_SORT = false, REVERSE_SORT = true;
        var SYNCHRONOUS = true;
        this._defineEvent('onCreate', Phase.CREATE, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);
        this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);
        this._defineEvent('onStart', Phase.RUN, 0, paths.to);
        this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);
        this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);
        this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);
        this._defineEvent('onFinish', Phase.RUN, 400, paths.to);
        this._defineEvent('onSuccess', Phase.SUCCESS, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);
        this._defineEvent('onError', Phase.ERROR, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);
    };
    /** @hidden */
    TransitionService.prototype._defineCorePaths = function () {
        var STATE = _interface__WEBPACK_IMPORTED_MODULE_0__["TransitionHookScope"].STATE, TRANSITION = _interface__WEBPACK_IMPORTED_MODULE_0__["TransitionHookScope"].TRANSITION;
        this._definePathType('to', TRANSITION);
        this._definePathType('from', TRANSITION);
        this._definePathType('exiting', STATE);
        this._definePathType('retained', STATE);
        this._definePathType('entering', STATE);
    };
    /** @hidden */
    TransitionService.prototype._defineEvent = function (name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {
        if (reverseSort === void 0) { reverseSort = false; }
        if (getResultHandler === void 0) { getResultHandler = _transitionHook__WEBPACK_IMPORTED_MODULE_12__["TransitionHook"].HANDLE_RESULT; }
        if (getErrorHandler === void 0) { getErrorHandler = _transitionHook__WEBPACK_IMPORTED_MODULE_12__["TransitionHook"].REJECT_ERROR; }
        if (synchronous === void 0) { synchronous = false; }
        var eventType = new _transitionEventType__WEBPACK_IMPORTED_MODULE_11__["TransitionEventType"](name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);
        this._eventTypes.push(eventType);
        Object(_hookRegistry__WEBPACK_IMPORTED_MODULE_2__["makeEvent"])(this, this, eventType);
    };
    /** @hidden */
    // tslint:disable-next-line
    TransitionService.prototype._getEvents = function (phase) {
        var transitionHookTypes = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_13__["isDefined"])(phase)
            ? this._eventTypes.filter(function (type) { return type.hookPhase === phase; })
            : this._eventTypes.slice();
        return transitionHookTypes.sort(function (l, r) {
            var cmpByPhase = l.hookPhase - r.hookPhase;
            return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;
        });
    };
    /**
     * Adds a Path to be used as a criterion against a TreeChanges path
     *
     * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.
     * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`
     * Each state in the exiting path is checked against the criteria and returned as part of the match.
     *
     * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.
     * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`
     * Only the tail of the `to` path is checked against the criteria and returned as part of the match.
     *
     * @hidden
     */
    TransitionService.prototype._definePathType = function (name, hookScope) {
        this._criteriaPaths[name] = { name: name, scope: hookScope };
    };
    /** * @hidden */
    // tslint:disable-next-line
    TransitionService.prototype._getPathTypes = function () {
        return this._criteriaPaths;
    };
    /** @hidden */
    TransitionService.prototype.getHooks = function (hookName) {
        return this._registeredHooks[hookName];
    };
    /** @hidden */
    TransitionService.prototype._registerCoreTransitionHooks = function () {
        var fns = this._deregisterHookFns;
        fns.addCoreResolves = Object(_hooks_coreResolvables__WEBPACK_IMPORTED_MODULE_3__["registerAddCoreResolvables"])(this);
        fns.ignored = Object(_hooks_ignoredTransition__WEBPACK_IMPORTED_MODULE_16__["registerIgnoredTransitionHook"])(this);
        fns.invalid = Object(_hooks_invalidTransition__WEBPACK_IMPORTED_MODULE_17__["registerInvalidTransitionHook"])(this);
        // Wire up redirectTo hook
        fns.redirectTo = Object(_hooks_redirectTo__WEBPACK_IMPORTED_MODULE_4__["registerRedirectToHook"])(this);
        // Wire up onExit/Retain/Enter state hooks
        fns.onExit = Object(_hooks_onEnterExitRetain__WEBPACK_IMPORTED_MODULE_5__["registerOnExitHook"])(this);
        fns.onRetain = Object(_hooks_onEnterExitRetain__WEBPACK_IMPORTED_MODULE_5__["registerOnRetainHook"])(this);
        fns.onEnter = Object(_hooks_onEnterExitRetain__WEBPACK_IMPORTED_MODULE_5__["registerOnEnterHook"])(this);
        // Wire up Resolve hooks
        fns.eagerResolve = Object(_hooks_resolve__WEBPACK_IMPORTED_MODULE_6__["registerEagerResolvePath"])(this);
        fns.lazyResolve = Object(_hooks_resolve__WEBPACK_IMPORTED_MODULE_6__["registerLazyResolveState"])(this);
        fns.resolveAll = Object(_hooks_resolve__WEBPACK_IMPORTED_MODULE_6__["registerResolveRemaining"])(this);
        // Wire up the View management hooks
        fns.loadViews = Object(_hooks_views__WEBPACK_IMPORTED_MODULE_7__["registerLoadEnteringViews"])(this);
        fns.activateViews = Object(_hooks_views__WEBPACK_IMPORTED_MODULE_7__["registerActivateViews"])(this);
        // Updates global state after a transition
        fns.updateGlobals = Object(_hooks_updateGlobals__WEBPACK_IMPORTED_MODULE_8__["registerUpdateGlobalState"])(this);
        // After globals.current is updated at priority: 10000
        fns.updateUrl = Object(_hooks_url__WEBPACK_IMPORTED_MODULE_9__["registerUpdateUrl"])(this);
        // Lazy load state trees
        fns.lazyLoad = Object(_hooks_lazyLoad__WEBPACK_IMPORTED_MODULE_10__["registerLazyLoadHook"])(this);
    };
    return TransitionService;
}());

//# sourceMappingURL=transitionService.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/index.js":
/*!***********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/index.js ***!
  \***********************************************************************************************/
/*! exports provided: UrlRules, UrlConfig, UrlMatcher, ParamFactory, UrlMatcherFactory, UrlRouter, UrlRuleFactory, BaseUrlRule, UrlService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _urlMatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./urlMatcher */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcher.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlMatcher", function() { return _urlMatcher__WEBPACK_IMPORTED_MODULE_0__["UrlMatcher"]; });

/* harmony import */ var _urlMatcherFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./urlMatcherFactory */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcherFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParamFactory", function() { return _urlMatcherFactory__WEBPACK_IMPORTED_MODULE_1__["ParamFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlMatcherFactory", function() { return _urlMatcherFactory__WEBPACK_IMPORTED_MODULE_1__["UrlMatcherFactory"]; });

/* harmony import */ var _urlRouter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./urlRouter */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRouter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRouter", function() { return _urlRouter__WEBPACK_IMPORTED_MODULE_2__["UrlRouter"]; });

/* harmony import */ var _urlRule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./urlRule */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRule.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRuleFactory", function() { return _urlRule__WEBPACK_IMPORTED_MODULE_3__["UrlRuleFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseUrlRule", function() { return _urlRule__WEBPACK_IMPORTED_MODULE_3__["BaseUrlRule"]; });

/* harmony import */ var _urlService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./urlService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlService", function() { return _urlService__WEBPACK_IMPORTED_MODULE_4__["UrlService"]; });

/* harmony import */ var _urlRules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./urlRules */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRules.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlRules", function() { return _urlRules__WEBPACK_IMPORTED_MODULE_5__["UrlRules"]; });

/* harmony import */ var _urlConfig__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./urlConfig */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlConfig", function() { return _urlConfig__WEBPACK_IMPORTED_MODULE_6__["UrlConfig"]; });








//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlConfig.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlConfig.js ***!
  \***************************************************************************************************/
/*! exports provided: UrlConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlConfig", function() { return UrlConfig; });
/* harmony import */ var _params__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../params */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/index.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");


/**
 * An API to customize the URL behavior and retrieve URL configuration
 *
 * This API is used to customize the behavior of the URL.
 * This includes optional trailing slashes ([[strictMode]]), case sensitivity ([[caseInsensitive]]),
 * and custom parameter encoding (custom [[type]]).
 *
 * It also has information about the location (url) configuration such as [[port]] and [[baseHref]].
 * This information can be used to build absolute URLs, such as
 * `https://example.com:443/basepath/state/substate?param1=a#hashvalue`;
 *
 * This API is a property of [[UrlService]] as [[UrlService.config]].
 */
var UrlConfig = /** @class */ (function () {
    /** @hidden */ function UrlConfig(/** @hidden */ router) {
        var _this = this;
        this.router = router;
        /** @hidden */ this.paramTypes = new _params__WEBPACK_IMPORTED_MODULE_0__["ParamTypes"]();
        /** @hidden */ this._isCaseInsensitive = false;
        /** @hidden */ this._isStrictMode = true;
        /** @hidden */ this._defaultSquashPolicy = false;
        /** @internalapi */ this.dispose = function () { return _this.paramTypes.dispose(); };
        // Delegate these calls to the current LocationConfig implementation
        /**
         * Gets the base Href, e.g., `http://localhost/approot/`
         *
         * @return the application's base href
         */
        this.baseHref = function () { return _this.router.locationConfig.baseHref(); };
        /**
         * Gets or sets the hashPrefix
         *
         * This only applies when not running in [[html5Mode]] (pushstate mode)
         *
         * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the "hashbang" portion.
         *
         * @return the hash prefix
         */
        this.hashPrefix = function (newprefix) { return _this.router.locationConfig.hashPrefix(newprefix); };
        /**
         * Gets the host, e.g., `localhost`
         *
         * @return the protocol
         */
        this.host = function () { return _this.router.locationConfig.host(); };
        /**
         * Returns true when running in pushstate mode
         *
         * @return true when running in html5 mode (pushstate mode).
         */
        this.html5Mode = function () { return _this.router.locationConfig.html5Mode(); };
        /**
         * Gets the port, e.g., `80`
         *
         * @return the port number
         */
        this.port = function () { return _this.router.locationConfig.port(); };
        /**
         * Gets the protocol, e.g., `http`
         *
         * @return the protocol
         */
        this.protocol = function () { return _this.router.locationConfig.protocol(); };
    }
    /**
     * Defines whether URL matching should be case sensitive (the default behavior), or not.
     *
     * #### Example:
     * ```js
     * // Allow case insensitive url matches
     * urlService.config.caseInsensitive(true);
     * ```
     *
     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;
     * @returns the current value of caseInsensitive
     */
    UrlConfig.prototype.caseInsensitive = function (value) {
        return (this._isCaseInsensitive = Object(_common__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(value) ? value : this._isCaseInsensitive);
    };
    /**
     * Sets the default behavior when generating or matching URLs with default parameter values.
     *
     * #### Example:
     * ```js
     * // Remove default parameter values from the url
     * urlService.config.defaultSquashPolicy(true);
     * ```
     *
     * @param value A string that defines the default parameter URL squashing behavior.
     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
     *      parameter is surrounded by slashes, squash (remove) one slash from the URL
     *    - any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
     *      the parameter value from the URL and replace it with this string.
     * @returns the current value of defaultSquashPolicy
     */
    UrlConfig.prototype.defaultSquashPolicy = function (value) {
        if (Object(_common__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(value) && value !== true && value !== false && !Object(_common__WEBPACK_IMPORTED_MODULE_1__["isString"])(value))
            throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
        return (this._defaultSquashPolicy = Object(_common__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(value) ? value : this._defaultSquashPolicy);
    };
    /**
     * Defines whether URLs should match trailing slashes, or not (the default behavior).
     *
     * #### Example:
     * ```js
     * // Allow optional trailing slashes
     * urlService.config.strictMode(false);
     * ```
     *
     * @param value `false` to match trailing slashes in URLs, otherwise `true`.
     * @returns the current value of strictMode
     */
    UrlConfig.prototype.strictMode = function (value) {
        return (this._isStrictMode = Object(_common__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(value) ? value : this._isStrictMode);
    };
    /**
     * Creates and registers a custom [[ParamType]] object
     *
     * A custom parameter type can be used to generate URLs with typed parameters or custom encoding/decoding.
     *
     * #### Note: Register custom types *before using them* in a state definition.
     *
     * #### Example:
     * ```js
     * // Encode object parameter as JSON string
     * urlService.config.type('myjson', {
     *   encode: (obj) => JSON.stringify(obj),
     *   decode: (str) => JSON.parse(str),
     *   is: (val) => typeof(val) === 'object',
     *   pattern: /[^/]+/,
     *   equals: (a, b) => _.isEqual(a, b),
     * });
     * ```
     *
     * See [[ParamTypeDefinition]] for more examples
     *
     * @param name The type name.
     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.
     * @param definitionFn A function that is injected before the app runtime starts.
     *        The result of this function should be a [[ParamTypeDefinition]].
     *        The result is merged into the existing `definition`.
     *        See [[ParamType]] for information on the values accepted.
     *
     * @returns if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined
     */
    UrlConfig.prototype.type = function (name, definition, definitionFn) {
        var type = this.paramTypes.type(name, definition, definitionFn);
        return !Object(_common__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(definition) ? type : this;
    };
    return UrlConfig;
}());

//# sourceMappingURL=urlConfig.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcher.js":
/*!****************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcher.js ***!
  \****************************************************************************************************/
/*! exports provided: UrlMatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlMatcher", function() { return UrlMatcher; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _params_param__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../params/param */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js");
/* harmony import */ var _common_strings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/strings */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @publicapi @module url */ /** */






/** @hidden */
function quoteRegExp(str, param) {
    var surroundPattern = ['', ''], result = str.replace(/[\\\[\]\^$*+?.()|{}]/g, '\\$&');
    if (!param)
        return result;
    switch (param.squash) {
        case false:
            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];
            break;
        case true:
            result = result.replace(/\/$/, '');
            surroundPattern = ['(?:/(', ')|/)?'];
            break;
        default:
            surroundPattern = ["(" + param.squash + "|", ')?'];
            break;
    }
    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];
}
/** @hidden */
var memoizeTo = function (obj, _prop, fn) { return (obj[_prop] = obj[_prop] || fn()); };
/** @hidden */
var splitOnSlash = Object(_common_strings__WEBPACK_IMPORTED_MODULE_4__["splitOnDelim"])('/');
/** @hidden */
var defaultConfig = {
    state: { params: {} },
    strict: true,
    caseInsensitive: true,
};
/**
 * Matches URLs against patterns.
 *
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL.
 *
 * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)
 * parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by [[UrlMatcher.exec]].
 *
 * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)
 * or colon placeholders (`/somePath/:param`).
 *
 * - *A parameter RegExp* may be defined for a param after a colon
 * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.
 * The regexp must match for the url to be matched.
 * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].
 *
 * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.
 *   See [[UrlMatcherFactory.type]] for more information.
 *
 * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).
 *   A catch-all * parameter value will contain the remainder of the URL.
 *
 * ---
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters).
 * A path parameter matches any number of characters other than '/'. For catch-all
 * placeholders the path parameter matches any number of characters.
 *
 * Examples:
 *
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 */
var UrlMatcher = /** @class */ (function () {
    /**
     * @param pattern The pattern to compile into a matcher.
     * @param paramTypes The [[ParamTypes]] registry
     * @param paramFactory A [[ParamFactory]] object
     * @param config  A [[UrlMatcherCompileConfig]] configuration object
     */
    function UrlMatcher(pattern, paramTypes, paramFactory, config) {
        var _this = this;
        /** @hidden */
        this._cache = { path: [this] };
        /** @hidden */
        this._children = [];
        /** @hidden */
        this._params = [];
        /** @hidden */
        this._segments = [];
        /** @hidden */
        this._compiled = [];
        this.config = config = Object(_common__WEBPACK_IMPORTED_MODULE_5__["defaults"])(config, defaultConfig);
        this.pattern = pattern;
        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
        //   '*' name
        //   ':' name
        //   '{' name '}'
        //   '{' name ':' regexp '}'
        // The regular expression is somewhat complicated due to the need to allow curly braces
        // inside the regular expression. The placeholder regexp breaks down as follows:
        //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
        //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
        //    [^{}\\]+                       - anything other than curly braces or backslash
        //    \\.                            - a backslash escape
        //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
        var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g;
        var searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g;
        var patterns = [];
        var last = 0;
        var matchArray;
        var checkParamErrors = function (id) {
            if (!UrlMatcher.nameValidator.test(id))
                throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
            if (Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(_this._params, Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["propEq"])('id', id)))
                throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
        };
        // Split into static segments separated by path parameter placeholders.
        // The number of segments is always 1 more than the number of parameters.
        var matchDetails = function (m, isSearch) {
            // IE[78] returns '' for unmatched groups instead of null
            var id = m[2] || m[3];
            var regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\s\\S]*' : null);
            var makeRegexpType = function (str) {
                return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inherit"])(paramTypes.type(isSearch ? 'query' : 'path'), {
                    pattern: new RegExp(str, _this.config.caseInsensitive ? 'i' : undefined),
                });
            };
            return {
                id: id,
                regexp: regexp,
                segment: pattern.substring(last, m.index),
                type: !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp),
            };
        };
        var details;
        var segment;
        // tslint:disable-next-line:no-conditional-assignment
        while ((matchArray = placeholder.exec(pattern))) {
            details = matchDetails(matchArray, false);
            if (details.segment.indexOf('?') >= 0)
                break; // we're into the search part
            checkParamErrors(details.id);
            this._params.push(paramFactory.fromPath(details.id, details.type, config.state));
            this._segments.push(details.segment);
            patterns.push([details.segment, Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["tail"])(this._params)]);
            last = placeholder.lastIndex;
        }
        segment = pattern.substring(last);
        // Find any search parameter names and remove them from the last segment
        var i = segment.indexOf('?');
        if (i >= 0) {
            var search = segment.substring(i);
            segment = segment.substring(0, i);
            if (search.length > 0) {
                last = 0;
                // tslint:disable-next-line:no-conditional-assignment
                while ((matchArray = searchPlaceholder.exec(search))) {
                    details = matchDetails(matchArray, true);
                    checkParamErrors(details.id);
                    this._params.push(paramFactory.fromSearch(details.id, details.type, config.state));
                    last = placeholder.lastIndex;
                    // check if ?&
                }
            }
        }
        this._segments.push(segment);
        this._compiled = patterns.map(function (_pattern) { return quoteRegExp.apply(null, _pattern); }).concat(quoteRegExp(segment));
    }
    /** @hidden */
    UrlMatcher.encodeDashes = function (str) {
        // Replace dashes with encoded "\-"
        return encodeURIComponent(str).replace(/-/g, function (c) {
            return "%5C%" + c
                .charCodeAt(0)
                .toString(16)
                .toUpperCase();
        });
    };
    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */
    UrlMatcher.pathSegmentsAndParams = function (matcher) {
        var staticSegments = matcher._segments;
        var pathParams = matcher._params.filter(function (p) { return p.location === _params_param__WEBPACK_IMPORTED_MODULE_3__["DefType"].PATH; });
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["arrayTuples"])(staticSegments, pathParams.concat(undefined))
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .filter(function (x) { return x !== '' && Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(x); });
    };
    /** @hidden Given a matcher, return an array with the matcher's query params */
    UrlMatcher.queryParams = function (matcher) {
        return matcher._params.filter(function (p) { return p.location === _params_param__WEBPACK_IMPORTED_MODULE_3__["DefType"].SEARCH; });
    };
    /**
     * Compare two UrlMatchers
     *
     * This comparison function converts a UrlMatcher into static and dynamic path segments.
     * Each static path segment is a static string between a path separator (slash character).
     * Each dynamic segment is a path parameter.
     *
     * The comparison function sorts static segments before dynamic ones.
     */
    UrlMatcher.compare = function (a, b) {
        /**
         * Turn a UrlMatcher and all its parent matchers into an array
         * of slash literals '/', string literals, and Param objects
         *
         * This example matcher matches strings like "/foo/:param/tail":
         * var matcher = $umf.compile("/foo").append($umf.compile("/:param")).append($umf.compile("/")).append($umf.compile("tail"));
         * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]
         *
         * Caches the result as `matcher._cache.segments`
         */
        var segments = function (matcher) {
            return (matcher._cache.segments =
                matcher._cache.segments ||
                    matcher._cache.path
                        .map(UrlMatcher.pathSegmentsAndParams)
                        .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
                        .reduce(_common_strings__WEBPACK_IMPORTED_MODULE_4__["joinNeighborsR"], [])
                        .map(function (x) { return (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(x) ? splitOnSlash(x) : x); })
                        .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], []));
        };
        /**
         * Gets the sort weight for each segment of a UrlMatcher
         *
         * Caches the result as `matcher._cache.weights`
         */
        var weights = function (matcher) {
            return (matcher._cache.weights =
                matcher._cache.weights ||
                    segments(matcher).map(function (segment) {
                        // Sort slashes first, then static strings, the Params
                        if (segment === '/')
                            return 1;
                        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(segment))
                            return 2;
                        if (segment instanceof _params_param__WEBPACK_IMPORTED_MODULE_3__["Param"])
                            return 3;
                    }));
        };
        /**
         * Pads shorter array in-place (mutates)
         */
        var padArrays = function (l, r, padVal) {
            var len = Math.max(l.length, r.length);
            while (l.length < len)
                l.push(padVal);
            while (r.length < len)
                r.push(padVal);
        };
        var weightsA = weights(a), weightsB = weights(b);
        padArrays(weightsA, weightsB, 0);
        var _pairs = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["arrayTuples"])(weightsA, weightsB);
        var cmp, i;
        for (i = 0; i < _pairs.length; i++) {
            cmp = _pairs[i][0] - _pairs[i][1];
            if (cmp !== 0)
                return cmp;
        }
        return 0;
    };
    /**
     * Creates a new concatenated UrlMatcher
     *
     * Builds a new UrlMatcher by appending another UrlMatcher to this one.
     *
     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.
     */
    UrlMatcher.prototype.append = function (url) {
        this._children.push(url);
        url._cache = {
            path: this._cache.path.concat(url),
            parent: this,
            pattern: null,
        };
        return url;
    };
    /** @hidden */
    UrlMatcher.prototype.isRoot = function () {
        return this._cache.path[0] === this;
    };
    /** Returns the input pattern string */
    UrlMatcher.prototype.toString = function () {
        return this.pattern;
    };
    /**
     * Tests the specified url/path against this matcher.
     *
     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured
     * parameter values.  Returns null if the path does not match.
     *
     * The returned object contains the values
     * of any search parameters that are mentioned in the pattern, but their value may be null if
     * they are not present in `search`. This means that search parameters are always treated
     * as optional.
     *
     * #### Example:
     * ```js
     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
     *   x: '1', q: 'hello'
     * });
     * // returns { id: 'bob', q: 'hello', r: null }
     * ```
     *
     * @param path    The URL path to match, e.g. `$location.path()`.
     * @param search  URL search parameters, e.g. `$location.search()`.
     * @param hash    URL hash e.g. `$location.hash()`.
     * @param options
     *
     * @returns The captured parameter values.
     */
    UrlMatcher.prototype.exec = function (path, search, hash, options) {
        var _this = this;
        if (search === void 0) { search = {}; }
        if (options === void 0) { options = {}; }
        var match = memoizeTo(this._cache, 'pattern', function () {
            return new RegExp([
                '^',
                Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnest"])(_this._cache.path.map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])('_compiled'))).join(''),
                _this.config.strict === false ? '/?' : '',
                '$',
            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);
        }).exec(path);
        if (!match)
            return null;
        // options = defaults(options, { isolate: false });
        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};
        if (nPathSegments !== match.length - 1)
            throw new Error("Unbalanced capture group in route '" + this.pattern + "'");
        function decodePathArray(paramVal) {
            var reverseString = function (str) {
                return str
                    .split('')
                    .reverse()
                    .join('');
            };
            var unquoteDashes = function (str) { return str.replace(/\\-/g, '-'); };
            var split = reverseString(paramVal).split(/-(?!\\)/);
            var allReversed = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["map"])(split, reverseString);
            return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["map"])(allReversed, unquoteDashes).reverse();
        }
        for (var i = 0; i < nPathSegments; i++) {
            var param = pathParams[i];
            var value = match[i + 1];
            // if the param value matches a pre-replace pair, replace the value before decoding.
            for (var j = 0; j < param.replace.length; j++) {
                if (param.replace[j].from === value)
                    value = param.replace[j].to;
            }
            if (value && param.array === true)
                value = decodePathArray(value);
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(value))
                value = param.type.decode(value);
            values[param.id] = param.value(value);
        }
        searchParams.forEach(function (param) {
            var value = search[param.id];
            for (var j = 0; j < param.replace.length; j++) {
                if (param.replace[j].from === value)
                    value = param.replace[j].to;
            }
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(value))
                value = param.type.decode(value);
            values[param.id] = param.value(value);
        });
        if (hash)
            values['#'] = hash;
        return values;
    };
    /**
     * @hidden
     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.
     *
     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the
     *    pattern has no parameters, an empty array is returned.
     */
    UrlMatcher.prototype.parameters = function (opts) {
        if (opts === void 0) { opts = {}; }
        if (opts.inherit === false)
            return this._params;
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnest"])(this._cache.path.map(function (matcher) { return matcher._params; }));
    };
    /**
     * @hidden
     * Returns a single parameter from this UrlMatcher by id
     *
     * @param id
     * @param opts
     * @returns {T|Param|any|boolean|UrlMatcher|null}
     */
    UrlMatcher.prototype.parameter = function (id, opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        var findParam = function () {
            for (var _i = 0, _a = _this._params; _i < _a.length; _i++) {
                var param = _a[_i];
                if (param.id === id)
                    return param;
            }
        };
        var parent = this._cache.parent;
        return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;
    };
    /**
     * Validates the input parameter values against this UrlMatcher
     *
     * Checks an object hash of parameters to validate their correctness according to the parameter
     * types of this `UrlMatcher`.
     *
     * @param params The object hash of parameters to validate.
     * @returns Returns `true` if `params` validates, otherwise `false`.
     */
    UrlMatcher.prototype.validates = function (params) {
        var validParamVal = function (param, val) { return !param || param.validates(val); };
        params = params || {};
        // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher
        var paramSchema = this.parameters().filter(function (paramDef) { return params.hasOwnProperty(paramDef.id); });
        return paramSchema.map(function (paramDef) { return validParamVal(paramDef, params[paramDef.id]); }).reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["allTrueR"], true);
    };
    /**
     * Given a set of parameter values, creates a URL from this UrlMatcher.
     *
     * Creates a URL that matches this pattern by substituting the specified values
     * for the path and search parameters.
     *
     * #### Example:
     * ```js
     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
     * // returns '/user/bob?q=yes'
     * ```
     *
     * @param values  the values to substitute for the parameters in this pattern.
     * @returns the formatted URL (path and optionally search part).
     */
    UrlMatcher.prototype.format = function (values) {
        if (values === void 0) { values = {}; }
        // Build the full path of UrlMatchers (including all parent UrlMatchers)
        var urlMatchers = this._cache.path;
        // Extract all the static segments and Params (processed as ParamDetails)
        // into an ordered array
        var pathSegmentsAndParams = urlMatchers
            .map(UrlMatcher.pathSegmentsAndParams)
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .map(function (x) { return (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(x) ? x : getDetails(x)); });
        // Extract the query params into a separate array
        var queryParams = urlMatchers
            .map(UrlMatcher.queryParams)
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .map(getDetails);
        var isInvalid = function (param) { return param.isValid === false; };
        if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {
            return null;
        }
        /**
         * Given a Param, applies the parameter value, then returns detailed information about it
         */
        function getDetails(param) {
            // Normalize to typed value
            var value = param.value(values[param.id]);
            var isValid = param.validates(value);
            var isDefaultValue = param.isDefaultValue(value);
            // Check if we're in squash mode for the parameter
            var squash = isDefaultValue ? param.squash : false;
            // Allow the Parameter's Type to encode the value
            var encoded = param.type.encode(value);
            return { param: param, value: value, isValid: isValid, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };
        }
        // Build up the path-portion from the list of static segments and parameters
        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {
            // The element is a static segment (a raw string); just append it
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(x))
                return acc + x;
            // Otherwise, it's a ParamDetails.
            var squash = x.squash, encoded = x.encoded, param = x.param;
            // If squash is === true, try to remove a slash from the path
            if (squash === true)
                return acc.match(/\/$/) ? acc.slice(0, -1) : acc;
            // If squash is a string, use the string for the param value
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(squash))
                return acc + squash;
            if (squash !== false)
                return acc; // ?
            if (encoded == null)
                return acc;
            // If this parameter value is an array, encode the value using encodeDashes
            if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isArray"])(encoded))
                return acc + Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["map"])(encoded, UrlMatcher.encodeDashes).join('-');
            // If the parameter type is "raw", then do not encodeURIComponent
            if (param.raw)
                return acc + encoded;
            // Encode the value
            return acc + encodeURIComponent(encoded);
        }, '');
        // Build the query string by applying parameter values (array or regular)
        // then mapping to key=value, then flattening and joining using "&"
        var queryString = queryParams
            .map(function (paramDetails) {
            var param = paramDetails.param, squash = paramDetails.squash, encoded = paramDetails.encoded, isDefaultValue = paramDetails.isDefaultValue;
            if (encoded == null || (isDefaultValue && squash !== false))
                return;
            if (!Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isArray"])(encoded))
                encoded = [encoded];
            if (encoded.length === 0)
                return;
            if (!param.raw)
                encoded = Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["map"])(encoded, encodeURIComponent);
            return encoded.map(function (val) { return param.id + "=" + val; });
        })
            .filter(_common_common__WEBPACK_IMPORTED_MODULE_0__["identity"])
            .reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
            .join('&');
        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)
        return pathString + (queryString ? "?" + queryString : '') + (values['#'] ? '#' + values['#'] : '');
    };
    /** @hidden */
    UrlMatcher.nameValidator = /^\w+([-.]+\w+)*(?:\[\])?$/;
    return UrlMatcher;
}());

//# sourceMappingURL=urlMatcher.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcherFactory.js":
/*!***********************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcherFactory.js ***!
  \***********************************************************************************************************/
/*! exports provided: ParamFactory, UrlMatcherFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParamFactory", function() { return ParamFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlMatcherFactory", function() { return UrlMatcherFactory; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _urlMatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./urlMatcher */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcher.js");
/* harmony import */ var _params__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../params */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/params/index.js");
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/** @publicapi @module url */ /** */



/** @internalapi */
var ParamFactory = /** @class */ (function () {
    function ParamFactory(router) {
        this.router = router;
    }
    ParamFactory.prototype.fromConfig = function (id, type, state) {
        return new _params__WEBPACK_IMPORTED_MODULE_2__["Param"](id, type, _params__WEBPACK_IMPORTED_MODULE_2__["DefType"].CONFIG, this.router.urlService.config, state);
    };
    ParamFactory.prototype.fromPath = function (id, type, state) {
        return new _params__WEBPACK_IMPORTED_MODULE_2__["Param"](id, type, _params__WEBPACK_IMPORTED_MODULE_2__["DefType"].PATH, this.router.urlService.config, state);
    };
    ParamFactory.prototype.fromSearch = function (id, type, state) {
        return new _params__WEBPACK_IMPORTED_MODULE_2__["Param"](id, type, _params__WEBPACK_IMPORTED_MODULE_2__["DefType"].SEARCH, this.router.urlService.config, state);
    };
    return ParamFactory;
}());

/**
 * Factory for [[UrlMatcher]] instances.
 *
 * The factory is available to ng1 services as
 * `$urlMatcherFactory` or ng1 providers as `$urlMatcherFactoryProvider`.
 *
 * @internalapi
 */
var UrlMatcherFactory = /** @class */ (function () {
    // TODO: move implementations to UrlConfig (urlService.config)
    function UrlMatcherFactory(/** @hidden */ router) {
        var _this = this;
        this.router = router;
        /** @internalapi Creates a new [[Param]] for a given location (DefType) */
        this.paramFactory = new ParamFactory(this.router);
        /** @deprecated use [[UrlConfig.caseInsensitive]] */
        this.caseInsensitive = function (value) { return _this.router.urlService.config.caseInsensitive(value); };
        /** @deprecated use [[UrlConfig.defaultSquashPolicy]] */
        this.defaultSquashPolicy = function (value) { return _this.router.urlService.config.defaultSquashPolicy(value); };
        /** @deprecated use [[UrlConfig.strictMode]] */
        this.strictMode = function (value) { return _this.router.urlService.config.strictMode(value); };
        /** @deprecated use [[UrlConfig.type]] */
        this.type = function (name, definition, definitionFn) {
            return _this.router.urlService.config.type(name, definition, definitionFn) || _this;
        };
        Object(_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(this, { UrlMatcher: _urlMatcher__WEBPACK_IMPORTED_MODULE_1__["UrlMatcher"], Param: _params__WEBPACK_IMPORTED_MODULE_2__["Param"] });
    }
    /**
     * Creates a [[UrlMatcher]] for the specified pattern.
     *
     * @param pattern  The URL pattern.
     * @param config  The config object hash.
     * @returns The UrlMatcher.
     */
    UrlMatcherFactory.prototype.compile = function (pattern, config) {
        var urlConfig = this.router.urlService.config;
        // backward-compatible support for config.params -> config.state.params
        var params = config && !config.state && config.params;
        config = params ? __assign({ state: { params: params } }, config) : config;
        var globalConfig = { strict: urlConfig._isStrictMode, caseInsensitive: urlConfig._isCaseInsensitive };
        return new _urlMatcher__WEBPACK_IMPORTED_MODULE_1__["UrlMatcher"](pattern, urlConfig.paramTypes, this.paramFactory, Object(_common__WEBPACK_IMPORTED_MODULE_0__["extend"])(globalConfig, config));
    };
    /**
     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.
     *
     * @param object  The object to perform the type check against.
     * @returns `true` if the object matches the `UrlMatcher` interface, by
     *          implementing all the same methods.
     */
    UrlMatcherFactory.prototype.isMatcher = function (object) {
        // TODO: typeof?
        if (!Object(_common__WEBPACK_IMPORTED_MODULE_0__["isObject"])(object))
            return false;
        var result = true;
        Object(_common__WEBPACK_IMPORTED_MODULE_0__["forEach"])(_urlMatcher__WEBPACK_IMPORTED_MODULE_1__["UrlMatcher"].prototype, function (val, name) {
            if (Object(_common__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(val))
                result = result && (Object(_common__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(object[name]) && Object(_common__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(object[name]));
        });
        return result;
    };
    /** @hidden */
    UrlMatcherFactory.prototype.$get = function () {
        var urlConfig = this.router.urlService.config;
        urlConfig.paramTypes.enqueue = false;
        urlConfig.paramTypes._flushTypeQueue();
        return this;
    };
    return UrlMatcherFactory;
}());

//# sourceMappingURL=urlMatcherFactory.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRouter.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRouter.js ***!
  \***************************************************************************************************/
/*! exports provided: UrlRouter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlRouter", function() { return UrlRouter; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _urlRule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./urlRule */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRule.js");
/** @publicapi @module url */ /** */


/** @hidden */
function appendBasePath(url, isHtml5, absolute, baseHref) {
    if (baseHref === '/')
        return url;
    if (isHtml5)
        return Object(_common__WEBPACK_IMPORTED_MODULE_0__["stripLastPathElement"])(baseHref) + url;
    if (absolute)
        return baseHref.slice(1) + url;
    return url;
}
/**
 * Updates URL and responds to URL changes
 *
 * ### Deprecation warning:
 * This class is now considered to be an internal API
 * Use the [[UrlService]] instead.
 * For configuring URL rules, use the [[UrlRules]] which can be found as [[UrlService.rules]].
 *
 * @internalapi
 */
var UrlRouter = /** @class */ (function () {
    /** @hidden */
    function UrlRouter(/** @hidden */ router) {
        var _this = this;
        this.router = router;
        // Delegate these calls to [[UrlService]]
        /** @deprecated use [[UrlService.sync]]*/
        this.sync = function (evt) { return _this.router.urlService.sync(evt); };
        /** @deprecated use [[UrlService.listen]]*/
        this.listen = function (enabled) { return _this.router.urlService.listen(enabled); };
        /** @deprecated use [[UrlService.deferIntercept]]*/
        this.deferIntercept = function (defer) { return _this.router.urlService.deferIntercept(defer); };
        /** @deprecated use [[UrlService.match]]*/
        this.match = function (urlParts) { return _this.router.urlService.match(urlParts); };
        // Delegate these calls to [[UrlRules]]
        /** @deprecated use [[UrlRules.initial]]*/
        this.initial = function (handler) {
            return _this.router.urlService.rules.initial(handler);
        };
        /** @deprecated use [[UrlRules.otherwise]]*/
        this.otherwise = function (handler) {
            return _this.router.urlService.rules.otherwise(handler);
        };
        /** @deprecated use [[UrlRules.removeRule]]*/
        this.removeRule = function (rule) { return _this.router.urlService.rules.removeRule(rule); };
        /** @deprecated use [[UrlRules.rule]]*/
        this.rule = function (rule) { return _this.router.urlService.rules.rule(rule); };
        /** @deprecated use [[UrlRules.rules]]*/
        this.rules = function () { return _this.router.urlService.rules.rules(); };
        /** @deprecated use [[UrlRules.sort]]*/
        this.sort = function (compareFn) { return _this.router.urlService.rules.sort(compareFn); };
        /** @deprecated use [[UrlRules.when]]*/
        this.when = function (matcher, handler, options) { return _this.router.urlService.rules.when(matcher, handler, options); };
        this.urlRuleFactory = new _urlRule__WEBPACK_IMPORTED_MODULE_1__["UrlRuleFactory"](router);
    }
    /**
     * Internal API.
     * @internalapi
     */
    UrlRouter.prototype.update = function (read) {
        var $url = this.router.locationService;
        if (read) {
            this.location = $url.url();
            return;
        }
        if ($url.url() === this.location)
            return;
        $url.url(this.location, true);
    };
    /**
     * Internal API.
     *
     * Pushes a new location to the browser history.
     *
     * @internalapi
     * @param urlMatcher
     * @param params
     * @param options
     */
    UrlRouter.prototype.push = function (urlMatcher, params, options) {
        var replace = options && !!options.replace;
        this.router.urlService.url(urlMatcher.format(params || {}), replace);
    };
    /**
     * Builds and returns a URL with interpolated parameters
     *
     * #### Example:
     * ```js
     * matcher = $umf.compile("/about/:person");
     * params = { person: "bob" };
     * $bob = $urlRouter.href(matcher, params);
     * // $bob == "/about/bob";
     * ```
     *
     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.
     * @param params An object of parameter values to fill the matcher's required parameters.
     * @param options Options object. The options are:
     *
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     *
     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
     */
    UrlRouter.prototype.href = function (urlMatcher, params, options) {
        var url = urlMatcher.format(params);
        if (url == null)
            return null;
        options = options || { absolute: false };
        var cfg = this.router.urlService.config;
        var isHtml5 = cfg.html5Mode();
        if (!isHtml5 && url !== null) {
            url = '#' + cfg.hashPrefix() + url;
        }
        url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());
        if (!options.absolute || !url) {
            return url;
        }
        var slash = !isHtml5 && url ? '/' : '';
        var cfgPort = cfg.port();
        var port = (cfgPort === 80 || cfgPort === 443 ? '' : ':' + cfgPort);
        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');
    };
    Object.defineProperty(UrlRouter.prototype, "interceptDeferred", {
        /** @deprecated use [[UrlService.interceptDeferred]]*/
        get: function () {
            return this.router.urlService.interceptDeferred;
        },
        enumerable: true,
        configurable: true
    });
    return UrlRouter;
}());

//# sourceMappingURL=urlRouter.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRule.js":
/*!*************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRule.js ***!
  \*************************************************************************************************/
/*! exports provided: UrlRuleFactory, BaseUrlRule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlRuleFactory", function() { return UrlRuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseUrlRule", function() { return BaseUrlRule; });
/* harmony import */ var _urlMatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./urlMatcher */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcher.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _state_stateObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../state/stateObject */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateObject.js");
/** @publicapi @module url */ /** */





/**
 * Creates a [[UrlRule]]
 *
 * Creates a [[UrlRule]] from a:
 *
 * - `string`
 * - [[UrlMatcher]]
 * - `RegExp`
 * - [[StateObject]]
 * @internalapi
 */
var UrlRuleFactory = /** @class */ (function () {
    function UrlRuleFactory(router) {
        this.router = router;
    }
    UrlRuleFactory.prototype.compile = function (str) {
        return this.router.urlMatcherFactory.compile(str);
    };
    UrlRuleFactory.prototype.create = function (what, handler) {
        var _this = this;
        var isState = _state_stateObject__WEBPACK_IMPORTED_MODULE_4__["StateObject"].isState;
        var makeRule = Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["pattern"])([
            [_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"], function (_what) { return makeRule(_this.compile(_what)); }],
            [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["is"])(_urlMatcher__WEBPACK_IMPORTED_MODULE_0__["UrlMatcher"]), function (_what) { return _this.fromUrlMatcher(_what, handler); }],
            [isState, function (_what) { return _this.fromState(_what, _this.router); }],
            [Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["is"])(RegExp), function (_what) { return _this.fromRegExp(_what, handler); }],
            [_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isFunction"], function (_what) { return new BaseUrlRule(_what, handler); }],
        ]);
        var rule = makeRule(what);
        if (!rule)
            throw new Error("invalid 'what' in when()");
        return rule;
    };
    /**
     * A UrlRule which matches based on a UrlMatcher
     *
     * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]
     *
     * ## Handler as a function
     *
     * If `handler` is a function, the function is invoked with:
     *
     * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])
     * - url: the current Url ([[UrlParts]])
     * - router: the router object ([[UIRouter]])
     *
     * #### Example:
     * ```js
     * var urlMatcher = $umf.compile("/foo/:fooId/:barId");
     * var rule = factory.fromUrlMatcher(urlMatcher, match => "/home/" + match.fooId + "/" + match.barId);
     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }
     * var result = rule.handler(match); // '/home/123/456'
     * ```
     *
     * ## Handler as UrlMatcher
     *
     * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.
     * The `handler` UrlMatcher is formatted using the matched param from the first matcher.
     * The url is replaced with the result.
     *
     * #### Example:
     * ```js
     * var urlMatcher = $umf.compile("/foo/:fooId/:barId");
     * var handler = $umf.compile("/home/:fooId/:barId");
     * var rule = factory.fromUrlMatcher(urlMatcher, handler);
     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }
     * var result = rule.handler(match); // '/home/123/456'
     * ```
     */
    UrlRuleFactory.prototype.fromUrlMatcher = function (urlMatcher, handler) {
        var _handler = handler;
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(handler))
            handler = this.router.urlMatcherFactory.compile(handler);
        if (Object(_common_hof__WEBPACK_IMPORTED_MODULE_3__["is"])(_urlMatcher__WEBPACK_IMPORTED_MODULE_0__["UrlMatcher"])(handler))
            _handler = function (match) { return handler.format(match); };
        function matchUrlParamters(url) {
            var params = urlMatcher.exec(url.path, url.search, url.hash);
            return urlMatcher.validates(params) && params;
        }
        // Prioritize URLs, lowest to highest:
        // - Some optional URL parameters, but none matched
        // - No optional parameters in URL
        // - Some optional parameters, some matched
        // - Some optional parameters, all matched
        function matchPriority(params) {
            var optional = urlMatcher.parameters().filter(function (param) { return param.isOptional; });
            if (!optional.length)
                return 0.000001;
            var matched = optional.filter(function (param) { return params[param.id]; });
            return matched.length / optional.length;
        }
        var details = { urlMatcher: urlMatcher, matchPriority: matchPriority, type: 'URLMATCHER' };
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_2__["extend"])(new BaseUrlRule(matchUrlParamters, _handler), details);
    };
    /**
     * A UrlRule which matches a state by its url
     *
     * #### Example:
     * ```js
     * var rule = factory.fromState($state.get('foo'), router);
     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }
     * var result = rule.handler(match);
     * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }
     * ```
     */
    UrlRuleFactory.prototype.fromState = function (state, router) {
        /**
         * Handles match by transitioning to matched state
         *
         * First checks if the router should start a new transition.
         * A new transition is not required if the current state's URL
         * and the new URL are already identical
         */
        var handler = function (match) {
            var $state = router.stateService;
            var globals = router.globals;
            if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {
                $state.transitionTo(state, match, { inherit: true, source: 'url' });
            }
        };
        var details = { state: state, type: 'STATE' };
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_2__["extend"])(this.fromUrlMatcher(state.url, handler), details);
    };
    /**
     * A UrlRule which matches based on a regular expression
     *
     * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.
     *
     * ## Handler as a function
     *
     * If `handler` is a function, the function is invoked with:
     *
     * - regexp match array (from `regexp`)
     * - url: the current Url ([[UrlParts]])
     * - router: the router object ([[UIRouter]])
     *
     * #### Example:
     * ```js
     * var rule = factory.fromRegExp(/^\/foo\/(bar|baz)$/, match => "/home/" + match[1])
     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]
     * var result = rule.handler(match); // '/home/bar'
     * ```
     *
     * ## Handler as string
     *
     * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.
     * The string is first interpolated using `string.replace()` style pattern.
     *
     * #### Example:
     * ```js
     * var rule = factory.fromRegExp(/^\/foo\/(bar|baz)$/, "/home/$1")
     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]
     * var result = rule.handler(match); // '/home/bar'
     * ```
     */
    UrlRuleFactory.prototype.fromRegExp = function (regexp, handler) {
        if (regexp.global || regexp.sticky)
            throw new Error('Rule RegExp must not be global or sticky');
        /**
         * If handler is a string, the url will be replaced by the string.
         * If the string has any String.replace() style variables in it (like `$2`),
         * they will be replaced by the captures from [[match]]
         */
        var redirectUrlTo = function (match) {
            // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern
            return handler.replace(/\$(\$|\d{1,2})/, function (m, what) { return match[what === '$' ? 0 : Number(what)]; });
        };
        var _handler = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isString"])(handler) ? redirectUrlTo : handler;
        var matchParamsFromRegexp = function (url) { return regexp.exec(url.path); };
        var details = { regexp: regexp, type: 'REGEXP' };
        return Object(_common_common__WEBPACK_IMPORTED_MODULE_2__["extend"])(new BaseUrlRule(matchParamsFromRegexp, _handler), details);
    };
    UrlRuleFactory.isUrlRule = function (obj) { return obj && ['type', 'match', 'handler'].every(function (key) { return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(obj[key]); }); };
    return UrlRuleFactory;
}());

/**
 * A base rule which calls `match`
 *
 * The value from the `match` function is passed through to the `handler`.
 * @internalapi
 */
var BaseUrlRule = /** @class */ (function () {
    function BaseUrlRule(match, handler) {
        var _this = this;
        this.match = match;
        this.type = 'RAW';
        this.matchPriority = function (match) { return 0 - _this.$id; };
        this.handler = handler || _common_common__WEBPACK_IMPORTED_MODULE_2__["identity"];
    }
    return BaseUrlRule;
}());

//# sourceMappingURL=urlRule.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRules.js":
/*!**************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRules.js ***!
  \**************************************************************************************************/
/*! exports provided: UrlRules */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlRules", function() { return UrlRules; });
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/index.js");
/* harmony import */ var _urlMatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./urlMatcher */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcher.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _urlRule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./urlRule */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRule.js");




/** @hidden */
var prioritySort = function (a, b) { return (b.priority || 0) - (a.priority || 0); };
/** @hidden */
var typeSort = function (a, b) {
    var weights = { STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1 };
    return (weights[a.type] || 0) - (weights[b.type] || 0);
};
/** @hidden */
var urlMatcherSort = function (a, b) {
    return !a.urlMatcher || !b.urlMatcher ? 0 : _urlMatcher__WEBPACK_IMPORTED_MODULE_1__["UrlMatcher"].compare(a.urlMatcher, b.urlMatcher);
};
/** @hidden */
var idSort = function (a, b) {
    // Identically sorted STATE and URLMATCHER best rule will be chosen by `matchPriority` after each rule matches the URL
    var useMatchPriority = { STATE: true, URLMATCHER: true };
    var equal = useMatchPriority[a.type] && useMatchPriority[b.type];
    return equal ? 0 : (a.$id || 0) - (b.$id || 0);
};
/**
 * Default rule priority sorting function.
 *
 * Sorts rules by:
 *
 * - Explicit priority (set rule priority using [[UrlRules.when]])
 * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)
 * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.
 * - Rule registration order (for rule types other than STATE and URLMATCHER)
 *   - Equally sorted State and UrlMatcher rules will each match the URL.
 *     Then, the *best* match is chosen based on how many parameter values were matched.
 *
 * @publicapi
 */
var defaultRuleSortFn;
defaultRuleSortFn = function (a, b) {
    var cmp = prioritySort(a, b);
    if (cmp !== 0)
        return cmp;
    cmp = typeSort(a, b);
    if (cmp !== 0)
        return cmp;
    cmp = urlMatcherSort(a, b);
    if (cmp !== 0)
        return cmp;
    return idSort(a, b);
};
/** @hidden */
function getHandlerFn(handler) {
    if (!Object(_common__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(handler) && !Object(_common__WEBPACK_IMPORTED_MODULE_2__["isString"])(handler) && !Object(_common__WEBPACK_IMPORTED_MODULE_2__["is"])(_state__WEBPACK_IMPORTED_MODULE_0__["TargetState"])(handler) && !_state__WEBPACK_IMPORTED_MODULE_0__["TargetState"].isDef(handler)) {
        throw new Error("'handler' must be a string, function, TargetState, or have a state: 'newtarget' property");
    }
    return Object(_common__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(handler) ? handler : Object(_common__WEBPACK_IMPORTED_MODULE_2__["val"])(handler);
}
/**
 * API for managing URL rules
 *
 * This API is used to create and manage URL rules.
 * URL rules are a mechanism to respond to specific URL patterns.
 *
 * The most commonly used methods are [[otherwise]] and [[when]].
 *
 * This API is a property of [[UrlService]] as [[UrlService.rules]]
 *
 * @publicapi
 */
var UrlRules = /** @class */ (function () {
    /** @hidden */
    function UrlRules(/** @hidden */ router) {
        this.router = router;
        /** @hidden */ this._sortFn = defaultRuleSortFn;
        /** @hidden */ this._rules = [];
        /** @hidden */ this._id = 0;
        this.urlRuleFactory = new _urlRule__WEBPACK_IMPORTED_MODULE_3__["UrlRuleFactory"](router);
    }
    /** @hidden */
    UrlRules.prototype.dispose = function (router) {
        this._rules = [];
        delete this._otherwiseFn;
    };
    /**
     * Defines the initial state, path, or behavior to use when the app starts.
     *
     * This rule defines the initial/starting state for the application.
     *
     * This rule is triggered the first time the URL is checked (when the app initially loads).
     * The rule is triggered only when the url matches either `""` or `"/"`.
     *
     * Note: The rule is intended to be used when the root of the application is directly linked to.
     * When the URL is *not* `""` or `"/"` and doesn't match other rules, the [[otherwise]] rule is triggered.
     * This allows 404-like behavior when an unknown URL is deep-linked.
     *
     * #### Example:
     * Start app at `home` state.
     * ```js
     * .initial({ state: 'home' });
     * ```
     *
     * #### Example:
     * Start app at `/home` (by url)
     * ```js
     * .initial('/home');
     * ```
     *
     * #### Example:
     * When no other url rule matches, go to `home` state
     * ```js
     * .initial((matchValue, url, router) => {
     *   console.log('initial state');
     *   return { state: 'home' };
     * })
     * ```
     *
     * @param handler The initial state or url path, or a function which returns the state or url path (or performs custom logic).
     */
    UrlRules.prototype.initial = function (handler) {
        var handlerFn = getHandlerFn(handler);
        var matchFn = function (urlParts, router) {
            return router.globals.transitionHistory.size() === 0 && !!/^\/?$/.exec(urlParts.path);
        };
        this.rule(this.urlRuleFactory.create(matchFn, handlerFn));
    };
    /**
     * Defines the state, url, or behavior to use when no other rule matches the URL.
     *
     * This rule is matched when *no other rule* matches.
     * It is generally used to handle unknown URLs (similar to "404" behavior, but on the client side).
     *
     * - If `handler` a string, it is treated as a url redirect
     *
     * #### Example:
     * When no other url rule matches, redirect to `/index`
     * ```js
     * .otherwise('/index');
     * ```
     *
     * - If `handler` is an object with a `state` property, the state is activated.
     *
     * #### Example:
     * When no other url rule matches, redirect to `home` and provide a `dashboard` parameter value.
     * ```js
     * .otherwise({ state: 'home', params: { dashboard: 'default' } });
     * ```
     *
     * - If `handler` is a function, the function receives the current url ([[UrlParts]]) and the [[UIRouter]] object.
     *   The function can perform actions, and/or return a value.
     *
     * #### Example:
     * When no other url rule matches, manually trigger a transition to the `home` state
     * ```js
     * .otherwise((matchValue, urlParts, router) => {
     *   router.stateService.go('home');
     * });
     * ```
     *
     * #### Example:
     * When no other url rule matches, go to `home` state
     * ```js
     * .otherwise((matchValue, urlParts, router) => {
     *   return { state: 'home' };
     * });
     * ```
     *
     * @param handler The url path to redirect to, or a function which returns the url path (or performs custom logic).
     */
    UrlRules.prototype.otherwise = function (handler) {
        var handlerFn = getHandlerFn(handler);
        this._otherwiseFn = this.urlRuleFactory.create(Object(_common__WEBPACK_IMPORTED_MODULE_2__["val"])(true), handlerFn);
        this._sorted = false;
    };
    /**
     * Remove a rule previously registered
     *
     * @param rule the matcher rule that was previously registered using [[rule]]
     */
    UrlRules.prototype.removeRule = function (rule) {
        Object(_common__WEBPACK_IMPORTED_MODULE_2__["removeFrom"])(this._rules, rule);
    };
    /**
     * Manually adds a URL Rule.
     *
     * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].
     * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).
     * Rules can be created using [[urlRuleFactory]], or created manually as simple objects.
     *
     * A rule should have a `match` function which returns truthy if the rule matched.
     * It should also have a `handler` function which is invoked if the rule is the best match.
     *
     * @return a function that deregisters the rule
     */
    UrlRules.prototype.rule = function (rule) {
        var _this = this;
        if (!_urlRule__WEBPACK_IMPORTED_MODULE_3__["UrlRuleFactory"].isUrlRule(rule))
            throw new Error('invalid rule');
        rule.$id = this._id++;
        rule.priority = rule.priority || 0;
        this._rules.push(rule);
        this._sorted = false;
        return function () { return _this.removeRule(rule); };
    };
    /**
     * Gets all registered rules
     *
     * @returns an array of all the registered rules
     */
    UrlRules.prototype.rules = function () {
        this.ensureSorted();
        return this._rules.concat(this._otherwiseFn ? [this._otherwiseFn] : []);
    };
    /**
     * Defines URL Rule priorities
     *
     * More than one rule ([[UrlRule]]) might match a given URL.
     * This `compareFn` is used to sort the rules by priority.
     * Higher priority rules should sort earlier.
     *
     * The [[defaultRuleSortFn]] is used by default.
     *
     * You only need to call this function once.
     * The `compareFn` will be used to sort the rules as each is registered.
     *
     * If called without any parameter, it will re-sort the rules.
     *
     * ---
     *
     * Url rules may come from multiple sources: states's urls ([[StateDeclaration.url]]), [[when]], and [[rule]].
     * Each rule has a (user-provided) [[UrlRule.priority]], a [[UrlRule.type]], and a [[UrlRule.$id]]
     * The `$id` is is the order in which the rule was registered.
     *
     * The sort function should use these data, or data found on a specific type
     * of [[UrlRule]] (such as [[StateRule.state]]), to order the rules as desired.
     *
     * #### Example:
     * This compare function prioritizes rules by the order in which the rules were registered.
     * A rule registered earlier has higher priority.
     *
     * ```js
     * function compareFn(a, b) {
     *   return a.$id - b.$id;
     * }
     * ```
     *
     * @param compareFn a function that compares to [[UrlRule]] objects.
     *    The `compareFn` should abide by the `Array.sort` compare function rules.
     *    Given two rules, `a` and `b`, return a negative number if `a` should be higher priority.
     *    Return a positive number if `b` should be higher priority.
     *    Return `0` if the rules are identical.
     *
     *    See the [mozilla reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description)
     *    for details.
     */
    UrlRules.prototype.sort = function (compareFn) {
        var sorted = this.stableSort(this._rules, (this._sortFn = compareFn || this._sortFn));
        // precompute _sortGroup values and apply to each rule
        var group = 0;
        for (var i = 0; i < sorted.length; i++) {
            sorted[i]._group = group;
            if (i < sorted.length - 1 && this._sortFn(sorted[i], sorted[i + 1]) !== 0) {
                group++;
            }
        }
        this._rules = sorted;
        this._sorted = true;
    };
    /** @hidden */
    UrlRules.prototype.ensureSorted = function () {
        this._sorted || this.sort();
    };
    /** @hidden */
    UrlRules.prototype.stableSort = function (arr, compareFn) {
        var arrOfWrapper = arr.map(function (elem, idx) { return ({ elem: elem, idx: idx }); });
        arrOfWrapper.sort(function (wrapperA, wrapperB) {
            var cmpDiff = compareFn(wrapperA.elem, wrapperB.elem);
            return cmpDiff === 0 ? wrapperA.idx - wrapperB.idx : cmpDiff;
        });
        return arrOfWrapper.map(function (wrapper) { return wrapper.elem; });
    };
    /**
     * Registers a `matcher` and `handler` for custom URLs handling.
     *
     * The `matcher` can be:
     *
     * - a [[UrlMatcher]]: See: [[UrlMatcherFactory.compile]]
     * - a `string`: The string is compiled to a [[UrlMatcher]]
     * - a `RegExp`: The regexp is used to match the url.
     *
     * The `handler` can be:
     *
     * - a string: The url is redirected to the value of the string.
     * - a function: The url is redirected to the return value of the function.
     *
     * ---
     *
     * When the `handler` is a `string` and the `matcher` is a `UrlMatcher` (or string), the redirect
     * string is interpolated with parameter values.
     *
     * #### Example:
     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.
     * ```js
     * .when("/foo/:param1", "/bar/:param1")
     * ```
     *
     * ---
     *
     * When the `handler` is a string and the `matcher` is a `RegExp`, the redirect string is
     * interpolated with capture groups from the RegExp.
     *
     * #### Example:
     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.
     * ```js
     * .when(new RegExp("^/foo/(.*)$"), "/bar/$1");
     * ```
     *
     * ---
     *
     * When the handler is a function, it receives the matched value, the current URL, and the `UIRouter` object (See [[UrlRuleHandlerFn]]).
     * The "matched value" differs based on the `matcher`.
     * For [[UrlMatcher]]s, it will be the matched state params.
     * For `RegExp`, it will be the match array from `regexp.exec()`.
     *
     * If the handler returns a string, the URL is redirected to the string.
     *
     * #### Example:
     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.
     * ```js
     * .when(new RegExp("^/foo/(.*)$"), match => "/bar/" + match[1]);
     * ```
     *
     * Note: the `handler` may also invoke arbitrary code, such as `$state.go()`
     *
     * @param matcher A pattern `string` to match, compiled as a [[UrlMatcher]], or a `RegExp`.
     * @param handler The path to redirect to, or a function that returns the path.
     * @param options `{ priority: number }`
     *
     * @return the registered [[UrlRule]]
     */
    UrlRules.prototype.when = function (matcher, handler, options) {
        var rule = this.urlRuleFactory.create(matcher, handler);
        if (Object(_common__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options && options.priority))
            rule.priority = options.priority;
        this.rule(rule);
        return rule;
    };
    return UrlRules;
}());

//# sourceMappingURL=urlRules.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlService.js":
/*!****************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlService.js ***!
  \****************************************************************************************************/
/*! exports provided: UrlService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlService", function() { return UrlService; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _urlRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./urlRules */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRules.js");
/* harmony import */ var _urlConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./urlConfig */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlConfig.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/state/index.js");




/** API for URL management */
var UrlService = /** @class */ (function () {
    /** @hidden */
    function UrlService(/** @hidden */ router) {
        var _this = this;
        this.router = router;
        /** @hidden */ this.interceptDeferred = false;
        /**
         * The nested [[UrlRules]] API for managing URL rules and rewrites
         *
         * See: [[UrlRules]] for details
         */
        this.rules = new _urlRules__WEBPACK_IMPORTED_MODULE_1__["UrlRules"](this.router);
        /**
         * The nested [[UrlConfig]] API to configure the URL and retrieve URL information
         *
         * See: [[UrlConfig]] for details
         */
        this.config = new _urlConfig__WEBPACK_IMPORTED_MODULE_2__["UrlConfig"](this.router);
        // Delegate these calls to the current LocationServices implementation
        /**
         * Gets the current url, or updates the url
         *
         * ### Getting the current URL
         *
         * When no arguments are passed, returns the current URL.
         * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.
         *
         * For example, the URL may be stored in the hash ([[HashLocationServices]]) or
         * have a base HREF prepended ([[PushStateLocationServices]]).
         *
         * The raw URL in the browser might be:
         *
         * ```
         * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor
         * ```
         *
         * or
         *
         * ```
         * http://mysite.com/basepath/internal/path/123?param1=foo#anchor
         * ```
         *
         * then this method returns:
         *
         * ```
         * /internal/path/123?param1=foo#anchor
         * ```
         *
         *
         * #### Example:
         * ```js
         * locationServices.url(); // "/some/path?query=value#anchor"
         * ```
         *
         * ### Updating the URL
         *
         * When `newurl` arguments is provided, changes the URL to reflect `newurl`
         *
         * #### Example:
         * ```js
         * locationServices.url("/some/path?query=value#anchor", true);
         * ```
         *
         * @param newurl The new value for the URL.
         *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.
         *               It should not include the protocol, site, port, or base path of an absolute HREF.
         * @param replace When true, replaces the current history entry (instead of appending it) with this new url
         * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)
         *
         * @return the url (after potentially being processed)
         */
        this.url = function (newurl, replace, state) {
            return _this.router.locationService.url(newurl, replace, state);
        };
        /**
         * Gets the path part of the current url
         *
         * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`
         *
         * @return the path portion of the url
         */
        this.path = function () { return _this.router.locationService.path(); };
        /**
         * Gets the search part of the current url as an object
         *
         * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`
         *
         * @return the search (query) portion of the url, as an object
         */
        this.search = function () { return _this.router.locationService.search(); };
        /**
         * Gets the hash part of the current url
         *
         * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`
         *
         * @return the hash (anchor) portion of the url
         */
        this.hash = function () { return _this.router.locationService.hash(); };
        /**
         * @internalapi
         *
         * Registers a low level url change handler
         *
         * Note: Because this is a low level handler, it's not recommended for general use.
         *
         * #### Example:
         * ```js
         * let deregisterFn = locationServices.onChange((evt) => console.log("url change", evt));
         * ```
         *
         * @param callback a function that will be called when the url is changing
         * @return a function that de-registers the callback
         */
        this.onChange = function (callback) { return _this.router.locationService.onChange(callback); };
    }
    /** @hidden */
    UrlService.prototype.dispose = function () {
        this.listen(false);
        this.rules.dispose();
    };
    /**
     * Gets the current URL parts
     *
     * This method returns the different parts of the current URL (the [[path]], [[search]], and [[hash]]) as a [[UrlParts]] object.
     */
    UrlService.prototype.parts = function () {
        return { path: this.path(), search: this.search(), hash: this.hash() };
    };
    /**
     * Activates the best rule for the current URL
     *
     * Checks the current URL for a matching [[UrlRule]], then invokes that rule's handler.
     * This method is called internally any time the URL has changed.
     *
     * This effectively activates the state (or redirect, etc) which matches the current URL.
     *
     * #### Example:
     * ```js
     * urlService.deferIntercept();
     *
     * fetch('/states.json').then(resp => resp.json()).then(data => {
     *   data.forEach(state => $stateRegistry.register(state));
     *   urlService.listen();
     *   // Find the matching URL and invoke the handler.
     *   urlService.sync();
     * });
     * ```
     */
    UrlService.prototype.sync = function (evt) {
        if (evt && evt.defaultPrevented)
            return;
        var _a = this.router, urlService = _a.urlService, stateService = _a.stateService;
        var url = { path: urlService.path(), search: urlService.search(), hash: urlService.hash() };
        var best = this.match(url);
        var applyResult = Object(_common__WEBPACK_IMPORTED_MODULE_0__["pattern"])([
            [_common__WEBPACK_IMPORTED_MODULE_0__["isString"], function (newurl) { return urlService.url(newurl, true); }],
            [_state__WEBPACK_IMPORTED_MODULE_3__["TargetState"].isDef, function (def) { return stateService.go(def.state, def.params, def.options); }],
            [Object(_common__WEBPACK_IMPORTED_MODULE_0__["is"])(_state__WEBPACK_IMPORTED_MODULE_3__["TargetState"]), function (target) { return stateService.go(target.state(), target.params(), target.options()); }],
        ]);
        applyResult(best && best.rule.handler(best.match, url, this.router));
    };
    /**
     * Starts or stops listening for URL changes
     *
     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.
     * This causes UI-Router to start listening for changes to the URL, if it wasn't already listening.
     *
     * If called with `false`, UI-Router will stop listening (call listen(true) to start listening again).
     *
     * #### Example:
     * ```js
     * urlService.deferIntercept();
     *
     * fetch('/states.json').then(resp => resp.json()).then(data => {
     *   data.forEach(state => $stateRegistry.register(state));
     *   // Start responding to URL changes
     *   urlService.listen();
     *   urlService.sync();
     * });
     * ```
     *
     * @param enabled `true` or `false` to start or stop listening to URL changes
     */
    UrlService.prototype.listen = function (enabled) {
        var _this = this;
        if (enabled === false) {
            this._stopListeningFn && this._stopListeningFn();
            delete this._stopListeningFn;
        }
        else {
            return (this._stopListeningFn = this._stopListeningFn || this.router.urlService.onChange(function (evt) { return _this.sync(evt); }));
        }
    };
    /**
     * Disables monitoring of the URL.
     *
     * Call this method before UI-Router has bootstrapped.
     * It will stop UI-Router from performing the initial url sync.
     *
     * This can be useful to perform some asynchronous initialization before the router starts.
     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.
     *
     * #### Example:
     * ```js
     * // Prevent UI-Router from automatically intercepting URL changes when it starts;
     * urlService.deferIntercept();
     *
     * fetch('/states.json').then(resp => resp.json()).then(data => {
     *   data.forEach(state => $stateRegistry.register(state));
     *   urlService.listen();
     *   urlService.sync();
     * });
     * ```
     *
     * @param defer Indicates whether to defer location change interception.
     *        Passing no parameter is equivalent to `true`.
     */
    UrlService.prototype.deferIntercept = function (defer) {
        if (defer === undefined)
            defer = true;
        this.interceptDeferred = defer;
    };
    /**
     * Matches a URL
     *
     * Given a URL (as a [[UrlParts]] object), check all rules and determine the best matching rule.
     * Return the result as a [[MatchResult]].
     */
    UrlService.prototype.match = function (url) {
        var _this = this;
        url = Object(_common__WEBPACK_IMPORTED_MODULE_0__["extend"])({ path: '', search: {}, hash: '' }, url);
        var rules = this.rules.rules();
        // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined
        var checkRule = function (rule) {
            var match = rule.match(url, _this.router);
            return match && { match: match, rule: rule, weight: rule.matchPriority(match) };
        };
        // The rules are pre-sorted.
        // - Find the first matching rule.
        // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.
        // - Choose the rule with the highest match weight.
        var best;
        for (var i = 0; i < rules.length; i++) {
            // Stop when there is a 'best' rule and the next rule sorts differently than it.
            if (best && best.rule._group !== rules[i]._group)
                break;
            var current = checkRule(rules[i]);
            // Pick the best MatchResult
            best = !best || (current && current.weight > best.weight) ? current : best;
        }
        return best;
    };
    return UrlService;
}());

//# sourceMappingURL=urlService.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla.js":
/*!*********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla.js ***!
  \*********************************************************************************************/
/*! exports provided: $q, $injector, BaseLocationServices, HashLocationService, MemoryLocationService, PushStateLocationService, MemoryLocationConfig, BrowserLocationConfig, keyValsToObjectR, getParams, parseUrl, buildUrl, locationPluginFactory, servicesPlugin, hashLocationPlugin, pushStateLocationPlugin, memoryLocationPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vanilla_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vanilla/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$q", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["$q"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$injector", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["$injector"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseLocationServices", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["BaseLocationServices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HashLocationService", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["HashLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationService", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["MemoryLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PushStateLocationService", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["PushStateLocationService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationConfig", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["MemoryLocationConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserLocationConfig", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["BrowserLocationConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keyValsToObjectR", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["keyValsToObjectR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["getParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["parseUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildUrl", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["buildUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "locationPluginFactory", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["locationPluginFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "servicesPlugin", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["servicesPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hashLocationPlugin", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["hashLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushStateLocationPlugin", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["pushStateLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoryLocationPlugin", function() { return _vanilla_index__WEBPACK_IMPORTED_MODULE_0__["memoryLocationPlugin"]; });

/** @internalapi @module vanilla */ /** */

//# sourceMappingURL=vanilla.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/baseLocationService.js":
/*!*****************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/baseLocationService.js ***!
  \*****************************************************************************************************************/
/*! exports provided: BaseLocationServices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseLocationServices", function() { return BaseLocationServices; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/utils.js");
/** @internalapi @module vanilla */ /** */


/** A base `LocationServices` */
var BaseLocationServices = /** @class */ (function () {
    function BaseLocationServices(router, fireAfterUpdate) {
        var _this = this;
        this.fireAfterUpdate = fireAfterUpdate;
        this._listeners = [];
        this._listener = function (evt) { return _this._listeners.forEach(function (cb) { return cb(evt); }); };
        this.hash = function () { return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["parseUrl"])(_this._get()).hash; };
        this.path = function () { return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["parseUrl"])(_this._get()).path; };
        this.search = function () { return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getParams"])(Object(_utils__WEBPACK_IMPORTED_MODULE_1__["parseUrl"])(_this._get()).search); };
        this._location = _common__WEBPACK_IMPORTED_MODULE_0__["root"].location;
        this._history = _common__WEBPACK_IMPORTED_MODULE_0__["root"].history;
    }
    BaseLocationServices.prototype.url = function (url, replace) {
        if (replace === void 0) { replace = true; }
        if (Object(_common__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(url) && url !== this._get()) {
            this._set(null, null, url, replace);
            if (this.fireAfterUpdate) {
                this._listeners.forEach(function (cb) { return cb({ url: url }); });
            }
        }
        return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["buildUrl"])(this);
    };
    BaseLocationServices.prototype.onChange = function (cb) {
        var _this = this;
        this._listeners.push(cb);
        return function () { return Object(_common__WEBPACK_IMPORTED_MODULE_0__["removeFrom"])(_this._listeners, cb); };
    };
    BaseLocationServices.prototype.dispose = function (router) {
        Object(_common__WEBPACK_IMPORTED_MODULE_0__["deregAll"])(this._listeners);
    };
    return BaseLocationServices;
}());

//# sourceMappingURL=baseLocationService.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/browserLocationConfig.js":
/*!*******************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/browserLocationConfig.js ***!
  \*******************************************************************************************************************/
/*! exports provided: BrowserLocationConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserLocationConfig", function() { return BrowserLocationConfig; });
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/** @internalapi @module vanilla */
/** */

/** A `LocationConfig` that delegates to the browser's `location` object */
var BrowserLocationConfig = /** @class */ (function () {
    function BrowserLocationConfig(router, _isHtml5) {
        if (_isHtml5 === void 0) { _isHtml5 = false; }
        this._isHtml5 = _isHtml5;
        this._baseHref = undefined;
        this._hashPrefix = '';
    }
    BrowserLocationConfig.prototype.port = function () {
        if (location.port) {
            return Number(location.port);
        }
        return this.protocol() === 'https' ? 443 : 80;
    };
    BrowserLocationConfig.prototype.protocol = function () {
        return location.protocol.replace(/:/g, '');
    };
    BrowserLocationConfig.prototype.host = function () {
        return location.hostname;
    };
    BrowserLocationConfig.prototype.html5Mode = function () {
        return this._isHtml5;
    };
    BrowserLocationConfig.prototype.hashPrefix = function (newprefix) {
        return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(newprefix) ? (this._hashPrefix = newprefix) : this._hashPrefix;
    };
    BrowserLocationConfig.prototype.baseHref = function (href) {
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(href))
            this._baseHref = href;
        if (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(this._baseHref))
            this._baseHref = this.getBaseHref();
        return this._baseHref;
    };
    BrowserLocationConfig.prototype.getBaseHref = function () {
        var baseTag = document.getElementsByTagName('base')[0];
        if (baseTag && baseTag.href) {
            return baseTag.href.replace(/^(https?:)?\/\/[^/]*/, '');
        }
        return this._isHtml5 ? '/' : location.pathname || '/';
    };
    BrowserLocationConfig.prototype.dispose = function () { };
    return BrowserLocationConfig;
}());

//# sourceMappingURL=browserLocationConfig.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/hashLocationService.js":
/*!*****************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/hashLocationService.js ***!
  \*****************************************************************************************************************/
/*! exports provided: HashLocationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashLocationService", function() { return HashLocationService; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/* harmony import */ var _baseLocationService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/baseLocationService.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/** @internalapi @module vanilla */ /** */


/** A `LocationServices` that uses the browser hash "#" to get/set the current location */
var HashLocationService = /** @class */ (function (_super) {
    __extends(HashLocationService, _super);
    function HashLocationService(router) {
        var _this = _super.call(this, router, false) || this;
        _common__WEBPACK_IMPORTED_MODULE_0__["root"].addEventListener('hashchange', _this._listener, false);
        return _this;
    }
    HashLocationService.prototype._get = function () {
        return Object(_common__WEBPACK_IMPORTED_MODULE_0__["trimHashVal"])(this._location.hash);
    };
    HashLocationService.prototype._set = function (state, title, url, replace) {
        this._location.hash = url;
    };
    HashLocationService.prototype.dispose = function (router) {
        _super.prototype.dispose.call(this, router);
        _common__WEBPACK_IMPORTED_MODULE_0__["root"].removeEventListener('hashchange', this._listener);
    };
    return HashLocationService;
}(_baseLocationService__WEBPACK_IMPORTED_MODULE_1__["BaseLocationServices"]));

//# sourceMappingURL=hashLocationService.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/index.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/index.js ***!
  \***************************************************************************************************/
/*! exports provided: $q, $injector, BaseLocationServices, HashLocationService, MemoryLocationService, PushStateLocationService, MemoryLocationConfig, BrowserLocationConfig, keyValsToObjectR, getParams, parseUrl, buildUrl, locationPluginFactory, servicesPlugin, hashLocationPlugin, pushStateLocationPlugin, memoryLocationPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _q__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./q */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/q.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$q", function() { return _q__WEBPACK_IMPORTED_MODULE_0__["$q"]; });

/* harmony import */ var _injector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./injector */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/injector.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$injector", function() { return _injector__WEBPACK_IMPORTED_MODULE_1__["$injector"]; });

/* harmony import */ var _baseLocationService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/baseLocationService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseLocationServices", function() { return _baseLocationService__WEBPACK_IMPORTED_MODULE_2__["BaseLocationServices"]; });

/* harmony import */ var _hashLocationService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hashLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/hashLocationService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HashLocationService", function() { return _hashLocationService__WEBPACK_IMPORTED_MODULE_3__["HashLocationService"]; });

/* harmony import */ var _memoryLocationService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./memoryLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationService", function() { return _memoryLocationService__WEBPACK_IMPORTED_MODULE_4__["MemoryLocationService"]; });

/* harmony import */ var _pushStateLocationService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pushStateLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/pushStateLocationService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PushStateLocationService", function() { return _pushStateLocationService__WEBPACK_IMPORTED_MODULE_5__["PushStateLocationService"]; });

/* harmony import */ var _memoryLocationConfig__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./memoryLocationConfig */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationConfig", function() { return _memoryLocationConfig__WEBPACK_IMPORTED_MODULE_6__["MemoryLocationConfig"]; });

/* harmony import */ var _browserLocationConfig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./browserLocationConfig */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/browserLocationConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserLocationConfig", function() { return _browserLocationConfig__WEBPACK_IMPORTED_MODULE_7__["BrowserLocationConfig"]; });

/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keyValsToObjectR", function() { return _utils__WEBPACK_IMPORTED_MODULE_8__["keyValsToObjectR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return _utils__WEBPACK_IMPORTED_MODULE_8__["getParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return _utils__WEBPACK_IMPORTED_MODULE_8__["parseUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildUrl", function() { return _utils__WEBPACK_IMPORTED_MODULE_8__["buildUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "locationPluginFactory", function() { return _utils__WEBPACK_IMPORTED_MODULE_8__["locationPluginFactory"]; });

/* harmony import */ var _plugins__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugins */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/plugins.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "servicesPlugin", function() { return _plugins__WEBPACK_IMPORTED_MODULE_9__["servicesPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hashLocationPlugin", function() { return _plugins__WEBPACK_IMPORTED_MODULE_9__["hashLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pushStateLocationPlugin", function() { return _plugins__WEBPACK_IMPORTED_MODULE_9__["pushStateLocationPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoryLocationPlugin", function() { return _plugins__WEBPACK_IMPORTED_MODULE_9__["memoryLocationPlugin"]; });











//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/injector.js":
/*!******************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/injector.js ***!
  \******************************************************************************************************/
/*! exports provided: $injector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$injector", function() { return $injector; });
/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @internalapi @module vanilla */ /** */

// globally available injectables
var globals = {};
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
var ARGUMENT_NAMES = /([^\s,]+)/g;
/**
 * A basic angular1-like injector api
 *
 * This object implements four methods similar to the
 * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)
 *
 * UI-Router evolved from an angular 1 library to a framework agnostic library.
 * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.
 *
 * This object provides a naive implementation of a globally scoped dependency injection system.
 * It supports the following DI approaches:
 *
 * ### Function parameter names
 *
 * A function's `.toString()` is called, and the parameter names are parsed.
 * This only works when the parameter names aren't "mangled" by a minifier such as UglifyJS.
 *
 * ```js
 * function injectedFunction(FooService, BarService) {
 *   // FooService and BarService are injected
 * }
 * ```
 *
 * ### Function annotation
 *
 * A function may be annotated with an array of dependency names as the `$inject` property.
 *
 * ```js
 * injectedFunction.$inject = [ 'FooService', 'BarService' ];
 * function injectedFunction(fs, bs) {
 *   // FooService and BarService are injected as fs and bs parameters
 * }
 * ```
 *
 * ### Array notation
 *
 * An array provides the names of the dependencies to inject (as strings).
 * The function is the last element of the array.
 *
 * ```js
 * [ 'FooService', 'BarService', function (fs, bs) {
 *   // FooService and BarService are injected as fs and bs parameters
 * }]
 * ```
 *
 * @type {$InjectorLike}
 */
var $injector = {
    /** Gets an object from DI based on a string token */
    get: function (name) { return globals[name]; },
    /** Returns true if an object named `name` exists in global DI */
    has: function (name) { return $injector.get(name) != null; },
    /**
     * Injects a function
     *
     * @param fn the function to inject
     * @param context the function's `this` binding
     * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`
     */
    invoke: function (fn, context, locals) {
        var all = Object(_common_index__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, globals, locals || {});
        var params = $injector.annotate(fn);
        var ensureExist = Object(_common_index__WEBPACK_IMPORTED_MODULE_0__["assertPredicate"])(function (key) { return all.hasOwnProperty(key); }, function (key) { return "DI can't find injectable: '" + key + "'"; });
        var args = params.filter(ensureExist).map(function (x) { return all[x]; });
        if (Object(_common_index__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(fn))
            return fn.apply(context, args);
        else
            return fn.slice(-1)[0].apply(context, args);
    },
    /**
     * Returns a function's dependencies
     *
     * Analyzes a function (or array) and returns an array of DI tokens that the function requires.
     * @return an array of `string`s
     */
    annotate: function (fn) {
        if (!Object(_common_index__WEBPACK_IMPORTED_MODULE_0__["isInjectable"])(fn))
            throw new Error("Not an injectable function: " + fn);
        if (fn && fn.$inject)
            return fn.$inject;
        if (Object(_common_index__WEBPACK_IMPORTED_MODULE_0__["isArray"])(fn))
            return fn.slice(0, -1);
        var fnStr = fn.toString().replace(STRIP_COMMENTS, '');
        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
        return result || [];
    },
};
//# sourceMappingURL=injector.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationConfig.js":
/*!******************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationConfig.js ***!
  \******************************************************************************************************************/
/*! exports provided: MemoryLocationConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationConfig", function() { return MemoryLocationConfig; });
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");


/** A `LocationConfig` mock that gets/sets all config from an in-memory object */
var MemoryLocationConfig = /** @class */ (function () {
    function MemoryLocationConfig() {
        var _this = this;
        this.dispose = _common_common__WEBPACK_IMPORTED_MODULE_1__["noop"];
        this._baseHref = '';
        this._port = 80;
        this._protocol = 'http';
        this._host = 'localhost';
        this._hashPrefix = '';
        this.port = function () { return _this._port; };
        this.protocol = function () { return _this._protocol; };
        this.host = function () { return _this._host; };
        this.baseHref = function () { return _this._baseHref; };
        this.html5Mode = function () { return false; };
        this.hashPrefix = function (newval) { return (Object(_common_predicates__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(newval) ? (_this._hashPrefix = newval) : _this._hashPrefix); };
    }
    return MemoryLocationConfig;
}());

//# sourceMappingURL=memoryLocationConfig.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationService.js":
/*!*******************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationService.js ***!
  \*******************************************************************************************************************/
/*! exports provided: MemoryLocationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MemoryLocationService", function() { return MemoryLocationService; });
/* harmony import */ var _baseLocationService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/baseLocationService.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/** @internalapi @module vanilla */ /** */

/** A `LocationServices` that gets/sets the current location from an in-memory object */
var MemoryLocationService = /** @class */ (function (_super) {
    __extends(MemoryLocationService, _super);
    function MemoryLocationService(router) {
        return _super.call(this, router, true) || this;
    }
    MemoryLocationService.prototype._get = function () {
        return this._url;
    };
    MemoryLocationService.prototype._set = function (state, title, url, replace) {
        this._url = url;
    };
    return MemoryLocationService;
}(_baseLocationService__WEBPACK_IMPORTED_MODULE_0__["BaseLocationServices"]));

//# sourceMappingURL=memoryLocationService.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/plugins.js":
/*!*****************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/plugins.js ***!
  \*****************************************************************************************************/
/*! exports provided: servicesPlugin, hashLocationPlugin, pushStateLocationPlugin, memoryLocationPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "servicesPlugin", function() { return servicesPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hashLocationPlugin", function() { return hashLocationPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pushStateLocationPlugin", function() { return pushStateLocationPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoryLocationPlugin", function() { return memoryLocationPlugin; });
/* harmony import */ var _browserLocationConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browserLocationConfig */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/browserLocationConfig.js");
/* harmony import */ var _hashLocationService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/hashLocationService.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/utils.js");
/* harmony import */ var _pushStateLocationService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pushStateLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/pushStateLocationService.js");
/* harmony import */ var _memoryLocationService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./memoryLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationService.js");
/* harmony import */ var _memoryLocationConfig__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./memoryLocationConfig */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationConfig.js");
/* harmony import */ var _injector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./injector */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/injector.js");
/* harmony import */ var _q__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./q */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/q.js");
/* harmony import */ var _common_coreservices__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/coreservices */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js");
/** @internalapi @module vanilla */ /** */









function servicesPlugin(router) {
    _common_coreservices__WEBPACK_IMPORTED_MODULE_8__["services"].$injector = _injector__WEBPACK_IMPORTED_MODULE_6__["$injector"];
    _common_coreservices__WEBPACK_IMPORTED_MODULE_8__["services"].$q = _q__WEBPACK_IMPORTED_MODULE_7__["$q"];
    return { name: 'vanilla.services', $q: _q__WEBPACK_IMPORTED_MODULE_7__["$q"], $injector: _injector__WEBPACK_IMPORTED_MODULE_6__["$injector"], dispose: function () { return null; } };
}
/** A `UIRouterPlugin` uses the browser hash to get/set the current location */
var hashLocationPlugin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["locationPluginFactory"])('vanilla.hashBangLocation', false, _hashLocationService__WEBPACK_IMPORTED_MODULE_1__["HashLocationService"], _browserLocationConfig__WEBPACK_IMPORTED_MODULE_0__["BrowserLocationConfig"]);
/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */
var pushStateLocationPlugin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["locationPluginFactory"])('vanilla.pushStateLocation', true, _pushStateLocationService__WEBPACK_IMPORTED_MODULE_3__["PushStateLocationService"], _browserLocationConfig__WEBPACK_IMPORTED_MODULE_0__["BrowserLocationConfig"]);
/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */
var memoryLocationPlugin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["locationPluginFactory"])('vanilla.memoryLocation', false, _memoryLocationService__WEBPACK_IMPORTED_MODULE_4__["MemoryLocationService"], _memoryLocationConfig__WEBPACK_IMPORTED_MODULE_5__["MemoryLocationConfig"]);
//# sourceMappingURL=plugins.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/pushStateLocationService.js":
/*!**********************************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/pushStateLocationService.js ***!
  \**********************************************************************************************************************/
/*! exports provided: PushStateLocationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PushStateLocationService", function() { return PushStateLocationService; });
/* harmony import */ var _baseLocationService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseLocationService */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/baseLocationService.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis
 *
 * Uses `history.pushState` and `history.replaceState`
 */
var PushStateLocationService = /** @class */ (function (_super) {
    __extends(PushStateLocationService, _super);
    function PushStateLocationService(router) {
        var _this = _super.call(this, router, true) || this;
        _this._config = router.urlService.config;
        _common__WEBPACK_IMPORTED_MODULE_1__["root"].addEventListener('popstate', _this._listener, false);
        return _this;
    }
    /**
     * Gets the base prefix without:
     * - trailing slash
     * - trailing filename
     * - protocol and hostname
     *
     * If <base href='/base/'>, this returns '/base'.
     * If <base href='/foo/base/'>, this returns '/foo/base'.
     * If <base href='/base/index.html'>, this returns '/base'.
     * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.
     * If <base href='/base'>, this returns ''.
     * If <base href='http://localhost:8080'>, this returns ''.
     * If <base href='http://localhost:8080/'>, this returns ''.
     *
     * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element
     */
    PushStateLocationService.prototype._getBasePrefix = function () {
        return Object(_common__WEBPACK_IMPORTED_MODULE_1__["stripLastPathElement"])(this._config.baseHref());
    };
    PushStateLocationService.prototype._get = function () {
        var _a = this._location, pathname = _a.pathname, hash = _a.hash, search = _a.search;
        search = Object(_common__WEBPACK_IMPORTED_MODULE_1__["splitQuery"])(search)[1]; // strip ? if found
        hash = Object(_common__WEBPACK_IMPORTED_MODULE_1__["splitHash"])(hash)[1]; // strip # if found
        var basePrefix = this._getBasePrefix();
        var exactBaseHrefMatch = pathname === this._config.baseHref();
        var startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;
        pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;
        return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');
    };
    PushStateLocationService.prototype._set = function (state, title, url, replace) {
        var basePrefix = this._getBasePrefix();
        var slash = url && url[0] !== '/' ? '/' : '';
        var fullUrl = url === '' || url === '/' ? this._config.baseHref() : basePrefix + slash + url;
        if (replace) {
            this._history.replaceState(state, title, fullUrl);
        }
        else {
            this._history.pushState(state, title, fullUrl);
        }
    };
    PushStateLocationService.prototype.dispose = function (router) {
        _super.prototype.dispose.call(this, router);
        _common__WEBPACK_IMPORTED_MODULE_1__["root"].removeEventListener('popstate', this._listener);
    };
    return PushStateLocationService;
}(_baseLocationService__WEBPACK_IMPORTED_MODULE_0__["BaseLocationServices"]));

//# sourceMappingURL=pushStateLocationService.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/q.js":
/*!***********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/q.js ***!
  \***********************************************************************************************/
/*! exports provided: $q */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$q", function() { return $q; });
/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @internalapi @module vanilla */ /** */

/**
 * An angular1-like promise api
 *
 * This object implements four methods similar to the
 * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)
 *
 * UI-Router evolved from an angular 1 library to a framework agnostic library.
 * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.
 *
 * This API provides native ES6 promise support wrapped as a $q-like API.
 * Internally, UI-Router uses this $q object to perform promise operations.
 * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.
 *
 * $q-like promise api
 */
var $q = {
    /** Normalizes a value as a promise */
    when: function (val) { return new Promise(function (resolve, reject) { return resolve(val); }); },
    /** Normalizes a value as a promise rejection */
    reject: function (val) {
        return new Promise(function (resolve, reject) {
            reject(val);
        });
    },
    /** @returns a deferred object, which has `resolve` and `reject` functions */
    defer: function () {
        var deferred = {};
        deferred.promise = new Promise(function (resolve, reject) {
            deferred.resolve = resolve;
            deferred.reject = reject;
        });
        return deferred;
    },
    /** Like Promise.all(), but also supports object key/promise notation like $q */
    all: function (promises) {
        if (Object(_common_index__WEBPACK_IMPORTED_MODULE_0__["isArray"])(promises)) {
            return Promise.all(promises);
        }
        if (Object(_common_index__WEBPACK_IMPORTED_MODULE_0__["isObject"])(promises)) {
            // Convert promises map to promises array.
            // When each promise resolves, map it to a tuple { key: key, val: val }
            var chain = Object.keys(promises).map(function (key) { return promises[key].then(function (val) { return ({ key: key, val: val }); }); });
            // Then wait for all promises to resolve, and convert them back to an object
            return $q.all(chain).then(function (values) {
                return values.reduce(function (acc, tuple) {
                    acc[tuple.key] = tuple.val;
                    return acc;
                }, {});
            });
        }
    },
};
//# sourceMappingURL=q.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/utils.js":
/*!***************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/utils.js ***!
  \***************************************************************************************************/
/*! exports provided: keyValsToObjectR, getParams, parseUrl, buildUrl, locationPluginFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyValsToObjectR", function() { return keyValsToObjectR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParams", function() { return getParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseUrl", function() { return parseUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildUrl", function() { return buildUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "locationPluginFactory", function() { return locationPluginFactory; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/index.js");
/** @internalapi @module vanilla */ /** */

var keyValsToObjectR = function (accum, _a) {
    var key = _a[0], val = _a[1];
    if (!accum.hasOwnProperty(key)) {
        accum[key] = val;
    }
    else if (Object(_common__WEBPACK_IMPORTED_MODULE_0__["isArray"])(accum[key])) {
        accum[key].push(val);
    }
    else {
        accum[key] = [accum[key], val];
    }
    return accum;
};
var getParams = function (queryString) {
    return queryString
        .split('&')
        .filter(_common__WEBPACK_IMPORTED_MODULE_0__["identity"])
        .map(_common__WEBPACK_IMPORTED_MODULE_0__["splitEqual"])
        .reduce(keyValsToObjectR, {});
};
function parseUrl(url) {
    var orEmptyString = function (x) { return x || ''; };
    var _a = Object(_common__WEBPACK_IMPORTED_MODULE_0__["splitHash"])(url).map(orEmptyString), beforehash = _a[0], hash = _a[1];
    var _b = Object(_common__WEBPACK_IMPORTED_MODULE_0__["splitQuery"])(beforehash).map(orEmptyString), path = _b[0], search = _b[1];
    return { path: path, search: search, hash: hash, url: url };
}
var buildUrl = function (loc) {
    var path = loc.path();
    var searchObject = loc.search();
    var hash = loc.hash();
    var search = Object.keys(searchObject)
        .map(function (key) {
        var param = searchObject[key];
        var vals = Object(_common__WEBPACK_IMPORTED_MODULE_0__["isArray"])(param) ? param : [param];
        return vals.map(function (val) { return key + '=' + val; });
    })
        .reduce(_common__WEBPACK_IMPORTED_MODULE_0__["unnestR"], [])
        .join('&');
    return path + (search ? '?' + search : '') + (hash ? '#' + hash : '');
};
function locationPluginFactory(name, isHtml5, serviceClass, configurationClass) {
    return function (uiRouter) {
        var service = (uiRouter.locationService = new serviceClass(uiRouter));
        var configuration = (uiRouter.locationConfig = new configurationClass(uiRouter, isHtml5));
        function dispose(router) {
            router.dispose(service);
            router.dispose(configuration);
        }
        return { name: name, service: service, configuration: configuration, dispose: dispose };
    };
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/view/index.js":
/*!************************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/view/index.js ***!
  \************************************************************************************************/
/*! exports provided: ViewService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/view/view.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewService", function() { return _view__WEBPACK_IMPORTED_MODULE_0__["ViewService"]; });


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/view/view.js":
/*!***********************************************************************************************!*\
  !*** ../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/view/view.js ***!
  \***********************************************************************************************/
/*! exports provided: ViewService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewService", function() { return ViewService; });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js");
/* harmony import */ var _common_hof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/hof */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js");
/* harmony import */ var _common_predicates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/predicates */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js");
/* harmony import */ var _common_trace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/trace */ "../common/node_modules/@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js");
/** @publicapi @module view */ /** */




/**
 * The View service
 *
 * This service pairs existing `ui-view` components (which live in the DOM)
 * with view configs (from the state declaration objects: [[StateDeclaration.views]]).
 *
 * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].
 *   The views from exited states are deactivated via [[deactivateViewConfig]].
 *   (See: the [[registerActivateViews]] Transition Hook)
 *
 * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].
 *
 * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])
 * are configured with the matching [[ViewConfig]](s)
 *
 */
var ViewService = /** @class */ (function () {
    /** @hidden */
    function ViewService(/** @hidden */ router) {
        var _this = this;
        this.router = router;
        /** @hidden */ this._uiViews = [];
        /** @hidden */ this._viewConfigs = [];
        /** @hidden */ this._viewConfigFactories = {};
        /** @hidden */ this._listeners = [];
        /** @internalapi */
        this._pluginapi = {
            _rootViewContext: this._rootViewContext.bind(this),
            _viewConfigFactory: this._viewConfigFactory.bind(this),
            _registeredUIView: function (id) { return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["find"])(_this._uiViews, function (view) { return _this.router.$id + "." + view.id === id; }); },
            _registeredUIViews: function () { return _this._uiViews; },
            _activeViewConfigs: function () { return _this._viewConfigs; },
            _onSync: function (listener) {
                _this._listeners.push(listener);
                return function () { return Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["removeFrom"])(_this._listeners, listener); };
            },
        };
    }
    /**
     * Normalizes a view's name from a state.views configuration block.
     *
     * This should be used by a framework implementation to calculate the values for
     * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].
     *
     * @param context the context object (state declaration) that the view belongs to
     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]
     *
     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets
     */
    ViewService.normalizeUIViewTarget = function (context, rawViewName) {
        if (rawViewName === void 0) { rawViewName = ''; }
        // TODO: Validate incoming view name with a regexp to allow:
        // ex: "view.name@foo.bar" , "^.^.view.name" , "view.name@^.^" , "" ,
        // "@" , "$default@^" , "!$default.$default" , "!foo.bar"
        var viewAtContext = rawViewName.split('@');
        var uiViewName = viewAtContext[0] || '$default'; // default to unnamed view
        var uiViewContextAnchor = Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isString"])(viewAtContext[1]) ? viewAtContext[1] : '^'; // default to parent context
        // Handle relative view-name sugar syntax.
        // Matches rawViewName "^.^.^.foo.bar" into array: ["^.^.^.foo.bar", "^.^.^", "foo.bar"],
        var relativeViewNameSugar = /^(\^(?:\.\^)*)\.(.*$)/.exec(uiViewName);
        if (relativeViewNameSugar) {
            // Clobbers existing contextAnchor (rawViewName validation will fix this)
            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to "^.^.^"
            uiViewName = relativeViewNameSugar[2]; // set view-name to "foo.bar"
        }
        if (uiViewName.charAt(0) === '!') {
            uiViewName = uiViewName.substr(1);
            uiViewContextAnchor = ''; // target absolutely from root
        }
        // handle parent relative targeting "^.^.^"
        var relativeMatch = /^(\^(?:\.\^)*)$/;
        if (relativeMatch.exec(uiViewContextAnchor)) {
            var anchorState = uiViewContextAnchor.split('.').reduce(function (anchor, x) { return anchor.parent; }, context);
            uiViewContextAnchor = anchorState.name;
        }
        else if (uiViewContextAnchor === '.') {
            uiViewContextAnchor = context.name;
        }
        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };
    };
    /** @hidden */
    ViewService.prototype._rootViewContext = function (context) {
        return (this._rootContext = context || this._rootContext);
    };
    /** @hidden */
    ViewService.prototype._viewConfigFactory = function (viewType, factory) {
        this._viewConfigFactories[viewType] = factory;
    };
    ViewService.prototype.createViewConfig = function (path, decl) {
        var cfgFactory = this._viewConfigFactories[decl.$type];
        if (!cfgFactory)
            throw new Error('ViewService: No view config factory registered for type ' + decl.$type);
        var cfgs = cfgFactory(path, decl);
        return Object(_common_predicates__WEBPACK_IMPORTED_MODULE_2__["isArray"])(cfgs) ? cfgs : [cfgs];
    };
    /**
     * Deactivates a ViewConfig.
     *
     * This function deactivates a `ViewConfig`.
     * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.
     *
     * @param viewConfig The ViewConfig view to deregister.
     */
    ViewService.prototype.deactivateViewConfig = function (viewConfig) {
        _common_trace__WEBPACK_IMPORTED_MODULE_3__["trace"].traceViewServiceEvent('<- Removing', viewConfig);
        Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["removeFrom"])(this._viewConfigs, viewConfig);
    };
    ViewService.prototype.activateViewConfig = function (viewConfig) {
        _common_trace__WEBPACK_IMPORTED_MODULE_3__["trace"].traceViewServiceEvent('-> Registering', viewConfig);
        this._viewConfigs.push(viewConfig);
    };
    ViewService.prototype.sync = function () {
        var _this = this;
        var uiViewsByFqn = this._uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(_common_common__WEBPACK_IMPORTED_MODULE_0__["applyPairs"], {});
        // Return a weighted depth value for a uiView.
        // The depth is the nesting depth of ui-views (based on FQN; times 10,000)
        // plus the depth of the state that is populating the uiView
        function uiViewDepth(uiView) {
            var stateDepth = function (context) { return (context && context.parent ? stateDepth(context.parent) + 1 : 1); };
            return uiView.fqn.split('.').length * 10000 + stateDepth(uiView.creationContext);
        }
        // Return the ViewConfig's context's depth in the context tree.
        function viewConfigDepth(config) {
            var context = config.viewDecl.$context, count = 0;
            while (++count && context.parent)
                context = context.parent;
            return count;
        }
        // Given a depth function, returns a compare function which can return either ascending or descending order
        var depthCompare = Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["curry"])(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });
        var matchingConfigPair = function (uiView) {
            var matchingConfigs = _this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));
            if (matchingConfigs.length > 1) {
                // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)
                // Sort by depth and return the match from the deepest child
                // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);
                matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending
            }
            return { uiView: uiView, viewConfig: matchingConfigs[0] };
        };
        var configureUIView = function (tuple) {
            // If a parent ui-view is reconfigured, it could destroy child ui-views.
            // Before configuring a child ui-view, make sure it's still in the active uiViews array.
            if (_this._uiViews.indexOf(tuple.uiView) !== -1)
                tuple.uiView.configUpdated(tuple.viewConfig);
        };
        // Sort views by FQN and state depth. Process uiviews nearest the root first.
        var uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);
        var matchedViewConfigs = uiViewTuples.map(function (tuple) { return tuple.viewConfig; });
        var unmatchedConfigTuples = this._viewConfigs
            .filter(function (config) { return !Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["inArray"])(matchedViewConfigs, config); })
            .map(function (viewConfig) { return ({ uiView: undefined, viewConfig: viewConfig }); });
        uiViewTuples.forEach(configureUIView);
        var allTuples = uiViewTuples.concat(unmatchedConfigTuples);
        this._listeners.forEach(function (cb) { return cb(allTuples); });
        _common_trace__WEBPACK_IMPORTED_MODULE_3__["trace"].traceViewSync(allTuples);
    };
    /**
     * Registers a `ui-view` component
     *
     * When a `ui-view` component is created, it uses this method to register itself.
     * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].
     *
     * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,
     * and what the view's state context is.
     *
     * Note: There is no corresponding `deregisterUIView`.
     *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.
     *
     * @param uiView The metadata for a UIView
     * @return a de-registration function used when the view is destroyed.
     */
    ViewService.prototype.registerUIView = function (uiView) {
        _common_trace__WEBPACK_IMPORTED_MODULE_3__["trace"].traceViewServiceUIViewEvent('-> Registering', uiView);
        var uiViews = this._uiViews;
        var fqnAndTypeMatches = function (uiv) { return uiv.fqn === uiView.fqn && uiv.$type === uiView.$type; };
        if (uiViews.filter(fqnAndTypeMatches).length)
            _common_trace__WEBPACK_IMPORTED_MODULE_3__["trace"].traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);
        uiViews.push(uiView);
        this.sync();
        return function () {
            var idx = uiViews.indexOf(uiView);
            if (idx === -1) {
                _common_trace__WEBPACK_IMPORTED_MODULE_3__["trace"].traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);
                return;
            }
            _common_trace__WEBPACK_IMPORTED_MODULE_3__["trace"].traceViewServiceUIViewEvent('<- Deregistering', uiView);
            Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["removeFrom"])(uiViews)(uiView);
        };
    };
    /**
     * Returns the list of views currently available on the page, by fully-qualified name.
     *
     * @return {Array} Returns an array of fully-qualified view names.
     */
    ViewService.prototype.available = function () {
        return this._uiViews.map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])('fqn'));
    };
    /**
     * Returns the list of views on the page containing loaded content.
     *
     * @return {Array} Returns an array of fully-qualified view names.
     */
    ViewService.prototype.active = function () {
        return this._uiViews.filter(Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])('$config')).map(Object(_common_hof__WEBPACK_IMPORTED_MODULE_1__["prop"])('name'));
    };
    /**
     * Given a ui-view and a ViewConfig, determines if they "match".
     *
     * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in
     * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.
     *
     * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or
     * can be a segmented ui-view path, describing a portion of a ui-view fqn.
     *
     * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type
     *
     * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:
     * - the ui-view's name matches the ViewConfig's target name
     * - the ui-view's context matches the ViewConfig's anchor
     *
     * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:
     * - There exists a parent ui-view where:
     *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name
     *    - the parent ui-view's context matches the ViewConfig's anchor
     * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn
     *
     * Example:
     *
     * DOM:
     * <ui-view>                        <!-- created in the root context (name: "") -->
     *   <ui-view name="foo">                <!-- created in the context named: "A"      -->
     *     <ui-view>                    <!-- created in the context named: "A.B"    -->
     *       <ui-view name="bar">            <!-- created in the context named: "A.B.C"  -->
     *       </ui-view>
     *     </ui-view>
     *   </ui-view>
     * </ui-view>
     *
     * uiViews: [
     *  { fqn: "$default",                  creationContext: { name: "" } },
     *  { fqn: "$default.foo",              creationContext: { name: "A" } },
     *  { fqn: "$default.foo.$default",     creationContext: { name: "A.B" } }
     *  { fqn: "$default.foo.$default.bar", creationContext: { name: "A.B.C" } }
     * ]
     *
     * These four view configs all match the ui-view with the fqn: "$default.foo.$default.bar":
     *
     * - ViewConfig1: { uiViewName: "bar",                       uiViewContextAnchor: "A.B.C" }
     * - ViewConfig2: { uiViewName: "$default.bar",              uiViewContextAnchor: "A.B" }
     * - ViewConfig3: { uiViewName: "foo.$default.bar",          uiViewContextAnchor: "A" }
     * - ViewConfig4: { uiViewName: "$default.foo.$default.bar", uiViewContextAnchor: "" }
     *
     * Using ViewConfig3 as an example, it matches the ui-view with fqn "$default.foo.$default.bar" because:
     * - The ViewConfig's segmented target name is: [ "foo", "$default", "bar" ]
     * - There exists a parent ui-view (which has fqn: "$default.foo") where:
     *    - the parent ui-view's name "foo" matches the first segment "foo" of the ViewConfig's target name
     *    - the parent ui-view's context "A" matches the ViewConfig's anchor context "A"
     * - And the remaining segments [ "$default", "bar" ].join("."_ of the ViewConfig's target name match
     *   the tail of the ui-view's fqn "default.bar"
     *
     * @internalapi
     */
    ViewService.matches = function (uiViewsByFqn, uiView) { return function (viewConfig) {
        // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc
        if (uiView.$type !== viewConfig.viewDecl.$type)
            return false;
        // Split names apart from both viewConfig and uiView into segments
        var vc = viewConfig.viewDecl;
        var vcSegments = vc.$uiViewName.split('.');
        var uivSegments = uiView.fqn.split('.');
        // Check if the tails of the segment arrays match. ex, these arrays' tails match:
        // vc: ["foo", "bar"], uiv fqn: ["$default", "foo", "bar"]
        if (!Object(_common_common__WEBPACK_IMPORTED_MODULE_0__["equals"])(vcSegments, uivSegments.slice(0 - vcSegments.length)))
            return false;
        // Now check if the fqn ending at the first segment of the viewConfig matches the context:
        // ["$default", "foo"].join(".") == "$default.foo", does the ui-view $default.foo context match?
        var negOffset = 1 - vcSegments.length || undefined;
        var fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');
        var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;
        return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);
    }; };
    return ViewService;
}());

//# sourceMappingURL=view.js.map

/***/ }),

/***/ "../common/node_modules/axios/index.js":
/*!*********************************************!*\
  !*** ../common/node_modules/axios/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "../common/node_modules/axios/lib/axios.js");

/***/ }),

/***/ "../common/node_modules/axios/lib/adapters/xhr.js":
/*!********************************************************!*\
  !*** ../common/node_modules/axios/lib/adapters/xhr.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "../common/node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "../common/node_modules/axios/lib/helpers/buildURL.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "../common/node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "../common/node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "../common/node_modules/axios/lib/core/createError.js");
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(/*! ./../helpers/btoa */ "../common/node_modules/axios/lib/helpers/btoa.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if ("production" !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "../common/node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "../common/node_modules/axios/lib/axios.js":
/*!*************************************************!*\
  !*** ../common/node_modules/axios/lib/axios.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "../common/node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "../common/node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "../common/node_modules/axios/lib/core/Axios.js");
var defaults = __webpack_require__(/*! ./defaults */ "../common/node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "../common/node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "../common/node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "../common/node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "../common/node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "../common/node_modules/axios/lib/cancel/Cancel.js":
/*!*********************************************************!*\
  !*** ../common/node_modules/axios/lib/cancel/Cancel.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "../common/node_modules/axios/lib/cancel/CancelToken.js":
/*!**************************************************************!*\
  !*** ../common/node_modules/axios/lib/cancel/CancelToken.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "../common/node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "../common/node_modules/axios/lib/cancel/isCancel.js":
/*!***********************************************************!*\
  !*** ../common/node_modules/axios/lib/cancel/isCancel.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "../common/node_modules/axios/lib/core/Axios.js":
/*!******************************************************!*\
  !*** ../common/node_modules/axios/lib/core/Axios.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(/*! ./../defaults */ "../common/node_modules/axios/lib/defaults.js");
var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "../common/node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "../common/node_modules/axios/lib/core/dispatchRequest.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "../common/node_modules/axios/lib/core/InterceptorManager.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/axios/lib/core/InterceptorManager.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "../common/node_modules/axios/lib/core/createError.js":
/*!************************************************************!*\
  !*** ../common/node_modules/axios/lib/core/createError.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "../common/node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "../common/node_modules/axios/lib/core/dispatchRequest.js":
/*!****************************************************************!*\
  !*** ../common/node_modules/axios/lib/core/dispatchRequest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "../common/node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "../common/node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "../common/node_modules/axios/lib/defaults.js");
var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "../common/node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "../common/node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "../common/node_modules/axios/lib/core/enhanceError.js":
/*!*************************************************************!*\
  !*** ../common/node_modules/axios/lib/core/enhanceError.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),

/***/ "../common/node_modules/axios/lib/core/settle.js":
/*!*******************************************************!*\
  !*** ../common/node_modules/axios/lib/core/settle.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "../common/node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "../common/node_modules/axios/lib/core/transformData.js":
/*!**************************************************************!*\
  !*** ../common/node_modules/axios/lib/core/transformData.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "../common/node_modules/axios/lib/defaults.js":
/*!****************************************************!*\
  !*** ../common/node_modules/axios/lib/defaults.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "../common/node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "../common/node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "../common/node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "../common/node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../lpi/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/bind.js":
/*!********************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/bind.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/btoa.js":
/*!********************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/btoa.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/buildURL.js":
/*!************************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/buildURL.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/combineURLs.js":
/*!***************************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/combineURLs.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/cookies.js":
/*!***********************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/cookies.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*****************************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "../common/node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/parseHeaders.js":
/*!****************************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/parseHeaders.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "../common/node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "../common/node_modules/axios/lib/helpers/spread.js":
/*!**********************************************************!*\
  !*** ../common/node_modules/axios/lib/helpers/spread.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "../common/node_modules/axios/lib/utils.js":
/*!*************************************************!*\
  !*** ../common/node_modules/axios/lib/utils.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "../common/node_modules/axios/lib/helpers/bind.js");
var isBuffer = __webpack_require__(/*! is-buffer */ "../common/node_modules/is-buffer/index.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "../common/node_modules/classnames/index.js":
/*!**************************************************!*\
  !*** ../common/node_modules/classnames/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "../common/node_modules/fbjs/lib/ExecutionEnvironment.js":
/*!***************************************************************!*\
  !*** ../common/node_modules/fbjs/lib/ExecutionEnvironment.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/containsNode.js":
/*!*******************************************************!*\
  !*** ../common/node_modules/fbjs/lib/containsNode.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

var isTextNode = __webpack_require__(/*! ./isTextNode */ "../common/node_modules/fbjs/lib/isTextNode.js");

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/emptyFunction.js":
/*!********************************************************!*\
  !*** ../common/node_modules/fbjs/lib/emptyFunction.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/emptyObject.js":
/*!******************************************************!*\
  !*** ../common/node_modules/fbjs/lib/emptyObject.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyObject = {};

if (false) {}

module.exports = emptyObject;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/getActiveElement.js":
/*!***********************************************************!*\
  !*** ../common/node_modules/fbjs/lib/getActiveElement.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/invariant.js":
/*!****************************************************!*\
  !*** ../common/node_modules/fbjs/lib/invariant.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (false) {}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/isNode.js":
/*!*************************************************!*\
  !*** ../common/node_modules/fbjs/lib/isNode.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/isTextNode.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/fbjs/lib/isTextNode.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var isNode = __webpack_require__(/*! ./isNode */ "../common/node_modules/fbjs/lib/isNode.js");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),

/***/ "../common/node_modules/fbjs/lib/shallowEqual.js":
/*!*******************************************************!*\
  !*** ../common/node_modules/fbjs/lib/shallowEqual.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),

/***/ "../common/node_modules/is-buffer/index.js":
/*!*************************************************!*\
  !*** ../common/node_modules/is-buffer/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "../common/node_modules/jstorage/jstorage.js":
/*!***************************************************!*\
  !*** ../common/node_modules/jstorage/jstorage.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * ----------------------------- JSTORAGE -------------------------------------
 * Simple local storage wrapper to save data on the browser side, supporting
 * all major browsers - IE6+, Firefox2+, Safari4+, Chrome4+ and Opera 10.5+
 *
 * Author: Andris Reinman, andris.reinman@gmail.com
 * Project homepage: www.jstorage.info
 *
 * Licensed under Unlicense:
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <http://unlicense.org/>
 */

/* global ActiveXObject: false */
/* jshint browser: true */

(function() {
    'use strict';

    var
    /* jStorage version */
        JSTORAGE_VERSION = '0.4.12',

        /* detect a dollar object or create one if not found */
        $ = window.jQuery || window.$ || (window.$ = {}),

        /* check for a JSON handling support */
        JSON = {
            parse: window.JSON && (window.JSON.parse || window.JSON.decode) ||
                String.prototype.evalJSON && function(str) {
                    return String(str).evalJSON();
            } ||
                $.parseJSON ||
                $.evalJSON,
            stringify: Object.toJSON ||
                window.JSON && (window.JSON.stringify || window.JSON.encode) ||
                $.toJSON
        };

    // Break if no JSON support was found
    if (typeof JSON.parse !== 'function' || typeof JSON.stringify !== 'function') {
        throw new Error('No JSON support found, include //cdnjs.cloudflare.com/ajax/libs/json2/20110223/json2.js to page');
    }

    var
    /* This is the object, that holds the cached values */
        _storage = {
            __jstorage_meta: {
                CRC32: {}
            }
        },

        /* Actual browser storage (localStorage or globalStorage['domain']) */
        _storage_service = {
            jStorage: '{}'
        },

        /* DOM element for older IE versions, holds userData behavior */
        _storage_elm = null,

        /* How much space does the storage take */
        _storage_size = 0,

        /* which backend is currently used */
        _backend = false,

        /* onchange observers */
        _observers = {},

        /* timeout to wait after onchange event */
        _observer_timeout = false,

        /* last update time */
        _observer_update = 0,

        /* pubsub observers */
        _pubsub_observers = {},

        /* skip published items older than current timestamp */
        _pubsub_last = +new Date(),

        /* Next check for TTL */
        _ttl_timeout,

        /**
         * XML encoding and decoding as XML nodes can't be JSON'ized
         * XML nodes are encoded and decoded if the node is the value to be saved
         * but not if it's as a property of another object
         * Eg. -
         *   $.jStorage.set('key', xmlNode);        // IS OK
         *   $.jStorage.set('key', {xml: xmlNode}); // NOT OK
         */
        _XMLService = {

            /**
             * Validates a XML node to be XML
             * based on jQuery.isXML function
             */
            isXML: function(elm) {
                var documentElement = (elm ? elm.ownerDocument || elm : 0).documentElement;
                return documentElement ? documentElement.nodeName !== 'HTML' : false;
            },

            /**
             * Encodes a XML node to string
             * based on http://www.mercurytide.co.uk/news/article/issues-when-working-ajax/
             */
            encode: function(xmlNode) {
                if (!this.isXML(xmlNode)) {
                    return false;
                }
                try { // Mozilla, Webkit, Opera
                    return new XMLSerializer().serializeToString(xmlNode);
                } catch (E1) {
                    try { // IE
                        return xmlNode.xml;
                    } catch (E2) {}
                }
                return false;
            },

            /**
             * Decodes a XML node from string
             * loosely based on http://outwestmedia.com/jquery-plugins/xmldom/
             */
            decode: function(xmlString) {
                var dom_parser = ('DOMParser' in window && (new DOMParser()).parseFromString) ||
                    (window.ActiveXObject && function(_xmlString) {
                        var xml_doc = new ActiveXObject('Microsoft.XMLDOM');
                        xml_doc.async = 'false';
                        xml_doc.loadXML(_xmlString);
                        return xml_doc;
                    }),
                    resultXML;
                if (!dom_parser) {
                    return false;
                }
                resultXML = dom_parser.call('DOMParser' in window && (new DOMParser()) || window, xmlString, 'text/xml');
                return this.isXML(resultXML) ? resultXML : false;
            }
        };


    ////////////////////////// PRIVATE METHODS ////////////////////////

    /**
     * Initialization function. Detects if the browser supports DOM Storage
     * or userData behavior and behaves accordingly.
     */
    function _init() {
        /* Check if browser supports localStorage */
        var localStorageReallyWorks = false;
        if ('localStorage' in window) {
            try {
                window.localStorage.setItem('_tmptest', 'tmpval');
                localStorageReallyWorks = true;
                window.localStorage.removeItem('_tmptest');
            } catch (BogusQuotaExceededErrorOnIos5) {
                // Thanks be to iOS5 Private Browsing mode which throws
                // QUOTA_EXCEEDED_ERRROR DOM Exception 22.
            }
        }

        if (localStorageReallyWorks) {
            try {
                if (window.localStorage) {
                    _storage_service = window.localStorage;
                    _backend = 'localStorage';
                    _observer_update = _storage_service.jStorage_update;
                }
            } catch (E3) { /* Firefox fails when touching localStorage and cookies are disabled */ }
        }
        /* Check if browser supports globalStorage */
        else if ('globalStorage' in window) {
            try {
                if (window.globalStorage) {
                    if (window.location.hostname == 'localhost') {
                        _storage_service = window.globalStorage['localhost.localdomain'];
                    } else {
                        _storage_service = window.globalStorage[window.location.hostname];
                    }
                    _backend = 'globalStorage';
                    _observer_update = _storage_service.jStorage_update;
                }
            } catch (E4) { /* Firefox fails when touching localStorage and cookies are disabled */ }
        }
        /* Check if browser supports userData behavior */
        else {
            _storage_elm = document.createElement('link');
            if (_storage_elm.addBehavior) {

                /* Use a DOM element to act as userData storage */
                _storage_elm.style.behavior = 'url(#default#userData)';

                /* userData element needs to be inserted into the DOM! */
                document.getElementsByTagName('head')[0].appendChild(_storage_elm);

                try {
                    _storage_elm.load('jStorage');
                } catch (E) {
                    // try to reset cache
                    _storage_elm.setAttribute('jStorage', '{}');
                    _storage_elm.save('jStorage');
                    _storage_elm.load('jStorage');
                }

                var data = '{}';
                try {
                    data = _storage_elm.getAttribute('jStorage');
                } catch (E5) {}

                try {
                    _observer_update = _storage_elm.getAttribute('jStorage_update');
                } catch (E6) {}

                _storage_service.jStorage = data;
                _backend = 'userDataBehavior';
            } else {
                _storage_elm = null;
                return;
            }
        }

        // Load data from storage
        _load_storage();

        // remove dead keys
        _handleTTL();

        // start listening for changes
        _setupObserver();

        // initialize publish-subscribe service
        _handlePubSub();

        // handle cached navigation
        if ('addEventListener' in window) {
            window.addEventListener('pageshow', function(event) {
                if (event.persisted) {
                    _storageObserver();
                }
            }, false);
        }
    }

    /**
     * Reload data from storage when needed
     */
    function _reloadData() {
        var data = '{}';

        if (_backend == 'userDataBehavior') {
            _storage_elm.load('jStorage');

            try {
                data = _storage_elm.getAttribute('jStorage');
            } catch (E5) {}

            try {
                _observer_update = _storage_elm.getAttribute('jStorage_update');
            } catch (E6) {}

            _storage_service.jStorage = data;
        }

        _load_storage();

        // remove dead keys
        _handleTTL();

        _handlePubSub();
    }

    /**
     * Sets up a storage change observer
     */
    function _setupObserver() {
        if (_backend == 'localStorage' || _backend == 'globalStorage') {
            if ('addEventListener' in window) {
                window.addEventListener('storage', _storageObserver, false);
            } else {
                document.attachEvent('onstorage', _storageObserver);
            }
        } else if (_backend == 'userDataBehavior') {
            setInterval(_storageObserver, 1000);
        }
    }

    /**
     * Fired on any kind of data change, needs to check if anything has
     * really been changed
     */
    function _storageObserver() {
        var updateTime;
        // cumulate change notifications with timeout
        clearTimeout(_observer_timeout);
        _observer_timeout = setTimeout(function() {

            if (_backend == 'localStorage' || _backend == 'globalStorage') {
                updateTime = _storage_service.jStorage_update;
            } else if (_backend == 'userDataBehavior') {
                _storage_elm.load('jStorage');
                try {
                    updateTime = _storage_elm.getAttribute('jStorage_update');
                } catch (E5) {}
            }

            if (updateTime && updateTime != _observer_update) {
                _observer_update = updateTime;
                _checkUpdatedKeys();
            }

        }, 25);
    }

    /**
     * Reloads the data and checks if any keys are changed
     */
    function _checkUpdatedKeys() {
        var oldCrc32List = JSON.parse(JSON.stringify(_storage.__jstorage_meta.CRC32)),
            newCrc32List;

        _reloadData();
        newCrc32List = JSON.parse(JSON.stringify(_storage.__jstorage_meta.CRC32));

        var key,
            updated = [],
            removed = [];

        for (key in oldCrc32List) {
            if (oldCrc32List.hasOwnProperty(key)) {
                if (!newCrc32List[key]) {
                    removed.push(key);
                    continue;
                }
                if (oldCrc32List[key] != newCrc32List[key] && String(oldCrc32List[key]).substr(0, 2) == '2.') {
                    updated.push(key);
                }
            }
        }

        for (key in newCrc32List) {
            if (newCrc32List.hasOwnProperty(key)) {
                if (!oldCrc32List[key]) {
                    updated.push(key);
                }
            }
        }

        _fireObservers(updated, 'updated');
        _fireObservers(removed, 'deleted');
    }

    /**
     * Fires observers for updated keys
     *
     * @param {Array|String} keys Array of key names or a key
     * @param {String} action What happened with the value (updated, deleted, flushed)
     */
    function _fireObservers(keys, action) {
        keys = [].concat(keys || []);

        var i, j, len, jlen;

        if (action == 'flushed') {
            keys = [];
            for (var key in _observers) {
                if (_observers.hasOwnProperty(key)) {
                    keys.push(key);
                }
            }
            action = 'deleted';
        }
        for (i = 0, len = keys.length; i < len; i++) {
            if (_observers[keys[i]]) {
                for (j = 0, jlen = _observers[keys[i]].length; j < jlen; j++) {
                    _observers[keys[i]][j](keys[i], action);
                }
            }
            if (_observers['*']) {
                for (j = 0, jlen = _observers['*'].length; j < jlen; j++) {
                    _observers['*'][j](keys[i], action);
                }
            }
        }
    }

    /**
     * Publishes key change to listeners
     */
    function _publishChange() {
        var updateTime = (+new Date()).toString();

        if (_backend == 'localStorage' || _backend == 'globalStorage') {
            try {
                _storage_service.jStorage_update = updateTime;
            } catch (E8) {
                // safari private mode has been enabled after the jStorage initialization
                _backend = false;
            }
        } else if (_backend == 'userDataBehavior') {
            _storage_elm.setAttribute('jStorage_update', updateTime);
            _storage_elm.save('jStorage');
        }

        _storageObserver();
    }

    /**
     * Loads the data from the storage based on the supported mechanism
     */
    function _load_storage() {
        /* if jStorage string is retrieved, then decode it */
        if (_storage_service.jStorage) {
            try {
                _storage = JSON.parse(String(_storage_service.jStorage));
            } catch (E6) {
                _storage_service.jStorage = '{}';
            }
        } else {
            _storage_service.jStorage = '{}';
        }
        _storage_size = _storage_service.jStorage ? String(_storage_service.jStorage).length : 0;

        if (!_storage.__jstorage_meta) {
            _storage.__jstorage_meta = {};
        }
        if (!_storage.__jstorage_meta.CRC32) {
            _storage.__jstorage_meta.CRC32 = {};
        }
    }

    /**
     * This functions provides the 'save' mechanism to store the jStorage object
     */
    function _save() {
        _dropOldEvents(); // remove expired events
        try {
            _storage_service.jStorage = JSON.stringify(_storage);
            // If userData is used as the storage engine, additional
            if (_storage_elm) {
                _storage_elm.setAttribute('jStorage', _storage_service.jStorage);
                _storage_elm.save('jStorage');
            }
            _storage_size = _storage_service.jStorage ? String(_storage_service.jStorage).length : 0;
        } catch (E7) { /* probably cache is full, nothing is saved this way*/ }
    }

    /**
     * Function checks if a key is set and is string or numberic
     *
     * @param {String} key Key name
     */
    function _checkKey(key) {
        if (typeof key != 'string' && typeof key != 'number') {
            throw new TypeError('Key name must be string or numeric');
        }
        if (key == '__jstorage_meta') {
            throw new TypeError('Reserved key name');
        }
        return true;
    }

    /**
     * Removes expired keys
     */
    function _handleTTL() {
        var curtime, i, TTL, CRC32, nextExpire = Infinity,
            changed = false,
            deleted = [];

        clearTimeout(_ttl_timeout);

        if (!_storage.__jstorage_meta || typeof _storage.__jstorage_meta.TTL != 'object') {
            // nothing to do here
            return;
        }

        curtime = +new Date();
        TTL = _storage.__jstorage_meta.TTL;

        CRC32 = _storage.__jstorage_meta.CRC32;
        for (i in TTL) {
            if (TTL.hasOwnProperty(i)) {
                if (TTL[i] <= curtime) {
                    delete TTL[i];
                    delete CRC32[i];
                    delete _storage[i];
                    changed = true;
                    deleted.push(i);
                } else if (TTL[i] < nextExpire) {
                    nextExpire = TTL[i];
                }
            }
        }

        // set next check
        if (nextExpire != Infinity) {
            _ttl_timeout = setTimeout(_handleTTL, Math.min(nextExpire - curtime, 0x7FFFFFFF));
        }

        // save changes
        if (changed) {
            _save();
            _publishChange();
            _fireObservers(deleted, 'deleted');
        }
    }

    /**
     * Checks if there's any events on hold to be fired to listeners
     */
    function _handlePubSub() {
        var i, len;
        if (!_storage.__jstorage_meta.PubSub) {
            return;
        }
        var pubelm,
            _pubsubCurrent = _pubsub_last,
            needFired = [];

        for (i = len = _storage.__jstorage_meta.PubSub.length - 1; i >= 0; i--) {
            pubelm = _storage.__jstorage_meta.PubSub[i];
            if (pubelm[0] > _pubsub_last) {
                _pubsubCurrent = pubelm[0];
                needFired.unshift(pubelm);
            }
        }

        for (i = needFired.length - 1; i >= 0; i--) {
            _fireSubscribers(needFired[i][1], needFired[i][2]);
        }

        _pubsub_last = _pubsubCurrent;
    }

    /**
     * Fires all subscriber listeners for a pubsub channel
     *
     * @param {String} channel Channel name
     * @param {Mixed} payload Payload data to deliver
     */
    function _fireSubscribers(channel, payload) {
        if (_pubsub_observers[channel]) {
            for (var i = 0, len = _pubsub_observers[channel].length; i < len; i++) {
                // send immutable data that can't be modified by listeners
                try {
                    _pubsub_observers[channel][i](channel, JSON.parse(JSON.stringify(payload)));
                } catch (E) {}
            }
        }
    }

    /**
     * Remove old events from the publish stream (at least 2sec old)
     */
    function _dropOldEvents() {
        if (!_storage.__jstorage_meta.PubSub) {
            return;
        }

        var retire = +new Date() - 2000;

        for (var i = 0, len = _storage.__jstorage_meta.PubSub.length; i < len; i++) {
            if (_storage.__jstorage_meta.PubSub[i][0] <= retire) {
                // deleteCount is needed for IE6
                _storage.__jstorage_meta.PubSub.splice(i, _storage.__jstorage_meta.PubSub.length - i);
                break;
            }
        }

        if (!_storage.__jstorage_meta.PubSub.length) {
            delete _storage.__jstorage_meta.PubSub;
        }

    }

    /**
     * Publish payload to a channel
     *
     * @param {String} channel Channel name
     * @param {Mixed} payload Payload to send to the subscribers
     */
    function _publish(channel, payload) {
        if (!_storage.__jstorage_meta) {
            _storage.__jstorage_meta = {};
        }
        if (!_storage.__jstorage_meta.PubSub) {
            _storage.__jstorage_meta.PubSub = [];
        }

        _storage.__jstorage_meta.PubSub.unshift([+new Date(), channel, payload]);

        _save();
        _publishChange();
    }


    /**
     * JS Implementation of MurmurHash2
     *
     *  SOURCE: https://github.com/garycourt/murmurhash-js (MIT licensed)
     *
     * @author <a href='mailto:gary.court@gmail.com'>Gary Court</a>
     * @see http://github.com/garycourt/murmurhash-js
     * @author <a href='mailto:aappleby@gmail.com'>Austin Appleby</a>
     * @see http://sites.google.com/site/murmurhash/
     *
     * @param {string} str ASCII only
     * @param {number} seed Positive integer only
     * @return {number} 32-bit positive integer hash
     */

    function murmurhash2_32_gc(str, seed) {
        var
            l = str.length,
            h = seed ^ l,
            i = 0,
            k;

        while (l >= 4) {
            k =
                ((str.charCodeAt(i) & 0xff)) |
                ((str.charCodeAt(++i) & 0xff) << 8) |
                ((str.charCodeAt(++i) & 0xff) << 16) |
                ((str.charCodeAt(++i) & 0xff) << 24);

            k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));
            k ^= k >>> 24;
            k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));

            h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;

            l -= 4;
            ++i;
        }

        switch (l) {
            case 3:
                h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
                /* falls through */
            case 2:
                h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
                /* falls through */
            case 1:
                h ^= (str.charCodeAt(i) & 0xff);
                h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
        }

        h ^= h >>> 13;
        h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
        h ^= h >>> 15;

        return h >>> 0;
    }

    ////////////////////////// PUBLIC INTERFACE /////////////////////////

    $.jStorage = {
        /* Version number */
        version: JSTORAGE_VERSION,

        /**
         * Sets a key's value.
         *
         * @param {String} key Key to set. If this value is not set or not
         *              a string an exception is raised.
         * @param {Mixed} value Value to set. This can be any value that is JSON
         *              compatible (Numbers, Strings, Objects etc.).
         * @param {Object} [options] - possible options to use
         * @param {Number} [options.TTL] - optional TTL value, in milliseconds
         * @return {Mixed} the used value
         */
        set: function(key, value, options) {
            _checkKey(key);

            options = options || {};

            // undefined values are deleted automatically
            if (typeof value == 'undefined') {
                this.deleteKey(key);
                return value;
            }

            if (_XMLService.isXML(value)) {
                value = {
                    _is_xml: true,
                    xml: _XMLService.encode(value)
                };
            } else if (typeof value == 'function') {
                return undefined; // functions can't be saved!
            } else if (value && typeof value == 'object') {
                // clone the object before saving to _storage tree
                value = JSON.parse(JSON.stringify(value));
            }

            _storage[key] = value;

            _storage.__jstorage_meta.CRC32[key] = '2.' + murmurhash2_32_gc(JSON.stringify(value), 0x9747b28c);

            this.setTTL(key, options.TTL || 0); // also handles saving and _publishChange

            _fireObservers(key, 'updated');
            return value;
        },

        /**
         * Looks up a key in cache
         *
         * @param {String} key - Key to look up.
         * @param {mixed} def - Default value to return, if key didn't exist.
         * @return {Mixed} the key value, default value or null
         */
        get: function(key, def) {
            _checkKey(key);
            if (key in _storage) {
                if (_storage[key] && typeof _storage[key] == 'object' && _storage[key]._is_xml) {
                    return _XMLService.decode(_storage[key].xml);
                } else {
                    return _storage[key];
                }
            }
            return typeof(def) == 'undefined' ? null : def;
        },

        /**
         * Deletes a key from cache.
         *
         * @param {String} key - Key to delete.
         * @return {Boolean} true if key existed or false if it didn't
         */
        deleteKey: function(key) {
            _checkKey(key);
            if (key in _storage) {
                delete _storage[key];
                // remove from TTL list
                if (typeof _storage.__jstorage_meta.TTL == 'object' &&
                    key in _storage.__jstorage_meta.TTL) {
                    delete _storage.__jstorage_meta.TTL[key];
                }

                delete _storage.__jstorage_meta.CRC32[key];

                _save();
                _publishChange();
                _fireObservers(key, 'deleted');
                return true;
            }
            return false;
        },

        /**
         * Sets a TTL for a key, or remove it if ttl value is 0 or below
         *
         * @param {String} key - key to set the TTL for
         * @param {Number} ttl - TTL timeout in milliseconds
         * @return {Boolean} true if key existed or false if it didn't
         */
        setTTL: function(key, ttl) {
            var curtime = +new Date();
            _checkKey(key);
            ttl = Number(ttl) || 0;
            if (key in _storage) {

                if (!_storage.__jstorage_meta.TTL) {
                    _storage.__jstorage_meta.TTL = {};
                }

                // Set TTL value for the key
                if (ttl > 0) {
                    _storage.__jstorage_meta.TTL[key] = curtime + ttl;
                } else {
                    delete _storage.__jstorage_meta.TTL[key];
                }

                _save();

                _handleTTL();

                _publishChange();
                return true;
            }
            return false;
        },

        /**
         * Gets remaining TTL (in milliseconds) for a key or 0 when no TTL has been set
         *
         * @param {String} key Key to check
         * @return {Number} Remaining TTL in milliseconds
         */
        getTTL: function(key) {
            var curtime = +new Date(),
                ttl;
            _checkKey(key);
            if (key in _storage && _storage.__jstorage_meta.TTL && _storage.__jstorage_meta.TTL[key]) {
                ttl = _storage.__jstorage_meta.TTL[key] - curtime;
                return ttl || 0;
            }
            return 0;
        },

        /**
         * Deletes everything in cache.
         *
         * @return {Boolean} Always true
         */
        flush: function() {
            _storage = {
                __jstorage_meta: {
                    CRC32: {}
                }
            };
            _save();
            _publishChange();
            _fireObservers(null, 'flushed');
            return true;
        },

        /**
         * Returns a read-only copy of _storage
         *
         * @return {Object} Read-only copy of _storage
         */
        storageObj: function() {
            function F() {}
            F.prototype = _storage;
            return new F();
        },

        /**
         * Returns an index of all used keys as an array
         * ['key1', 'key2',..'keyN']
         *
         * @return {Array} Used keys
         */
        index: function() {
            var index = [],
                i;
            for (i in _storage) {
                if (_storage.hasOwnProperty(i) && i != '__jstorage_meta') {
                    index.push(i);
                }
            }
            return index;
        },

        /**
         * How much space in bytes does the storage take?
         *
         * @return {Number} Storage size in chars (not the same as in bytes,
         *                  since some chars may take several bytes)
         */
        storageSize: function() {
            return _storage_size;
        },

        /**
         * Which backend is currently in use?
         *
         * @return {String} Backend name
         */
        currentBackend: function() {
            return _backend;
        },

        /**
         * Test if storage is available
         *
         * @return {Boolean} True if storage can be used
         */
        storageAvailable: function() {
            return !!_backend;
        },

        /**
         * Register change listeners
         *
         * @param {String} key Key name
         * @param {Function} callback Function to run when the key changes
         */
        listenKeyChange: function(key, callback) {
            _checkKey(key);
            if (!_observers[key]) {
                _observers[key] = [];
            }
            _observers[key].push(callback);
        },

        /**
         * Remove change listeners
         *
         * @param {String} key Key name to unregister listeners against
         * @param {Function} [callback] If set, unregister the callback, if not - unregister all
         */
        stopListening: function(key, callback) {
            _checkKey(key);

            if (!_observers[key]) {
                return;
            }

            if (!callback) {
                delete _observers[key];
                return;
            }

            for (var i = _observers[key].length - 1; i >= 0; i--) {
                if (_observers[key][i] == callback) {
                    _observers[key].splice(i, 1);
                }
            }
        },

        /**
         * Subscribe to a Publish/Subscribe event stream
         *
         * @param {String} channel Channel name
         * @param {Function} callback Function to run when the something is published to the channel
         */
        subscribe: function(channel, callback) {
            channel = (channel || '').toString();
            if (!channel) {
                throw new TypeError('Channel not defined');
            }
            if (!_pubsub_observers[channel]) {
                _pubsub_observers[channel] = [];
            }
            _pubsub_observers[channel].push(callback);
        },

        /**
         * Publish data to an event stream
         *
         * @param {String} channel Channel name
         * @param {Mixed} payload Payload to deliver
         */
        publish: function(channel, payload) {
            channel = (channel || '').toString();
            if (!channel) {
                throw new TypeError('Channel not defined');
            }

            _publish(channel, payload);
        },

        /**
         * Reloads the data from browser storage
         */
        reInit: function() {
            _reloadData();
        },

        /**
         * Removes reference from global objects and saves it as jStorage
         *
         * @param {Boolean} option if needed to save object as simple 'jStorage' in windows context
         */
        noConflict: function(saveInGlobal) {
            delete window.$.jStorage;

            if (saveInGlobal) {
                window.jStorage = this;
            }

            return this;
        }
    };

    // Initialize jStorage
    _init();

})();

/***/ }),

/***/ "../common/node_modules/lodash.frompairs/index.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash.frompairs/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * The inverse of `_.toPairs`; this method returns an object composed
 * from key-value `pairs`.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} pairs The key-value pairs.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.fromPairs([['fred', 30], ['barney', 40]]);
 * // => { 'fred': 30, 'barney': 40 }
 */
function fromPairs(pairs) {
  var index = -1,
      length = pairs ? pairs.length : 0,
      result = {};

  while (++index < length) {
    var pair = pairs[index];
    result[pair[0]] = pair[1];
  }
  return result;
}

module.exports = fromPairs;


/***/ }),

/***/ "../common/node_modules/lodash/_DataView.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_DataView.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "../common/node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "../common/node_modules/lodash/_Hash.js":
/*!**********************************************!*\
  !*** ../common/node_modules/lodash/_Hash.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(/*! ./_hashClear */ "../common/node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ "../common/node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__(/*! ./_hashGet */ "../common/node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__(/*! ./_hashHas */ "../common/node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__(/*! ./_hashSet */ "../common/node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "../common/node_modules/lodash/_ListCache.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_ListCache.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "../common/node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "../common/node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "../common/node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "../common/node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "../common/node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "../common/node_modules/lodash/_Map.js":
/*!*********************************************!*\
  !*** ../common/node_modules/lodash/_Map.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "../common/node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "../common/node_modules/lodash/_MapCache.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_MapCache.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "../common/node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "../common/node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "../common/node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "../common/node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "../common/node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "../common/node_modules/lodash/_Promise.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_Promise.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "../common/node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "../common/node_modules/lodash/_Set.js":
/*!*********************************************!*\
  !*** ../common/node_modules/lodash/_Set.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "../common/node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "../common/node_modules/lodash/_SetCache.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_SetCache.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ "../common/node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ "../common/node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ "../common/node_modules/lodash/_setCacheHas.js");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ "../common/node_modules/lodash/_Stack.js":
/*!***********************************************!*\
  !*** ../common/node_modules/lodash/_Stack.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "../common/node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__(/*! ./_stackClear */ "../common/node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ "../common/node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__(/*! ./_stackGet */ "../common/node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__(/*! ./_stackHas */ "../common/node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__(/*! ./_stackSet */ "../common/node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "../common/node_modules/lodash/_Symbol.js":
/*!************************************************!*\
  !*** ../common/node_modules/lodash/_Symbol.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../common/node_modules/lodash/_Uint8Array.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_Uint8Array.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "../common/node_modules/lodash/_WeakMap.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_WeakMap.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "../common/node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "../common/node_modules/lodash/_apply.js":
/*!***********************************************!*\
  !*** ../common/node_modules/lodash/_apply.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),

/***/ "../common/node_modules/lodash/_arrayFilter.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_arrayFilter.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "../common/node_modules/lodash/_arrayLikeKeys.js":
/*!*******************************************************!*\
  !*** ../common/node_modules/lodash/_arrayLikeKeys.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "../common/node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "../common/node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "../common/node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "../common/node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "../common/node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "../common/node_modules/lodash/_arrayMap.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_arrayMap.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "../common/node_modules/lodash/_arrayPush.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_arrayPush.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "../common/node_modules/lodash/_arraySome.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_arraySome.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ "../common/node_modules/lodash/_assignValue.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_assignValue.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "../common/node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "../common/node_modules/lodash/eq.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "../common/node_modules/lodash/_assocIndexOf.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_assocIndexOf.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ "../common/node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "../common/node_modules/lodash/_baseAssignValue.js":
/*!*********************************************************!*\
  !*** ../common/node_modules/lodash/_baseAssignValue.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "../common/node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "../common/node_modules/lodash/_baseEach.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_baseEach.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "../common/node_modules/lodash/_baseForOwn.js"),
    createBaseEach = __webpack_require__(/*! ./_createBaseEach */ "../common/node_modules/lodash/_createBaseEach.js");

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),

/***/ "../common/node_modules/lodash/_baseFor.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_baseFor.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ "../common/node_modules/lodash/_createBaseFor.js");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ "../common/node_modules/lodash/_baseForOwn.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_baseForOwn.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(/*! ./_baseFor */ "../common/node_modules/lodash/_baseFor.js"),
    keys = __webpack_require__(/*! ./keys */ "../common/node_modules/lodash/keys.js");

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),

/***/ "../common/node_modules/lodash/_baseGet.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_baseGet.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ "../common/node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "../common/node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ "../common/node_modules/lodash/_baseGetAllKeys.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_baseGetAllKeys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "../common/node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "../common/node_modules/lodash/_baseGetTag.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_baseGetTag.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../common/node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "../common/node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "../common/node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../common/node_modules/lodash/_baseHasIn.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_baseHasIn.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),

/***/ "../common/node_modules/lodash/_baseIsArguments.js":
/*!*********************************************************!*\
  !*** ../common/node_modules/lodash/_baseIsArguments.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../common/node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../common/node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "../common/node_modules/lodash/_baseIsEqual.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_baseIsEqual.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ "../common/node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../common/node_modules/lodash/isObjectLike.js");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ "../common/node_modules/lodash/_baseIsEqualDeep.js":
/*!*********************************************************!*\
  !*** ../common/node_modules/lodash/_baseIsEqualDeep.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "../common/node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "../common/node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__(/*! ./_equalByTag */ "../common/node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__(/*! ./_equalObjects */ "../common/node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "../common/node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "../common/node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "../common/node_modules/lodash/isTypedArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ "../common/node_modules/lodash/_baseIsMatch.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_baseIsMatch.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "../common/node_modules/lodash/_Stack.js"),
    baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "../common/node_modules/lodash/_baseIsEqual.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),

/***/ "../common/node_modules/lodash/_baseIsNative.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_baseIsNative.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "../common/node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__(/*! ./_isMasked */ "../common/node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__(/*! ./isObject */ "../common/node_modules/lodash/isObject.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "../common/node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "../common/node_modules/lodash/_baseIsTypedArray.js":
/*!**********************************************************!*\
  !*** ../common/node_modules/lodash/_baseIsTypedArray.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../common/node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__(/*! ./isLength */ "../common/node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../common/node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "../common/node_modules/lodash/_baseIteratee.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_baseIteratee.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__(/*! ./_baseMatches */ "../common/node_modules/lodash/_baseMatches.js"),
    baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ "../common/node_modules/lodash/_baseMatchesProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "../common/node_modules/lodash/identity.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    property = __webpack_require__(/*! ./property */ "../common/node_modules/lodash/property.js");

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),

/***/ "../common/node_modules/lodash/_baseKeys.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_baseKeys.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "../common/node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "../common/node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "../common/node_modules/lodash/_baseMatches.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_baseMatches.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ "../common/node_modules/lodash/_baseIsMatch.js"),
    getMatchData = __webpack_require__(/*! ./_getMatchData */ "../common/node_modules/lodash/_getMatchData.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "../common/node_modules/lodash/_matchesStrictComparable.js");

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),

/***/ "../common/node_modules/lodash/_baseMatchesProperty.js":
/*!*************************************************************!*\
  !*** ../common/node_modules/lodash/_baseMatchesProperty.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "../common/node_modules/lodash/_baseIsEqual.js"),
    get = __webpack_require__(/*! ./get */ "../common/node_modules/lodash/get.js"),
    hasIn = __webpack_require__(/*! ./hasIn */ "../common/node_modules/lodash/hasIn.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "../common/node_modules/lodash/_isKey.js"),
    isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "../common/node_modules/lodash/_isStrictComparable.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "../common/node_modules/lodash/_matchesStrictComparable.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "../common/node_modules/lodash/_toKey.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),

/***/ "../common/node_modules/lodash/_baseProperty.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_baseProperty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),

/***/ "../common/node_modules/lodash/_basePropertyDeep.js":
/*!**********************************************************!*\
  !*** ../common/node_modules/lodash/_basePropertyDeep.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "../common/node_modules/lodash/_baseGet.js");

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),

/***/ "../common/node_modules/lodash/_baseRest.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_baseRest.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(/*! ./identity */ "../common/node_modules/lodash/identity.js"),
    overRest = __webpack_require__(/*! ./_overRest */ "../common/node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "../common/node_modules/lodash/_setToString.js");

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),

/***/ "../common/node_modules/lodash/_baseSetToString.js":
/*!*********************************************************!*\
  !*** ../common/node_modules/lodash/_baseSetToString.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(/*! ./constant */ "../common/node_modules/lodash/constant.js"),
    defineProperty = __webpack_require__(/*! ./_defineProperty */ "../common/node_modules/lodash/_defineProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "../common/node_modules/lodash/identity.js");

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),

/***/ "../common/node_modules/lodash/_baseSome.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_baseSome.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(/*! ./_baseEach */ "../common/node_modules/lodash/_baseEach.js");

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  baseEach(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

module.exports = baseSome;


/***/ }),

/***/ "../common/node_modules/lodash/_baseTimes.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_baseTimes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "../common/node_modules/lodash/_baseToString.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_baseToString.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../common/node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "../common/node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "../common/node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "../common/node_modules/lodash/_baseUnary.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_baseUnary.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "../common/node_modules/lodash/_cacheHas.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_cacheHas.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ "../common/node_modules/lodash/_castPath.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_castPath.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "../common/node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ "../common/node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__(/*! ./toString */ "../common/node_modules/lodash/toString.js");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ "../common/node_modules/lodash/_copyObject.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_copyObject.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ "../common/node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "../common/node_modules/lodash/_baseAssignValue.js");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "../common/node_modules/lodash/_coreJsData.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_coreJsData.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "../common/node_modules/lodash/_createAssigner.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_createAssigner.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__(/*! ./_baseRest */ "../common/node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "../common/node_modules/lodash/_isIterateeCall.js");

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),

/***/ "../common/node_modules/lodash/_createBaseEach.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_createBaseEach.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "../common/node_modules/lodash/isArrayLike.js");

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),

/***/ "../common/node_modules/lodash/_createBaseFor.js":
/*!*******************************************************!*\
  !*** ../common/node_modules/lodash/_createBaseFor.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ "../common/node_modules/lodash/_defineProperty.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_defineProperty.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "../common/node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "../common/node_modules/lodash/_equalArrays.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_equalArrays.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(/*! ./_SetCache */ "../common/node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__(/*! ./_arraySome */ "../common/node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "../common/node_modules/lodash/_cacheHas.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ "../common/node_modules/lodash/_equalByTag.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_equalByTag.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../common/node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "../common/node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__(/*! ./eq */ "../common/node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "../common/node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__(/*! ./_mapToArray */ "../common/node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "../common/node_modules/lodash/_setToArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ "../common/node_modules/lodash/_equalObjects.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_equalObjects.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "../common/node_modules/lodash/_getAllKeys.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ "../common/node_modules/lodash/_freeGlobal.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_freeGlobal.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../lpi/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../common/node_modules/lodash/_getAllKeys.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_getAllKeys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "../common/node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "../common/node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__(/*! ./keys */ "../common/node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "../common/node_modules/lodash/_getMapData.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_getMapData.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "../common/node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "../common/node_modules/lodash/_getMatchData.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_getMatchData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "../common/node_modules/lodash/_isStrictComparable.js"),
    keys = __webpack_require__(/*! ./keys */ "../common/node_modules/lodash/keys.js");

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),

/***/ "../common/node_modules/lodash/_getNative.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_getNative.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "../common/node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__(/*! ./_getValue */ "../common/node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "../common/node_modules/lodash/_getRawTag.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_getRawTag.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../common/node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../common/node_modules/lodash/_getSymbols.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_getSymbols.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "../common/node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "../common/node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "../common/node_modules/lodash/_getTag.js":
/*!************************************************!*\
  !*** ../common/node_modules/lodash/_getTag.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(/*! ./_DataView */ "../common/node_modules/lodash/_DataView.js"),
    Map = __webpack_require__(/*! ./_Map */ "../common/node_modules/lodash/_Map.js"),
    Promise = __webpack_require__(/*! ./_Promise */ "../common/node_modules/lodash/_Promise.js"),
    Set = __webpack_require__(/*! ./_Set */ "../common/node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ "../common/node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../common/node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "../common/node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "../common/node_modules/lodash/_getValue.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_getValue.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "../common/node_modules/lodash/_hasPath.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_hasPath.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ "../common/node_modules/lodash/_castPath.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "../common/node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "../common/node_modules/lodash/_isIndex.js"),
    isLength = __webpack_require__(/*! ./isLength */ "../common/node_modules/lodash/isLength.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "../common/node_modules/lodash/_toKey.js");

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),

/***/ "../common/node_modules/lodash/_hashClear.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_hashClear.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "../common/node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "../common/node_modules/lodash/_hashDelete.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_hashDelete.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "../common/node_modules/lodash/_hashGet.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_hashGet.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "../common/node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "../common/node_modules/lodash/_hashHas.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_hashHas.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "../common/node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "../common/node_modules/lodash/_hashSet.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_hashSet.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "../common/node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "../common/node_modules/lodash/_isIndex.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_isIndex.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "../common/node_modules/lodash/_isIterateeCall.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_isIterateeCall.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ "../common/node_modules/lodash/eq.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "../common/node_modules/lodash/isArrayLike.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "../common/node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__(/*! ./isObject */ "../common/node_modules/lodash/isObject.js");

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),

/***/ "../common/node_modules/lodash/_isKey.js":
/*!***********************************************!*\
  !*** ../common/node_modules/lodash/_isKey.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "../common/node_modules/lodash/isSymbol.js");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ "../common/node_modules/lodash/_isKeyable.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/_isKeyable.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "../common/node_modules/lodash/_isMasked.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_isMasked.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "../common/node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "../common/node_modules/lodash/_isPrototype.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_isPrototype.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "../common/node_modules/lodash/_isStrictComparable.js":
/*!************************************************************!*\
  !*** ../common/node_modules/lodash/_isStrictComparable.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../common/node_modules/lodash/isObject.js");

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),

/***/ "../common/node_modules/lodash/_listCacheClear.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_listCacheClear.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "../common/node_modules/lodash/_listCacheDelete.js":
/*!*********************************************************!*\
  !*** ../common/node_modules/lodash/_listCacheDelete.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "../common/node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "../common/node_modules/lodash/_listCacheGet.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_listCacheGet.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "../common/node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "../common/node_modules/lodash/_listCacheHas.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_listCacheHas.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "../common/node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "../common/node_modules/lodash/_listCacheSet.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_listCacheSet.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "../common/node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "../common/node_modules/lodash/_mapCacheClear.js":
/*!*******************************************************!*\
  !*** ../common/node_modules/lodash/_mapCacheClear.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(/*! ./_Hash */ "../common/node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__(/*! ./_ListCache */ "../common/node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "../common/node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "../common/node_modules/lodash/_mapCacheDelete.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_mapCacheDelete.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "../common/node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "../common/node_modules/lodash/_mapCacheGet.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_mapCacheGet.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "../common/node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "../common/node_modules/lodash/_mapCacheHas.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_mapCacheHas.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "../common/node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "../common/node_modules/lodash/_mapCacheSet.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_mapCacheSet.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "../common/node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "../common/node_modules/lodash/_mapToArray.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_mapToArray.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ "../common/node_modules/lodash/_matchesStrictComparable.js":
/*!*****************************************************************!*\
  !*** ../common/node_modules/lodash/_matchesStrictComparable.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),

/***/ "../common/node_modules/lodash/_memoizeCapped.js":
/*!*******************************************************!*\
  !*** ../common/node_modules/lodash/_memoizeCapped.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(/*! ./memoize */ "../common/node_modules/lodash/memoize.js");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ "../common/node_modules/lodash/_nativeCreate.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_nativeCreate.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "../common/node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "../common/node_modules/lodash/_nativeKeys.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_nativeKeys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ "../common/node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "../common/node_modules/lodash/_nodeUtil.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_nodeUtil.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../common/node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../lpi/node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "../common/node_modules/lodash/_objectToString.js":
/*!********************************************************!*\
  !*** ../common/node_modules/lodash/_objectToString.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../common/node_modules/lodash/_overArg.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/_overArg.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "../common/node_modules/lodash/_overRest.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_overRest.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(/*! ./_apply */ "../common/node_modules/lodash/_apply.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),

/***/ "../common/node_modules/lodash/_root.js":
/*!**********************************************!*\
  !*** ../common/node_modules/lodash/_root.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../common/node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../common/node_modules/lodash/_setCacheAdd.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_setCacheAdd.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ "../common/node_modules/lodash/_setCacheHas.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_setCacheHas.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ "../common/node_modules/lodash/_setToArray.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_setToArray.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ "../common/node_modules/lodash/_setToString.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_setToString.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ "../common/node_modules/lodash/_baseSetToString.js"),
    shortOut = __webpack_require__(/*! ./_shortOut */ "../common/node_modules/lodash/_shortOut.js");

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),

/***/ "../common/node_modules/lodash/_shortOut.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_shortOut.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),

/***/ "../common/node_modules/lodash/_stackClear.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/_stackClear.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "../common/node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "../common/node_modules/lodash/_stackDelete.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/_stackDelete.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "../common/node_modules/lodash/_stackGet.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_stackGet.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "../common/node_modules/lodash/_stackHas.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_stackHas.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "../common/node_modules/lodash/_stackSet.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_stackSet.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "../common/node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "../common/node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__(/*! ./_MapCache */ "../common/node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "../common/node_modules/lodash/_stringToPath.js":
/*!******************************************************!*\
  !*** ../common/node_modules/lodash/_stringToPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ "../common/node_modules/lodash/_memoizeCapped.js");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ "../common/node_modules/lodash/_toKey.js":
/*!***********************************************!*\
  !*** ../common/node_modules/lodash/_toKey.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "../common/node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ "../common/node_modules/lodash/_toSource.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/_toSource.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "../common/node_modules/lodash/assign.js":
/*!***********************************************!*\
  !*** ../common/node_modules/lodash/assign.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ "../common/node_modules/lodash/_assignValue.js"),
    copyObject = __webpack_require__(/*! ./_copyObject */ "../common/node_modules/lodash/_copyObject.js"),
    createAssigner = __webpack_require__(/*! ./_createAssigner */ "../common/node_modules/lodash/_createAssigner.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "../common/node_modules/lodash/isArrayLike.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "../common/node_modules/lodash/_isPrototype.js"),
    keys = __webpack_require__(/*! ./keys */ "../common/node_modules/lodash/keys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;


/***/ }),

/***/ "../common/node_modules/lodash/constant.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/constant.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),

/***/ "../common/node_modules/lodash/eq.js":
/*!*******************************************!*\
  !*** ../common/node_modules/lodash/eq.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "../common/node_modules/lodash/get.js":
/*!********************************************!*\
  !*** ../common/node_modules/lodash/get.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "../common/node_modules/lodash/_baseGet.js");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ "../common/node_modules/lodash/hasIn.js":
/*!**********************************************!*\
  !*** ../common/node_modules/lodash/hasIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ "../common/node_modules/lodash/_baseHasIn.js"),
    hasPath = __webpack_require__(/*! ./_hasPath */ "../common/node_modules/lodash/_hasPath.js");

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),

/***/ "../common/node_modules/lodash/identity.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/identity.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "../common/node_modules/lodash/isArguments.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/isArguments.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "../common/node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../common/node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "../common/node_modules/lodash/isArray.js":
/*!************************************************!*\
  !*** ../common/node_modules/lodash/isArray.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "../common/node_modules/lodash/isArrayLike.js":
/*!****************************************************!*\
  !*** ../common/node_modules/lodash/isArrayLike.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "../common/node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "../common/node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "../common/node_modules/lodash/isBuffer.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/isBuffer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ "../common/node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__(/*! ./stubFalse */ "../common/node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../lpi/node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "../common/node_modules/lodash/isFunction.js":
/*!***************************************************!*\
  !*** ../common/node_modules/lodash/isFunction.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../common/node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "../common/node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "../common/node_modules/lodash/isLength.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/isLength.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "../common/node_modules/lodash/isObject.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/isObject.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "../common/node_modules/lodash/isObjectLike.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/isObjectLike.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../common/node_modules/lodash/isSymbol.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/isSymbol.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../common/node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../common/node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "../common/node_modules/lodash/isTypedArray.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/lodash/isTypedArray.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "../common/node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "../common/node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "../common/node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "../common/node_modules/lodash/keys.js":
/*!*********************************************!*\
  !*** ../common/node_modules/lodash/keys.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "../common/node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ "../common/node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "../common/node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "../common/node_modules/lodash/mapValues.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/mapValues.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "../common/node_modules/lodash/_baseAssignValue.js"),
    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "../common/node_modules/lodash/_baseForOwn.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "../common/node_modules/lodash/_baseIteratee.js");

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;


/***/ }),

/***/ "../common/node_modules/lodash/memoize.js":
/*!************************************************!*\
  !*** ../common/node_modules/lodash/memoize.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ "../common/node_modules/lodash/_MapCache.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ "../common/node_modules/lodash/property.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/property.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "../common/node_modules/lodash/_baseProperty.js"),
    basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ "../common/node_modules/lodash/_basePropertyDeep.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "../common/node_modules/lodash/_isKey.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "../common/node_modules/lodash/_toKey.js");

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),

/***/ "../common/node_modules/lodash/some.js":
/*!*********************************************!*\
  !*** ../common/node_modules/lodash/some.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arraySome = __webpack_require__(/*! ./_arraySome */ "../common/node_modules/lodash/_arraySome.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "../common/node_modules/lodash/_baseIteratee.js"),
    baseSome = __webpack_require__(/*! ./_baseSome */ "../common/node_modules/lodash/_baseSome.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../common/node_modules/lodash/isArray.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "../common/node_modules/lodash/_isIterateeCall.js");

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = isArray(collection) ? arraySome : baseSome;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = some;


/***/ }),

/***/ "../common/node_modules/lodash/stubArray.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/stubArray.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "../common/node_modules/lodash/stubFalse.js":
/*!**************************************************!*\
  !*** ../common/node_modules/lodash/stubFalse.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "../common/node_modules/lodash/toString.js":
/*!*************************************************!*\
  !*** ../common/node_modules/lodash/toString.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(/*! ./_baseToString */ "../common/node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "../common/node_modules/ngcomponent/index.js":
/*!***************************************************!*\
  !*** ../common/node_modules/ngcomponent/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var assign = __webpack_require__(/*! lodash/assign */ "../common/node_modules/lodash/assign.js");
var mapValues = __webpack_require__(/*! lodash/mapValues */ "../common/node_modules/lodash/mapValues.js");
var some = __webpack_require__(/*! lodash/some */ "../common/node_modules/lodash/some.js");
var NgComponent = /** @class */ (function () {
    function NgComponent() {
        this.__isFirstRender = true;
        this.state = {};
        this.props = {};
    }
    /*
      eg. {
        as: {currentValue: [1, 2, 3], previousValue: [1, 2]},
        bs: {currentValue: 42, previousValue: undefined}
      }
    */
    // nb: this method is explicity exposed for unit testing
    NgComponent.prototype.$onChanges = function (changes) {
        var oldProps = this.props;
        // TODO: fix Lodash typings upstream
        var newProps = mapValues(changes, 'currentValue');
        // TODO: implement nextState (which also means implement this.setState)
        var nextProps = assign({}, this.props, newProps);
        if (this.__isFirstRender) {
            assign(this, { props: nextProps });
            this.componentWillMount();
            this.render();
            this.__isFirstRender = false;
        }
        else {
            if (!this.didPropsChange(newProps, oldProps))
                return;
            this.componentWillReceiveProps(nextProps);
            var shouldUpdate = this.shouldComponentUpdate(nextProps, this.state);
            assign(this, { props: nextProps });
            if (!shouldUpdate)
                return;
            this.componentWillUpdate(this.props, this.state);
            this.render();
            this.componentDidUpdate(this.props, this.state);
        }
    };
    NgComponent.prototype.$postLink = function () {
        this.componentDidMount();
    };
    NgComponent.prototype.$onDestroy = function () {
        this.componentWillUnmount();
    };
    NgComponent.prototype.didPropsChange = function (newProps, oldProps) {
        return some(newProps, function (v, k) { return v !== oldProps[k]; });
    };
    /*
      lifecycle hooks
    */
    NgComponent.prototype.componentWillMount = function () { };
    NgComponent.prototype.componentDidMount = function () { };
    NgComponent.prototype.componentWillReceiveProps = function (_props) { };
    NgComponent.prototype.shouldComponentUpdate = function (_nextProps, _nextState) { return true; };
    NgComponent.prototype.componentWillUpdate = function (_props, _state) { };
    NgComponent.prototype.componentDidUpdate = function (_props, _state) { };
    NgComponent.prototype.componentWillUnmount = function () { };
    NgComponent.prototype.render = function () { };
    return NgComponent;
}());
exports.default = NgComponent;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/object-assign/index.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/object-assign/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "../common/node_modules/prop-types/factoryWithThrowingShims.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/prop-types/factoryWithThrowingShims.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "../common/node_modules/prop-types/lib/ReactPropTypesSecret.js");

function emptyFunction() {}

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "../common/node_modules/prop-types/index.js":
/*!**************************************************!*\
  !*** ../common/node_modules/prop-types/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (false) { var throwOnDirectAccess, isValidElement, REACT_ELEMENT_TYPE; } else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(/*! ./factoryWithThrowingShims */ "../common/node_modules/prop-types/factoryWithThrowingShims.js")();
}


/***/ }),

/***/ "../common/node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "../common/node_modules/react-dom/cjs/react-dom.production.min.js":
/*!************************************************************************!*\
  !*** ../common/node_modules/react-dom/cjs/react-dom.production.min.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.4.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
var aa=__webpack_require__(/*! fbjs/lib/invariant */ "../common/node_modules/fbjs/lib/invariant.js"),ba=__webpack_require__(/*! react */ "../common/node_modules/react/index.js"),m=__webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ "../common/node_modules/fbjs/lib/ExecutionEnvironment.js"),p=__webpack_require__(/*! object-assign */ "../common/node_modules/object-assign/index.js"),v=__webpack_require__(/*! fbjs/lib/emptyFunction */ "../common/node_modules/fbjs/lib/emptyFunction.js"),da=__webpack_require__(/*! fbjs/lib/getActiveElement */ "../common/node_modules/fbjs/lib/getActiveElement.js"),ea=__webpack_require__(/*! fbjs/lib/shallowEqual */ "../common/node_modules/fbjs/lib/shallowEqual.js"),fa=__webpack_require__(/*! fbjs/lib/containsNode */ "../common/node_modules/fbjs/lib/containsNode.js"),ha=__webpack_require__(/*! fbjs/lib/emptyObject */ "../common/node_modules/fbjs/lib/emptyObject.js");
function A(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);aa(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c)}ba?void 0:A("227");
function ia(a,b,c,d,e,f,g,h,k){this._hasCaughtError=!1;this._caughtError=null;var n=Array.prototype.slice.call(arguments,3);try{b.apply(c,n)}catch(r){this._caughtError=r,this._hasCaughtError=!0}}
var B={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(a,b,c,d,e,f,g,h,k){ia.apply(B,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,g,h,k){B.invokeGuardedCallback.apply(this,arguments);if(B.hasCaughtError()){var n=B.clearCaughtError();B._hasRethrowError||(B._hasRethrowError=!0,B._rethrowError=n)}},rethrowCaughtError:function(){return ka.apply(B,arguments)},hasCaughtError:function(){return B._hasCaughtError},clearCaughtError:function(){if(B._hasCaughtError){var a=
B._caughtError;B._caughtError=null;B._hasCaughtError=!1;return a}A("198")}};function ka(){if(B._hasRethrowError){var a=B._rethrowError;B._rethrowError=null;B._hasRethrowError=!1;throw a;}}var la=null,ma={};
function na(){if(la)for(var a in ma){var b=ma[a],c=la.indexOf(a);-1<c?void 0:A("96",a);if(!oa[c]){b.extractEvents?void 0:A("97",a);oa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;pa.hasOwnProperty(h)?A("99",h):void 0;pa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&qa(k[e],g,h);e=!0}else f.registrationName?(qa(f.registrationName,g,h),e=!0):e=!1;e?void 0:A("98",d,a)}}}}
function qa(a,b,c){ra[a]?A("100",a):void 0;ra[a]=b;sa[a]=b.eventTypes[c].dependencies}var oa=[],pa={},ra={},sa={};function ta(a){la?A("101"):void 0;la=Array.prototype.slice.call(a);na()}function ua(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];ma.hasOwnProperty(c)&&ma[c]===d||(ma[c]?A("102",c):void 0,ma[c]=d,b=!0)}b&&na()}
var va={plugins:oa,eventNameDispatchConfigs:pa,registrationNameModules:ra,registrationNameDependencies:sa,possibleRegistrationNames:null,injectEventPluginOrder:ta,injectEventPluginsByName:ua},wa=null,xa=null,ya=null;function za(a,b,c,d){b=a.type||"unknown-event";a.currentTarget=ya(d);B.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}
function Aa(a,b){null==b?A("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function Ba(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var Ca=null;
function Da(a,b){if(a){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)za(a,b,c[e],d[e]);else c&&za(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function Ea(a){return Da(a,!0)}function Fa(a){return Da(a,!1)}var Ga={injectEventPluginOrder:ta,injectEventPluginsByName:ua};
function Ha(a,b){var c=a.stateNode;if(!c)return null;var d=wa(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?A("231",b,typeof c):void 0;
return c}function Ia(a,b){null!==a&&(Ca=Aa(Ca,a));a=Ca;Ca=null;a&&(b?Ba(a,Ea):Ba(a,Fa),Ca?A("95"):void 0,B.rethrowCaughtError())}function Ja(a,b,c,d){for(var e=null,f=0;f<oa.length;f++){var g=oa[f];g&&(g=g.extractEvents(a,b,c,d))&&(e=Aa(e,g))}Ia(e,!1)}var Ka={injection:Ga,getListener:Ha,runEventsInBatch:Ia,runExtractedEventsInBatch:Ja},La=Math.random().toString(36).slice(2),C="__reactInternalInstance$"+La,Ma="__reactEventHandlers$"+La;
function Na(a){if(a[C])return a[C];for(;!a[C];)if(a.parentNode)a=a.parentNode;else return null;a=a[C];return 5===a.tag||6===a.tag?a:null}function Oa(a){if(5===a.tag||6===a.tag)return a.stateNode;A("33")}function Pa(a){return a[Ma]||null}var Qa={precacheFiberNode:function(a,b){b[C]=a},getClosestInstanceFromNode:Na,getInstanceFromNode:function(a){a=a[C];return!a||5!==a.tag&&6!==a.tag?null:a},getNodeFromInstance:Oa,getFiberCurrentPropsFromNode:Pa,updateFiberProps:function(a,b){a[Ma]=b}};
function F(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Ra(a,b,c){for(var d=[];a;)d.push(a),a=F(a);for(a=d.length;0<a--;)b(d[a],"captured",c);for(a=0;a<d.length;a++)b(d[a],"bubbled",c)}function Sa(a,b,c){if(b=Ha(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=Aa(c._dispatchListeners,b),c._dispatchInstances=Aa(c._dispatchInstances,a)}function Ta(a){a&&a.dispatchConfig.phasedRegistrationNames&&Ra(a._targetInst,Sa,a)}
function Ua(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?F(b):null;Ra(b,Sa,a)}}function Va(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Ha(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=Aa(c._dispatchListeners,b),c._dispatchInstances=Aa(c._dispatchInstances,a))}function Xa(a){a&&a.dispatchConfig.registrationName&&Va(a._targetInst,null,a)}function Ya(a){Ba(a,Ta)}
function Za(a,b,c,d){if(c&&d)a:{var e=c;for(var f=d,g=0,h=e;h;h=F(h))g++;h=0;for(var k=f;k;k=F(k))h++;for(;0<g-h;)e=F(e),g--;for(;0<h-g;)f=F(f),h--;for(;g--;){if(e===f||e===f.alternate)break a;e=F(e);f=F(f)}e=null}else e=null;f=e;for(e=[];c&&c!==f;){g=c.alternate;if(null!==g&&g===f)break;e.push(c);c=F(c)}for(c=[];d&&d!==f;){g=d.alternate;if(null!==g&&g===f)break;c.push(d);d=F(d)}for(d=0;d<e.length;d++)Va(e[d],"bubbled",a);for(a=c.length;0<a--;)Va(c[a],"captured",b)}
var $a={accumulateTwoPhaseDispatches:Ya,accumulateTwoPhaseDispatchesSkipTarget:function(a){Ba(a,Ua)},accumulateEnterLeaveDispatches:Za,accumulateDirectDispatches:function(a){Ba(a,Xa)}};function ab(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;c["ms"+a]="MS"+b;c["O"+a]="o"+b.toLowerCase();return c}
var bb={animationend:ab("Animation","AnimationEnd"),animationiteration:ab("Animation","AnimationIteration"),animationstart:ab("Animation","AnimationStart"),transitionend:ab("Transition","TransitionEnd")},cb={},db={};m.canUseDOM&&(db=document.createElement("div").style,"AnimationEvent"in window||(delete bb.animationend.animation,delete bb.animationiteration.animation,delete bb.animationstart.animation),"TransitionEvent"in window||delete bb.transitionend.transition);
function eb(a){if(cb[a])return cb[a];if(!bb[a])return a;var b=bb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in db)return cb[a]=b[c];return a}var fb=eb("animationend"),gb=eb("animationiteration"),hb=eb("animationstart"),ib=eb("transitionend"),jb="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kb=null;
function lb(){!kb&&m.canUseDOM&&(kb="textContent"in document.documentElement?"textContent":"innerText");return kb}var G={_root:null,_startText:null,_fallbackText:null};function mb(){if(G._fallbackText)return G._fallbackText;var a,b=G._startText,c=b.length,d,e=nb(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);G._fallbackText=e.slice(a,1<d?1-d:void 0);return G._fallbackText}function nb(){return"value"in G._root?G._root.value:G._root[lb()]}
var ob="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),pb={type:null,target:null,currentTarget:v.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
function H(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?v.thatReturnsTrue:v.thatReturnsFalse;this.isPropagationStopped=v.thatReturnsFalse;return this}
p(H.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=v.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=v.thatReturnsTrue)},persist:function(){this.isPersistent=v.thatReturnsTrue},isPersistent:v.thatReturnsFalse,
destructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<ob.length;a++)this[ob[a]]=null}});H.Interface=pb;H.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;p(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=p({},d.Interface,a);c.extend=d.extend;qb(c);return c};qb(H);
function rb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function sb(a){a instanceof this?void 0:A("223");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function qb(a){a.eventPool=[];a.getPooled=rb;a.release=sb}var tb=H.extend({data:null}),ub=H.extend({data:null}),vb=[9,13,27,32],wb=m.canUseDOM&&"CompositionEvent"in window,xb=null;m.canUseDOM&&"documentMode"in document&&(xb=document.documentMode);
var yb=m.canUseDOM&&"TextEvent"in window&&!xb,zb=m.canUseDOM&&(!wb||xb&&8<xb&&11>=xb),Ab=String.fromCharCode(32),Bb={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Cb=!1;
function Db(a,b){switch(a){case "keyup":return-1!==vb.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function Eb(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var Fb=!1;function Gb(a,b){switch(a){case "compositionend":return Eb(b);case "keypress":if(32!==b.which)return null;Cb=!0;return Ab;case "textInput":return a=b.data,a===Ab&&Cb?null:a;default:return null}}
function Hb(a,b){if(Fb)return"compositionend"===a||!wb&&Db(a,b)?(a=mb(),G._root=null,G._startText=null,G._fallbackText=null,Fb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return zb?null:b.data;default:return null}}
var Ib={eventTypes:Bb,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(wb)b:{switch(a){case "compositionstart":e=Bb.compositionStart;break b;case "compositionend":e=Bb.compositionEnd;break b;case "compositionupdate":e=Bb.compositionUpdate;break b}e=void 0}else Fb?Db(a,c)&&(e=Bb.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=Bb.compositionStart);e?(zb&&(Fb||e!==Bb.compositionStart?e===Bb.compositionEnd&&Fb&&(f=mb()):(G._root=d,G._startText=nb(),Fb=!0)),e=tb.getPooled(e,b,c,d),f?e.data=
f:(f=Eb(c),null!==f&&(e.data=f)),Ya(e),f=e):f=null;(a=yb?Gb(a,c):Hb(a,c))?(b=ub.getPooled(Bb.beforeInput,b,c,d),b.data=a,Ya(b)):b=null;return null===f?b:null===b?f:[f,b]}},Jb=null,Kb={injectFiberControlledHostComponent:function(a){Jb=a}},Lb=null,Mb=null;function Nb(a){if(a=xa(a)){Jb&&"function"===typeof Jb.restoreControlledState?void 0:A("194");var b=wa(a.stateNode);Jb.restoreControlledState(a.stateNode,a.type,b)}}function Ob(a){Lb?Mb?Mb.push(a):Mb=[a]:Lb=a}
function Pb(){return null!==Lb||null!==Mb}function Qb(){if(Lb){var a=Lb,b=Mb;Mb=Lb=null;Nb(a);if(b)for(a=0;a<b.length;a++)Nb(b[a])}}var Rb={injection:Kb,enqueueStateRestore:Ob,needsStateRestore:Pb,restoreStateIfNeeded:Qb};function Sb(a,b){return a(b)}function Tb(a,b,c){return a(b,c)}function Ub(){}var Vb=!1;function Wb(a,b){if(Vb)return a(b);Vb=!0;try{return Sb(a,b)}finally{Vb=!1,Pb()&&(Ub(),Qb())}}
var Xb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!Xb[a.type]:"textarea"===b?!0:!1}function Zb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}
function $b(a,b){if(!m.canUseDOM||b&&!("addEventListener"in document))return!1;a="on"+a;b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function ac(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function bc(a){var b=ac(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function cc(a){a._valueTracker||(a._valueTracker=bc(a))}function dc(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=ac(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}
var ec=ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,fc="function"===typeof Symbol&&Symbol.for,gc=fc?Symbol.for("react.element"):60103,hc=fc?Symbol.for("react.portal"):60106,ic=fc?Symbol.for("react.fragment"):60107,jc=fc?Symbol.for("react.strict_mode"):60108,kc=fc?Symbol.for("react.profiler"):60114,lc=fc?Symbol.for("react.provider"):60109,mc=fc?Symbol.for("react.context"):60110,pc=fc?Symbol.for("react.async_mode"):60111,qc=fc?Symbol.for("react.forward_ref"):60112,rc=fc?Symbol.for("react.timeout"):
60113,sc="function"===typeof Symbol&&Symbol.iterator;function tc(a){if(null===a||"undefined"===typeof a)return null;a=sc&&a[sc]||a["@@iterator"];return"function"===typeof a?a:null}
function uc(a){var b=a.type;if("function"===typeof b)return b.displayName||b.name;if("string"===typeof b)return b;switch(b){case pc:return"AsyncMode";case mc:return"Context.Consumer";case ic:return"ReactFragment";case hc:return"ReactPortal";case kc:return"Profiler("+a.pendingProps.id+")";case lc:return"Context.Provider";case jc:return"StrictMode";case rc:return"Timeout"}if("object"===typeof b&&null!==b)switch(b.$$typeof){case qc:return a=b.render.displayName||b.render.name||"",""!==a?"ForwardRef("+
a+")":"ForwardRef"}return null}function vc(a){var b="";do{a:switch(a.tag){case 0:case 1:case 2:case 5:var c=a._debugOwner,d=a._debugSource;var e=uc(a);var f=null;c&&(f=uc(c));c=d;e="\n    in "+(e||"Unknown")+(c?" (at "+c.fileName.replace(/^.*[\\\/]/,"")+":"+c.lineNumber+")":f?" (created by "+f+")":"");break a;default:e=""}b+=e;a=a.return}while(a);return b}
var wc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,xc=Object.prototype.hasOwnProperty,zc={},Ac={};
function Bc(a){if(xc.call(Ac,a))return!0;if(xc.call(zc,a))return!1;if(wc.test(a))return Ac[a]=!0;zc[a]=!0;return!1}function Cc(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function Dc(a,b,c,d){if(null===b||"undefined"===typeof b||Cc(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function I(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b}var J={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){J[a]=new I(a,0,!1,a,null)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];J[b]=new I(b,1,!1,a[1],null)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){J[a]=new I(a,2,!1,a.toLowerCase(),null)});
["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(a){J[a]=new I(a,2,!1,a,null)});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){J[a]=new I(a,3,!1,a.toLowerCase(),null)});["checked","multiple","muted","selected"].forEach(function(a){J[a]=new I(a,3,!0,a.toLowerCase(),null)});
["capture","download"].forEach(function(a){J[a]=new I(a,4,!1,a.toLowerCase(),null)});["cols","rows","size","span"].forEach(function(a){J[a]=new I(a,6,!1,a.toLowerCase(),null)});["rowSpan","start"].forEach(function(a){J[a]=new I(a,5,!1,a.toLowerCase(),null)});var Ec=/[\-:]([a-z])/g;function Fc(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ec,
Fc);J[b]=new I(b,1,!1,a,null)});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ec,Fc);J[b]=new I(b,1,!1,a,"http://www.w3.org/1999/xlink")});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ec,Fc);J[b]=new I(b,1,!1,a,"http://www.w3.org/XML/1998/namespace")});J.tabIndex=new I("tabIndex",1,!1,"tabindex",null);
function Gc(a,b,c,d){var e=J.hasOwnProperty(b)?J[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Dc(b,c,e,d)&&(c=null),d||null===e?Bc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
function Hc(a,b){var c=b.checked;return p({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Ic(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Jc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Kc(a,b){b=b.checked;null!=b&&Gc(a,"checked",b,!1)}
function Lc(a,b){Kc(a,b);var c=Jc(b.value);if(null!=c)if("number"===b.type){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);b.hasOwnProperty("value")?Mc(a,b.type,c):b.hasOwnProperty("defaultValue")&&Mc(a,b.type,Jc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Nc(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){b=""+a._wrapperState.initialValue;var d=a.value;c||b===d||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;""!==c&&(a.name=c)}function Mc(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}
function Jc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}var Oc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Pc(a,b,c){a=H.getPooled(Oc.change,a,b,c);a.type="change";Ob(c);Ya(a);return a}var Qc=null,Rc=null;function Sc(a){Ia(a,!1)}function Tc(a){var b=Oa(a);if(dc(b))return a}
function Uc(a,b){if("change"===a)return b}var Vc=!1;m.canUseDOM&&(Vc=$b("input")&&(!document.documentMode||9<document.documentMode));function Wc(){Qc&&(Qc.detachEvent("onpropertychange",Xc),Rc=Qc=null)}function Xc(a){"value"===a.propertyName&&Tc(Rc)&&(a=Pc(Rc,a,Zb(a)),Wb(Sc,a))}function Yc(a,b,c){"focus"===a?(Wc(),Qc=b,Rc=c,Qc.attachEvent("onpropertychange",Xc)):"blur"===a&&Wc()}function Zc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Tc(Rc)}
function $c(a,b){if("click"===a)return Tc(b)}function ad(a,b){if("input"===a||"change"===a)return Tc(b)}
var bd={eventTypes:Oc,_isInputEventSupported:Vc,extractEvents:function(a,b,c,d){var e=b?Oa(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Uc:Yb(e)?Vc?f=ad:(f=Zc,g=Yc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=$c);if(f&&(f=f(a,b)))return Pc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Mc(e,"number",e.value)}},cd=H.extend({view:null,detail:null}),dd={Alt:"altKey",
Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function ed(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=dd[a])?!!b[a]:!1}function fd(){return ed}
var gd=cd.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:fd,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}}),hd=gd.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),id={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},
mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},jd={eventTypes:id,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||
e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Na(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,k=void 0,n=void 0;if("mouseout"===a||"mouseover"===a)g=gd,h=id.mouseLeave,k=id.mouseEnter,n="mouse";else if("pointerout"===a||"pointerover"===a)g=hd,h=id.pointerLeave,k=id.pointerEnter,n="pointer";a=null==f?e:Oa(f);e=null==b?e:Oa(b);h=g.getPooled(h,f,c,d);h.type=n+"leave";h.target=a;h.relatedTarget=e;c=g.getPooled(k,b,c,d);c.type=n+"enter";c.target=e;c.relatedTarget=a;Za(h,
c,f,b);return[h,c]}};function kd(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){2!==kd(a)?A("188"):void 0}
function md(a){var b=a.alternate;if(!b)return b=kd(a),3===b?A("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return ld(e),a;if(g===d)return ld(e),b;g=g.sibling}A("188")}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?
void 0:A("189")}}c.alternate!==d?A("190"):void 0}3!==c.tag?A("188"):void 0;return c.stateNode.current===c?a:b}function nd(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
function od(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child&&4!==b.tag)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}var pd=H.extend({animationName:null,elapsedTime:null,pseudoElement:null}),qd=H.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),rd=cd.extend({relatedTarget:null});
function sd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var td={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ud={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vd=cd.extend({key:function(a){if(a.key){var b=td[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=sd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?ud[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:fd,charCode:function(a){return"keypress"===
a.type?sd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?sd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),wd=gd.extend({dataTransfer:null}),xd=cd.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:fd}),yd=H.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),zd=gd.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),Ad=[["abort","abort"],[fb,"animationEnd"],[gb,"animationIteration"],[hb,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ib,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Bd={},Cd={};function Dd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};Bd[a]=b;Cd[c]=b}
[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],
["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){Dd(a,!0)});Ad.forEach(function(a){Dd(a,!1)});
var Ed={eventTypes:Bd,isInteractiveTopLevelEventType:function(a){a=Cd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Cd[a];if(!e)return null;switch(a){case "keypress":if(0===sd(c))return null;case "keydown":case "keyup":a=vd;break;case "blur":case "focus":a=rd;break;case "click":if(2===c.button)return null;case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=gd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
wd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=xd;break;case fb:case gb:case hb:a=pd;break;case ib:a=yd;break;case "scroll":a=cd;break;case "wheel":a=zd;break;case "copy":case "cut":case "paste":a=qd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=hd;break;default:a=H}b=a.getPooled(e,b,c,d);Ya(b);return b}},Fd=Ed.isInteractiveTopLevelEventType,
Gd=[];function Hd(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c;for(c=b;c.return;)c=c.return;c=3!==c.tag?null:c.stateNode.containerInfo;if(!c)break;a.ancestors.push(b);b=Na(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],Ja(a.topLevelType,b,a.nativeEvent,Zb(a.nativeEvent))}var Id=!0;function Kd(a){Id=!!a}function K(a,b){if(!b)return null;var c=(Fd(a)?Ld:Md).bind(null,a);b.addEventListener(a,c,!1)}
function Nd(a,b){if(!b)return null;var c=(Fd(a)?Ld:Md).bind(null,a);b.addEventListener(a,c,!0)}function Ld(a,b){Tb(Md,a,b)}function Md(a,b){if(Id){var c=Zb(b);c=Na(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(Gd.length){var d=Gd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Wb(Hd,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Gd.length&&Gd.push(a)}}}
var Od={get _enabled(){return Id},setEnabled:Kd,isEnabled:function(){return Id},trapBubbledEvent:K,trapCapturedEvent:Nd,dispatchEvent:Md},Pd={},Qd=0,Rd="_reactListenersID"+(""+Math.random()).slice(2);function Sd(a){Object.prototype.hasOwnProperty.call(a,Rd)||(a[Rd]=Qd++,Pd[a[Rd]]={});return Pd[a[Rd]]}function Td(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
function Ud(a,b){var c=Td(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Td(c)}}function Vd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
var Wd=m.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Xd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Yd=null,Zd=null,$d=null,ae=!1;
function be(a,b){if(ae||null==Yd||Yd!==da())return null;var c=Yd;"selectionStart"in c&&Vd(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return $d&&ea($d,c)?null:($d=c,a=H.getPooled(Xd.select,Zd,a,b),a.type="select",a.target=Yd,Ya(a),a)}
var ce={eventTypes:Xd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Sd(e);f=sa.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?Oa(b):window;switch(a){case "focus":if(Yb(e)||"true"===e.contentEditable)Yd=e,Zd=b,$d=null;break;case "blur":$d=Zd=Yd=null;break;case "mousedown":ae=!0;break;case "contextmenu":case "mouseup":return ae=!1,be(c,d);case "selectionchange":if(Wd)break;
case "keydown":case "keyup":return be(c,d)}return null}};Ga.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));wa=Qa.getFiberCurrentPropsFromNode;xa=Qa.getInstanceFromNode;ya=Qa.getNodeFromInstance;Ga.injectEventPluginsByName({SimpleEventPlugin:Ed,EnterLeaveEventPlugin:jd,ChangeEventPlugin:bd,SelectEventPlugin:ce,BeforeInputEventPlugin:Ib});
var de="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,ee=Date,fe=setTimeout,ge=clearTimeout,he=void 0;if("object"===typeof performance&&"function"===typeof performance.now){var ie=performance;he=function(){return ie.now()}}else he=function(){return ee.now()};var je=void 0,ke=void 0;
if(m.canUseDOM){var le="function"===typeof de?de:function(){A("276")},L=null,me=null,ne=-1,oe=!1,pe=!1,qe=0,re=33,se=33,te={didTimeout:!1,timeRemaining:function(){var a=qe-he();return 0<a?a:0}},ve=function(a,b){var c=a.scheduledCallback,d=!1;try{c(b),d=!0}finally{ke(a),d||(oe=!0,window.postMessage(ue,"*"))}},ue="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(a){if(a.source===window&&a.data===ue&&(oe=!1,null!==L)){if(null!==L){var b=he();if(!(-1===
ne||ne>b)){a=-1;for(var c=[],d=L;null!==d;){var e=d.timeoutTime;-1!==e&&e<=b?c.push(d):-1!==e&&(-1===a||e<a)&&(a=e);d=d.next}if(0<c.length)for(te.didTimeout=!0,b=0,d=c.length;b<d;b++)ve(c[b],te);ne=a}}for(a=he();0<qe-a&&null!==L;)a=L,te.didTimeout=!1,ve(a,te),a=he();null===L||pe||(pe=!0,le(we))}},!1);var we=function(a){pe=!1;var b=a-qe+se;b<se&&re<se?(8>b&&(b=8),se=b<re?re:b):re=b;qe=a+se;oe||(oe=!0,window.postMessage(ue,"*"))};je=function(a,b){var c=-1;null!=b&&"number"===typeof b.timeout&&(c=he()+
b.timeout);if(-1===ne||-1!==c&&c<ne)ne=c;a={scheduledCallback:a,timeoutTime:c,prev:null,next:null};null===L?L=a:(b=a.prev=me,null!==b&&(b.next=a));me=a;pe||(pe=!0,le(we));return a};ke=function(a){if(null!==a.prev||L===a){var b=a.next,c=a.prev;a.next=null;a.prev=null;null!==b?null!==c?(c.next=b,b.prev=c):(b.prev=null,L=b):null!==c?(c.next=null,me=c):me=L=null}}}else{var xe=new Map;je=function(a){var b={scheduledCallback:a,timeoutTime:0,next:null,prev:null},c=fe(function(){a({timeRemaining:function(){return Infinity},
didTimeout:!1})});xe.set(a,c);return b};ke=function(a){var b=xe.get(a.scheduledCallback);xe.delete(a);ge(b)}}function ye(a){var b="";ba.Children.forEach(a,function(a){null==a||"string"!==typeof a&&"number"!==typeof a||(b+=a)});return b}function ze(a,b){a=p({children:void 0},b);if(b=ye(b.children))a.children=b;return a}
function Ae(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+c;b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Be(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}}function Ce(a,b){null!=b.dangerouslySetInnerHTML?A("91"):void 0;return p({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function De(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?A("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:A("93"),b=b[0]),c=""+b),null==c&&(c=""));a._wrapperState={initialValue:""+c}}
function Ee(a,b){var c=b.value;null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)}function Fe(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var Ge={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function He(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ie(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?He(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Je=void 0,Ke=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Ge.svg||"innerHTML"in a)a.innerHTML=b;else{Je=Je||document.createElement("div");Je.innerHTML="<svg>"+b+"</svg>";for(b=Je.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Le(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
var Me={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,
stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ne=["Webkit","ms","Moz","O"];Object.keys(Me).forEach(function(a){Ne.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Me[b]=Me[a]})});
function Oe(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--");var e=c;var f=b[c];e=null==f||"boolean"===typeof f||""===f?"":d||"number"!==typeof f||0===f||Me.hasOwnProperty(e)&&Me[e]?(""+f).trim():f+"px";"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var Pe=p({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function Qe(a,b,c){b&&(Pe[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?A("137",a,c()):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?A("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:A("61")),null!=b.style&&"object"!==typeof b.style?A("62",c()):void 0)}
function Re(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var Se=v.thatReturns("");
function Te(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Sd(a);b=sa[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Nd("scroll",a);break;case "focus":case "blur":Nd("focus",a);Nd("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":$b(e,!0)&&Nd(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===jb.indexOf(e)&&K(e,a)}c[e]=!0}}}
function Ue(a,b,c,d){c=9===c.nodeType?c:c.ownerDocument;d===Ge.html&&(d=He(a));d===Ge.html?"script"===a?(a=c.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):a="string"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a}function Ve(a,b){return(9===b.nodeType?b:b.ownerDocument).createTextNode(a)}
function We(a,b,c,d){var e=Re(b,c);switch(b){case "iframe":case "object":K("load",a);var f=c;break;case "video":case "audio":for(f=0;f<jb.length;f++)K(jb[f],a);f=c;break;case "source":K("error",a);f=c;break;case "img":case "image":case "link":K("error",a);K("load",a);f=c;break;case "form":K("reset",a);K("submit",a);f=c;break;case "details":K("toggle",a);f=c;break;case "input":Ic(a,c);f=Hc(a,c);K("invalid",a);Te(d,"onChange");break;case "option":f=ze(a,c);break;case "select":Be(a,c);f=p({},c,{value:void 0});
K("invalid",a);Te(d,"onChange");break;case "textarea":De(a,c);f=Ce(a,c);K("invalid",a);Te(d,"onChange");break;default:f=c}Qe(b,f,Se);var g=f,h;for(h in g)if(g.hasOwnProperty(h)){var k=g[h];"style"===h?Oe(a,k,Se):"dangerouslySetInnerHTML"===h?(k=k?k.__html:void 0,null!=k&&Ke(a,k)):"children"===h?"string"===typeof k?("textarea"!==b||""!==k)&&Le(a,k):"number"===typeof k&&Le(a,""+k):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(ra.hasOwnProperty(h)?null!=k&&Te(d,
h):null!=k&&Gc(a,h,k,e))}switch(b){case "input":cc(a);Nc(a,c,!1);break;case "textarea":cc(a);Fe(a,c);break;case "option":null!=c.value&&a.setAttribute("value",c.value);break;case "select":a.multiple=!!c.multiple;b=c.value;null!=b?Ae(a,!!c.multiple,b,!1):null!=c.defaultValue&&Ae(a,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof f.onClick&&(a.onclick=v)}}
function Xe(a,b,c,d,e){var f=null;switch(b){case "input":c=Hc(a,c);d=Hc(a,d);f=[];break;case "option":c=ze(a,c);d=ze(a,d);f=[];break;case "select":c=p({},c,{value:void 0});d=p({},d,{value:void 0});f=[];break;case "textarea":c=Ce(a,c);d=Ce(a,d);f=[];break;default:"function"!==typeof c.onClick&&"function"===typeof d.onClick&&(a.onclick=v)}Qe(b,d,Se);b=a=void 0;var g=null;for(a in c)if(!d.hasOwnProperty(a)&&c.hasOwnProperty(a)&&null!=c[a])if("style"===a){var h=c[a];for(b in h)h.hasOwnProperty(b)&&(g||
(g={}),g[b]="")}else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(ra.hasOwnProperty(a)?f||(f=[]):(f=f||[]).push(a,null));for(a in d){var k=d[a];h=null!=c?c[a]:void 0;if(d.hasOwnProperty(a)&&k!==h&&(null!=k||null!=h))if("style"===a)if(h){for(b in h)!h.hasOwnProperty(b)||k&&k.hasOwnProperty(b)||(g||(g={}),g[b]="");for(b in k)k.hasOwnProperty(b)&&h[b]!==k[b]&&(g||(g={}),g[b]=k[b])}else g||(f||(f=[]),f.push(a,g)),
g=k;else"dangerouslySetInnerHTML"===a?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(a,""+k)):"children"===a?h===k||"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(a,""+k):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&(ra.hasOwnProperty(a)?(null!=k&&Te(e,a),f||h===k||(f=[])):(f=f||[]).push(a,k))}g&&(f=f||[]).push("style",g);return f}
function Ye(a,b,c,d,e){"input"===c&&"radio"===e.type&&null!=e.name&&Kc(a,e);Re(c,d);d=Re(c,e);for(var f=0;f<b.length;f+=2){var g=b[f],h=b[f+1];"style"===g?Oe(a,h,Se):"dangerouslySetInnerHTML"===g?Ke(a,h):"children"===g?Le(a,h):Gc(a,g,h,d)}switch(c){case "input":Lc(a,e);break;case "textarea":Ee(a,e);break;case "select":a._wrapperState.initialValue=void 0,b=a._wrapperState.wasMultiple,a._wrapperState.wasMultiple=!!e.multiple,c=e.value,null!=c?Ae(a,!!e.multiple,c,!1):b!==!!e.multiple&&(null!=e.defaultValue?
Ae(a,!!e.multiple,e.defaultValue,!0):Ae(a,!!e.multiple,e.multiple?[]:"",!1))}}
function Ze(a,b,c,d,e){switch(b){case "iframe":case "object":K("load",a);break;case "video":case "audio":for(d=0;d<jb.length;d++)K(jb[d],a);break;case "source":K("error",a);break;case "img":case "image":case "link":K("error",a);K("load",a);break;case "form":K("reset",a);K("submit",a);break;case "details":K("toggle",a);break;case "input":Ic(a,c);K("invalid",a);Te(e,"onChange");break;case "select":Be(a,c);K("invalid",a);Te(e,"onChange");break;case "textarea":De(a,c),K("invalid",a),Te(e,"onChange")}Qe(b,
c,Se);d=null;for(var f in c)if(c.hasOwnProperty(f)){var g=c[f];"children"===f?"string"===typeof g?a.textContent!==g&&(d=["children",g]):"number"===typeof g&&a.textContent!==""+g&&(d=["children",""+g]):ra.hasOwnProperty(f)&&null!=g&&Te(e,f)}switch(b){case "input":cc(a);Nc(a,c,!0);break;case "textarea":cc(a);Fe(a,c);break;case "select":case "option":break;default:"function"===typeof c.onClick&&(a.onclick=v)}return d}function $e(a,b){return a.nodeValue!==b}
var af={createElement:Ue,createTextNode:Ve,setInitialProperties:We,diffProperties:Xe,updateProperties:Ye,diffHydratedProperties:Ze,diffHydratedText:$e,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,b,c){switch(b){case "input":Lc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;
c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Pa(d);e?void 0:A("90");dc(d);Lc(d,e)}}}break;case "textarea":Ee(a,c);break;case "select":b=c.value,null!=b&&Ae(a,!!c.multiple,b,!1)}}},bf=null,cf=null;function df(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function ef(a,b){return"textarea"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&"string"===typeof b.dangerouslySetInnerHTML.__html}var ff=he,gf=je,hf=ke;function jf(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}function kf(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}new Set;var lf=[],mf=-1;function nf(a){return{current:a}}
function M(a){0>mf||(a.current=lf[mf],lf[mf]=null,mf--)}function N(a,b){mf++;lf[mf]=a.current;a.current=b}var of=nf(ha),O=nf(!1),pf=ha;function qf(a){return rf(a)?pf:of.current}
function sf(a,b){var c=a.type.contextTypes;if(!c)return ha;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function rf(a){return 2===a.tag&&null!=a.type.childContextTypes}function tf(a){rf(a)&&(M(O,a),M(of,a))}function uf(a){M(O,a);M(of,a)}
function vf(a,b,c){of.current!==ha?A("168"):void 0;N(of,b,a);N(O,c,a)}function wf(a,b){var c=a.stateNode,d=a.type.childContextTypes;if("function"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:A("108",uc(a)||"Unknown",e);return p({},b,c)}function xf(a){if(!rf(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||ha;pf=of.current;N(of,b,a);N(O,O.current,a);return!0}
function yf(a,b){var c=a.stateNode;c?void 0:A("169");if(b){var d=wf(a,pf);c.__reactInternalMemoizedMergedChildContext=d;M(O,a);M(of,a);N(of,d,a)}else M(O,a);N(O,b,a)}
function zf(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=null;this.index=0;this.ref=null;this.pendingProps=b;this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.expirationTime=0;this.alternate=null}
function Af(a,b,c){var d=a.alternate;null===d?(d=new zf(a.tag,b,a.key,a.mode),d.type=a.type,d.stateNode=a.stateNode,d.alternate=a,a.alternate=d):(d.pendingProps=b,d.effectTag=0,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null);d.expirationTime=c;d.child=a.child;d.memoizedProps=a.memoizedProps;d.memoizedState=a.memoizedState;d.updateQueue=a.updateQueue;d.sibling=a.sibling;d.index=a.index;d.ref=a.ref;return d}
function Bf(a,b,c){var d=a.type,e=a.key;a=a.props;if("function"===typeof d)var f=d.prototype&&d.prototype.isReactComponent?2:0;else if("string"===typeof d)f=5;else switch(d){case ic:return Cf(a.children,b,c,e);case pc:f=11;b|=3;break;case jc:f=11;b|=2;break;case kc:return d=new zf(15,a,e,b|4),d.type=kc,d.expirationTime=c,d;case rc:f=16;b|=2;break;default:a:{switch("object"===typeof d&&null!==d?d.$$typeof:null){case lc:f=13;break a;case mc:f=12;break a;case qc:f=14;break a;default:A("130",null==d?
d:typeof d,"")}f=void 0}}b=new zf(f,a,e,b);b.type=d;b.expirationTime=c;return b}function Cf(a,b,c,d){a=new zf(10,a,d,b);a.expirationTime=c;return a}function Df(a,b,c){a=new zf(6,a,null,b);a.expirationTime=c;return a}function Ef(a,b,c){b=new zf(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function Ff(a,b,c){b=new zf(3,null,null,b?3:0);a={current:b,containerInfo:a,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:c,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null};return b.stateNode=a}var Gf=null,Hf=null;function If(a){return function(b){try{return a(b)}catch(c){}}}
function Jf(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Gf=If(function(a){return b.onCommitFiberRoot(c,a)});Hf=If(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}function Kf(a){"function"===typeof Gf&&Gf(a)}function Lf(a){"function"===typeof Hf&&Hf(a)}var Mf=!1;
function Nf(a){return{expirationTime:0,baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Of(a){return{expirationTime:a.expirationTime,baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
function Pf(a){return{expirationTime:a,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Qf(a,b,c){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b);if(0===a.expirationTime||a.expirationTime>c)a.expirationTime=c}
function Rf(a,b,c){var d=a.alternate;if(null===d){var e=a.updateQueue;var f=null;null===e&&(e=a.updateQueue=Nf(a.memoizedState))}else e=a.updateQueue,f=d.updateQueue,null===e?null===f?(e=a.updateQueue=Nf(a.memoizedState),f=d.updateQueue=Nf(d.memoizedState)):e=a.updateQueue=Of(f):null===f&&(f=d.updateQueue=Of(e));null===f||e===f?Qf(e,b,c):null===e.lastUpdate||null===f.lastUpdate?(Qf(e,b,c),Qf(f,b,c)):(Qf(e,b,c),f.lastUpdate=b)}
function Sf(a,b,c){var d=a.updateQueue;d=null===d?a.updateQueue=Nf(a.memoizedState):Tf(a,d);null===d.lastCapturedUpdate?d.firstCapturedUpdate=d.lastCapturedUpdate=b:(d.lastCapturedUpdate.next=b,d.lastCapturedUpdate=b);if(0===d.expirationTime||d.expirationTime>c)d.expirationTime=c}function Tf(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=Of(b));return b}
function Uf(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-1025|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return p({},d,e);case 2:Mf=!0}return d}
function Vf(a,b,c,d,e){Mf=!1;if(!(0===b.expirationTime||b.expirationTime>e)){b=Tf(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,n=f;null!==k;){var r=k.expirationTime;if(r>e){if(null===g&&(g=k,f=n),0===h||h>r)h=r}else n=Uf(a,b,k,n,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k));k=k.next}r=null;for(k=b.firstCapturedUpdate;null!==k;){var w=k.expirationTime;if(w>e){if(null===r&&(r=k,null===
g&&(f=n)),0===h||h>w)h=w}else n=Uf(a,b,k,n,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k));k=k.next}null===g&&(b.lastUpdate=null);null===r?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===r&&(f=n);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=r;b.expirationTime=h;a.memoizedState=n}}
function Wf(a,b){"function"!==typeof a?A("191",a):void 0;a.call(b)}
function Xf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);a=b.firstEffect;for(b.firstEffect=b.lastEffect=null;null!==a;){var d=a.callback;null!==d&&(a.callback=null,Wf(d,c));a=a.nextEffect}a=b.firstCapturedEffect;for(b.firstCapturedEffect=b.lastCapturedEffect=null;null!==a;)b=a.callback,null!==b&&(a.callback=null,Wf(b,c)),a=a.nextEffect}
function Yf(a,b){return{value:a,source:b,stack:vc(b)}}var Zf=nf(null),$f=nf(null),ag=nf(0);function bg(a){var b=a.type._context;N(ag,b._changedBits,a);N($f,b._currentValue,a);N(Zf,a,a);b._currentValue=a.pendingProps.value;b._changedBits=a.stateNode}function cg(a){var b=ag.current,c=$f.current;M(Zf,a);M($f,a);M(ag,a);a=a.type._context;a._currentValue=c;a._changedBits=b}var dg={},eg=nf(dg),fg=nf(dg),gg=nf(dg);function hg(a){a===dg?A("174"):void 0;return a}
function jg(a,b){N(gg,b,a);N(fg,a,a);N(eg,dg,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ie(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=Ie(b,c)}M(eg,a);N(eg,b,a)}function kg(a){M(eg,a);M(fg,a);M(gg,a)}function lg(a){fg.current===a&&(M(eg,a),M(fg,a))}function mg(a,b,c){var d=a.memoizedState;b=b(c,d);d=null===b||void 0===b?d:p({},d,b);a.memoizedState=d;a=a.updateQueue;null!==a&&0===a.expirationTime&&(a.baseState=d)}
var qg={isMounted:function(a){return(a=a._reactInternalFiber)?2===kd(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=ng();d=og(d,a);var e=Pf(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Rf(a,e,d);pg(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=ng();d=og(d,a);var e=Pf(d);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Rf(a,e,d);pg(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=ng();c=og(c,a);var d=Pf(c);d.tag=2;void 0!==
b&&null!==b&&(d.callback=b);Rf(a,d,c);pg(a,c)}};function rg(a,b,c,d,e,f){var g=a.stateNode;a=a.type;return"function"===typeof g.shouldComponentUpdate?g.shouldComponentUpdate(c,e,f):a.prototype&&a.prototype.isPureReactComponent?!ea(b,c)||!ea(d,e):!0}
function sg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&qg.enqueueReplaceState(b,b.state,null)}
function tg(a,b){var c=a.type,d=a.stateNode,e=a.pendingProps,f=qf(a);d.props=e;d.state=a.memoizedState;d.refs=ha;d.context=sf(a,f);f=a.updateQueue;null!==f&&(Vf(a,f,e,d,b),d.state=a.memoizedState);f=a.type.getDerivedStateFromProps;"function"===typeof f&&(mg(a,f,e),d.state=a.memoizedState);"function"===typeof c.getDerivedStateFromProps||"function"===typeof d.getSnapshotBeforeUpdate||"function"!==typeof d.UNSAFE_componentWillMount&&"function"!==typeof d.componentWillMount||(c=d.state,"function"===typeof d.componentWillMount&&
d.componentWillMount(),"function"===typeof d.UNSAFE_componentWillMount&&d.UNSAFE_componentWillMount(),c!==d.state&&qg.enqueueReplaceState(d,d.state,null),f=a.updateQueue,null!==f&&(Vf(a,f,e,d,b),d.state=a.memoizedState));"function"===typeof d.componentDidMount&&(a.effectTag|=4)}var ug=Array.isArray;
function vg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(2!==c.tag?A("110"):void 0,d=c.stateNode);d?void 0:A("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs===ha?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}"string"!==typeof a?A("148"):void 0;c._owner?void 0:A("254",a)}return a}
function wg(a,b){"textarea"!==a.type&&A("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}
function xg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Af(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Df(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.type===c.type)return d=e(b,c.props,d),d.ref=vg(a,b,c),d.return=a,d;d=Bf(c,a.mode,d);d.ref=vg(a,b,c);d.return=a;return d}function n(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=
Ef(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function r(a,b,c,d,f){if(null===b||10!==b.tag)return b=Cf(c,a.mode,d,f),b.return=a,b;b=e(b,c,d);b.return=a;return b}function w(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Df(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case gc:return c=Bf(b,a.mode,c),c.ref=vg(a,null,b),c.return=a,c;case hc:return b=Ef(b,a.mode,c),b.return=a,b}if(ug(b)||tc(b))return b=Cf(b,a.mode,c,null),b.return=
a,b;wg(a,b)}return null}function P(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case gc:return c.key===e?c.type===ic?r(a,b,c.props.children,d,e):k(a,b,c,d):null;case hc:return c.key===e?n(a,b,c,d):null}if(ug(c)||tc(c))return null!==e?null:r(a,b,c,d,null);wg(a,c)}return null}function nc(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);
if("object"===typeof d&&null!==d){switch(d.$$typeof){case gc:return a=a.get(null===d.key?c:d.key)||null,d.type===ic?r(b,a,d.props.children,e,d.key):k(b,a,d,e);case hc:return a=a.get(null===d.key?c:d.key)||null,n(b,a,d,e)}if(ug(d)||tc(d))return a=a.get(c)||null,r(b,a,d,e,null);wg(b,d)}return null}function Jd(e,g,h,k){for(var u=null,x=null,t=g,q=g=0,n=null;null!==t&&q<h.length;q++){t.index>q?(n=t,t=null):n=t.sibling;var l=P(e,t,h[q],k);if(null===l){null===t&&(t=n);break}a&&t&&null===l.alternate&&b(e,
t);g=f(l,g,q);null===x?u=l:x.sibling=l;x=l;t=n}if(q===h.length)return c(e,t),u;if(null===t){for(;q<h.length;q++)if(t=w(e,h[q],k))g=f(t,g,q),null===x?u=t:x.sibling=t,x=t;return u}for(t=d(e,t);q<h.length;q++)if(n=nc(t,e,q,h[q],k))a&&null!==n.alternate&&t.delete(null===n.key?q:n.key),g=f(n,g,q),null===x?u=n:x.sibling=n,x=n;a&&t.forEach(function(a){return b(e,a)});return u}function E(e,g,h,k){var u=tc(h);"function"!==typeof u?A("150"):void 0;h=u.call(h);null==h?A("151"):void 0;for(var t=u=null,n=g,x=
g=0,y=null,l=h.next();null!==n&&!l.done;x++,l=h.next()){n.index>x?(y=n,n=null):y=n.sibling;var r=P(e,n,l.value,k);if(null===r){n||(n=y);break}a&&n&&null===r.alternate&&b(e,n);g=f(r,g,x);null===t?u=r:t.sibling=r;t=r;n=y}if(l.done)return c(e,n),u;if(null===n){for(;!l.done;x++,l=h.next())l=w(e,l.value,k),null!==l&&(g=f(l,g,x),null===t?u=l:t.sibling=l,t=l);return u}for(n=d(e,n);!l.done;x++,l=h.next())l=nc(n,e,x,l.value,k),null!==l&&(a&&null!==l.alternate&&n.delete(null===l.key?x:l.key),g=f(l,g,x),null===
t?u=l:t.sibling=l,t=l);a&&n.forEach(function(a){return b(e,a)});return u}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ic&&null===f.key;k&&(f=f.props.children);var n="object"===typeof f&&null!==f;if(n)switch(f.$$typeof){case gc:a:{n=f.key;for(k=d;null!==k;){if(k.key===n)if(10===k.tag?f.type===ic:k.type===f.type){c(a,k.sibling);d=e(k,f.type===ic?f.props.children:f.props,h);d.ref=vg(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=k.sibling}f.type===ic?(d=Cf(f.props.children,
a.mode,h,f.key),d.return=a,a=d):(h=Bf(f,a.mode,h),h.ref=vg(a,d,f),h.return=a,a=h)}return g(a);case hc:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=Ef(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=
a,a=d):(c(a,d),d=Df(f,a.mode,h),d.return=a,a=d),g(a);if(ug(f))return Jd(a,d,f,h);if(tc(f))return E(a,d,f,h);n&&wg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 2:case 1:h=a.type,A("152",h.displayName||h.name||"Component")}return c(a,d)}}var yg=xg(!0),zg=xg(!1),Ag=null,Bg=null,Cg=!1;function Dg(a,b){var c=new zf(5,null,null,0);c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Eg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;default:return!1}}function Fg(a){if(Cg){var b=Bg;if(b){var c=b;if(!Eg(a,b)){b=jf(c);if(!b||!Eg(a,b)){a.effectTag|=2;Cg=!1;Ag=a;return}Dg(Ag,c)}Ag=a;Bg=kf(b)}else a.effectTag|=2,Cg=!1,Ag=a}}
function Gg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag;)a=a.return;Ag=a}function Hg(a){if(a!==Ag)return!1;if(!Cg)return Gg(a),Cg=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!ef(b,a.memoizedProps))for(b=Bg;b;)Dg(a,b),b=jf(b);Gg(a);Bg=Ag?jf(a.stateNode):null;return!0}function Ig(){Bg=Ag=null;Cg=!1}function Q(a,b,c){Jg(a,b,c,b.expirationTime)}function Jg(a,b,c,d){b.child=null===a?zg(b,null,c,d):yg(b,a.child,c,d)}
function Kg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function Lg(a,b,c,d,e){Kg(a,b);var f=0!==(b.effectTag&64);if(!c&&!f)return d&&yf(b,!1),R(a,b);c=b.stateNode;ec.current=b;var g=f?null:c.render();b.effectTag|=1;f&&(Jg(a,b,null,e),b.child=null);Jg(a,b,g,e);b.memoizedState=c.state;b.memoizedProps=c.props;d&&yf(b,!0);return b.child}
function Mg(a){var b=a.stateNode;b.pendingContext?vf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&vf(a,b.context,!1);jg(a,b.containerInfo)}
function Ng(a,b,c,d){var e=a.child;null!==e&&(e.return=a);for(;null!==e;){switch(e.tag){case 12:var f=e.stateNode|0;if(e.type===b&&0!==(f&c)){for(f=e;null!==f;){var g=f.alternate;if(0===f.expirationTime||f.expirationTime>d)f.expirationTime=d,null!==g&&(0===g.expirationTime||g.expirationTime>d)&&(g.expirationTime=d);else if(null!==g&&(0===g.expirationTime||g.expirationTime>d))g.expirationTime=d;else break;f=f.return}f=null}else f=e.child;break;case 13:f=e.type===a.type?null:e.child;break;default:f=
e.child}if(null!==f)f.return=e;else for(f=e;null!==f;){if(f===a){f=null;break}e=f.sibling;if(null!==e){e.return=f.return;f=e;break}f=f.return}e=f}}
function Rg(a,b,c){var d=b.type._context,e=b.pendingProps,f=b.memoizedProps,g=!0;if(O.current)g=!1;else if(f===e)return b.stateNode=0,bg(b),R(a,b);var h=e.value;b.memoizedProps=e;if(null===f)h=1073741823;else if(f.value===e.value){if(f.children===e.children&&g)return b.stateNode=0,bg(b),R(a,b);h=0}else{var k=f.value;if(k===h&&(0!==k||1/k===1/h)||k!==k&&h!==h){if(f.children===e.children&&g)return b.stateNode=0,bg(b),R(a,b);h=0}else if(h="function"===typeof d._calculateChangedBits?d._calculateChangedBits(k,
h):1073741823,h|=0,0===h){if(f.children===e.children&&g)return b.stateNode=0,bg(b),R(a,b)}else Ng(b,d,h,c)}b.stateNode=h;bg(b);Q(a,b,e.children);return b.child}function R(a,b){null!==a&&b.child!==a.child?A("153"):void 0;if(null!==b.child){a=b.child;var c=Af(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Af(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null}return b.child}
function Sg(a,b,c){if(0===b.expirationTime||b.expirationTime>c){switch(b.tag){case 3:Mg(b);break;case 2:xf(b);break;case 4:jg(b,b.stateNode.containerInfo);break;case 13:bg(b)}return null}switch(b.tag){case 0:null!==a?A("155"):void 0;var d=b.type,e=b.pendingProps,f=qf(b);f=sf(b,f);d=d(e,f);b.effectTag|=1;"object"===typeof d&&null!==d&&"function"===typeof d.render&&void 0===d.$$typeof?(f=b.type,b.tag=2,b.memoizedState=null!==d.state&&void 0!==d.state?d.state:null,f=f.getDerivedStateFromProps,"function"===
typeof f&&mg(b,f,e),e=xf(b),d.updater=qg,b.stateNode=d,d._reactInternalFiber=b,tg(b,c),a=Lg(a,b,!0,e,c)):(b.tag=1,Q(a,b,d),b.memoizedProps=e,a=b.child);return a;case 1:return e=b.type,c=b.pendingProps,O.current||b.memoizedProps!==c?(d=qf(b),d=sf(b,d),e=e(c,d),b.effectTag|=1,Q(a,b,e),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 2:e=xf(b);if(null===a)if(null===b.stateNode){var g=b.pendingProps,h=b.type;d=qf(b);var k=2===b.tag&&null!=b.type.contextTypes;f=k?sf(b,d):ha;g=new h(g,f);b.memoizedState=null!==
g.state&&void 0!==g.state?g.state:null;g.updater=qg;b.stateNode=g;g._reactInternalFiber=b;k&&(k=b.stateNode,k.__reactInternalMemoizedUnmaskedChildContext=d,k.__reactInternalMemoizedMaskedChildContext=f);tg(b,c);d=!0}else{h=b.type;d=b.stateNode;k=b.memoizedProps;f=b.pendingProps;d.props=k;var n=d.context;g=qf(b);g=sf(b,g);var r=h.getDerivedStateFromProps;(h="function"===typeof r||"function"===typeof d.getSnapshotBeforeUpdate)||"function"!==typeof d.UNSAFE_componentWillReceiveProps&&"function"!==typeof d.componentWillReceiveProps||
(k!==f||n!==g)&&sg(b,d,f,g);Mf=!1;var w=b.memoizedState;n=d.state=w;var P=b.updateQueue;null!==P&&(Vf(b,P,f,d,c),n=b.memoizedState);k!==f||w!==n||O.current||Mf?("function"===typeof r&&(mg(b,r,f),n=b.memoizedState),(k=Mf||rg(b,k,f,w,n,g))?(h||"function"!==typeof d.UNSAFE_componentWillMount&&"function"!==typeof d.componentWillMount||("function"===typeof d.componentWillMount&&d.componentWillMount(),"function"===typeof d.UNSAFE_componentWillMount&&d.UNSAFE_componentWillMount()),"function"===typeof d.componentDidMount&&
(b.effectTag|=4)):("function"===typeof d.componentDidMount&&(b.effectTag|=4),b.memoizedProps=f,b.memoizedState=n),d.props=f,d.state=n,d.context=g,d=k):("function"===typeof d.componentDidMount&&(b.effectTag|=4),d=!1)}else h=b.type,d=b.stateNode,f=b.memoizedProps,k=b.pendingProps,d.props=f,n=d.context,g=qf(b),g=sf(b,g),r=h.getDerivedStateFromProps,(h="function"===typeof r||"function"===typeof d.getSnapshotBeforeUpdate)||"function"!==typeof d.UNSAFE_componentWillReceiveProps&&"function"!==typeof d.componentWillReceiveProps||
(f!==k||n!==g)&&sg(b,d,k,g),Mf=!1,n=b.memoizedState,w=d.state=n,P=b.updateQueue,null!==P&&(Vf(b,P,k,d,c),w=b.memoizedState),f!==k||n!==w||O.current||Mf?("function"===typeof r&&(mg(b,r,k),w=b.memoizedState),(r=Mf||rg(b,f,k,n,w,g))?(h||"function"!==typeof d.UNSAFE_componentWillUpdate&&"function"!==typeof d.componentWillUpdate||("function"===typeof d.componentWillUpdate&&d.componentWillUpdate(k,w,g),"function"===typeof d.UNSAFE_componentWillUpdate&&d.UNSAFE_componentWillUpdate(k,w,g)),"function"===typeof d.componentDidUpdate&&
(b.effectTag|=4),"function"===typeof d.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof d.componentDidUpdate||f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=4),"function"!==typeof d.getSnapshotBeforeUpdate||f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=256),b.memoizedProps=k,b.memoizedState=w),d.props=k,d.state=w,d.context=g,d=r):("function"!==typeof d.componentDidUpdate||f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=4),"function"!==typeof d.getSnapshotBeforeUpdate||
f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=256),d=!1);return Lg(a,b,d,e,c);case 3:Mg(b);e=b.updateQueue;if(null!==e)if(d=b.memoizedState,d=null!==d?d.element:null,Vf(b,e,b.pendingProps,null,c),e=b.memoizedState.element,e===d)Ig(),a=R(a,b);else{d=b.stateNode;if(d=(null===a||null===a.child)&&d.hydrate)Bg=kf(b.stateNode.containerInfo),Ag=b,d=Cg=!0;d?(b.effectTag|=2,b.child=zg(b,null,e,c)):(Ig(),Q(a,b,e));a=b.child}else Ig(),a=R(a,b);return a;case 5:a:{hg(gg.current);e=hg(eg.current);d=Ie(e,
b.type);e!==d&&(N(fg,b,b),N(eg,d,b));null===a&&Fg(b);e=b.type;k=b.memoizedProps;d=b.pendingProps;f=null!==a?a.memoizedProps:null;if(!O.current&&k===d){if(k=b.mode&1&&!!d.hidden)b.expirationTime=1073741823;if(!k||1073741823!==c){a=R(a,b);break a}}k=d.children;ef(e,d)?k=null:f&&ef(e,f)&&(b.effectTag|=16);Kg(a,b);1073741823!==c&&b.mode&1&&d.hidden?(b.expirationTime=1073741823,b.memoizedProps=d,a=null):(Q(a,b,k),b.memoizedProps=d,a=b.child)}return a;case 6:return null===a&&Fg(b),b.memoizedProps=b.pendingProps,
null;case 16:return null;case 4:return jg(b,b.stateNode.containerInfo),e=b.pendingProps,O.current||b.memoizedProps!==e?(null===a?b.child=yg(b,null,e,c):Q(a,b,e),b.memoizedProps=e,a=b.child):a=R(a,b),a;case 14:return e=b.type.render,c=b.pendingProps,d=b.ref,O.current||b.memoizedProps!==c||d!==(null!==a?a.ref:null)?(e=e(c,d),Q(a,b,e),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 10:return c=b.pendingProps,O.current||b.memoizedProps!==c?(Q(a,b,c),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 11:return c=
b.pendingProps.children,O.current||null!==c&&b.memoizedProps!==c?(Q(a,b,c),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 15:return c=b.pendingProps,b.memoizedProps===c?a=R(a,b):(Q(a,b,c.children),b.memoizedProps=c,a=b.child),a;case 13:return Rg(a,b,c);case 12:a:if(d=b.type,f=b.pendingProps,k=b.memoizedProps,e=d._currentValue,g=d._changedBits,O.current||0!==g||k!==f){b.memoizedProps=f;h=f.unstable_observedBits;if(void 0===h||null===h)h=1073741823;b.stateNode=h;if(0!==(g&h))Ng(b,d,g,c);else if(k===f){a=
R(a,b);break a}c=f.children;c=c(e);b.effectTag|=1;Q(a,b,c);a=b.child}else a=R(a,b);return a;default:A("156")}}function Tg(a){a.effectTag|=4}var Ug=void 0,Vg=void 0,Wg=void 0;Ug=function(){};Vg=function(a,b,c){(b.updateQueue=c)&&Tg(b)};Wg=function(a,b,c,d){c!==d&&Tg(b)};
function Xg(a,b){var c=b.pendingProps;switch(b.tag){case 1:return null;case 2:return tf(b),null;case 3:kg(b);uf(b);var d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Hg(b),b.effectTag&=-3;Ug(b);return null;case 5:lg(b);d=hg(gg.current);var e=b.type;if(null!==a&&null!=b.stateNode){var f=a.memoizedProps,g=b.stateNode,h=hg(eg.current);g=Xe(g,e,f,c,d);Vg(a,b,g,e,f,c,d,h);a.ref!==b.ref&&(b.effectTag|=128)}else{if(!c)return null===b.stateNode?
A("166"):void 0,null;a=hg(eg.current);if(Hg(b))c=b.stateNode,e=b.type,f=b.memoizedProps,c[C]=b,c[Ma]=f,d=Ze(c,e,f,a,d),b.updateQueue=d,null!==d&&Tg(b);else{a=Ue(e,c,d,a);a[C]=b;a[Ma]=c;a:for(f=b.child;null!==f;){if(5===f.tag||6===f.tag)a.appendChild(f.stateNode);else if(4!==f.tag&&null!==f.child){f.child.return=f;f=f.child;continue}if(f===b)break;for(;null===f.sibling;){if(null===f.return||f.return===b)break a;f=f.return}f.sibling.return=f.return;f=f.sibling}We(a,e,c,d);df(e,c)&&Tg(b);b.stateNode=
a}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)Wg(a,b,a.memoizedProps,c);else{if("string"!==typeof c)return null===b.stateNode?A("166"):void 0,null;d=hg(gg.current);hg(eg.current);Hg(b)?(d=b.stateNode,c=b.memoizedProps,d[C]=b,$e(d,c)&&Tg(b)):(d=Ve(c,d),d[C]=b,b.stateNode=d)}return null;case 14:return null;case 16:return null;case 10:return null;case 11:return null;case 15:return null;case 4:return kg(b),Ug(b),null;case 13:return cg(b),null;case 12:return null;case 0:A("167");
default:A("156")}}function Yg(a,b){var c=b.source;null===b.stack&&null!==c&&vc(c);null!==c&&uc(c);b=b.value;null!==a&&2===a.tag&&uc(a);try{b&&b.suppressReactErrorLogging||console.error(b)}catch(d){d&&d.suppressReactErrorLogging||console.error(d)}}function Zg(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){$g(a,c)}else b.current=null}
function ah(a){"function"===typeof Lf&&Lf(a);switch(a.tag){case 2:Zg(a);var b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){$g(a,c)}break;case 5:Zg(a);break;case 4:bh(a)}}function ch(a){return 5===a.tag||3===a.tag||4===a.tag}
function dh(a){a:{for(var b=a.return;null!==b;){if(ch(b)){var c=b;break a}b=b.return}A("160");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:A("161")}c.effectTag&16&&(Le(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ch(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h)}else b.insertBefore(e.stateNode,c);else d?(f=b,g=e.stateNode,8===f.nodeType?f.parentNode.insertBefore(g,f):f.appendChild(g)):b.appendChild(e.stateNode);else if(4!==e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===
e.sibling;){if(null===e.return||e.return===a)return;e=e.return}e.sibling.return=e.return;e=e.sibling}}
function bh(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?A("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c.return}c=!0}if(5===b.tag||6===b.tag){a:for(var f=b,g=f;;)if(ah(g),null!==g.child&&4!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return}g.sibling.return=g.return;g=g.sibling}e?
(f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode)}else if(4===b.tag?d=b.stateNode.containerInfo:ah(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;4===b.tag&&(c=!1)}b.sibling.return=b.return;b=b.sibling}}
function eh(a,b){switch(b.tag){case 2:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&(c[Ma]=d,Ye(c,f,e,a,d))}break;case 6:null===b.stateNode?A("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 3:break;case 15:break;case 16:break;default:A("163")}}function fh(a,b,c){c=Pf(c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){gh(d);Yg(a,b)};return c}
function hh(a,b,c){c=Pf(c);c.tag=3;var d=a.stateNode;null!==d&&"function"===typeof d.componentDidCatch&&(c.callback=function(){null===ih?ih=new Set([this]):ih.add(this);var c=b.value,d=b.stack;Yg(a,b);this.componentDidCatch(c,{componentStack:null!==d?d:""})});return c}
function jh(a,b,c,d,e,f){c.effectTag|=512;c.firstEffect=c.lastEffect=null;d=Yf(d,c);a=b;do{switch(a.tag){case 3:a.effectTag|=1024;d=fh(a,d,f);Sf(a,d,f);return;case 2:if(b=d,c=a.stateNode,0===(a.effectTag&64)&&null!==c&&"function"===typeof c.componentDidCatch&&(null===ih||!ih.has(c))){a.effectTag|=1024;d=hh(a,b,f);Sf(a,d,f);return}}a=a.return}while(null!==a)}
function kh(a){switch(a.tag){case 2:tf(a);var b=a.effectTag;return b&1024?(a.effectTag=b&-1025|64,a):null;case 3:return kg(a),uf(a),b=a.effectTag,b&1024?(a.effectTag=b&-1025|64,a):null;case 5:return lg(a),null;case 16:return b=a.effectTag,b&1024?(a.effectTag=b&-1025|64,a):null;case 4:return kg(a),null;case 13:return cg(a),null;default:return null}}var lh=ff(),mh=2,nh=lh,oh=0,ph=0,qh=!1,S=null,rh=null,T=0,sh=-1,th=!1,U=null,uh=!1,vh=!1,ih=null;
function wh(){if(null!==S)for(var a=S.return;null!==a;){var b=a;switch(b.tag){case 2:tf(b);break;case 3:kg(b);uf(b);break;case 5:lg(b);break;case 4:kg(b);break;case 13:cg(b)}a=a.return}rh=null;T=0;sh=-1;th=!1;S=null;vh=!1}
function xh(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&512)){b=Xg(b,a,T);var e=a;if(1073741823===T||1073741823!==e.expirationTime){var f=0;switch(e.tag){case 3:case 2:var g=e.updateQueue;null!==g&&(f=g.expirationTime)}for(g=e.child;null!==g;)0!==g.expirationTime&&(0===f||f>g.expirationTime)&&(f=g.expirationTime),g=g.sibling;e.expirationTime=f}if(null!==b)return b;null!==c&&0===(c.effectTag&512)&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&
(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;if(null!==c)a=c;else{vh=!0;break}}else{a=kh(a,th,T);if(null!==a)return a.effectTag&=511,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=512);if(null!==d)return d;if(null!==c)a=c;else break}}return null}
function yh(a){var b=Sg(a.alternate,a,T);null===b&&(b=xh(a));ec.current=null;return b}
function zh(a,b,c){qh?A("243"):void 0;qh=!0;if(b!==T||a!==rh||null===S)wh(),rh=a,T=b,sh=-1,S=Af(rh.current,null,T),a.pendingCommitExpirationTime=0;var d=!1;th=!c||T<=mh;do{try{if(c)for(;null!==S&&!Ah();)S=yh(S);else for(;null!==S;)S=yh(S)}catch(f){if(null===S)d=!0,gh(f);else{null===S?A("271"):void 0;c=S;var e=c.return;if(null===e){d=!0;gh(f);break}jh(a,e,c,f,th,T,nh);S=xh(c)}}break}while(1);qh=!1;if(d)return null;if(null===S){if(vh)return a.pendingCommitExpirationTime=b,a.current.alternate;th?A("262"):
void 0;0<=sh&&setTimeout(function(){var b=a.current.expirationTime;0!==b&&(0===a.remainingExpirationTime||a.remainingExpirationTime<b)&&Bh(a,b)},sh);Ch(a.current.expirationTime)}return null}
function $g(a,b){var c;a:{qh&&!uh?A("263"):void 0;for(c=a.return;null!==c;){switch(c.tag){case 2:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromCatch||"function"===typeof d.componentDidCatch&&(null===ih||!ih.has(d))){a=Yf(b,a);a=hh(c,a,1);Rf(c,a,1);pg(c,1);c=void 0;break a}break;case 3:a=Yf(b,a);a=fh(c,a,1);Rf(c,a,1);pg(c,1);c=void 0;break a}c=c.return}3===a.tag&&(c=Yf(b,a),c=fh(a,c,1),Rf(a,c,1),pg(a,1));c=void 0}return c}
function Dh(){var a=2+25*(((ng()-2+500)/25|0)+1);a<=oh&&(a=oh+1);return oh=a}function og(a,b){a=0!==ph?ph:qh?uh?1:T:b.mode&1?Eh?2+10*(((a-2+15)/10|0)+1):2+25*(((a-2+500)/25|0)+1):1;Eh&&(0===Fh||a>Fh)&&(Fh=a);return a}
function pg(a,b){for(;null!==a;){if(0===a.expirationTime||a.expirationTime>b)a.expirationTime=b;null!==a.alternate&&(0===a.alternate.expirationTime||a.alternate.expirationTime>b)&&(a.alternate.expirationTime=b);if(null===a.return)if(3===a.tag){var c=a.stateNode;!qh&&0!==T&&b<T&&wh();var d=c.current.expirationTime;qh&&!uh&&rh===c||Bh(c,d);Gh>Hh&&A("185")}else break;a=a.return}}function ng(){nh=ff()-lh;return mh=(nh/10|0)+2}
function Ih(a){var b=ph;ph=2+25*(((ng()-2+500)/25|0)+1);try{return a()}finally{ph=b}}function Jh(a,b,c,d,e){var f=ph;ph=1;try{return a(b,c,d,e)}finally{ph=f}}var Kh=null,V=null,Lh=0,Mh=void 0,W=!1,X=null,Y=0,Fh=0,Nh=!1,Oh=!1,Ph=null,Qh=null,Z=!1,Rh=!1,Eh=!1,Sh=null,Hh=1E3,Gh=0,Th=1;function Uh(a){if(0!==Lh){if(a>Lh)return;null!==Mh&&hf(Mh)}var b=ff()-lh;Lh=a;Mh=gf(Vh,{timeout:10*(a-2)-b})}
function Bh(a,b){if(null===a.nextScheduledRoot)a.remainingExpirationTime=b,null===V?(Kh=V=a,a.nextScheduledRoot=a):(V=V.nextScheduledRoot=a,V.nextScheduledRoot=Kh);else{var c=a.remainingExpirationTime;if(0===c||b<c)a.remainingExpirationTime=b}W||(Z?Rh&&(X=a,Y=1,Wh(a,1,!1)):1===b?Xh():Uh(b))}
function Yh(){var a=0,b=null;if(null!==V)for(var c=V,d=Kh;null!==d;){var e=d.remainingExpirationTime;if(0===e){null===c||null===V?A("244"):void 0;if(d===d.nextScheduledRoot){Kh=V=d.nextScheduledRoot=null;break}else if(d===Kh)Kh=e=d.nextScheduledRoot,V.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===V){V=c;V.nextScheduledRoot=Kh;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{if(0===a||e<a)a=e,b=d;if(d===V)break;
c=d;d=d.nextScheduledRoot}}c=X;null!==c&&c===b&&1===a?Gh++:Gh=0;X=b;Y=a}function Vh(a){Zh(0,!0,a)}function Xh(){Zh(1,!1,null)}function Zh(a,b,c){Qh=c;Yh();if(b)for(;null!==X&&0!==Y&&(0===a||a>=Y)&&(!Nh||ng()>=Y);)ng(),Wh(X,Y,!Nh),Yh();else for(;null!==X&&0!==Y&&(0===a||a>=Y);)Wh(X,Y,!1),Yh();null!==Qh&&(Lh=0,Mh=null);0!==Y&&Uh(Y);Qh=null;Nh=!1;$h()}function ai(a,b){W?A("253"):void 0;X=a;Y=b;Wh(a,b,!1);Xh();$h()}
function $h(){Gh=0;if(null!==Sh){var a=Sh;Sh=null;for(var b=0;b<a.length;b++){var c=a[b];try{c._onComplete()}catch(d){Oh||(Oh=!0,Ph=d)}}}if(Oh)throw a=Ph,Ph=null,Oh=!1,a;}function Wh(a,b,c){W?A("245"):void 0;W=!0;c?(c=a.finishedWork,null!==c?bi(a,c,b):(c=zh(a,b,!0),null!==c&&(Ah()?a.finishedWork=c:bi(a,c,b)))):(c=a.finishedWork,null!==c?bi(a,c,b):(c=zh(a,b,!1),null!==c&&bi(a,c,b)));W=!1}
function bi(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===Sh?Sh=[d]:Sh.push(d),d._defer)){a.finishedWork=b;a.remainingExpirationTime=0;return}a.finishedWork=null;uh=qh=!0;c=b.stateNode;c.current===b?A("177"):void 0;d=c.pendingCommitExpirationTime;0===d?A("261"):void 0;c.pendingCommitExpirationTime=0;ng();ec.current=null;if(1<b.effectTag)if(null!==b.lastEffect){b.lastEffect.nextEffect=b;var e=b.firstEffect}else e=b;else e=b.firstEffect;bf=Id;var f=da();if(Vd(f)){if("selectionStart"in
f)var g={start:f.selectionStart,end:f.selectionEnd};else a:{var h=window.getSelection&&window.getSelection();if(h&&0!==h.rangeCount){g=h.anchorNode;var k=h.anchorOffset,n=h.focusNode;h=h.focusOffset;try{g.nodeType,n.nodeType}catch(Wa){g=null;break a}var r=0,w=-1,P=-1,nc=0,Jd=0,E=f,t=null;b:for(;;){for(var x;;){E!==g||0!==k&&3!==E.nodeType||(w=r+k);E!==n||0!==h&&3!==E.nodeType||(P=r+h);3===E.nodeType&&(r+=E.nodeValue.length);if(null===(x=E.firstChild))break;t=E;E=x}for(;;){if(E===f)break b;t===g&&
++nc===k&&(w=r);t===n&&++Jd===h&&(P=r);if(null!==(x=E.nextSibling))break;E=t;t=E.parentNode}E=x}g=-1===w||-1===P?null:{start:w,end:P}}else g=null}g=g||{start:0,end:0}}else g=null;cf={focusedElem:f,selectionRange:g};Kd(!1);for(U=e;null!==U;){f=!1;g=void 0;try{for(;null!==U;){if(U.effectTag&256){var u=U.alternate;k=U;switch(k.tag){case 2:if(k.effectTag&256&&null!==u){var y=u.memoizedProps,D=u.memoizedState,ja=k.stateNode;ja.props=k.memoizedProps;ja.state=k.memoizedState;var ni=ja.getSnapshotBeforeUpdate(y,
D);ja.__reactInternalSnapshotBeforeUpdate=ni}break;case 3:case 5:case 6:case 4:break;default:A("163")}}U=U.nextEffect}}catch(Wa){f=!0,g=Wa}f&&(null===U?A("178"):void 0,$g(U,g),null!==U&&(U=U.nextEffect))}for(U=e;null!==U;){u=!1;y=void 0;try{for(;null!==U;){var q=U.effectTag;q&16&&Le(U.stateNode,"");if(q&128){var z=U.alternate;if(null!==z){var l=z.ref;null!==l&&("function"===typeof l?l(null):l.current=null)}}switch(q&14){case 2:dh(U);U.effectTag&=-3;break;case 6:dh(U);U.effectTag&=-3;eh(U.alternate,
U);break;case 4:eh(U.alternate,U);break;case 8:D=U,bh(D),D.return=null,D.child=null,D.alternate&&(D.alternate.child=null,D.alternate.return=null)}U=U.nextEffect}}catch(Wa){u=!0,y=Wa}u&&(null===U?A("178"):void 0,$g(U,y),null!==U&&(U=U.nextEffect))}l=cf;z=da();q=l.focusedElem;u=l.selectionRange;if(z!==q&&fa(document.documentElement,q)){null!==u&&Vd(q)&&(z=u.start,l=u.end,void 0===l&&(l=z),"selectionStart"in q?(q.selectionStart=z,q.selectionEnd=Math.min(l,q.value.length)):window.getSelection&&(z=window.getSelection(),
y=q[lb()].length,l=Math.min(u.start,y),u=void 0===u.end?l:Math.min(u.end,y),!z.extend&&l>u&&(y=u,u=l,l=y),y=Ud(q,l),D=Ud(q,u),y&&D&&(1!==z.rangeCount||z.anchorNode!==y.node||z.anchorOffset!==y.offset||z.focusNode!==D.node||z.focusOffset!==D.offset)&&(ja=document.createRange(),ja.setStart(y.node,y.offset),z.removeAllRanges(),l>u?(z.addRange(ja),z.extend(D.node,D.offset)):(ja.setEnd(D.node,D.offset),z.addRange(ja)))));z=[];for(l=q;l=l.parentNode;)1===l.nodeType&&z.push({element:l,left:l.scrollLeft,
top:l.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<z.length;q++)l=z[q],l.element.scrollLeft=l.left,l.element.scrollTop=l.top}cf=null;Kd(bf);bf=null;c.current=b;for(U=e;null!==U;){e=!1;q=void 0;try{for(z=d;null!==U;){var ig=U.effectTag;if(ig&36){var oc=U.alternate;l=U;u=z;switch(l.tag){case 2:var ca=l.stateNode;if(l.effectTag&4)if(null===oc)ca.props=l.memoizedProps,ca.state=l.memoizedState,ca.componentDidMount();else{var xi=oc.memoizedProps,yi=oc.memoizedState;ca.props=l.memoizedProps;
ca.state=l.memoizedState;ca.componentDidUpdate(xi,yi,ca.__reactInternalSnapshotBeforeUpdate)}var Og=l.updateQueue;null!==Og&&(ca.props=l.memoizedProps,ca.state=l.memoizedState,Xf(l,Og,ca,u));break;case 3:var Pg=l.updateQueue;if(null!==Pg){y=null;if(null!==l.child)switch(l.child.tag){case 5:y=l.child.stateNode;break;case 2:y=l.child.stateNode}Xf(l,Pg,y,u)}break;case 5:var zi=l.stateNode;null===oc&&l.effectTag&4&&df(l.type,l.memoizedProps)&&zi.focus();break;case 6:break;case 4:break;case 15:break;case 16:break;
default:A("163")}}if(ig&128){l=void 0;var yc=U.ref;if(null!==yc){var Qg=U.stateNode;switch(U.tag){case 5:l=Qg;break;default:l=Qg}"function"===typeof yc?yc(l):yc.current=l}}var Ai=U.nextEffect;U.nextEffect=null;U=Ai}}catch(Wa){e=!0,q=Wa}e&&(null===U?A("178"):void 0,$g(U,q),null!==U&&(U=U.nextEffect))}qh=uh=!1;"function"===typeof Kf&&Kf(b.stateNode);b=c.current.expirationTime;0===b&&(ih=null);a.remainingExpirationTime=b}function Ah(){return null===Qh||Qh.timeRemaining()>Th?!1:Nh=!0}
function gh(a){null===X?A("246"):void 0;X.remainingExpirationTime=0;Oh||(Oh=!0,Ph=a)}function Ch(a){null===X?A("246"):void 0;X.remainingExpirationTime=a}function ci(a,b){var c=Z;Z=!0;try{return a(b)}finally{(Z=c)||W||Xh()}}function di(a,b){if(Z&&!Rh){Rh=!0;try{return a(b)}finally{Rh=!1}}return a(b)}function ei(a,b){W?A("187"):void 0;var c=Z;Z=!0;try{return Jh(a,b)}finally{Z=c,Xh()}}
function fi(a,b,c){if(Eh)return a(b,c);Z||W||0===Fh||(Zh(Fh,!1,null),Fh=0);var d=Eh,e=Z;Z=Eh=!0;try{return a(b,c)}finally{Eh=d,(Z=e)||W||Xh()}}function gi(a){var b=Z;Z=!0;try{Jh(a)}finally{(Z=b)||W||Zh(1,!1,null)}}
function hi(a,b,c,d,e){var f=b.current;if(c){c=c._reactInternalFiber;var g;b:{2===kd(c)&&2===c.tag?void 0:A("170");for(g=c;3!==g.tag;){if(rf(g)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break b}(g=g.return)?void 0:A("171")}g=g.stateNode.context}c=rf(c)?wf(c,g):g}else c=ha;null===b.context?b.context=c:b.pendingContext=c;b=e;e=Pf(d);e.payload={element:a};b=void 0===b?null:b;null!==b&&(e.callback=b);Rf(f,e,d);pg(f,d);return d}
function ii(a){var b=a._reactInternalFiber;void 0===b&&("function"===typeof a.render?A("188"):A("268",Object.keys(a)));a=nd(b);return null===a?null:a.stateNode}function ji(a,b,c,d){var e=b.current,f=ng();e=og(f,e);return hi(a,b,c,e,d)}function ki(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}
function li(a){var b=a.findFiberByHostInstance;return Jf(p({},a,{findHostInstanceByFiber:function(a){a=nd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))}
var mi={updateContainerAtExpirationTime:hi,createContainer:function(a,b,c){return Ff(a,b,c)},updateContainer:ji,flushRoot:ai,requestWork:Bh,computeUniqueAsyncExpiration:Dh,batchedUpdates:ci,unbatchedUpdates:di,deferredUpdates:Ih,syncUpdates:Jh,interactiveUpdates:fi,flushInteractiveUpdates:function(){W||0===Fh||(Zh(Fh,!1,null),Fh=0)},flushControlled:gi,flushSync:ei,getPublicRootInstance:ki,findHostInstance:ii,findHostInstanceWithNoPortals:function(a){a=od(a);return null===a?null:a.stateNode},injectIntoDevTools:li};
function oi(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:hc,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}Kb.injectFiberControlledHostComponent(af);function pi(a){this._expirationTime=Dh();this._root=a;this._callbacks=this._next=null;this._hasChildren=this._didComplete=!1;this._children=null;this._defer=!0}
pi.prototype.render=function(a){this._defer?void 0:A("250");this._hasChildren=!0;this._children=a;var b=this._root._internalRoot,c=this._expirationTime,d=new qi;hi(a,b,null,c,d._onCommit);return d};pi.prototype.then=function(a){if(this._didComplete)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
pi.prototype.commit=function(){var a=this._root._internalRoot,b=a.firstBatch;this._defer&&null!==b?void 0:A("251");if(this._hasChildren){var c=this._expirationTime;if(b!==this){this._hasChildren&&(c=this._expirationTime=b._expirationTime,this.render(this._children));for(var d=null,e=b;e!==this;)d=e,e=e._next;null===d?A("251"):void 0;d._next=e._next;this._next=b;a.firstBatch=this}this._defer=!1;ai(a,c);b=this._next;this._next=null;b=a.firstBatch=b;null!==b&&b._hasChildren&&b.render(b._children)}else this._next=
null,this._defer=!1};pi.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++)(0,a[b])()}};function qi(){this._callbacks=null;this._didCommit=!1;this._onCommit=this._onCommit.bind(this)}qi.prototype.then=function(a){if(this._didCommit)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
qi.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++){var c=a[b];"function"!==typeof c?A("191",c):void 0;c()}}};function ri(a,b,c){this._internalRoot=Ff(a,b,c)}ri.prototype.render=function(a,b){var c=this._internalRoot,d=new qi;b=void 0===b?null:b;null!==b&&d.then(b);ji(a,c,null,d._onCommit);return d};
ri.prototype.unmount=function(a){var b=this._internalRoot,c=new qi;a=void 0===a?null:a;null!==a&&c.then(a);ji(null,b,null,c._onCommit);return c};ri.prototype.legacy_renderSubtreeIntoContainer=function(a,b,c){var d=this._internalRoot,e=new qi;c=void 0===c?null:c;null!==c&&e.then(c);ji(b,d,a,e._onCommit);return e};
ri.prototype.createBatch=function(){var a=new pi(this),b=a._expirationTime,c=this._internalRoot,d=c.firstBatch;if(null===d)c.firstBatch=a,a._next=null;else{for(c=null;null!==d&&d._expirationTime<=b;)c=d,d=d._next;a._next=d;null!==c&&(c._next=a)}return a};function si(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}Sb=mi.batchedUpdates;Tb=mi.interactiveUpdates;Ub=mi.flushInteractiveUpdates;
function ti(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new ri(a,!1,b)}
function ui(a,b,c,d,e){si(c)?void 0:A("200");var f=c._reactRootContainer;if(f){if("function"===typeof e){var g=e;e=function(){var a=ki(f._internalRoot);g.call(a)}}null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)}else{f=c._reactRootContainer=ti(c,d);if("function"===typeof e){var h=e;e=function(){var a=ki(f._internalRoot);h.call(a)}}di(function(){null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)})}return ki(f._internalRoot)}
function vi(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;si(b)?void 0:A("200");return oi(a,b,null,c)}
var wi={createPortal:vi,findDOMNode:function(a){return null==a?null:1===a.nodeType?a:ii(a)},hydrate:function(a,b,c){return ui(null,a,b,!0,c)},render:function(a,b,c){return ui(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?A("38"):void 0;return ui(a,b,c,!1,d)},unmountComponentAtNode:function(a){si(a)?void 0:A("40");return a._reactRootContainer?(di(function(){ui(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:function(){return vi.apply(void 0,
arguments)},unstable_batchedUpdates:ci,unstable_deferredUpdates:Ih,unstable_interactiveUpdates:fi,flushSync:ei,unstable_flushControlled:gi,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Ka,EventPluginRegistry:va,EventPropagators:$a,ReactControlledComponent:Rb,ReactDOMComponentTree:Qa,ReactDOMEventListener:Od},unstable_createRoot:function(a,b){return new ri(a,!0,null!=b&&!0===b.hydrate)}};li({findFiberByHostInstance:Na,bundleType:0,version:"16.4.2",rendererPackageName:"react-dom"});
var Bi={default:wi},Ci=Bi&&wi||Bi;module.exports=Ci.default?Ci.default:Ci;


/***/ }),

/***/ "../common/node_modules/react-dom/index.js":
/*!*************************************************!*\
  !*** ../common/node_modules/react-dom/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(/*! ./cjs/react-dom.production.min.js */ "../common/node_modules/react-dom/cjs/react-dom.production.min.js");
} else {}


/***/ }),

/***/ "../common/node_modules/react/cjs/react.production.min.js":
/*!****************************************************************!*\
  !*** ../common/node_modules/react/cjs/react.production.min.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.4.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var k=__webpack_require__(/*! object-assign */ "../common/node_modules/object-assign/index.js"),n=__webpack_require__(/*! fbjs/lib/invariant */ "../common/node_modules/fbjs/lib/invariant.js"),p=__webpack_require__(/*! fbjs/lib/emptyObject */ "../common/node_modules/fbjs/lib/emptyObject.js"),q=__webpack_require__(/*! fbjs/lib/emptyFunction */ "../common/node_modules/fbjs/lib/emptyFunction.js"),r="function"===typeof Symbol&&Symbol.for,t=r?Symbol.for("react.element"):60103,u=r?Symbol.for("react.portal"):60106,v=r?Symbol.for("react.fragment"):60107,w=r?Symbol.for("react.strict_mode"):60108,x=r?Symbol.for("react.profiler"):60114,y=r?Symbol.for("react.provider"):60109,z=r?Symbol.for("react.context"):60110,A=r?Symbol.for("react.async_mode"):60111,B=
r?Symbol.for("react.forward_ref"):60112;r&&Symbol.for("react.timeout");var C="function"===typeof Symbol&&Symbol.iterator;function D(a){for(var b=arguments.length-1,e="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)e+="&args[]="+encodeURIComponent(arguments[c+1]);n(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e)}
var E={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function F(a,b,e){this.props=a;this.context=b;this.refs=p;this.updater=e||E}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?D("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function G(){}
G.prototype=F.prototype;function H(a,b,e){this.props=a;this.context=b;this.refs=p;this.updater=e||E}var I=H.prototype=new G;I.constructor=H;k(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,e){var c=void 0,d={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,c)&&!L.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];d.children=l}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:t,type:a,key:g,ref:h,props:d,_owner:J.current}}
function N(a){return"object"===typeof a&&null!==a&&a.$$typeof===t}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\/+/g,P=[];function Q(a,b,e,c){if(P.length){var d=P.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}
function S(a,b,e,c){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case t:case u:g=!0}}if(g)return e(c,a,""===b?"."+T(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var h=0;h<a.length;h++){d=a[h];var f=b+T(d,h);g+=S(d,f,e,c)}else if(null===a||"undefined"===typeof a?f=null:(f=C&&a[C]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),
h=0;!(d=a.next()).done;)d=d.value,f=b+T(d,h++),g+=S(d,f,e,c);else"object"===d&&(e=""+a,D("31","[object Object]"===e?"object with keys {"+Object.keys(a).join(", ")+"}":e,""));return g}function T(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function U(a,b){a.func.call(a.context,b,a.count++)}
function V(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,e,q.thatReturnsArgument):null!=a&&(N(a)&&(b=d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+e,a={$$typeof:t,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}),c.push(a))}function W(a,b,e,c,d){var g="";null!=e&&(g=(""+e).replace(O,"$&/")+"/");b=Q(b,g,c,d);null==a||S(a,"",V,b);R(b)}
var X={Children:{map:function(a,b,e){if(null==a)return a;var c=[];W(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=Q(null,null,b,e);null==a||S(a,"",U,b);R(b)},count:function(a){return null==a?0:S(a,"",q.thatReturnsNull,null)},toArray:function(a){var b=[];W(a,b,null,q.thatReturnsArgument);return b},only:function(a){N(a)?void 0:D("143");return a}},createRef:function(){return{current:null}},Component:F,PureComponent:H,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:z,
_calculateChangedBits:b,_defaultValue:a,_currentValue:a,_currentValue2:a,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null};a.Provider={$$typeof:y,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:B,render:a}},Fragment:v,StrictMode:w,unstable_AsyncMode:A,unstable_Profiler:x,createElement:M,cloneElement:function(a,b,e){null===a||void 0===a?D("267",a):void 0;var c=void 0,d=k({},a.props),g=a.key,h=a.ref,f=a._owner;if(null!=b){void 0!==b.ref&&(h=b.ref,f=J.current);void 0!==
b.key&&(g=""+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)K.call(b,c)&&!L.hasOwnProperty(c)&&(d[c]=void 0===b[c]&&void 0!==l?l[c]:b[c])}c=arguments.length-2;if(1===c)d.children=e;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];d.children=l}return{$$typeof:t,type:a.type,key:g,ref:h,props:d,_owner:f}},createFactory:function(a){var b=M.bind(null,a);b.type=a;return b},isValidElement:N,version:"16.4.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:J,
assign:k}},Y={default:X},Z=Y&&X||Y;module.exports=Z.default?Z.default:Z;


/***/ }),

/***/ "../common/node_modules/react/index.js":
/*!*********************************************!*\
  !*** ../common/node_modules/react/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(/*! ./cjs/react.production.min.js */ "../common/node_modules/react/cjs/react.production.min.js");
} else {}


/***/ }),

/***/ "../common/node_modules/react2angular/index.js":
/*!*****************************************************!*\
  !*** ../common/node_modules/react2angular/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fromPairs = __webpack_require__(/*! lodash.frompairs */ "../common/node_modules/lodash.frompairs/index.js");
var ngcomponent_1 = __webpack_require__(/*! ngcomponent */ "../common/node_modules/ngcomponent/index.js");
var React = __webpack_require__(/*! react */ "../common/node_modules/react/index.js");
var react_dom_1 = __webpack_require__(/*! react-dom */ "../common/node_modules/react-dom/index.js");
/**
 * Wraps a React component in Angular. Returns a new Angular component.
 *
 * Usage:
 *
 *   ```ts
 *   type Props = { foo: number }
 *   class ReactComponent extends React.Component<Props, S> {}
 *   const AngularComponent = react2angular(ReactComponent, ['foo'])
 *   ```
 */
function react2angular(Class, bindingNames, injectNames) {
    if (bindingNames === void 0) { bindingNames = null; }
    if (injectNames === void 0) { injectNames = []; }
    var names = bindingNames
        || (Class.propTypes && Object.keys(Class.propTypes))
        || [];
    return {
        bindings: fromPairs(names.map(function (_) { return [_, '<']; })),
        controller: ['$element'].concat(injectNames, [/** @class */ (function (_super) {
                __extends(class_1, _super);
                function class_1($element) {
                    var injectedProps = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        injectedProps[_i - 1] = arguments[_i];
                    }
                    var _this = _super.call(this) || this;
                    _this.$element = $element;
                    _this.injectedProps = {};
                    injectNames.forEach(function (name, i) {
                        _this.injectedProps[name] = injectedProps[i];
                    });
                    return _this;
                }
                Object.defineProperty(class_1, "$$ngIsClass", {
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                class_1.prototype.render = function () {
                    react_dom_1.render(React.createElement(Class, __assign({}, this.props, this.injectedProps)), this.$element[0]);
                };
                class_1.prototype.componentWillUnmount = function () {
                    react_dom_1.unmountComponentAtNode(this.$element[0]);
                };
                return class_1;
            }(ngcomponent_1.default))])
    };
}
exports.react2angular = react2angular;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/index.js":
/*!**************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/index.js ***!
  \**************************************************/
/*! exports provided: Observable, ConnectableObservable, GroupedObservable, observable, Subject, BehaviorSubject, ReplaySubject, AsyncSubject, asapScheduler, asyncScheduler, queueScheduler, animationFrameScheduler, VirtualTimeScheduler, VirtualAction, Scheduler, Subscription, Subscriber, Notification, pipe, noop, identity, isObservable, ArgumentOutOfRangeError, EmptyError, ObjectUnsubscribedError, UnsubscriptionError, TimeoutError, bindCallback, bindNodeCallback, combineLatest, concat, defer, empty, forkJoin, from, fromEvent, fromEventPattern, generate, iif, interval, merge, never, of, onErrorResumeNext, pairs, race, range, throwError, timer, using, zip, EMPTY, NEVER, config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _internal_Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Observable", function() { return _internal_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]; });

/* harmony import */ var _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/observable/ConnectableObservable */ "../common/node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function() { return _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__["ConnectableObservable"]; });

/* harmony import */ var _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/operators/groupBy */ "../common/node_modules/rxjs/_esm5/internal/operators/groupBy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GroupedObservable", function() { return _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__["GroupedObservable"]; });

/* harmony import */ var _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/symbol/observable */ "../common/node_modules/rxjs/_esm5/internal/symbol/observable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__["observable"]; });

/* harmony import */ var _internal_Subject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/Subject */ "../common/node_modules/rxjs/_esm5/internal/Subject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Subject", function() { return _internal_Subject__WEBPACK_IMPORTED_MODULE_4__["Subject"]; });

/* harmony import */ var _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/BehaviorSubject */ "../common/node_modules/rxjs/_esm5/internal/BehaviorSubject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function() { return _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"]; });

/* harmony import */ var _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/ReplaySubject */ "../common/node_modules/rxjs/_esm5/internal/ReplaySubject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReplaySubject", function() { return _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__["ReplaySubject"]; });

/* harmony import */ var _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/AsyncSubject */ "../common/node_modules/rxjs/_esm5/internal/AsyncSubject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsyncSubject", function() { return _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__["AsyncSubject"]; });

/* harmony import */ var _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/scheduler/asap */ "../common/node_modules/rxjs/_esm5/internal/scheduler/asap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asapScheduler", function() { return _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__["asap"]; });

/* harmony import */ var _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./internal/scheduler/async */ "../common/node_modules/rxjs/_esm5/internal/scheduler/async.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asyncScheduler", function() { return _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__["async"]; });

/* harmony import */ var _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./internal/scheduler/queue */ "../common/node_modules/rxjs/_esm5/internal/scheduler/queue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "queueScheduler", function() { return _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__["queue"]; });

/* harmony import */ var _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/scheduler/animationFrame */ "../common/node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "animationFrameScheduler", function() { return _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__["animationFrame"]; });

/* harmony import */ var _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/scheduler/VirtualTimeScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function() { return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualTimeScheduler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualAction", function() { return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualAction"]; });

/* harmony import */ var _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./internal/Scheduler */ "../common/node_modules/rxjs/_esm5/internal/Scheduler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Scheduler", function() { return _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__["Scheduler"]; });

/* harmony import */ var _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./internal/Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Subscription", function() { return _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__["Subscription"]; });

/* harmony import */ var _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Subscriber", function() { return _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__["Subscriber"]; });

/* harmony import */ var _internal_Notification__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./internal/Notification */ "../common/node_modules/rxjs/_esm5/internal/Notification.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Notification", function() { return _internal_Notification__WEBPACK_IMPORTED_MODULE_16__["Notification"]; });

/* harmony import */ var _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./internal/util/pipe */ "../common/node_modules/rxjs/_esm5/internal/util/pipe.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__["pipe"]; });

/* harmony import */ var _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./internal/util/noop */ "../common/node_modules/rxjs/_esm5/internal/util/noop.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__["noop"]; });

/* harmony import */ var _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./internal/util/identity */ "../common/node_modules/rxjs/_esm5/internal/util/identity.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__["identity"]; });

/* harmony import */ var _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./internal/util/isObservable */ "../common/node_modules/rxjs/_esm5/internal/util/isObservable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__["isObservable"]; });

/* harmony import */ var _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./internal/util/ArgumentOutOfRangeError */ "../common/node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function() { return _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__["ArgumentOutOfRangeError"]; });

/* harmony import */ var _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./internal/util/EmptyError */ "../common/node_modules/rxjs/_esm5/internal/util/EmptyError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmptyError", function() { return _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__["EmptyError"]; });

/* harmony import */ var _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./internal/util/ObjectUnsubscribedError */ "../common/node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function() { return _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__["ObjectUnsubscribedError"]; });

/* harmony import */ var _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./internal/util/UnsubscriptionError */ "../common/node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function() { return _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__["UnsubscriptionError"]; });

/* harmony import */ var _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./internal/util/TimeoutError */ "../common/node_modules/rxjs/_esm5/internal/util/TimeoutError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimeoutError", function() { return _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__["TimeoutError"]; });

/* harmony import */ var _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./internal/observable/bindCallback */ "../common/node_modules/rxjs/_esm5/internal/observable/bindCallback.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindCallback", function() { return _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__["bindCallback"]; });

/* harmony import */ var _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./internal/observable/bindNodeCallback */ "../common/node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function() { return _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__["bindNodeCallback"]; });

/* harmony import */ var _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./internal/observable/combineLatest */ "../common/node_modules/rxjs/_esm5/internal/observable/combineLatest.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__["combineLatest"]; });

/* harmony import */ var _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./internal/observable/concat */ "../common/node_modules/rxjs/_esm5/internal/observable/concat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__["concat"]; });

/* harmony import */ var _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./internal/observable/defer */ "../common/node_modules/rxjs/_esm5/internal/observable/defer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defer", function() { return _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__["defer"]; });

/* harmony import */ var _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./internal/observable/empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["empty"]; });

/* harmony import */ var _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./internal/observable/forkJoin */ "../common/node_modules/rxjs/_esm5/internal/observable/forkJoin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "forkJoin", function() { return _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__["forkJoin"]; });

/* harmony import */ var _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./internal/observable/from */ "../common/node_modules/rxjs/_esm5/internal/observable/from.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "from", function() { return _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__["from"]; });

/* harmony import */ var _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./internal/observable/fromEvent */ "../common/node_modules/rxjs/_esm5/internal/observable/fromEvent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromEvent", function() { return _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__["fromEvent"]; });

/* harmony import */ var _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./internal/observable/fromEventPattern */ "../common/node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromEventPattern", function() { return _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__["fromEventPattern"]; });

/* harmony import */ var _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./internal/observable/generate */ "../common/node_modules/rxjs/_esm5/internal/observable/generate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generate", function() { return _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__["generate"]; });

/* harmony import */ var _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./internal/observable/iif */ "../common/node_modules/rxjs/_esm5/internal/observable/iif.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "iif", function() { return _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__["iif"]; });

/* harmony import */ var _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./internal/observable/interval */ "../common/node_modules/rxjs/_esm5/internal/observable/interval.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "interval", function() { return _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__["interval"]; });

/* harmony import */ var _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./internal/observable/merge */ "../common/node_modules/rxjs/_esm5/internal/observable/merge.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__["merge"]; });

/* harmony import */ var _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./internal/observable/never */ "../common/node_modules/rxjs/_esm5/internal/observable/never.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "never", function() { return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["never"]; });

/* harmony import */ var _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./internal/observable/of */ "../common/node_modules/rxjs/_esm5/internal/observable/of.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "of", function() { return _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__["of"]; });

/* harmony import */ var _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./internal/observable/onErrorResumeNext */ "../common/node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__["onErrorResumeNext"]; });

/* harmony import */ var _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./internal/observable/pairs */ "../common/node_modules/rxjs/_esm5/internal/observable/pairs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__["pairs"]; });

/* harmony import */ var _internal_observable_race__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./internal/observable/race */ "../common/node_modules/rxjs/_esm5/internal/observable/race.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "race", function() { return _internal_observable_race__WEBPACK_IMPORTED_MODULE_44__["race"]; });

/* harmony import */ var _internal_observable_range__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./internal/observable/range */ "../common/node_modules/rxjs/_esm5/internal/observable/range.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _internal_observable_range__WEBPACK_IMPORTED_MODULE_45__["range"]; });

/* harmony import */ var _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./internal/observable/throwError */ "../common/node_modules/rxjs/_esm5/internal/observable/throwError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throwError", function() { return _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_46__["throwError"]; });

/* harmony import */ var _internal_observable_timer__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./internal/observable/timer */ "../common/node_modules/rxjs/_esm5/internal/observable/timer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timer", function() { return _internal_observable_timer__WEBPACK_IMPORTED_MODULE_47__["timer"]; });

/* harmony import */ var _internal_observable_using__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./internal/observable/using */ "../common/node_modules/rxjs/_esm5/internal/observable/using.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "using", function() { return _internal_observable_using__WEBPACK_IMPORTED_MODULE_48__["using"]; });

/* harmony import */ var _internal_observable_zip__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./internal/observable/zip */ "../common/node_modules/rxjs/_esm5/internal/observable/zip.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return _internal_observable_zip__WEBPACK_IMPORTED_MODULE_49__["zip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["EMPTY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NEVER", function() { return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["NEVER"]; });

/* harmony import */ var _internal_config__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./internal/config */ "../common/node_modules/rxjs/_esm5/internal/config.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "config", function() { return _internal_config__WEBPACK_IMPORTED_MODULE_50__["config"]; });

/** PURE_IMPORTS_START  PURE_IMPORTS_END */





















































//# sourceMappingURL=index.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/AsyncSubject.js":
/*!******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/AsyncSubject.js ***!
  \******************************************************************/
/*! exports provided: AsyncSubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncSubject", function() { return AsyncSubject; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subject */ "../common/node_modules/rxjs/_esm5/internal/Subject.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */



var AsyncSubject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]));

//# sourceMappingURL=AsyncSubject.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/BehaviorSubject.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/BehaviorSubject.js ***!
  \*********************************************************************/
/*! exports provided: BehaviorSubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function() { return BehaviorSubject; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subject */ "../common/node_modules/rxjs/_esm5/internal/Subject.js");
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "../common/node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */



var BehaviorSubject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_2__["ObjectUnsubscribedError"]();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]));

//# sourceMappingURL=BehaviorSubject.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/InnerSubscriber.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/InnerSubscriber.js ***!
  \*********************************************************************/
/*! exports provided: InnerSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InnerSubscriber", function() { return InnerSubscriber; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


var InnerSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]));

//# sourceMappingURL=InnerSubscriber.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/Notification.js":
/*!******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/Notification.js ***!
  \******************************************************************/
/*! exports provided: Notification */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Notification", function() { return Notification; });
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable/empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/* harmony import */ var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observable/of */ "../common/node_modules/rxjs/_esm5/internal/observable/of.js");
/* harmony import */ var _observable_throwError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observable/throwError */ "../common/node_modules/rxjs/_esm5/internal/observable/throwError.js");
/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */



var Notification = /*@__PURE__*/ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Object(_observable_of__WEBPACK_IMPORTED_MODULE_1__["of"])(this.value);
            case 'E':
                return Object(_observable_throwError__WEBPACK_IMPORTED_MODULE_2__["throwError"])(this.error);
            case 'C':
                return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_0__["empty"])();
        }
        throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());

//# sourceMappingURL=Notification.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/Observable.js":
/*!****************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/Observable.js ***!
  \****************************************************************/
/*! exports provided: Observable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Observable", function() { return Observable; });
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/canReportError */ "../common/node_modules/rxjs/_esm5/internal/util/canReportError.js");
/* harmony import */ var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/toSubscriber */ "../common/node_modules/rxjs/_esm5/internal/util/toSubscriber.js");
/* harmony import */ var _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/symbol/observable */ "../common/node_modules/rxjs/_esm5/internal/symbol/observable.js");
/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/pipe */ "../common/node_modules/rxjs/_esm5/internal/util/pipe.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ "../common/node_modules/rxjs/_esm5/internal/config.js");
/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */





var Observable = /*@__PURE__*/ (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = Object(_util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__["toSubscriber"])(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_0__["canReportError"])(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[_internal_symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"]] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipeFromArray"])(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = _config__WEBPACK_IMPORTED_MODULE_4__["config"].Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}
//# sourceMappingURL=Observable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/Observer.js":
/*!**************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/Observer.js ***!
  \**************************************************************/
/*! exports provided: empty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "../common/node_modules/rxjs/_esm5/internal/config.js");
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/hostReportError */ "../common/node_modules/rxjs/_esm5/internal/util/hostReportError.js");
/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */


var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (_config__WEBPACK_IMPORTED_MODULE_0__["config"].useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__["hostReportError"])(err);
        }
    },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/OuterSubscriber.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/OuterSubscriber.js ***!
  \*********************************************************************/
/*! exports provided: OuterSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OuterSubscriber", function() { return OuterSubscriber; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


var OuterSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]));

//# sourceMappingURL=OuterSubscriber.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/ReplaySubject.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/ReplaySubject.js ***!
  \*******************************************************************/
/*! exports provided: ReplaySubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplaySubject", function() { return ReplaySubject; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subject */ "../common/node_modules/rxjs/_esm5/internal/Subject.js");
/* harmony import */ var _scheduler_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scheduler/queue */ "../common/node_modules/rxjs/_esm5/internal/scheduler/queue.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operators/observeOn */ "../common/node_modules/rxjs/_esm5/internal/operators/observeOn.js");
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "../common/node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SubjectSubscription */ "../common/node_modules/rxjs/_esm5/internal/SubjectSubscription.js");
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */







var ReplaySubject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_5__["ObjectUnsubscribedError"]();
        }
        else if (this.isStopped || this.hasError) {
            subscription = _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_6__["SubjectSubscription"](this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new _operators_observeOn__WEBPACK_IMPORTED_MODULE_4__["ObserveOnSubscriber"](subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || _scheduler_queue__WEBPACK_IMPORTED_MODULE_2__["queue"]).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]));

var ReplayEvent = /*@__PURE__*/ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
//# sourceMappingURL=ReplaySubject.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/Scheduler.js":
/*!***************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/Scheduler.js ***!
  \***************************************************************/
/*! exports provided: Scheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scheduler", function() { return Scheduler; });
var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = function () { return Date.now(); };
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/Subject.js":
/*!*************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/Subject.js ***!
  \*************************************************************/
/*! exports provided: SubjectSubscriber, Subject, AnonymousSubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectSubscriber", function() { return SubjectSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subject", function() { return Subject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnonymousSubject", function() { return AnonymousSubject; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "../common/node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SubjectSubscription */ "../common/node_modules/rxjs/_esm5/internal/SubjectSubscription.js");
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "../common/node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */







var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]));

var Subject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_6__["rxSubscriber"]] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"].EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__["SubjectSubscription"](this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new _Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"]();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(_Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"]));

var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"].EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/SubjectSubscription.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/SubjectSubscription.js ***!
  \*************************************************************************/
/*! exports provided: SubjectSubscription */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectSubscription", function() { return SubjectSubscription; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(_Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]));

//# sourceMappingURL=SubjectSubscription.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js":
/*!****************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/Subscriber.js ***!
  \****************************************************************/
/*! exports provided: Subscriber, SafeSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subscriber", function() { return Subscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SafeSubscriber", function() { return SafeSubscriber; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/isFunction */ "../common/node_modules/rxjs/_esm5/internal/util/isFunction.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Observer */ "../common/node_modules/rxjs/_esm5/internal/Observer.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "../common/node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config */ "../common/node_modules/rxjs/_esm5/internal/config.js");
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/hostReportError */ "../common/node_modules/rxjs/_esm5/internal/util/hostReportError.js");
/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */







var Subscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        _this._parentSubscription = null;
        switch (arguments.length) {
            case 0:
                _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_2__["empty"];
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_2__["empty"];
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_4__["rxSubscriber"]] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        this._parentSubscription = null;
        return this;
    };
    return Subscriber;
}(_Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"]));

var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_2__["empty"]) {
                context = Object.create(observerOrNext);
                if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_config__WEBPACK_IMPORTED_MODULE_5__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_5__["config"].useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__["hostReportError"])(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__["hostReportError"])(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_config__WEBPACK_IMPORTED_MODULE_5__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (_config__WEBPACK_IMPORTED_MODULE_5__["config"].useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__["hostReportError"])(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!_config__WEBPACK_IMPORTED_MODULE_5__["config"].useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_5__["config"].useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__["hostReportError"])(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));

//# sourceMappingURL=Subscriber.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/Subscription.js":
/*!******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/Subscription.js ***!
  \******************************************************************/
/*! exports provided: Subscription */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subscription", function() { return Subscription; });
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _util_isObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/isObject */ "../common/node_modules/rxjs/_esm5/internal/util/isObject.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/isFunction */ "../common/node_modules/rxjs/_esm5/internal/util/isFunction.js");
/* harmony import */ var _util_tryCatch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/tryCatch */ "../common/node_modules/rxjs/_esm5/internal/util/tryCatch.js");
/* harmony import */ var _util_errorObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/errorObject */ "../common/node_modules/rxjs/_esm5/internal/util/errorObject.js");
/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/UnsubscriptionError */ "../common/node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js");
/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */






var Subscription = /*@__PURE__*/ (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        while (_parent) {
            _parent.remove(this);
            _parent = ++index < len && _parents[index] || null;
        }
        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(_unsubscribe)) {
            var trial = Object(_util_tryCatch__WEBPACK_IMPORTED_MODULE_3__["tryCatch"])(_unsubscribe).call(this);
            if (trial === _util_errorObject__WEBPACK_IMPORTED_MODULE_4__["errorObject"]) {
                hasErrors = true;
                errors = errors || (_util_errorObject__WEBPACK_IMPORTED_MODULE_4__["errorObject"].e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_5__["UnsubscriptionError"] ?
                    flattenUnsubscriptionErrors(_util_errorObject__WEBPACK_IMPORTED_MODULE_4__["errorObject"].e.errors) : [_util_errorObject__WEBPACK_IMPORTED_MODULE_4__["errorObject"].e]);
            }
        }
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (Object(_util_isObject__WEBPACK_IMPORTED_MODULE_1__["isObject"])(sub)) {
                    var trial = Object(_util_tryCatch__WEBPACK_IMPORTED_MODULE_3__["tryCatch"])(sub.unsubscribe).call(sub);
                    if (trial === _util_errorObject__WEBPACK_IMPORTED_MODULE_4__["errorObject"]) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = _util_errorObject__WEBPACK_IMPORTED_MODULE_4__["errorObject"].e;
                        if (err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_5__["UnsubscriptionError"]) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_5__["UnsubscriptionError"](errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function') {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            this._parent = parent;
        }
        else if (!_parents) {
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());

function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_5__["UnsubscriptionError"]) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/config.js":
/*!************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/config.js ***!
  \************************************************************/
/*! exports provided: config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return config; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};
//# sourceMappingURL=config.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js":
/*!**************************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js ***!
  \**************************************************************************************/
/*! exports provided: ConnectableObservable, connectableObservableDescriptor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function() { return ConnectableObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectableObservableDescriptor", function() { return connectableObservableDescriptor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subject */ "../common/node_modules/rxjs/_esm5/internal/Subject.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _operators_refCount__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operators/refCount */ "../common/node_modules/rxjs/_esm5/internal/operators/refCount.js");
/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */






var ConnectableObservable = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        _this._isComplete = false;
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_4__["Subscription"]();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = _Subscription__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return Object(_operators_refCount__WEBPACK_IMPORTED_MODULE_5__["refCount"])()(this);
    };
    return ConnectableObservable;
}(_Observable__WEBPACK_IMPORTED_MODULE_2__["Observable"]));

var connectableProto = ConnectableObservable.prototype;
var connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(_Subject__WEBPACK_IMPORTED_MODULE_1__["SubjectSubscriber"]));
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_3__["Subscriber"]));
//# sourceMappingURL=ConnectableObservable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/bindCallback.js":
/*!*****************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/bindCallback.js ***!
  \*****************************************************************************/
/*! exports provided: bindCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindCallback", function() { return bindCallback; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AsyncSubject */ "../common/node_modules/rxjs/_esm5/internal/AsyncSubject.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/map */ "../common/node_modules/rxjs/_esm5/internal/operators/map.js");
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/canReportError */ "../common/node_modules/rxjs/_esm5/internal/util/canReportError.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */






function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_5__["isScheduler"])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) { return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_4__["isArray"])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = this;
        var subject;
        var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        };
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            if (!scheduler) {
                if (!subject) {
                    subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                var state = {
                    args: args, subscriber: subscriber, params: params,
                };
                return scheduler.schedule(dispatch, 0, state);
            }
        });
    };
}
function dispatch(state) {
    var _this = this;
    var self = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(state) {
    var err = state.err, subject = state.subject;
    subject.error(err);
}
//# sourceMappingURL=bindCallback.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js":
/*!*********************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js ***!
  \*********************************************************************************/
/*! exports provided: bindNodeCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function() { return bindNodeCallback; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AsyncSubject */ "../common/node_modules/rxjs/_esm5/internal/AsyncSubject.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/map */ "../common/node_modules/rxjs/_esm5/internal/operators/map.js");
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/canReportError */ "../common/node_modules/rxjs/_esm5/internal/util/canReportError.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */






function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) { return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_5__["isArray"])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        };
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(dispatch, 0, { params: params, subscriber: subscriber, context: context });
            }
        });
    };
}
function dispatch(state) {
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=bindNodeCallback.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/combineLatest.js":
/*!******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/combineLatest.js ***!
  \******************************************************************************/
/*! exports provided: combineLatest, CombineLatestOperator, CombineLatestSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return combineLatest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CombineLatestOperator", function() { return CombineLatestOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CombineLatestSubscriber", function() { return CombineLatestSubscriber; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../OuterSubscriber */ "../common/node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/subscribeToResult */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromArray */ "../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js");
/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */






var NONE = {};
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = null;
    var scheduler = null;
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_2__["isArray"])(observables[0])) {
        observables = observables[0];
    }
    return Object(_fromArray__WEBPACK_IMPORTED_MODULE_5__["fromArray"])(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
var CombineLatestOperator = /*@__PURE__*/ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());

var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__["subscribeToResult"])(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__["OuterSubscriber"]));

//# sourceMappingURL=combineLatest.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/concat.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/concat.js ***!
  \***********************************************************************/
/*! exports provided: concat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return concat; });
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/* harmony import */ var _of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./of */ "../common/node_modules/rxjs/_esm5/internal/observable/of.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./from */ "../common/node_modules/rxjs/_esm5/internal/observable/from.js");
/* harmony import */ var _operators_concatAll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/concatAll */ "../common/node_modules/rxjs/_esm5/internal/operators/concatAll.js");
/** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */




function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(observables[1]))) {
        return Object(_from__WEBPACK_IMPORTED_MODULE_2__["from"])(observables[0]);
    }
    return Object(_operators_concatAll__WEBPACK_IMPORTED_MODULE_3__["concatAll"])()(_of__WEBPACK_IMPORTED_MODULE_1__["of"].apply(void 0, observables));
}
//# sourceMappingURL=concat.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/defer.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/defer.js ***!
  \**********************************************************************/
/*! exports provided: defer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defer", function() { return defer; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ "../common/node_modules/rxjs/_esm5/internal/observable/from.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */



function defer(observableFactory) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(input) : Object(_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
        return source.subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/empty.js ***!
  \**********************************************************************/
/*! exports provided: EMPTY, empty, emptyScheduled */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return EMPTY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "emptyScheduled", function() { return emptyScheduled; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

var EMPTY = /*@__PURE__*/ new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/forkJoin.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/forkJoin.js ***!
  \*************************************************************************/
/*! exports provided: forkJoin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forkJoin", function() { return forkJoin; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/subscribeToResult */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../OuterSubscriber */ "../common/node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../operators/map */ "../common/node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */







function forkJoin() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var resultSelector;
    if (typeof sources[sources.length - 1] === 'function') {
        resultSelector = sources.pop();
    }
    if (sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_2__["isArray"])(sources[0])) {
        sources = sources[0];
    }
    if (sources.length === 0) {
        return _empty__WEBPACK_IMPORTED_MODULE_3__["EMPTY"];
    }
    if (resultSelector) {
        return forkJoin(sources).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_6__["map"])(function (args) { return resultSelector.apply(void 0, args); }));
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"](function (subscriber) {
        return new ForkJoinSubscriber(subscriber, sources);
    });
}
var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__["subscribeToResult"])(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_5__["OuterSubscriber"]));
//# sourceMappingURL=forkJoin.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/from.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/from.js ***!
  \*********************************************************************/
/*! exports provided: from */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "from", function() { return from; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isPromise */ "../common/node_modules/rxjs/_esm5/internal/util/isPromise.js");
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ "../common/node_modules/rxjs/_esm5/internal/util/isArrayLike.js");
/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isInteropObservable */ "../common/node_modules/rxjs/_esm5/internal/util/isInteropObservable.js");
/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isIterable */ "../common/node_modules/rxjs/_esm5/internal/util/isIterable.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromArray */ "../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js");
/* harmony import */ var _fromPromise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fromPromise */ "../common/node_modules/rxjs/_esm5/internal/observable/fromPromise.js");
/* harmony import */ var _fromIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fromIterable */ "../common/node_modules/rxjs/_esm5/internal/observable/fromIterable.js");
/* harmony import */ var _fromObservable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fromObservable */ "../common/node_modules/rxjs/_esm5/internal/observable/fromObservable.js");
/* harmony import */ var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/subscribeTo */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeTo.js");
/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */










function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
            return input;
        }
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_9__["subscribeTo"])(input));
    }
    if (input != null) {
        if (Object(_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_3__["isInteropObservable"])(input)) {
            return Object(_fromObservable__WEBPACK_IMPORTED_MODULE_8__["fromObservable"])(input, scheduler);
        }
        else if (Object(_util_isPromise__WEBPACK_IMPORTED_MODULE_1__["isPromise"])(input)) {
            return Object(_fromPromise__WEBPACK_IMPORTED_MODULE_6__["fromPromise"])(input, scheduler);
        }
        else if (Object(_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__["isArrayLike"])(input)) {
            return Object(_fromArray__WEBPACK_IMPORTED_MODULE_5__["fromArray"])(input, scheduler);
        }
        else if (Object(_util_isIterable__WEBPACK_IMPORTED_MODULE_4__["isIterable"])(input) || typeof input === 'string') {
            return Object(_fromIterable__WEBPACK_IMPORTED_MODULE_7__["fromIterable"])(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
//# sourceMappingURL=from.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js":
/*!**************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js ***!
  \**************************************************************************/
/*! exports provided: fromArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromArray", function() { return fromArray; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToArray */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToArray.js");
/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_2__["subscribeToArray"])(input));
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromArray.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/fromEvent.js":
/*!**************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/fromEvent.js ***!
  \**************************************************************************/
/*! exports provided: fromEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEvent", function() { return fromEvent; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isFunction */ "../common/node_modules/rxjs/_esm5/internal/util/isFunction.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/map */ "../common/node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




var toString = Object.prototype.toString;
function fromEvent(target, eventName, options, resultSelector) {
    if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (args) { return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
//# sourceMappingURL=fromEvent.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js":
/*!*********************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js ***!
  \*********************************************************************************/
/*! exports provided: fromEventPattern */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEventPattern", function() { return fromEventPattern; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isFunction */ "../common/node_modules/rxjs/_esm5/internal/util/isFunction.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/map */ "../common/node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (args) { return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(removeHandler)) {
            return undefined;
        }
        return function () { return removeHandler(handler, retValue); };
    });
}
//# sourceMappingURL=fromEventPattern.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/fromIterable.js":
/*!*****************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/fromIterable.js ***!
  \*****************************************************************************/
/*! exports provided: fromIterable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromIterable", function() { return fromIterable; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/iterator */ "../common/node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/* harmony import */ var _util_subscribeToIterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/subscribeToIterable */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js");
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */




function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeToIterable__WEBPACK_IMPORTED_MODULE_3__["subscribeToIterable"])(input));
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            var iterator;
            sub.add(function () {
                if (iterator && typeof iterator.return === 'function') {
                    iterator.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__["iterator"]]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromIterable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/fromObservable.js":
/*!*******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/fromObservable.js ***!
  \*******************************************************************************/
/*! exports provided: fromObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromObservable", function() { return fromObservable; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/observable */ "../common/node_modules/rxjs/_esm5/internal/symbol/observable.js");
/* harmony import */ var _util_subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/subscribeToObservable */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js");
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */




function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__["subscribeToObservable"])(input));
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            sub.add(scheduler.schedule(function () {
                var observable = input[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"]]();
                sub.add(observable.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromObservable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/fromPromise.js":
/*!****************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/fromPromise.js ***!
  \****************************************************************************/
/*! exports provided: fromPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPromise", function() { return fromPromise; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _util_subscribeToPromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToPromise */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js");
/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */



function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeToPromise__WEBPACK_IMPORTED_MODULE_2__["subscribeToPromise"])(input));
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            sub.add(scheduler.schedule(function () {
                return input.then(function (value) {
                    sub.add(scheduler.schedule(function () {
                        subscriber.next(value);
                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                    }));
                }, function (err) {
                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                });
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromPromise.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/generate.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/generate.js ***!
  \*************************************************************************/
/*! exports provided: generate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generate", function() { return generate; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ "../common/node_modules/rxjs/_esm5/internal/util/identity.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */



function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    var resultSelector;
    var initialState;
    if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_2__["isScheduler"])(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber: subscriber,
                iterate: iterate,
                condition: condition,
                resultSelector: resultSelector,
                state: state
            });
        }
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
function dispatch(state) {
    var subscriber = state.subscriber, condition = state.condition;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        var conditionResult = void 0;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    var value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}
//# sourceMappingURL=generate.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/iif.js":
/*!********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/iif.js ***!
  \********************************************************************/
/*! exports provided: iif */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iif", function() { return iif; });
/* harmony import */ var _defer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defer */ "../common/node_modules/rxjs/_esm5/internal/observable/defer.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */


function iif(condition, trueResult, falseResult) {
    if (trueResult === void 0) {
        trueResult = _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"];
    }
    if (falseResult === void 0) {
        falseResult = _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"];
    }
    return Object(_defer__WEBPACK_IMPORTED_MODULE_0__["defer"])(function () { return condition() ? trueResult : falseResult; });
}
//# sourceMappingURL=iif.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/interval.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/interval.js ***!
  \*************************************************************************/
/*! exports provided: interval */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interval", function() { return interval; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "../common/node_modules/rxjs/_esm5/internal/scheduler/async.js");
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isNumeric */ "../common/node_modules/rxjs/_esm5/internal/util/isNumeric.js");
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */



function interval(period, scheduler) {
    if (period === void 0) {
        period = 0;
    }
    if (scheduler === void 0) {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
    }
    if (!Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
function dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}
//# sourceMappingURL=interval.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/merge.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/merge.js ***!
  \**********************************************************************/
/*! exports provided: merge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/* harmony import */ var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/mergeAll */ "../common/node_modules/rxjs/_esm5/internal/operators/mergeAll.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromArray */ "../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js");
/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */




function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
        return observables[0];
    }
    return Object(_operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__["mergeAll"])(concurrent)(Object(_fromArray__WEBPACK_IMPORTED_MODULE_3__["fromArray"])(observables, scheduler));
}
//# sourceMappingURL=merge.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/never.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/never.js ***!
  \**********************************************************************/
/*! exports provided: NEVER, never */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEVER", function() { return NEVER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "never", function() { return never; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/noop */ "../common/node_modules/rxjs/_esm5/internal/util/noop.js");
/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */


var NEVER = /*@__PURE__*/ new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](_util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"]);
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/of.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/of.js ***!
  \*******************************************************************/
/*! exports provided: of */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function() { return of; });
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromArray */ "../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scalar */ "../common/node_modules/rxjs/_esm5/internal/observable/scalar.js");
/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */




function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return Object(_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])(scheduler);
        case 1:
            return scheduler ? Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(args, scheduler) : Object(_scalar__WEBPACK_IMPORTED_MODULE_3__["scalar"])(args[0]);
        default:
            return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(args, scheduler);
    }
}
//# sourceMappingURL=of.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js":
/*!**********************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js ***!
  \**********************************************************************************/
/*! exports provided: onErrorResumeNext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return onErrorResumeNext; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ "../common/node_modules/rxjs/_esm5/internal/observable/from.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */




function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 0) {
        return _empty__WEBPACK_IMPORTED_MODULE_3__["EMPTY"];
    }
    var first = sources[0], remainder = sources.slice(1);
    if (sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_2__["isArray"])(first)) {
        return onErrorResumeNext.apply(void 0, first);
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
        return Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(first).subscribe({
            next: function (value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
//# sourceMappingURL=onErrorResumeNext.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/pairs.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/pairs.js ***!
  \**********************************************************************/
/*! exports provided: pairs, dispatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return pairs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dispatch", function() { return dispatch; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


function pairs(obj, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                var key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            subscription.add(scheduler.schedule(dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
            return subscription;
        });
    }
}
function dispatch(state) {
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) {
        if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
//# sourceMappingURL=pairs.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/race.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/race.js ***!
  \*********************************************************************/
/*! exports provided: race, RaceOperator, RaceSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "race", function() { return race; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RaceOperator", function() { return RaceOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RaceSubscriber", function() { return RaceSubscriber; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromArray */ "../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../OuterSubscriber */ "../common/node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/subscribeToResult */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1) {
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return Object(_fromArray__WEBPACK_IMPORTED_MODULE_2__["fromArray"])(observables, undefined).lift(new RaceOperator());
}
var RaceOperator = /*@__PURE__*/ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());

var RaceSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__["subscribeToResult"])(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__["OuterSubscriber"]));

//# sourceMappingURL=race.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/range.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/range.js ***!
  \**********************************************************************/
/*! exports provided: range, dispatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function() { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dispatch", function() { return dispatch; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function range(start, count, scheduler) {
    if (start === void 0) {
        start = 0;
    }
    if (count === void 0) {
        count = 0;
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var index = 0;
        var current = start;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(current++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
function dispatch(state) {
    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
//# sourceMappingURL=range.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/scalar.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/scalar.js ***!
  \***********************************************************************/
/*! exports provided: scalar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scalar", function() { return scalar; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function scalar(value) {
    var result = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}
//# sourceMappingURL=scalar.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/throwError.js":
/*!***************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/throwError.js ***!
  \***************************************************************************/
/*! exports provided: throwError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwError", function() { return throwError; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function throwError(error, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}
//# sourceMappingURL=throwError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/timer.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/timer.js ***!
  \**********************************************************************/
/*! exports provided: timer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timer", function() { return timer; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "../common/node_modules/rxjs/_esm5/internal/scheduler/async.js");
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isNumeric */ "../common/node_modules/rxjs/_esm5/internal/util/isNumeric.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isScheduler */ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */




function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) {
        dueTime = 0;
    }
    var period = -1;
    if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(scheduler)) {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var due = Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
function dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}
//# sourceMappingURL=timer.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/using.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/using.js ***!
  \**********************************************************************/
/*! exports provided: using */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "using", function() { return using; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ "../common/node_modules/rxjs/_esm5/internal/observable/from.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty */ "../common/node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */



function using(resourceFactory, observableFactory) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = result ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(result) : _empty__WEBPACK_IMPORTED_MODULE_2__["EMPTY"];
        var subscription = source.subscribe(subscriber);
        return function () {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
//# sourceMappingURL=using.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/observable/zip.js":
/*!********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/observable/zip.js ***!
  \********************************************************************/
/*! exports provided: zip, ZipOperator, ZipSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipOperator", function() { return ZipOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipSubscriber", function() { return ZipSubscriber; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromArray */ "../common/node_modules/rxjs/_esm5/internal/observable/fromArray.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../OuterSubscriber */ "../common/node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/subscribeToResult */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
/* harmony import */ var _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../internal/symbol/iterator */ "../common/node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */







function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(observables, undefined).lift(new ZipOperator(resultSelector));
}
var ZipOperator = /*@__PURE__*/ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());

var ZipSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) {
            values = Object.create(null);
        }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_2__["isArray"])(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_6__["iterator"]] === 'function') {
            iterators.push(new StaticIterator(value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_6__["iterator"]]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        this.unsubscribe();
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                var destination = this.destination;
                destination.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--;
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_3__["Subscriber"]));

var StaticIterator = /*@__PURE__*/ (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = /*@__PURE__*/ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_6__["iterator"]] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_6__["iterator"]] = function () {
        return this;
    };
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_5__["subscribeToResult"])(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_4__["OuterSubscriber"]));
//# sourceMappingURL=zip.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/operators/concatAll.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/operators/concatAll.js ***!
  \*************************************************************************/
/*! exports provided: concatAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatAll", function() { return concatAll; });
/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeAll */ "../common/node_modules/rxjs/_esm5/internal/operators/mergeAll.js");
/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

function concatAll() {
    return Object(_mergeAll__WEBPACK_IMPORTED_MODULE_0__["mergeAll"])(1);
}
//# sourceMappingURL=concatAll.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/operators/groupBy.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/operators/groupBy.js ***!
  \***********************************************************************/
/*! exports provided: groupBy, GroupedObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupBy", function() { return groupBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedObservable", function() { return GroupedObservable; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Subject */ "../common/node_modules/rxjs/_esm5/internal/Subject.js");
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */





function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
var GroupByOperator = /*@__PURE__*/ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new _Subject__WEBPACK_IMPORTED_MODULE_4__["Subject"]());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]));
var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]));
var GroupedObservable = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"]();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(_Observable__WEBPACK_IMPORTED_MODULE_3__["Observable"]));

var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(_Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"]));
//# sourceMappingURL=groupBy.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/operators/map.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/operators/map.js ***!
  \*******************************************************************/
/*! exports provided: map, MapOperator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapOperator", function() { return MapOperator; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());

var MapSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]));
//# sourceMappingURL=map.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/operators/mergeAll.js":
/*!************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/operators/mergeAll.js ***!
  \************************************************************************/
/*! exports provided: mergeAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeAll", function() { return mergeAll; });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ "../common/node_modules/rxjs/_esm5/internal/operators/mergeMap.js");
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ "../common/node_modules/rxjs/_esm5/internal/util/identity.js");
/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */


function mergeAll(concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(_util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"], concurrent);
}
//# sourceMappingURL=mergeAll.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/operators/mergeMap.js":
/*!************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/operators/mergeMap.js ***!
  \************************************************************************/
/*! exports provided: mergeMap, MergeMapOperator, MergeMapSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeMap", function() { return mergeMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeMapOperator", function() { return MergeMapOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeMapSubscriber", function() { return MergeMapSubscriber; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "../common/node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../InnerSubscriber */ "../common/node_modules/rxjs/_esm5/internal/InnerSubscriber.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./map */ "../common/node_modules/rxjs/_esm5/internal/operators/map.js");
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../observable/from */ "../common/node_modules/rxjs/_esm5/internal/observable/from.js");
/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */






function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(mergeMap(function (a, i) { return Object(_observable_from__WEBPACK_IMPORTED_MODULE_5__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_4__["map"])(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());

var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_3__["InnerSubscriber"](this, undefined, undefined);
        var destination = this.destination;
        destination.add(innerSubscriber);
        Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, ish, value, index, innerSubscriber);
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]));

//# sourceMappingURL=mergeMap.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/operators/observeOn.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/operators/observeOn.js ***!
  \*************************************************************************/
/*! exports provided: observeOn, ObserveOnOperator, ObserveOnSubscriber, ObserveOnMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observeOn", function() { return observeOn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserveOnOperator", function() { return ObserveOnOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserveOnSubscriber", function() { return ObserveOnSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserveOnMessage", function() { return ObserveOnMessage; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _Notification__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Notification */ "../common/node_modules/rxjs/_esm5/internal/Notification.js");
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */



function observeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
var ObserveOnOperator = /*@__PURE__*/ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());

var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        var destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_2__["Notification"].createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_2__["Notification"].createError(err));
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_2__["Notification"].createComplete());
        this.unsubscribe();
    };
    return ObserveOnSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]));

var ObserveOnMessage = /*@__PURE__*/ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());

//# sourceMappingURL=observeOn.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/operators/refCount.js":
/*!************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/operators/refCount.js ***!
  \************************************************************************/
/*! exports provided: refCount */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refCount", function() { return refCount; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]));
//# sourceMappingURL=refCount.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/Action.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/Action.js ***!
  \**********************************************************************/
/*! exports provided: Action */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Action", function() { return Action; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "../common/node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


var Action = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(_Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]));

//# sourceMappingURL=Action.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js":
/*!************************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js ***!
  \************************************************************************************/
/*! exports provided: AnimationFrameAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationFrameAction", function() { return AnimationFrameAction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AnimationFrameAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__["AsyncAction"]));

//# sourceMappingURL=AnimationFrameAction.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js":
/*!***************************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js ***!
  \***************************************************************************************/
/*! exports provided: AnimationFrameScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationFrameScheduler", function() { return AnimationFrameScheduler; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"]));

//# sourceMappingURL=AnimationFrameScheduler.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js":
/*!**************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js ***!
  \**************************************************************************/
/*! exports provided: AsapAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsapAction", function() { return AsapAction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_Immediate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Immediate */ "../common/node_modules/rxjs/_esm5/internal/util/Immediate.js");
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AsyncAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */



var AsapAction = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = _util_Immediate__WEBPACK_IMPORTED_MODULE_1__["Immediate"].setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            _util_Immediate__WEBPACK_IMPORTED_MODULE_1__["Immediate"].clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AsapAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_2__["AsyncAction"]));

//# sourceMappingURL=AsapAction.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js":
/*!*****************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js ***!
  \*****************************************************************************/
/*! exports provided: AsapScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsapScheduler", function() { return AsapScheduler; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AsapScheduler = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"]));

//# sourceMappingURL=AsapScheduler.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js":
/*!***************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js ***!
  \***************************************************************************/
/*! exports provided: AsyncAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncAction", function() { return AsyncAction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Action */ "../common/node_modules/rxjs/_esm5/internal/scheduler/Action.js");
/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */


var AsyncAction = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        clearInterval(id);
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(_Action__WEBPACK_IMPORTED_MODULE_1__["Action"]));

//# sourceMappingURL=AsyncAction.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js":
/*!******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js ***!
  \******************************************************************************/
/*! exports provided: AsyncScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncScheduler", function() { return AsyncScheduler; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Scheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Scheduler */ "../common/node_modules/rxjs/_esm5/internal/Scheduler.js");
/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */


var AsyncScheduler = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = _Scheduler__WEBPACK_IMPORTED_MODULE_1__["Scheduler"].now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(_Scheduler__WEBPACK_IMPORTED_MODULE_1__["Scheduler"]));

//# sourceMappingURL=AsyncScheduler.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js":
/*!***************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js ***!
  \***************************************************************************/
/*! exports provided: QueueAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueueAction", function() { return QueueAction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


var QueueAction = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        return scheduler.flush(this);
    };
    return QueueAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__["AsyncAction"]));

//# sourceMappingURL=QueueAction.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js":
/*!******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js ***!
  \******************************************************************************/
/*! exports provided: QueueScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueueScheduler", function() { return QueueScheduler; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var QueueScheduler = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"]));

//# sourceMappingURL=QueueScheduler.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js":
/*!************************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js ***!
  \************************************************************************************/
/*! exports provided: VirtualTimeScheduler, VirtualAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function() { return VirtualTimeScheduler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualAction", function() { return VirtualAction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../common/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AsyncScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */



var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) {
            SchedulerAction = VirtualAction;
        }
        if (maxFrames === void 0) {
            maxFrames = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_2__["AsyncScheduler"]));

var VirtualAction = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) {
            index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__["AsyncAction"]));

//# sourceMappingURL=VirtualTimeScheduler.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js":
/*!******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js ***!
  \******************************************************************************/
/*! exports provided: animationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animationFrame", function() { return animationFrame; });
/* harmony import */ var _AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnimationFrameAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js");
/* harmony import */ var _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnimationFrameScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js");
/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */


var animationFrame = /*@__PURE__*/ new _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__["AnimationFrameScheduler"](_AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__["AnimationFrameAction"]);
//# sourceMappingURL=animationFrame.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/asap.js":
/*!********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/asap.js ***!
  \********************************************************************/
/*! exports provided: asap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asap", function() { return asap; });
/* harmony import */ var _AsapAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsapAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js");
/* harmony import */ var _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsapScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js");
/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */


var asap = /*@__PURE__*/ new _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__["AsapScheduler"](_AsapAction__WEBPACK_IMPORTED_MODULE_0__["AsapAction"]);
//# sourceMappingURL=asap.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/async.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/async.js ***!
  \*********************************************************************/
/*! exports provided: async */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "async", function() { return async; });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */


var async = /*@__PURE__*/ new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"](_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]);
//# sourceMappingURL=async.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/scheduler/queue.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/scheduler/queue.js ***!
  \*********************************************************************/
/*! exports provided: queue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queue", function() { return queue; });
/* harmony import */ var _QueueAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./QueueAction */ "../common/node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js");
/* harmony import */ var _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueueScheduler */ "../common/node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js");
/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */


var queue = /*@__PURE__*/ new _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__["QueueScheduler"](_QueueAction__WEBPACK_IMPORTED_MODULE_0__["QueueAction"]);
//# sourceMappingURL=queue.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/symbol/iterator.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/symbol/iterator.js ***!
  \*********************************************************************/
/*! exports provided: getSymbolIterator, iterator, $$iterator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSymbolIterator", function() { return getSymbolIterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iterator", function() { return iterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$$iterator", function() { return $$iterator; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = /*@__PURE__*/ getSymbolIterator();
var $$iterator = iterator;
//# sourceMappingURL=iterator.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/symbol/observable.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/symbol/observable.js ***!
  \***********************************************************************/
/*! exports provided: observable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return observable; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';
//# sourceMappingURL=observable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js ***!
  \*************************************************************************/
/*! exports provided: rxSubscriber, $$rxSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rxSubscriber", function() { return rxSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$$rxSubscriber", function() { return $$rxSubscriber; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = typeof Symbol === 'function'
    ? /*@__PURE__*/ Symbol('rxSubscriber')
    : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
var $$rxSubscriber = rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js":
/*!**********************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js ***!
  \**********************************************************************************/
/*! exports provided: ArgumentOutOfRangeError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function() { return ArgumentOutOfRangeError; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
}
ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/EmptyError.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/EmptyError.js ***!
  \*********************************************************************/
/*! exports provided: EmptyError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmptyError", function() { return EmptyError; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function EmptyErrorImpl() {
    Error.call(this);
    this.message = 'no elements in sequence';
    this.name = 'EmptyError';
    return this;
}
EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var EmptyError = EmptyErrorImpl;
//# sourceMappingURL=EmptyError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/Immediate.js":
/*!********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/Immediate.js ***!
  \********************************************************************/
/*! exports provided: Immediate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Immediate", function() { return Immediate; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};
//# sourceMappingURL=Immediate.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js":
/*!**********************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js ***!
  \**********************************************************************************/
/*! exports provided: ObjectUnsubscribedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function() { return ObjectUnsubscribedError; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function ObjectUnsubscribedErrorImpl() {
    Error.call(this);
    this.message = 'object unsubscribed';
    this.name = 'ObjectUnsubscribedError';
    return this;
}
ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
//# sourceMappingURL=ObjectUnsubscribedError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/TimeoutError.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/TimeoutError.js ***!
  \***********************************************************************/
/*! exports provided: TimeoutError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeoutError", function() { return TimeoutError; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function TimeoutErrorImpl() {
    Error.call(this);
    this.message = 'Timeout has occurred';
    this.name = 'TimeoutError';
    return this;
}
TimeoutErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var TimeoutError = TimeoutErrorImpl;
//# sourceMappingURL=TimeoutError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js":
/*!******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js ***!
  \******************************************************************************/
/*! exports provided: UnsubscriptionError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function() { return UnsubscriptionError; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function UnsubscriptionErrorImpl(errors) {
    Error.call(this);
    this.message = errors ?
        errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
}
UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
var UnsubscriptionError = UnsubscriptionErrorImpl;
//# sourceMappingURL=UnsubscriptionError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/canReportError.js":
/*!*************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/canReportError.js ***!
  \*************************************************************************/
/*! exports provided: canReportError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canReportError", function() { return canReportError; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */

function canReportError(observer) {
    while (observer) {
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        }
        else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}
//# sourceMappingURL=canReportError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/errorObject.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/errorObject.js ***!
  \**********************************************************************/
/*! exports provided: errorObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "errorObject", function() { return errorObject; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/hostReportError.js":
/*!**************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/hostReportError.js ***!
  \**************************************************************************/
/*! exports provided: hostReportError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hostReportError", function() { return hostReportError; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; });
}
//# sourceMappingURL=hostReportError.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/identity.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/identity.js ***!
  \*******************************************************************/
/*! exports provided: identity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js":
/*!******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isArray.js ***!
  \******************************************************************/
/*! exports provided: isArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return isArray; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isArrayLike.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isArrayLike.js ***!
  \**********************************************************************/
/*! exports provided: isArrayLike */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArrayLike", function() { return isArrayLike; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isFunction.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isFunction.js ***!
  \*********************************************************************/
/*! exports provided: isFunction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}
//# sourceMappingURL=isFunction.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isInteropObservable.js":
/*!******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isInteropObservable.js ***!
  \******************************************************************************/
/*! exports provided: isInteropObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInteropObservable", function() { return isInteropObservable; });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/observable */ "../common/node_modules/rxjs/_esm5/internal/symbol/observable.js");
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

function isInteropObservable(input) {
    return input && typeof input[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]] === 'function';
}
//# sourceMappingURL=isInteropObservable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isIterable.js":
/*!*********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isIterable.js ***!
  \*********************************************************************/
/*! exports provided: isIterable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIterable", function() { return isIterable; });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/iterator */ "../common/node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

function isIterable(input) {
    return input && typeof input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]] === 'function';
}
//# sourceMappingURL=isIterable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isNumeric.js":
/*!********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isNumeric.js ***!
  \********************************************************************/
/*! exports provided: isNumeric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumeric", function() { return isNumeric; });
/* harmony import */ var _isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray */ "../common/node_modules/rxjs/_esm5/internal/util/isArray.js");
/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */

function isNumeric(val) {
    return !Object(_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(val) && (val - parseFloat(val) + 1) >= 0;
}
//# sourceMappingURL=isNumeric.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isObject.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isObject.js ***!
  \*******************************************************************/
/*! exports provided: isObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x != null && typeof x === 'object';
}
//# sourceMappingURL=isObject.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isObservable.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isObservable.js ***!
  \***********************************************************************/
/*! exports provided: isObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return isObservable; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function isObservable(obj) {
    return !!obj && (obj instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"] || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
//# sourceMappingURL=isObservable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isPromise.js":
/*!********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isPromise.js ***!
  \********************************************************************/
/*! exports provided: isPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return isPromise; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=isPromise.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/isScheduler.js ***!
  \**********************************************************************/
/*! exports provided: isScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isScheduler", function() { return isScheduler; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
//# sourceMappingURL=isScheduler.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/noop.js":
/*!***************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/noop.js ***!
  \***************************************************************/
/*! exports provided: noop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return noop; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() { }
//# sourceMappingURL=noop.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/pipe.js":
/*!***************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/pipe.js ***!
  \***************************************************************/
/*! exports provided: pipe, pipeFromArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipeFromArray", function() { return pipeFromArray; });
/* harmony import */ var _noop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noop */ "../common/node_modules/rxjs/_esm5/internal/util/noop.js");
/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (!fns) {
        return _noop__WEBPACK_IMPORTED_MODULE_0__["noop"];
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/subscribeTo.js":
/*!**********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/subscribeTo.js ***!
  \**********************************************************************/
/*! exports provided: subscribeTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeTo", function() { return subscribeTo; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "../common/node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _subscribeToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscribeToArray */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToArray.js");
/* harmony import */ var _subscribeToPromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./subscribeToPromise */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js");
/* harmony import */ var _subscribeToIterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subscribeToIterable */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js");
/* harmony import */ var _subscribeToObservable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./subscribeToObservable */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js");
/* harmony import */ var _isArrayLike__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isArrayLike */ "../common/node_modules/rxjs/_esm5/internal/util/isArrayLike.js");
/* harmony import */ var _isPromise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isPromise */ "../common/node_modules/rxjs/_esm5/internal/util/isPromise.js");
/* harmony import */ var _isObject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./isObject */ "../common/node_modules/rxjs/_esm5/internal/util/isObject.js");
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../symbol/iterator */ "../common/node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../symbol/observable */ "../common/node_modules/rxjs/_esm5/internal/symbol/observable.js");
/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */










var subscribeTo = function (result) {
    if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (result && typeof result[_symbol_observable__WEBPACK_IMPORTED_MODULE_9__["observable"]] === 'function') {
        return Object(_subscribeToObservable__WEBPACK_IMPORTED_MODULE_4__["subscribeToObservable"])(result);
    }
    else if (Object(_isArrayLike__WEBPACK_IMPORTED_MODULE_5__["isArrayLike"])(result)) {
        return Object(_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__["subscribeToArray"])(result);
    }
    else if (Object(_isPromise__WEBPACK_IMPORTED_MODULE_6__["isPromise"])(result)) {
        return Object(_subscribeToPromise__WEBPACK_IMPORTED_MODULE_2__["subscribeToPromise"])(result);
    }
    else if (result && typeof result[_symbol_iterator__WEBPACK_IMPORTED_MODULE_8__["iterator"]] === 'function') {
        return Object(_subscribeToIterable__WEBPACK_IMPORTED_MODULE_3__["subscribeToIterable"])(result);
    }
    else {
        var value = Object(_isObject__WEBPACK_IMPORTED_MODULE_7__["isObject"])(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
//# sourceMappingURL=subscribeTo.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToArray.js":
/*!***************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/subscribeToArray.js ***!
  \***************************************************************************/
/*! exports provided: subscribeToArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToArray", function() { return subscribeToArray; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        if (!subscriber.closed) {
            subscriber.complete();
        }
    };
};
//# sourceMappingURL=subscribeToArray.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js":
/*!******************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js ***!
  \******************************************************************************/
/*! exports provided: subscribeToIterable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToIterable", function() { return subscribeToIterable; });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/iterator */ "../common/node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator = iterable[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]]();
        do {
            var item = iterator.next();
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        if (typeof iterator.return === 'function') {
            subscriber.add(function () {
                if (iterator.return) {
                    iterator.return();
                }
            });
        }
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToIterable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js":
/*!********************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js ***!
  \********************************************************************************/
/*! exports provided: subscribeToObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToObservable", function() { return subscribeToObservable; });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/observable */ "../common/node_modules/rxjs/_esm5/internal/symbol/observable.js");
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]]();
        if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};
//# sourceMappingURL=subscribeToObservable.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js":
/*!*****************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js ***!
  \*****************************************************************************/
/*! exports provided: subscribeToPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToPromise", function() { return subscribeToPromise; });
/* harmony import */ var _hostReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hostReportError */ "../common/node_modules/rxjs/_esm5/internal/util/hostReportError.js");
/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */

var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, _hostReportError__WEBPACK_IMPORTED_MODULE_0__["hostReportError"]);
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToPromise.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/subscribeToResult.js":
/*!****************************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/subscribeToResult.js ***!
  \****************************************************************************/
/*! exports provided: subscribeToResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToResult", function() { return subscribeToResult; });
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../InnerSubscriber */ "../common/node_modules/rxjs/_esm5/internal/InnerSubscriber.js");
/* harmony import */ var _subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscribeTo */ "../common/node_modules/rxjs/_esm5/internal/util/subscribeTo.js");
/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */


function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {
    if (destination === void 0) {
        destination = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__["InnerSubscriber"](outerSubscriber, outerValue, outerIndex);
    }
    if (destination.closed) {
        return;
    }
    return Object(_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(result)(destination);
}
//# sourceMappingURL=subscribeToResult.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/toSubscriber.js":
/*!***********************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/toSubscriber.js ***!
  \***********************************************************************/
/*! exports provided: toSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSubscriber", function() { return toSubscriber; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "../common/node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/rxSubscriber */ "../common/node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observer */ "../common/node_modules/rxjs/_esm5/internal/Observer.js");
/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
            return nextOrObserver;
        }
        if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]) {
            return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](_Observer__WEBPACK_IMPORTED_MODULE_2__["empty"]);
    }
    return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](nextOrObserver, error, complete);
}
//# sourceMappingURL=toSubscriber.js.map


/***/ }),

/***/ "../common/node_modules/rxjs/_esm5/internal/util/tryCatch.js":
/*!*******************************************************************!*\
  !*** ../common/node_modules/rxjs/_esm5/internal/util/tryCatch.js ***!
  \*******************************************************************/
/*! exports provided: tryCatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryCatch", function() { return tryCatch; });
/* harmony import */ var _errorObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errorObject */ "../common/node_modules/rxjs/_esm5/internal/util/errorObject.js");
/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        _errorObject__WEBPACK_IMPORTED_MODULE_0__["errorObject"].e = e;
        return _errorObject__WEBPACK_IMPORTED_MODULE_0__["errorObject"];
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
//# sourceMappingURL=tryCatch.js.map


/***/ }),

/***/ "../common/node_modules/tslib/tslib.es6.js":
/*!*************************************************!*\
  !*** ../common/node_modules/tslib/tslib.es6.js ***!
  \*************************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),

/***/ "../common/react-vendor.js":
/*!*********************************!*\
  !*** ../common/react-vendor.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.react2angular = exports.ReactDOM = exports.PropTypes = exports.Component = undefined;

var _react = __webpack_require__(/*! @uirouter/react */ "../common/node_modules/@uirouter/react/lib-esm/index.js");

Object.keys(_react).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _react[key];
    }
  });
});

var _react2angular = __webpack_require__(/*! react2angular */ "../common/node_modules/react2angular/index.js");

var React = __webpack_require__(/*! react */ "../common/node_modules/react/index.js");

var Component = React.Component;
var ReactDOM = __webpack_require__(/*! react-dom */ "../common/node_modules/react-dom/index.js");
var PropTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");
exports.Component = Component;
exports.PropTypes = PropTypes;
exports.ReactDOM = ReactDOM;
exports.react2angular = _react2angular.react2angular;
exports.default = React;

/***/ }),

/***/ "../common/widgets/buttons/buttons.scss":
/*!**********************************************!*\
  !*** ../common/widgets/buttons/buttons.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../common/widgets/buttons/le-button.js":
/*!**********************************************!*\
  !*** ../common/widgets/buttons/le-button.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RIGHT = exports.LEFT = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _propTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

__webpack_require__(/*! ./buttons.scss */ "../common/widgets/buttons/buttons.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LEFT = exports.LEFT = "left";
var RIGHT = exports.RIGHT = "right";

var LeButton = function (_Component) {
  _inherits(LeButton, _Component);

  function LeButton(props) {
    _classCallCheck(this, LeButton);

    var _this = _possibleConstructorReturn(this, (LeButton.__proto__ || Object.getPrototypeOf(LeButton)).call(this, props));

    _this.state = _this.props.state || { disabled: false };
    _this.clickHandler = _this.clickHandler.bind(_this);
    return _this;
  }

  _createClass(LeButton, [{
    key: "clickHandler",
    value: function clickHandler() {
      this.props.callback(this.state);
    }
  }, {
    key: "createIcon",
    value: function createIcon() {
      return _reactVendor2.default.createElement("span", { className: this.props.config.icon });
    }
  }, {
    key: "getIconByPosition",
    value: function getIconByPosition(position) {
      switch (position) {
        case LEFT:
          if (!this.props.config.iconside || position == this.props.config.iconside) return this.createIcon();

          break;
        case RIGHT:
          if (position == this.props.config.iconside) return this.createIcon();

          break;
      }
    }
  }, {
    key: "getIcon",
    value: function getIcon(position) {
      if (this.props.config.icon) {
        return this.getIconByPosition(position);
      } else {
        return null;
      }
    }
  }, {
    key: "getLabel",
    value: function getLabel() {
      if (this.props.config.lable && this.props.config.lable !== "") {
        return _reactVendor2.default.createElement(
          "span",
          { className: "le-button-title" },
          this.props.config.lable
        );
      } else {
        return "";
      }
    }
  }, {
    key: "getClasses",
    value: function getClasses() {

      var classes = "button " + (this.props.config.classNames ? this.props.config.classNames : "") + " " + (this.props.disabled || this.state.disabled ? 'disabled' : '');
      console.log("THE CLASSES ", classes);
      return classes;
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "button",
        {
          onClick: this.clickHandler,
          disabled: this.props.disabled,
          className: this.getClasses()
        },
        this.getIcon(LEFT),
        this.getLabel(),
        this.getIcon(RIGHT)
      );
    }
  }]);

  return LeButton;
}(_reactVendor.Component);

exports.default = LeButton;

LeButton.propTypes = {
  lable: _propTypes2.default.string,
  classNames: _propTypes2.default.array,
  callback: _propTypes2.default.func
};

/***/ }),

/***/ "../common/widgets/hoc/_Aux.js":
/*!*************************************!*\
  !*** ../common/widgets/hoc/_Aux.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Aux = function Aux(props) {
  return props.children;
};

exports.default = Aux;

/***/ }),

/***/ "../common/widgets/layout/layout.scss":
/*!********************************************!*\
  !*** ../common/widgets/layout/layout.scss ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../common/widgets/link/le-link.js":
/*!*****************************************!*\
  !*** ../common/widgets/link/le-link.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RIGHT = exports.LEFT = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

__webpack_require__(/*! ../layout/layout.scss */ "../common/widgets/layout/layout.scss");

__webpack_require__(/*! ./le-link.scss */ "../common/widgets/link/le-link.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LEFT = exports.LEFT = "left";
var RIGHT = exports.RIGHT = "right";

var LeLink = function (_Component) {
  _inherits(LeLink, _Component);

  function LeLink(props) {
    _classCallCheck(this, LeLink);

    return _possibleConstructorReturn(this, (LeLink.__proto__ || Object.getPrototypeOf(LeLink)).call(this, props));
  }

  _createClass(LeLink, [{
    key: "getIcon",
    value: function getIcon(position) {
      if (this.props.config.icon && this.props.config.icon != "" && position == this.props.config.iconside) {
        var classes = this.props.config.icon + " le-link-icon";
        return _reactVendor2.default.createElement("i", { className: classes });
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {

      var customClasses = this.props.config.classes ? this.props.config.classes : '';
      return _reactVendor2.default.createElement(
        "div",
        { className: "le-flex-h-panel center-v le-link-container " + customClasses },
        _reactVendor2.default.createElement(
          "div",
          { className: "wrapper", onClick: this.props.callback },
          this.getIcon(LEFT),
          _reactVendor2.default.createElement(
            "span",
            { className: "le-link" },
            this.props.config.label
          ),
          this.getIcon(RIGHT)
        )
      );
    }
  }]);

  return LeLink;
}(_reactVendor.Component);

exports.default = LeLink;

/***/ }),

/***/ "../common/widgets/link/le-link.scss":
/*!*******************************************!*\
  !*** ../common/widgets/link/le-link.scss ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../common/widgets/table/cell-content.js":
/*!***********************************************!*\
  !*** ../common/widgets/table/cell-content.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _propTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

__webpack_require__(/*! ./table.scss */ "../common/widgets/table/table.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CellContent = function (_Component) {
  _inherits(CellContent, _Component);

  function CellContent(props) {
    _classCallCheck(this, CellContent);

    return _possibleConstructorReturn(this, (CellContent.__proto__ || Object.getPrototypeOf(CellContent)).call(this, props));
  }

  _createClass(CellContent, [{
    key: "getContent",
    value: function getContent() {
      if (this.props.mask) {
        var t = this.props.mask(this.props.value);
        t = '' + t;
        return t;
      } else {
        return this.props.value;
      }
    }
  }, {
    key: "render",
    value: function render() {

      if (this.props.editing === true) {
        return null;
      } else {
        var content = this.getContent();
        return _reactVendor2.default.createElement(
          "li",
          { className: "le-table-cell-content" },
          _reactVendor2.default.createElement(
            "span",
            { title: content },
            content
          )
        );
      }
    }
  }]);

  return CellContent;
}(_reactVendor.Component);

exports.default = CellContent;


CellContent.propTypes = {
  value: _propTypes2.default.any.isRequired,
  mask: _propTypes2.default.func
};

/***/ }),

/***/ "../common/widgets/table/controlls/copy-controll.js":
/*!**********************************************************!*\
  !*** ../common/widgets/table/controlls/copy-controll.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CopyComponent = function (_Component) {
  _inherits(CopyComponent, _Component);

  function CopyComponent(props) {
    _classCallCheck(this, CopyComponent);

    var _this = _possibleConstructorReturn(this, (CopyComponent.__proto__ || Object.getPrototypeOf(CopyComponent)).call(this, props));

    _this.clickHandler = _this.clickHandler.bind(_this);
    return _this;
  }

  _createClass(CopyComponent, [{
    key: "clickHandler",
    value: function clickHandler() {
      var _this2 = this;

      // copyPath(text) {
      console.log(this.props.column, ' -- ', this.props.data);
      var text = this.props.data;
      window.navigator.clipboard.writeText(text).then(function () {
        if (_this2.props.callback) {
          _this2.props.callback();
        }
        console.log("Async: Copying to clipboard was successful!");
      }, function (err) {
        console.error("Async: Could not copy text: ", err);
      });
      //   }
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "li",
        {
          className: "le-table-cell-icon le-table-cell-icon-actions initially-hidden",
          title: "Copy Link",
          onClick: this.clickHandler
        },
        _reactVendor2.default.createElement("i", { className: "fa fa-files-o" })
      );
    }
  }]);

  return CopyComponent;
}(_reactVendor.Component);

exports.default = CopyComponent;

/***/ }),

/***/ "../common/widgets/table/controlls/edit-controls.js":
/*!**********************************************************!*\
  !*** ../common/widgets/table/controlls/edit-controls.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactVendor = __webpack_require__(/*! ../../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EditControl = function EditControl(props) {

    return _reactVendor2.default.createElement(
        'li',
        {
            className: 'le-table-cell-icon le-table-cell-icon-actions ' + (props.classes ? props.classes : ''),
            title: props.title ? props.title : 'Edit',
            onClick: function onClick() {
                props.toogleEdit();
            }
        },
        _reactVendor2.default.createElement('i', { className: props.icon ? props.icon : "fa fa-pencil-square-o" })
    );
};

exports.default = EditControl;

/***/ }),

/***/ "../common/widgets/table/editors/editor-text.js":
/*!******************************************************!*\
  !*** ../common/widgets/table/editors/editor-text.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditorText = function (_Component) {
  _inherits(EditorText, _Component);

  function EditorText(props) {
    _classCallCheck(this, EditorText);

    // console.log('PROPS', props);
    var _this = _possibleConstructorReturn(this, (EditorText.__proto__ || Object.getPrototypeOf(EditorText)).call(this, props));

    _this.state = { value: _this.props.initialValue, cancelled: false };
    return _this;
  }

  _createClass(EditorText, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.nameInput.focus();
    }
  }, {
    key: "changeHandler",
    value: function changeHandler(event) {
      this.setState({ value: event.target.value });
      // console.log(event.target.value);
      // this.value = event.target.value;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return _reactVendor2.default.createElement("input", {
        type: "text",
        ref: function ref(input) {
          _this2.nameInput = input;
        },
        value: this.state.value,
        onKeyDown: function onKeyDown(event) {
          // console.log(event.keyCode);
          switch (event.keyCode) {
            case 27:
              _this2.setState({ cancelled: true }, function () {
                _this2.nameInput.blur();
              });
              break;
            case 13:
              _this2.props.applyChanges(_this2.props.cell, _this2.state.value);
              break;
          }
        },
        onChange: function onChange() {
          _this2.changeHandler(event);
        },
        onBlur: function onBlur() {
          if (!_this2.state.cancelled) {
            _this2.props.applyChanges(_this2.props.cell, _this2.state.value);
          } else {
            _this2.props.cancel();
          }
        }
      });
    }
  }]);

  return EditorText;
}(_reactVendor.Component);

exports.default = EditorText;

/***/ }),

/***/ "../common/widgets/table/table-body.js":
/*!*********************************************!*\
  !*** ../common/widgets/table/table-body.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _propTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

__webpack_require__(/*! ./table.scss */ "../common/widgets/table/table.scss");

var _tableRow = __webpack_require__(/*! ./table-row */ "../common/widgets/table/table-row.js");

var _tableRow2 = _interopRequireDefault(_tableRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LeTableBody = function (_Component) {
  _inherits(LeTableBody, _Component);

  function LeTableBody(props) {
    _classCallCheck(this, LeTableBody);

    return _possibleConstructorReturn(this, (LeTableBody.__proto__ || Object.getPrototypeOf(LeTableBody)).call(this, props));
  }

  _createClass(LeTableBody, [{
    key: "getRows",
    value: function getRows() {
      var _this2 = this;

      if (this.props.data && this.props.data.length > 0) {
        var rowsUI = this.props.data.map(function (row, index) {
          return _reactVendor2.default.createElement(
            _tableRow2.default,
            {
              key: index,
              columnsMapping: _this2.props.columnsMapping,
              rowIndex: index,
              rowData: row
            },
            _this2.props.children
          );
        });
        return rowsUI;
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "div",
        { className: "le-table-row le-table-body" },
        this.getRows()
      );
    }
  }]);

  return LeTableBody;
}(_reactVendor.Component);

exports.default = LeTableBody;


LeTableBody.propTypes = {
  columnsMapping: _propTypes2.default.object.isRequired,
  data: _propTypes2.default.array
};

/***/ }),

/***/ "../common/widgets/table/table-cell.js":
/*!*********************************************!*\
  !*** ../common/widgets/table/table-cell.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _propTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

__webpack_require__(/*! ./table.scss */ "../common/widgets/table/table.scss");

var _cellContent = __webpack_require__(/*! ./cell-content */ "../common/widgets/table/cell-content.js");

var _cellContent2 = _interopRequireDefault(_cellContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LeTableCell = function (_Component) {
  _inherits(LeTableCell, _Component);

  function LeTableCell(props) {
    _classCallCheck(this, LeTableCell);

    var _this = _possibleConstructorReturn(this, (LeTableCell.__proto__ || Object.getPrototypeOf(LeTableCell)).call(this, props));

    _this.state = { editing: false, saving: false };
    _this.toogleEdit = _this.toogleEdit.bind(_this);
    _this.cancelHandler = _this.cancelHandler.bind(_this);
    return _this;
  }

  _createClass(LeTableCell, [{
    key: "cancelHandler",
    value: function cancelHandler() {
      this.toogleEdit();
    }
  }, {
    key: "setSavingState",
    value: function setSavingState() {
      this.setState({ saving: true });
    }
  }, {
    key: "getSaving",
    value: function getSaving() {
      if (this.state.saving) {
        return _reactVendor2.default.createElement(
          "div",
          null,
          _reactVendor2.default.createElement("i", { "class": "fa fa-spinner fa-spin fa-fw" })
        );
      } else {
        return null;
      }
    }
  }, {
    key: "toogleSaving",
    value: function toogleSaving() {
      this.setState({ saving: !this.state.saving });
    }
  }, {
    key: "toogleEdit",
    value: function toogleEdit() {
      this.setState({ editing: !this.state.editing, saving: false });
    }
  }, {
    key: "getContentFormated",
    value: function getContentFormated(content) {
      if (this.props.columnsMapping[this.props.colName].contenFormatter) {
        return this.props.columnsMapping[this.props.colName].contenFormatter(content);
      } else {
        return content;
      }
    }
  }, {
    key: "getCellContent",
    value: function getCellContent() {
      var displayName = this.props.rowData[this.props.colName];
      if (displayName && !this.state.editing) {
        return _reactVendor2.default.createElement(_cellContent2.default, { value: displayName, mask: this.props.columnsMapping[this.props.colName].mask });
      } else {
        return null;
      }
    }
  }, {
    key: "getTemplate",
    value: function getTemplate() {
      if (this.props.columnsMapping[this.props.colName].template) {
        return _reactVendor2.default.createElement(
          "div",
          { className: "le-cell-template" },
          this.props.columnsMapping[this.props.colName].template(this, this.props.rowData)
        );
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {

      var span = "le-table-cell le-table-col-span-" + this.props.columnsMapping[this.props.colName].colSpan + " cell-" + this.props.rowIndex + "-" + this.props.colIndex + " " + this.props.colName;
      var externalFormatting = "";
      if (this.props.columnsMapping && this.props.columnsMapping.formatter) {
        externalFormatting = this.props.columnsMapping.formatter(this.props.rowData);
      }
      var format = span + " " + externalFormatting;
      return _reactVendor2.default.createElement(
        "ul",
        { className: format },
        this.getCellContent(),
        this.getTemplate(),
        this.getSaving()
      );
    }
  }]);

  return LeTableCell;
}(_reactVendor.Component);

exports.default = LeTableCell;


LeTableCell.propTypes = {
  columnsMapping: _propTypes2.default.object.isRequired,
  colSpan: _propTypes2.default.number,
  rowIndex: _propTypes2.default.number,
  colIndex: _propTypes2.default.number,
  colName: _propTypes2.default.string,
  rowData: _propTypes2.default.object
};

/***/ }),

/***/ "../common/widgets/table/table-header.js":
/*!***********************************************!*\
  !*** ../common/widgets/table/table-header.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _propTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

__webpack_require__(/*! ./table.scss */ "../common/widgets/table/table.scss");

var _tableRow = __webpack_require__(/*! ./table-row */ "../common/widgets/table/table-row.js");

var _tableRow2 = _interopRequireDefault(_tableRow);

var _Aux = __webpack_require__(/*! ../hoc/_Aux */ "../common/widgets/hoc/_Aux.js");

var _Aux2 = _interopRequireDefault(_Aux);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LeTableHeader = function (_Component) {
  _inherits(LeTableHeader, _Component);

  function LeTableHeader(props) {
    _classCallCheck(this, LeTableHeader);

    var _this = _possibleConstructorReturn(this, (LeTableHeader.__proto__ || Object.getPrototypeOf(LeTableHeader)).call(this, props));

    _this.data = {};
    Object.keys(_this.props.headerMapping).forEach(function (key) {
      _this.data[key] = _this.props.headerMapping[key].displayName ? _this.props.headerMapping[key].displayName : '';
    });
    return _this;
  }

  _createClass(LeTableHeader, [{
    key: "getHeader",
    value: function getHeader() {

      return _reactVendor2.default.createElement(
        _tableRow2.default,
        {
          jsonConfig: true,
          columnsMapping: this.props.headerMapping,
          rowIndex: 0,
          rowData: this.data,
          rowClasses: "le-table-header le-table-row-no-select"
        },
        this.props.children
      );
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        _Aux2.default,
        null,
        this.getHeader()
      );
    }
  }]);

  return LeTableHeader;
}(_reactVendor.Component);

exports.default = LeTableHeader;

LeTableHeader.propTypes = {
  headerMapping: _propTypes2.default.object.isRequired
};

/***/ }),

/***/ "../common/widgets/table/table-row.js":
/*!********************************************!*\
  !*** ../common/widgets/table/table-row.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

__webpack_require__(/*! ./table.scss */ "../common/widgets/table/table.scss");

var _propTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tableCell = __webpack_require__(/*! ./table-cell */ "../common/widgets/table/table-cell.js");

var _tableCell2 = _interopRequireDefault(_tableCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LeTableRow = function (_Component) {
  _inherits(LeTableRow, _Component);

  function LeTableRow(props) {
    _classCallCheck(this, LeTableRow);

    return _possibleConstructorReturn(this, (LeTableRow.__proto__ || Object.getPrototypeOf(LeTableRow)).call(this, props));
  }

  _createClass(LeTableRow, [{
    key: "getCells",
    value: function getCells() {
      var _this2 = this;

      if (this.props.columnsMapping) {
        var cellsUI = Object.keys(this.props.columnsMapping).map(function (key, index) {
          var column = _this2.props.columnsMapping[key];
          return _reactVendor2.default.createElement(_tableCell2.default, {
            key: index,
            columnsMapping: _this2.props.columnsMapping,
            colSpan: column.colSpan,
            rowIndex: _this2.props.rowIndex,
            colIndex: index,
            colName: column.name,
            rowData: _this2.props.rowData
          });
        });
        return cellsUI;
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var rowClass = "le-table-row row-" + this.props.rowIndex + " " + (this.props.rowClasses ? this.props.rowClasses : "");
      var externalFormatting = "";
      if (this.props.formatter) {
        externalFormatting = this.props.formatter(this.props.rowData);
      }
      var format = rowClass + " " + (externalFormatting ? externalFormatting : "");
      return _reactVendor2.default.createElement(
        "div",
        { className: format },
        this.getCells()
      );
    }
  }]);

  return LeTableRow;
}(_reactVendor.Component);

exports.default = LeTableRow;


LeTableRow.propTypes = {
  columnsMapping: _propTypes2.default.object.isRequired,
  rowIndex: _propTypes2.default.number,
  rowData: _propTypes2.default.object
};

/***/ }),

/***/ "../common/widgets/table/table.js":
/*!****************************************!*\
  !*** ../common/widgets/table/table.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _propTypes = __webpack_require__(/*! prop-types */ "../common/node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tableHeader = __webpack_require__(/*! ./table-header */ "../common/widgets/table/table-header.js");

var _tableHeader2 = _interopRequireDefault(_tableHeader);

var _tableBody = __webpack_require__(/*! ./table-body */ "../common/widgets/table/table-body.js");

var _tableBody2 = _interopRequireDefault(_tableBody);

__webpack_require__(/*! ./table.scss */ "../common/widgets/table/table.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LeTable = function (_Component) {
  _inherits(LeTable, _Component);

  function LeTable(props) {
    _classCallCheck(this, LeTable);

    var _this = _possibleConstructorReturn(this, (LeTable.__proto__ || Object.getPrototypeOf(LeTable)).call(this, props));

    _this.columnsMapping = {};
    _this.headerMapping = {};
    _this.props.config.header.forEach(function (header, index) {
      _this.headerMapping[header.name] = Object.assign({}, header);
      _this.headerMapping[header.name].colSpan = _this.props.config.columns[index].colSpan;
      var newItem = Object.assign(header, _this.props.config.columns[index]);
      newItem.colIndex = index;
      _this.columnsMapping[header.name] = newItem;
    });
    return _this;
  }

  _createClass(LeTable, [{
    key: "getLoading",
    value: function getLoading() {
      if (this.props.showLoading && !this.props.showEmpty) {
        return _reactVendor2.default.createElement(
          "div",
          { className: "le-table-row-no-select le-table-col-span-12 le-table-cell le-table-cell-centered indicator-row" },
          _reactVendor2.default.createElement("i", { className: "fa fa-spinner fa-spin fa-2x fa-fw" })
        );
      } else {
        return null;
      }
    }
  }, {
    key: "getEmptyMsg",
    value: function getEmptyMsg() {
      if (this.props.showEmpty && !this.props.showLoading) {
        return _reactVendor2.default.createElement(
          "div",
          { className: "le-table-row-no-select le-table-col-span-12 le-table-cell le-table-cell-centered indicator-row" },
          _reactVendor2.default.createElement(
            "p",
            null,
            this.props.emptymsg ? this.props.emptymsg : "No data available"
          )
        );
      } else {
        return null;
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      if (!this.props.showEmpty && !this.props.showLoading) {
        return _reactVendor2.default.createElement(_tableBody2.default, {
          columnsMapping: this.columnsMapping,
          data: this.props.data
        });
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "div",
        { className: "le-table " + this.props.name },
        _reactVendor2.default.createElement(_tableHeader2.default, { headerMapping: this.headerMapping }),
        this.getBody(),
        this.getEmptyMsg(),
        this.getLoading()
      );
    }
  }]);

  return LeTable;
}(_reactVendor.Component);

exports.default = LeTable;


LeTable.propTypes = {
  name: _propTypes2.default.string.isRequired,
  config: _propTypes2.default.object.isRequired,
  data: _propTypes2.default.array.isRequired,
  showEmpty: _propTypes2.default.bool,
  showLoading: _propTypes2.default.bool
};

/***/ }),

/***/ "../common/widgets/table/table.scss":
/*!******************************************!*\
  !*** ../common/widgets/table/table.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../common/widgets/toolbar/le-toolbar.js":
/*!***********************************************!*\
  !*** ../common/widgets/toolbar/le-toolbar.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LeToolBar = exports.HORIZONTAL = exports.VERTICAL = undefined;

var _react = __webpack_require__(/*! react */ "../common/node_modules/react/index.js");

var _react2 = _interopRequireDefault(_react);

__webpack_require__(/*! ./toolbar.scss */ "../common/widgets/toolbar/toolbar.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VERTICAL = exports.VERTICAL = 'vertical';
var HORIZONTAL = exports.HORIZONTAL = 'horizontal';

var LeToolBar = function LeToolBar(props) {
    var classes = (props.direction ? props.direction : '') + ' le-tool-bar';
    return _react2.default.createElement(
        'div',
        { className: classes },
        props.children
    );
};

exports.LeToolBar = LeToolBar;

/***/ }),

/***/ "../common/widgets/toolbar/toolbar.scss":
/*!**********************************************!*\
  !*** ../common/widgets/toolbar/toolbar.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./app/AppCommon/modules/ModulesBootstrap.js":
/*!***************************************************!*\
  !*** ./app/AppCommon/modules/ModulesBootstrap.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.modules', ['common.modules.menus', 'common.modules.searchfilter']);

/***/ }),

/***/ "./app/AppCommon/modules/menus/MenusBootstrap.js":
/*!*******************************************************!*\
  !*** ./app/AppCommon/modules/menus/MenusBootstrap.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.modules.menus', ['common.modules.menus.dropdown', 'common.modules.menus.filterby', 'common.modules.menus.sortby']);

/***/ }),

/***/ "./app/AppCommon/modules/menus/dropdown/DropdownModule.js":
/*!****************************************************************!*\
  !*** ./app/AppCommon/modules/menus/dropdown/DropdownModule.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.modules.menus.dropdown', []).directive('menuDropdown', function () {
    return {
        restrict: 'EA',
        scope: {
            config: '='
        },
        templateUrl: 'app/AppCommon/modules/menus/dropdown/DropdownView.html',
        controller: ["$scope", "$document", function controller($scope, $document) {
            angular.extend($scope, $scope.config, {
                visible: false
            }, {
                init: function init() {},
                toggle: function toggle($event) {
                    $scope.visible = !$scope.visible;

                    if ($event && $event.target) {
                        var target = angular.element($event.target),
                            parent = target.parent();
                        var click = function click($event) {
                            var clicked = angular.element($event.target),
                                inside = clicked.closest(parent).length;

                            if (!inside) {
                                $scope.visible = false;
                                $scope.$digest();
                                $document.unbind('click', click);
                            }
                        };
                        $document.bind('click', click);
                    }
                }
            });

            $scope.init();
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/modules/menus/filterby/FilterByModule.js":
/*!****************************************************************!*\
  !*** ./app/AppCommon/modules/menus/filterby/FilterByModule.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.modules.menus.filterby', []).filter("as", ["$parse", function ($parse) {
    return function (value, context, path) {
        return $parse(path).assign(context, value);
    };
}]).directive('menuFilterBy', function () {
    return {
        restrict: 'EA',
        scope: {
            config: '=',
            store: '@',
            callback: '&?callbackFunction',
            current: '=?'
        },
        templateUrl: 'app/AppCommon/modules/menus/filterby/FilterByView.html',
        controller: ["$scope", "$filter", "$document", "FilterService", function controller($scope, $filter, $document, FilterService) {
            angular.extend($scope, $scope.config, {
                visible: false
            }, {
                init: function init() {
                    if (!$scope.label) {
                        $scope.label = $scope.items[0].label;
                    }

                    var filterStore = $scope.store ? FilterService.getFilters($scope.store) : null;
                    if (filterStore) {
                        $scope.config.label = filterStore.label;
                        $scope.config.value = filterStore.value;
                        $scope.config.items = filterStore.items;
                        $scope.config.filtered = filterStore.filtered;
                        $scope.config.unfiltered = filterStore.unfiltered;

                        $scope.label = filterStore.label;
                        $scope.value = filterStore.value;
                        $scope.items = filterStore.items;
                        $scope.filtered = filterStore.filtered;
                        $scope.unfiltered = filterStore.unfiltered;
                    }
                },
                toggle: function toggle($event) {

                    $scope.visible = !$scope.visible;

                    if ($scope.visible) {
                        $scope.items.forEach(function (item, i) {
                            if (typeof $scope.callback === 'undefined') {
                                item.filtered = $filter('filter')($scope.config.unfiltered, item.action, true);
                                item.total = item.filtered.length;
                            }
                        });
                    }
                    if ($event && $event.target) {
                        var target = angular.element($event.target),
                            parent = target.parent();
                        var click = function click($event) {
                            var clicked = angular.element($event.target),
                                inside = clicked.closest(parent).length;
                            if (!inside) {
                                $scope.visible = false;
                                $scope.$digest();
                                $document.unbind('click', click);
                            }
                        };
                        $document.bind('click', click);
                    }
                },
                click: function click(item) {
                    $scope.current = 1;

                    $scope.label = item.label;
                    $scope.config.filtered = item.filtered;
                    $scope.config.value = item.action;

                    $scope.callCallback = function () {
                        if (typeof $scope.callback != 'undefined') {
                            $scope.callback({ args: Object.values(item) });
                        }
                    };

                    $scope.callCallback();

                    FilterService.setFilters($scope.store, {
                        label: item.label,
                        value: item.action,
                        items: $scope.items,
                        filtered: item.filtered,
                        unfiltered: $scope.unfiltered,
                        callback: $scope.callback
                    });
                }
            });

            $scope.init();
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/modules/menus/sortby/SortByModule.js":
/*!************************************************************!*\
  !*** ./app/AppCommon/modules/menus/sortby/SortByModule.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.modules.menus.sortby', []).directive('menuSortBy', function () {
    return {
        restrict: 'EA',
        scope: {
            config: '=',
            store: '@'
        },
        templateUrl: 'app/AppCommon/modules/menus/sortby/SortByView.html',
        controller: ["$scope", "$document", "FilterService", function controller($scope, $document, FilterService) {
            angular.extend($scope, $scope.config, {
                visible: false
            }, {
                init: function init() {
                    if (!$scope.label) {
                        $scope.label = $scope.items[0].label;
                    }

                    if (!$scope.icon) {
                        $scope.icon = $scope.items[0].icon;
                    }

                    var filterStore = $scope.store ? FilterService.getFilters($scope.store) : null;
                    if (filterStore) {
                        $scope.config.icon = filterStore.icon;
                        $scope.config.property = filterStore.property;
                        $scope.config.label = filterStore.label;
                        $scope.config.order = filterStore.order;

                        $scope.icon = filterStore.icon;
                        $scope.property = filterStore.property;
                        $scope.label = filterStore.label;
                        $scope.order = filterStore.order;
                    }
                },
                clickOrder: function clickOrder() {
                    $scope.order = $scope.config.order = $scope.order == '' ? '-' : '';

                    FilterService.setFilters($scope.store, {
                        label: $scope.label,
                        icon: $scope.icon,
                        property: $scope.property,
                        order: $scope.order
                    });
                },
                clickProperty: function clickProperty(item) {
                    $scope.label = item.label;
                    $scope.icon = item.icon;
                    $scope.property = $scope.config.property = item.property;

                    FilterService.setFilters($scope.store, {
                        label: $scope.label,
                        icon: $scope.icon,
                        property: $scope.property,
                        order: $scope.order
                    });
                },
                toggle: function toggle($event) {
                    $scope.visible = !$scope.visible;

                    if ($event && $event.target) {
                        var target = angular.element($event.target),
                            parent = target.parent();
                        var click = function click($event) {
                            var clicked = angular.element($event.target),
                                inside = clicked.closest(parent).length;

                            if (!inside) {
                                $scope.visible = false;
                                $scope.$digest();
                                $document.unbind('click', click);
                            }
                        };
                        $document.bind('click', click);
                    }
                }
            });

            $scope.init();
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/modules/modules.index.js":
/*!************************************************!*\
  !*** ./app/AppCommon/modules/modules.index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./menus/dropdown/DropdownModule */ "./app/AppCommon/modules/menus/dropdown/DropdownModule.js");

__webpack_require__(/*! ./menus/filterby/FilterByModule */ "./app/AppCommon/modules/menus/filterby/FilterByModule.js");

__webpack_require__(/*! ./menus/sortby/SortByModule */ "./app/AppCommon/modules/menus/sortby/SortByModule.js");

__webpack_require__(/*! ./menus/MenusBootstrap */ "./app/AppCommon/modules/menus/MenusBootstrap.js");

__webpack_require__(/*! ./searchfilter/SearchFilterModule */ "./app/AppCommon/modules/searchfilter/SearchFilterModule.js");

__webpack_require__(/*! ./ModulesBootstrap */ "./app/AppCommon/modules/ModulesBootstrap.js");

/***/ }),

/***/ "./app/AppCommon/modules/searchfilter/SearchFilterModule.js":
/*!******************************************************************!*\
  !*** ./app/AppCommon/modules/searchfilter/SearchFilterModule.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.modules.searchfilter', []).directive('searchFilter', function () {
    return {
        restrict: 'EA',
        scope: {
            query: '=',
            current: '='
        },
        templateUrl: 'app/AppCommon/modules/searchfilter/SearchFilterView.html',
        controller: ["$scope", function controller($scope) {
            angular.extend($scope, $scope.config, {
                visible: false
            }, {
                init: function init() {},
                clickToggle: function clickToggle() {
                    $scope.visible = !$scope.visible;

                    if ($scope.visible) {
                        // timeout needed, or else it only works once in chrome
                        setTimeout(function () {
                            $('div.select-menu input.form-control').focus();
                        }, 250);
                    } else {
                        $scope.current = 1;
                    }

                    $scope.query = '';
                },
                resetCurrentPage: function resetCurrentPage() {
                    if ($scope.query) {
                        $scope.current = 1;
                    }
                }
            });

            $scope.init();
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/services/FilterService.js":
/*!*************************************************!*\
  !*** ./app/AppCommon/services/FilterService.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.services.FilterService', []).service('FilterService', function () {
    this.init = function () {
        this.filters = null;
    };

    this.clear = function () {
        this.init();
    };

    this.setFilters = function (key, obj, debug) {
        if (key && obj) {
            this.filters = this.filters || {};
            this.filters[key] = obj;

            if (debug) {
                console.log('FilterService.setFilters', key, obj);
            }
        }
    };

    this.getFilters = function (key, debug) {
        if (debug) {
            console.log('FilterService.getFilters', key, this.filters && this.filters[key] ? this.filters[key] : null);
        }
        if (key) {
            if (!this.filters || !this.filters[key]) {
                return null;
            }
            return this.filters[key];
        }
        return this.filters;
    };
});

/***/ }),

/***/ "./app/AppCommon/services/HealthService.js":
/*!*************************************************!*\
  !*** ./app/AppCommon/services/HealthService.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.services.HealthService', ['common.exceptions']).service('HealthService', ["$q", "$http", "$timeout", "Banner", "ResourceUtility", function ($q, $http, $timeout, Banner, ResourceUtility) {
    var CHECK_SYSTEM_STATUS_TIMEOUT = 2000;

    this.checkSystemStatus = function () {
        var deferred = $q.defer();
        var cancelled = false;

        var http = $http({
            method: 'GET',
            url: '/pls/health/systemstatus',
            timeout: $timeout(function () {
                deferred.resolve();
                cancelled = true;
            }, CHECK_SYSTEM_STATUS_TIMEOUT)
        }).then(function (response) {
            if (response.data.status === 'OK') {
                deferred.resolve();
            } else {
                Banner.error({
                    message: response.data.message || ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                });

                deferred.reject();
            }
        }).catch(function () {
            if (cancelled) {
                return;
            }

            Banner.error({
                message: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            });

            deferred.reject();
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/AppCommon/services/ModelAlertsService.js":
/*!******************************************************!*\
  !*** ./app/AppCommon/services/ModelAlertsService.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.services.ModelAlertsService', ['mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.ResourceUtility']).service('ModelAlertsService', ["$filter", "StringUtility", "ResourceUtility", function ($filter, StringUtility, ResourceUtility) {

    this.GetWarnings = function (modelAlerts, suppressedCategories) {
        var warnings = {};
        warnings.noWarning = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_NO_WARNING");
        warnings.modelQualityWarningsTitle = ResourceUtility.getString('ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_TITLE');
        warnings.modelQualityWarningsLabel = ResourceUtility.getString('ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_LABEL');
        warnings.missingMetaDataWarningsTitle = ResourceUtility.getString('ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_TITLE');
        warnings.missingMetaDataWarningsLabel = ResourceUtility.getString('ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_LABEL');

        // Get model quality warnings
        var modelQualityWarnings = [];
        var modelQualityWarningsObj = modelAlerts.ModelQualityWarnings;
        if (modelQualityWarningsObj != null) {
            addSuccessEventsWarning(modelQualityWarnings, modelQualityWarningsObj);
            addConversionRateWarning(modelQualityWarnings, modelQualityWarningsObj);
            addOutOfRangeRocScoreWarning(modelQualityWarnings, modelQualityWarningsObj);
            addExcessiveDiscreteValuesAttributesWarning(modelQualityWarnings, modelQualityWarningsObj);
            addExcessivePredictiveAttributesWarning(modelQualityWarnings, modelQualityWarningsObj);
            addExcessivePredictiveNullValuesAttributesWarning(modelQualityWarnings, modelQualityWarningsObj);
        }
        warnings.noModelQualityWarnings = modelQualityWarnings.length === 0;
        warnings.modelQualityWarnings = modelQualityWarnings;

        // Get missing meta-data warnings
        var missingMetaDataWarnings = [];
        var missingMetaDataWarningsObj = modelAlerts.MissingMetaDataWarnings;
        if (missingMetaDataWarningsObj != null) {
            addInvalidApprovedUsageAttributesWarning(missingMetaDataWarnings, missingMetaDataWarningsObj);
            addInvalidTagsAttributesWarning(missingMetaDataWarnings, missingMetaDataWarningsObj);
            addInvalidCategoryAttributesWarning(missingMetaDataWarnings, missingMetaDataWarningsObj);
            addInvalidDisplayNameAttributesWarning(missingMetaDataWarnings, missingMetaDataWarningsObj);
            addInvalidStatisticalTypeAttributesWarning(missingMetaDataWarnings, missingMetaDataWarningsObj);
            addExcessiveCategoriesInModelSummaryWarning(missingMetaDataWarnings, suppressedCategories);
        }
        warnings.noMissingMetaDataWarnings = missingMetaDataWarnings.length === 0;
        warnings.missingMetaDataWarnings = missingMetaDataWarnings;

        return warnings;
    };

    function addSuccessEventsWarning(warnings, modelQualityWarnings) {
        var successEvents = modelQualityWarnings.LowSuccessEvents;
        var minValue = modelQualityWarnings.MinSuccessEvents;
        if (successEvents != null && minValue != null) {
            var warning = {};
            successEvents = $filter('number')(successEvents, 0); // Add comma per 3 digits
            minValue = $filter('number')(minValue, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_SUCCESS_EVENTS_TOO_LOWER_TITLE", [successEvents, minValue]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ADJUST_FILTERS_EVENT_DEFINITION");
            warning.successEvents = successEvents; // For unit test
            warning.minValue = minValue;
            warnings.push(warning);
        }
    }

    function addConversionRateWarning(warnings, modelQualityWarnings) {
        var conversionPercentage = modelQualityWarnings.LowConversionPercentage;
        var minValue = modelQualityWarnings.MinConversionPercentage;
        if (conversionPercentage != null && minValue != null) {
            var warning = {};
            conversionPercentage = $filter('number')(conversionPercentage, 1);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_CONVERSION_RATE_TOO_LOWER_TITLE", [conversionPercentage, minValue]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ADJUST_FILTERS_EVENT_DEFINITION");
            warning.conversionPercentage = conversionPercentage;
            warning.minValue = minValue;
            warnings.push(warning);
        }
    }

    function addOutOfRangeRocScoreWarning(warnings, modelQualityWarnings) {
        var rocScore = modelQualityWarnings.OutOfRangeRocScore;
        var minValue = modelQualityWarnings.MinRocScore;
        var maxValue = modelQualityWarnings.MaxRocScore;
        if (rocScore != null && minValue != null && maxValue != null) {
            var warning = {};
            rocScore = $filter('number')(rocScore, 2);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ROC_SCORE_OUTSIDE_CREDIBLE_RANGE", [rocScore, minValue, maxValue]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ADJUST_FILTERS_EVENT_DEFINITION");
            warning.rocScore = rocScore;
            warning.minValue = minValue;
            warning.maxValue = maxValue;
            warnings.push(warning);
        }
    }

    function addExcessiveDiscreteValuesAttributesWarning(warnings, modelQualityWarnings) {
        var attributes = modelQualityWarnings.ExcessiveDiscreteValuesAttributes;
        var maxValue = modelQualityWarnings.MaxNumberOfDiscreteValues;
        if (attributes != null && attributes.length > 0 && maxValue != null) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            maxValue = $filter('number')(maxValue, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ATTRIBUTES_OVERLY_DISCRETE_VALUES_TITLE", [count, maxValue]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ATTRIBUTES_REMOVED_FROM_MODELING");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinStringList(attributes, 0);
            warning.count = count;
            warning.maxValue = maxValue;
            warnings.push(warning);
        }
    }

    function addExcessivePredictiveAttributesWarning(warnings, modelQualityWarnings) {
        var attributes = modelQualityWarnings.ExcessivePredictiveAttributes;
        var maxValue = modelQualityWarnings.MaxFeatureImportance;
        if (attributes != null && attributes.length > 0 && maxValue != null) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ATTRIBUTES_OVERLY_PREDICTIVE_TITLE", [count, maxValue]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ATTRIBUTES_CONTAIN_FUTURE_INFORMATION_REQUIRE_EM_JSUTIFICATION_VALID_PREDICTOR");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinMapList(attributes, 1);
            warning.count = count;
            warning.maxValue = maxValue;
            warnings.push(warning);
        }
    }

    function addExcessivePredictiveNullValuesAttributesWarning(warnings, modelQualityWarnings) {
        var attributes = modelQualityWarnings.ExcessivePredictiveNullValuesAttributes;
        var maxValue = modelQualityWarnings.MaxLiftForNull;
        if (attributes != null && attributes.length > 0 && maxValue != null) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ATTRIBUTES_HIGHLY_PREDICTIVE_NULL_VALUES", [count, maxValue]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MODEL_QUALITY_ATTRIBUTES_CONFIRM_ABSENCE_DATA_HAS_BUSINESS_MEANING");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinMapList(attributes, 1);
            warning.count = count;
            warning.maxValue = maxValue;
            warnings.push(warning);
        }
    }

    function addInvalidApprovedUsageAttributesWarning(warnings, missingMetaDataWarnings) {
        var attributes = missingMetaDataWarnings.InvalidApprovedUsageAttributes;
        if (attributes != null && attributes.length > 0) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_INVALID_APPROVED_USAGE", [count]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_SUPPRESSED_FROM_TOP_PREDICTORS_UI_CSV_BUYER_INSIGHTS");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinStringList(attributes);
            warning.count = count;
            warnings.push(warning);
        }
    }

    function addInvalidTagsAttributesWarning(warnings, missingMetaDataWarnings) {
        var attributes = missingMetaDataWarnings.InvalidTagsAttributes;
        if (attributes != null && attributes.length > 0) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_INVALID_TAGS", [count]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_SUPPRESSED_FROM_TOP_PREDICTORS_UI_CSV_BUYER_INSIGHTS");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinStringList(attributes);
            warning.count = count;
            warnings.push(warning);
        }
    }

    function addInvalidCategoryAttributesWarning(warnings, missingMetaDataWarnings) {
        var attributes = missingMetaDataWarnings.InvalidCategoryAttributes;
        if (attributes != null && attributes.length > 0) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_INVALID_CATEGORY", [count]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_SUPPRESSED_FROM_TOP_PREDICTORS_UI_CSV_BUYER_INSIGHTS");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinStringList(attributes);
            warning.count = count;
            warnings.push(warning);
        }
    }

    function addInvalidDisplayNameAttributesWarning(warnings, missingMetaDataWarnings) {
        var attributes = missingMetaDataWarnings.InvalidDisplayNameAttributes;
        if (attributes != null && attributes.length > 0) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_INVALID_DISPLAY_NAME", [count]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_SUPPRESSED_FROM_TOP_PREDICTORS_UI_CSV_BUYER_INSIGHTS");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinStringList(attributes);
            warning.count = count;
            warnings.push(warning);
        }
    }

    function addInvalidStatisticalTypeAttributesWarning(warnings, missingMetaDataWarnings) {
        var attributes = missingMetaDataWarnings.InvalidStatisticalTypeAttributes;
        if (attributes != null && attributes.length > 0) {
            var warning = {};
            var count = $filter('number')(attributes.length, 0);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_INVALID_STATISTICAL_TYPE", [count]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_ATTRIBUTES_BUCKETED_INCORRECTLY_IN_TOP_PREDICTORS_UI_CSV_BUYER_INSIGHTS");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_ATTRIBUTES");
            warning.impactedContent = joinStringList(attributes);
            warning.count = count;
            warnings.push(warning);
        }
    }

    function addExcessiveCategoriesInModelSummaryWarning(warnings, suppressedCategories) {
        var categories = suppressedCategories;
        //  We currently only show top 8 categories in the UI
        if (categories != null && categories.length > 0) {
            var warning = {};
            var count = $filter('number')(categories.length + 8, 0);
            var maxValue = 8;
            var categoryNames = getCategoryNames(categories);
            warning.title = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_MODEL_SUMMARY_CONTAINS_OVERLY_CATEFORIES", [count, maxValue]);
            warning.description = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_MISSING_META_DATA_TWO_CATEFORIES_AND_ATTRIBUTES_SUPPRESSED_FROM_TOP_PREDICTORS_UI");
            warning.impactedLabel = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_IMPACTED_CATEGORIES");
            warning.impactedContent = joinStringList(categoryNames);
            warning.count = count;
            warning.maxValue = maxValue;
            warnings.push(warning);
        }
    }

    function getCategoryNames(categories) {
        var categoryNames = [];
        if (categories == null) {
            return categoryNames;
        }
        for (var i = 0; i < categories.length; i++) {
            var category = categories[i];
            categoryNames.push(category.name);
        }
        return categoryNames;
    }

    function joinMapList(elements, fractionSize) {
        var content = "";
        var length = elements.length;
        for (var i = 0; i < length; i++) {
            var element = elements[i];
            var value = fractionSize != null ? $filter('number')(element.value, fractionSize) : element.value;
            content += element.key + " (" + value + ")";
            if (i + 1 < length) {
                content += ", ";
            }
        }

        return content;
    }

    function joinStringList(elements) {
        var content = "";
        var length = elements.length;
        for (var i = 0; i < length; i++) {
            content += elements[i];
            if (i + 1 < length) {
                content += ", ";
            }
        }

        return content;
    }
}]);

/***/ }),

/***/ "./app/AppCommon/services/ModelSummaryValidationService.js":
/*!*****************************************************************!*\
  !*** ./app/AppCommon/services/ModelSummaryValidationService.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.services.ModelSummaryValidationService', ['mainApp.appCommon.utilities.ResourceUtility']).service('ModelSummaryValidationService', ["ResourceUtility", function (ResourceUtility) {

    this.ValidateModelSummary = function (modelSummary) {
        var i,
            errors = [];

        if (!modelSummary) {
            errors.push(ResourceUtility.getString("VALIDATION_ERROR_MODEL_SUMMARY_MISSING"));
            return errors;
        }

        try {
            //Segmentations
            var segmentationErrors = ValidateSegmentations(modelSummary);
            if (segmentationErrors.length > 0) PushErrors(errors, segmentationErrors);

            //Predictors
            var predictorErrors = ValidatePredictors(modelSummary);
            if (predictorErrors.length > 0) PushErrors(errors, predictorErrors);

            //ModelDetails
            var detailErrors = ValidateModelDetails(modelSummary);
            if (detailErrors.length > 0) PushErrors(errors, detailErrors);

            //TopSample
            var topSampleErrors = ValidateTopSample(modelSummary);
            if (topSampleErrors.length > 0) PushErrors(errors, topSampleErrors);

            //BottomSample
            var bottomSampleErrors = ValidateBottomSample(modelSummary);
            if (bottomSampleErrors.length > 0) PushErrors(errors, bottomSampleErrors);

            //EventTableProvenance (Skip)
        } catch (exc) {
            errors.push(exc.message);
        }

        return errors;
    };

    function PushErrors(errors, newErrors) {
        for (var i = 0; i < newErrors.length; i++) {
            errors.push(newErrors[i]);
        }
    }

    function PushError(errors, key) {
        errors.push(ResourceUtility.getString(key));
    }

    function PushErrorWithOffset(errors, key, i) {
        errors.push(ResourceUtility.getString(key) + ErrorOffset(i));
    }

    function PushErrorWithOffsets(errors, key, i, j) {
        errors.push(ResourceUtility.getString(key) + ErrorOffsets(i, j));
    }

    function ErrorOffset(i) {
        return " [i = " + i + "]";
    }

    function ErrorOffsets(i, j) {
        return " [i = " + i + "]" + " [j = " + j + "]";
    }

    //==================================================
    // Segmentations
    //==================================================
    function ValidateSegmentations(modelSummary) {
        var i,
            segment,
            errors = [];

        if (!modelSummary.hasOwnProperty("Segmentations")) {
            PushError(errors, "VALIDATION_ERROR_SEGMENTATIONS_MISSING");
        } else if (!Array.isArray(modelSummary.Segmentations) || modelSummary.Segmentations.length != 1) {
            PushError(errors, "VALIDATION_ERROR_SEGMENTATIONS_UNEXPECTED");
        } else {
            var segmentation = modelSummary.Segmentations[0];

            //LeadSource (Skip)

            //Segments
            if (!segmentation.hasOwnProperty("Segments")) {
                PushError(errors, "VALIDATION_ERROR_SEGMENTS_MISSING");
            } else if (!Array.isArray(segmentation.Segments) || segmentation.Segments.length != 100) {
                PushError(errors, "VALIDATION_ERROR_SEGMENTS_UNEXPECTED");
            } else {
                for (i = 0; i < 100; i++) {
                    segment = segmentation.Segments[i];

                    //Score
                    if (!segment.hasOwnProperty("Score")) PushErrorWithOffset(errors, "VALIDATION_ERROR_SEGMENT_SCORE_MISSING", i);else if (segment.Score != parseInt(segment.Score)) PushErrorWithOffset(errors, "VALIDATION_ERROR_SEGMENT_SCORE_INVALID", i);

                    //Count
                    if (!segment.hasOwnProperty("Count")) PushErrorWithOffset(errors, "VALIDATION_ERROR_SEGMENT_COUNT_MISSING", i);else if (segment.Count != parseInt(segment.Count)) PushErrorWithOffset(errors, "VALIDATION_ERROR_SEGMENT_COUNT_INVALID", i);

                    //Converted
                    if (!segment.hasOwnProperty("Converted")) PushErrorWithOffset(errors, "VALIDATION_ERROR_SEGMENT_CONVERTED_MISSING", i);else if (segment.Converted != parseInt(segment.Converted)) PushErrorWithOffset(errors, "VALIDATION_ERROR_SEGMENT_CONVERTED_INVALID", i);
                }
            }
        }

        return errors;
    }

    //==================================================
    // Predictors
    //==================================================
    function ValidatePredictors(modelSummary) {
        var i,
            j,
            predictor,
            errors = [];

        if (!modelSummary.hasOwnProperty("Predictors")) {
            PushError(errors, "VALIDATION_ERROR_PREDICTORS_MISSING");
        } else {
            var predictors = modelSummary.Predictors;
            if (!Array.isArray(predictors)) {
                PushError(errors, "VALIDATION_ERROR_PREDICTORS_UNEXPECTED");
            } else {
                for (i = 0; i < predictors.length; i++) {
                    predictor = predictors[i];

                    //Name
                    if (!predictor.hasOwnProperty("Name")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_NAME_MISSING", i);

                    //Tags
                    if (!predictor.hasOwnProperty("Tags")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_TAGS_MISSING", i);else if (predictor.Tags != null && !Array.isArray(predictor.Tags)) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_TAGS_UNEXPECTED", i);

                    //DataType
                    if (!predictor.hasOwnProperty("DataType")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_DATA_TYPE_MISSING", i);

                    //DisplayName
                    if (!predictor.hasOwnProperty("DisplayName")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_DISPLAY_NAME_MISSING", i);

                    //Description
                    if (!predictor.hasOwnProperty("Description")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_DESCRIPTION_MISSING", i);

                    //ApprovedUsage
                    if (!predictor.hasOwnProperty("ApprovedUsage")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_APPROVED_USAGE_MISSING", i);else if (predictor.ApprovedUsage != null && !Array.isArray(predictor.ApprovedUsage)) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_APPROVED_USAGE_UNEXPECTED", i);

                    //FundamentalType
                    if (!predictor.hasOwnProperty("FundamentalType")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_FUNDAMENTAL_TYPE_MISSING", i);

                    //Category
                    if (!predictor.hasOwnProperty("Category")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_CATEGORY_MISSING", i);

                    //UncertaintyCoefficient
                    if (!predictor.hasOwnProperty("UncertaintyCoefficient")) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_UNCERTAINTY_COEFFICIENT_MISSING", i);else if (predictor.UncertaintyCoefficient != parseFloat(predictor.UncertaintyCoefficient)) PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_UNCERTAINTY_COEFFICIENT_INVALID", i);

                    //Elements
                    if (!predictor.hasOwnProperty("Elements")) {
                        PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENTS_MISSING", i);
                    } else if (!Array.isArray(predictor.Elements)) {
                        PushErrorWithOffset(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENTS_UNEXPECTED", i);
                    } else {
                        for (j = 0; j < predictor.Elements.length; j++) {
                            var element = predictor.Elements[j];

                            //CorrelationSign
                            if (!element.hasOwnProperty("CorrelationSign")) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_CORRELATION_SIGN_MISSING", i, j);else if (!(element.CorrelationSign === -1 || element.CorrelationSign === 1)) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_CORRELATION_SIGN_INVALID", i, j);

                            //Count
                            if (!element.hasOwnProperty("Count")) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_COUNT_MISSING", i, j);else if (element.Count != parseInt(element.Count)) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_COUNT_INVALID", i, j);

                            //Lift
                            if (!element.hasOwnProperty("Lift")) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_LIFT_MISSING", i, j);else if (element.Lift != parseFloat(element.Lift)) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_LIFT_INVALID", i, j);

                            //LowerInclusive
                            if (element.hasOwnProperty("LowerInclusive") && element.LowerInclusive != null && element.LowerInclusive != parseFloat(element.LowerInclusive)) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_LOWER_INCLUSIVE_INVALID", i, j);

                            //UpperExclusive
                            if (element.hasOwnProperty("UpperExclusive") && element.UpperExclusive != null && element.UpperExclusive != parseFloat(element.UpperExclusive)) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_UPPER_EXCLUSIVE_INVALID", i, j);

                            //Name
                            if (!element.hasOwnProperty("Name")) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_NAME_MISSING", i, j);

                            //UncertaintyCoefficient
                            if (!element.hasOwnProperty("UncertaintyCoefficient")) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_UNCERTAINTY_COEFFICIENT_MISSING", i, j);else if (element.UncertaintyCoefficient != parseFloat(element.UncertaintyCoefficient)) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_UNCERTAINTY_COEFFICIENT_INVALID", i, j);

                            //Values
                            if (!element.hasOwnProperty("Values")) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_VALUES_MISSING", i, j);else if (!Array.isArray(element.Values)) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_VALUES_UNEXPECTED", i, j);

                            //IsVisible
                            if (!element.hasOwnProperty("IsVisible")) PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_IS_VISIBLE_MISSING", i, j);else if (typeof element.IsVisible != "boolean") PushErrorWithOffsets(errors, "VALIDATION_ERROR_PREDICTOR_ELEMENT_IS_VISIBLE_INVALID", i, j);
                        }
                    }
                }
            }
        }

        return errors;
    }

    //==================================================
    // ModelDetails
    //==================================================
    function ValidateModelDetails(modelSummary) {
        var errors = [];

        if (!modelSummary.hasOwnProperty("ModelDetails")) {
            PushError(errors, "VALIDATION_ERROR_MODEL_DETAILS_MISSING");
        } else {
            var details = modelSummary.ModelDetails;

            //Name
            if (!details.hasOwnProperty("Name")) PushError(errors, "VALIDATION_ERROR_MODEL_NAME_MISSING");

            //LookupID (Skip)

            //Total Leads
            if (!details.hasOwnProperty("TotalLeads")) PushError(errors, "VALIDATION_ERROR_TOTAL_LEADS_MISSING");else if (details.TotalLeads != parseInt(details.TotalLeads)) PushError(errors, "VALIDATION_ERROR_TOTAL_LEADS_INVALID");

            //Testing Leads
            if (!details.hasOwnProperty("TestingLeads")) PushError(errors, "VALIDATION_ERROR_TESTING_LEADS_MISSING");else if (details.TestingLeads != parseInt(details.TestingLeads)) PushError(errors, "VALIDATION_ERROR_TESTING_LEADS_INVALID");

            //Training Leads
            if (!details.hasOwnProperty("TrainingLeads")) PushError(errors, "VALIDATION_ERROR_TRAINING_LEADS_MISSING");else if (details.TrainingLeads != parseInt(details.TrainingLeads)) PushError(errors, "VALIDATION_ERROR_TRAINING_LEADS_INVALID");

            //Total Conversions
            if (!details.hasOwnProperty("TotalConversions")) PushError(errors, "VALIDATION_ERROR_TOTAL_CONVERSIONS_MISSING");else if (details.TotalConversions != parseInt(details.TotalConversions)) PushError(errors, "VALIDATION_ERROR_TOTAL_CONVERSIONS_INVALID");

            //Testing Conversions
            if (!details.hasOwnProperty("TestingConversions")) PushError(errors, "VALIDATION_ERROR_TESTING_CONVERSIONS_MISSING");else if (details.TestingConversions != parseInt(details.TestingConversions)) PushError(errors, "VALIDATION_ERROR_TESTING_CONVERSIONS_INVALID");

            //Training Conversions
            if (!details.hasOwnProperty("TrainingConversions")) PushError(errors, "VALIDATION_ERROR_TRAINING_CONVERSIONS_MISSING");else if (details.TrainingConversions != parseInt(details.TrainingConversions)) PushError(errors, "VALIDATION_ERROR_TRAINING_CONVERSIONS_INVALID");

            //ROC Score
            if (!details.hasOwnProperty("RocScore")) PushError(errors, "VALIDATION_ERROR_ROC_SCORE_MISSING");else if (details.RocScore != parseFloat(details.RocScore)) PushError(errors, "VALIDATION_ERROR_ROC_SCORE_INVALID");

            //Construction Time
            if (!details.hasOwnProperty("ConstructionTime")) PushError(errors, "VALIDATION_ERROR_CONSTRUCTION_TIME_MISSING");else if (details.ConstructionTime != parseInt(details.ConstructionTime)) PushError(errors, "VALIDATION_ERROR_CONSTRUCTION_TIME_INVALID");
        }

        return errors;
    }

    //==================================================
    // TopSample
    //==================================================
    function ValidateTopSample(modelSummary) {
        var i,
            errors = [];

        if (!modelSummary.hasOwnProperty("TopSample")) {
            PushError(errors, "VALIDATION_ERROR_TOP_SAMPLE_MISSING");
        } else {
            var topSample = modelSummary.TopSample;
            if (!Array.isArray(topSample)) {
                PushError(errors, "VALIDATION_ERROR_TOP_SAMPLE_UNEXPECTED");
            } else {
                for (i = 0; i < topSample.length; i++) {
                    sample = topSample[i];

                    //Company
                    if (!sample.hasOwnProperty("Company")) PushErrorWithOffset(errors, "VALIDATION_ERROR_TOP_SAMPLE_COMPANY_MISSING", i);

                    //FirstName
                    if (!sample.hasOwnProperty("FirstName")) PushErrorWithOffset(errors, "VALIDATION_ERROR_TOP_SAMPLE_FIRST_NAME_MISSING", i);

                    //LastName
                    if (!sample.hasOwnProperty("LastName")) PushErrorWithOffset(errors, "VALIDATION_ERROR_TOP_SAMPLE_LAST_NAME_MISSING", i);

                    //Converted
                    if (!sample.hasOwnProperty("Converted")) PushErrorWithOffset(errors, "VALIDATION_ERROR_TOP_SAMPLE_CONVERTED_MISSING", i);else if (typeof sample.Converted != "boolean") PushErrorWithOffset(errors, "VALIDATION_ERROR_TOP_SAMPLE_CONVERTED_INVALID", i);

                    //Score
                    if (!sample.hasOwnProperty("Score")) PushErrorWithOffset(errors, "VALIDATION_ERROR_TOP_SAMPLE_SCORE_MISSING", i);else if (sample.Score != parseInt(sample.Score)) PushErrorWithOffset(errors, "VALIDATION_ERROR_TOP_SAMPLE_SCORE_INVALID", i);
                }
            }
        }

        return errors;
    }

    //==================================================
    // BottomSample
    //==================================================
    function ValidateBottomSample(modelSummary) {
        var i,
            errors = [];

        if (!modelSummary.hasOwnProperty("BottomSample")) {
            PushError(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_MISSING");
        } else {
            var bottomSample = modelSummary.BottomSample;
            if (!Array.isArray(bottomSample)) {
                PushError(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_UNEXPECTED");
            } else {
                for (i = 0; i < bottomSample.length; i++) {
                    sample = bottomSample[i];

                    //Company
                    if (!sample.hasOwnProperty("Company")) PushErrorWithOffset(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_COMPANY_MISSING", i);

                    //FirstName
                    if (!sample.hasOwnProperty("FirstName")) PushErrorWithOffset(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_FIRST_NAME_MISSING", i);

                    //LastName
                    if (!sample.hasOwnProperty("LastName")) PushErrorWithOffset(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_LAST_NAME_MISSING", i);

                    //Converted
                    if (!sample.hasOwnProperty("Converted")) PushErrorWithOffset(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_CONVERTED_MISSING", i);else if (typeof sample.Converted != "boolean") PushErrorWithOffset(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_CONVERTED_INVALID", i);

                    //Score
                    if (!sample.hasOwnProperty("Score")) PushErrorWithOffset(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_SCORE_MISSING", i);else if (sample.Score != parseInt(sample.Score)) PushErrorWithOffset(errors, "VALIDATION_ERROR_BOTTOM_SAMPLE_SCORE_INVALID", i);
                }
            }
        }

        return errors;
    }
}]);

/***/ }),

/***/ "./app/AppCommon/services/ThresholdExplorerService.js":
/*!************************************************************!*\
  !*** ./app/AppCommon/services/ThresholdExplorerService.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.services.ThresholdExplorerService', ['mainApp.appCommon.utilities.ResourceUtility']).service('ThresholdExplorerService', ["ResourceUtility", function (ResourceUtility) {

    this.PrepareData = function (modelSummary) {

        if (modelSummary == null || modelSummary.ModelDetails == null || modelSummary.Segmentations == null) {
            return { "ChartData": [], "DecileData": [] };
        }

        var chartData = this.GetChartData(modelSummary);
        var decileData = this.GetDecileData(chartData);
        var liftData = this.GetLiftData(chartData);

        return { ChartData: chartData, DecileData: decileData, LiftData: liftData };
    };

    this.GetChartData = function (modelSummary) {
        var conversion;
        var i;
        //==================================================
        // Prepare
        //==================================================
        var totalLeads = modelSummary.ModelDetails.TestingLeads;
        var totalConversions = modelSummary.ModelDetails.TestingConversions;
        var avgConversion = totalConversions / totalLeads;

        var segments = modelSummary.Segmentations[0].Segments;

        var percentLeads = [];for (i = 0; i < 101; i++) {
            percentLeads.push(i);
        }var cumConversions = [];cumConversions.push(0);
        var cumCount = [];cumCount.push(0);
        for (i = 1; i < 101; i++) {
            cumConversions.push(cumConversions[i - 1] + segments[i - 1].Converted);
            cumCount.push(cumCount[i - 1] + segments[i - 1].Count);
        }

        var cumPctConversions = [];cumPctConversions.push(0);
        for (i = 1; i < 101; i++) {
            cumPctConversions.push(100 * (cumConversions[i] / totalConversions));
        }

        var leftLift = [];leftLift.push(0);
        for (i = 1; i < 101; i++) {
            conversion = cumConversions[i] / cumCount[i];
            leftLift.push(conversion / avgConversion);
        }

        var rightLift = [];
        for (i = 0; i < 100; i++) {
            conversion = (totalConversions - cumConversions[i]) / (totalLeads - cumCount[i]);
            rightLift.push(conversion / avgConversion);
        }
        rightLift.push(0);

        var score = [];score.push(0);
        for (i = 100; i > 0; i--) {
            score.push(i);
        }

        //==================================================
        // Load
        //==================================================
        var data = [];
        for (i = 0; i < 101; i++) {
            data.push({
                "leads": percentLeads[i],
                "score": score[i],
                "conversions": cumPctConversions[i],
                "leftLift": leftLift[i],
                "rightLift": rightLift[i] });
        }

        return data;
    };

    this.GetDecileData = function (chartData) {
        var result = [];
        for (var i = 1; i < 11; i++) {
            result.push(chartData[i * 10].conversions);
        }

        return result;
    };

    this.GetLiftData = function (chartData) {
        var result = [];
        for (var i = 1; i < 11; i++) {
            var bucket_conversion = chartData[i * 10].conversions - chartData[(i - 1) * 10].conversions;
            result.push(bucket_conversion / 10.0);
        }
        return result;
    };

    this.PrepareExportData = function (modelSummary) {
        var result = [];

        var chartData = modelSummary.hasOwnProperty("ThresholdChartData") ? modelSummary.ThresholdChartData : this.GetChartData(modelSummary);

        var segments = modelSummary.Segmentations[0].Segments;

        var columns = [ResourceUtility.getString("MODEL_ADMIN_THRESHOLD_EXPORT_SCORE_LABEL"), ResourceUtility.getString("MODEL_ADMIN_THRESHOLD_EXPORT_LEADS_LABEL"), ResourceUtility.getString("MODEL_ADMIN_THRESHOLD_EXPORT_CONVERSIONS_LABEL"), ResourceUtility.getString("MODEL_ADMIN_THRESHOLD_EXPORT_LEFT_LIFT_LABEL"), ResourceUtility.getString("MODEL_ADMIN_THRESHOLD_EXPORT_RIGHT_LIFT_LABEL"), ResourceUtility.getString("MODEL_ADMIN_THRESHOLD_EXPORT_COUNT_LABEL"), ResourceUtility.getString("MODEL_ADMIN_THRESHOLD_EXPORT_CONVERTED_LABEL")];
        result.push(columns);

        for (var i = 1; i < 101; i++) {
            var row = [];
            row.push(chartData[i].score);
            row.push(chartData[i].leads + "%");
            row.push(chartData[i].conversions.toFixed(0) + "%");
            row.push(chartData[i].leftLift.toFixed(2));
            row.push(chartData[i].rightLift.toFixed(2));
            row.push(segments[i - 1].Count);
            row.push(segments[i - 1].Converted);
            result.push(row);
        }

        return result;
    };
}]);

/***/ }),

/***/ "./app/AppCommon/services/TopPredictorService.js":
/*!*******************************************************!*\
  !*** ./app/AppCommon/services/TopPredictorService.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.services.TopPredictorService', ['mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.AnalyticAttributeUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.UnderscoreUtility']).service('TopPredictorService', ["_", "StringUtility", "AnalyticAttributeUtility", "ResourceUtility", function (_, StringUtility, AnalyticAttributeUtility, ResourceUtility) {

    var MISC_BUCKET_NAME = 'Other, Less Popular',
        NULL_BUCKET_NAME = 'Not Populated';

    this.GetSuppressedCategories = function (modelSummary) {
        var categories = this.GetAllCategories(modelSummary);
        return this.SelectSuppressedCategories(modelSummary, categories);
    };

    this.GetTopCategories = function (modelSummary) {
        var categories = this.GetAllCategories(modelSummary);
        return this.SelectTopCategories(modelSummary, categories);
    };

    this.GetAllCategories = function (modelSummary) {
        if (modelSummary == null || modelSummary.Predictors == null || modelSummary.Predictors.length === 0) {
            return null;
        }

        // First sort all predictors by UncertaintyCoefficient
        modelSummary.Predictors = modelSummary.Predictors.sort(this.SortByPredictivePower);

        var categories = [];
        var categoryNames = [];
        var category;
        for (var i = 0; i < modelSummary.Predictors.length; i++) {
            var predictor = modelSummary.Predictors[i];
            if (AnalyticAttributeUtility.IsAllowedForInsights(predictor) && this.PredictorHasValidBuckets(predictor, modelSummary.ModelDetails.TotalLeads) && !StringUtility.IsEmptyString(predictor.Category) && categoryNames.indexOf(predictor.Category) === -1) {
                categoryNames.push(predictor.Category);
                category = {
                    name: predictor.Category,
                    categoryName: predictor.Category,
                    UncertaintyCoefficient: predictor.UncertaintyCoefficient,
                    size: 1, // This doesn't matter because the inner ring takes on the size of the outer
                    color: null,
                    children: []
                };
                categories.push(category);
            }
        }
        return categories;
    };

    //=======================================================================
    // Top categories should be determined based on sum of predictive power
    // for top X attributes in a given category. Note: X is currently 3.
    //=======================================================================
    this.SelectTopCategories = function (modelSummary, categories) {
        var sortedCategories = this.SortCategoriesByPowerSumDescending(modelSummary, categories);
        var topCategories = sortedCategories;
        //Select Maximum of 8 Categories
        if (sortedCategories.length > 8) {
            topCategories = sortedCategories.slice(0, 8);
        }

        return topCategories;
    };

    this.SelectSuppressedCategories = function (modelSummary, categories) {
        var sortedCategories = this.SortCategoriesByPowerSumDescending(modelSummary, categories) || [];
        var suppressedCategories = null;
        //Select Categories Except for The Top 8
        if (sortedCategories.length > 8) {
            suppressedCategories = sortedCategories.slice(8, sortedCategories.length);
        }

        return suppressedCategories;
    };

    this.SortCategoriesByPowerSumDescending = function (modelSummary, categories) {
        if (categories == null) {
            return null;
        }

        //Introduce PowerSum
        var category, attributes;
        for (var i = 0; i < categories.length; i++) {
            category = categories[i];
            attributes = this.GetAttributesByCategory(modelSummary, category.name, category.color, 3);
            category.PowerSum = _.reduce(attributes, function (acc, e) {
                return acc + e.power;
            }, 0);
        }

        //Sort Descending and Remove PowerSum
        categories = _.sortBy(categories, function (e) {
            return -e.PowerSum;
        });
        _.each(categories, function (e) {
            delete e.PowerSum;
        });
        return categories;
    };

    this.PredictorHasValidBuckets = function (predictor, totalLeads) {
        if (predictor == null || totalLeads == null) {
            return false;
        }

        var toReturn = true;
        for (var y = 0; y < predictor.Elements.length; y++) {
            var element = predictor.Elements[y];
            var attributeValue = AnalyticAttributeUtility.GetAttributeBucketName(element, predictor);
            var percentTotal = (element.Count / totalLeads * 100).toFixed(0);
            if (attributeValue != null && (attributeValue.toUpperCase() == "NULL" || attributeValue.toUpperCase() == "NOT AVAILABLE" || attributeValue === "") && percentTotal >= 99.5) {
                toReturn = false;
                break;
            }
        }

        return toReturn;
    };

    this.GetAttributesByCategory = function (modelSummary, categoryName, categoryColor, maxNumber) {
        if (StringUtility.IsEmptyString(categoryName) || modelSummary.Predictors == null || maxNumber == null) {
            return [];
        }

        var totalPredictors = [];
        for (var i = 0; i < modelSummary.Predictors.length; i++) {
            if (categoryName == modelSummary.Predictors[i].Category) {
                totalPredictors.push(modelSummary.Predictors[i]);
            }
        }
        totalPredictors = totalPredictors.sort(this.SortByPredictivePower);

        var toReturn = [];
        for (var x = 0; x < totalPredictors.length; x++) {
            if (toReturn.length == maxNumber) {
                break;
            }
            var predictor = totalPredictors[x];
            if (AnalyticAttributeUtility.IsAllowedForInsights(predictor) && this.PredictorHasValidBuckets(predictor, modelSummary.ModelDetails.TotalLeads) && (this.ShowBasedOnInternalOrExternal(predictor, true) || this.ShowBasedOnInternalOrExternal(predictor, false))) {

                var displayPredictor = {
                    name: predictor.Name,
                    categoryName: categoryName,
                    power: predictor.UncertaintyCoefficient,
                    size: 1,
                    color: categoryColor
                };
                toReturn.push(displayPredictor);
            }
        }
        return toReturn;
    };

    this.ShowBasedOnInternalOrExternal = function (predictor, isExternal) {
        var toReturn = false;
        if (predictor != null) {
            var tag = isExternal ? "External" : "Internal";

            // DP-1883
            if (predictor.Category === "Lead Information" || predictor.Category === "Marketing Activity" || predictor.Category === "Account Information") {
                if (isExternal) {
                    return false;
                } else {
                    tag = "Internal";
                }
            }

            if (predictor.Tags == null) {
                if (tag == "Internal") {
                    return true;
                }
                return false;
            }

            for (var x = 0; x < predictor.Tags.length; x++) {
                if (tag == predictor.Tags[x]) {
                    toReturn = true;
                    break;
                }
            }
        }

        return toReturn;
    };

    this.GetNumberOfAttributesByCategory = function (categoryList, isExternal, modelSummary) {
        var toReturn = {
            totalAttributeValues: 0,
            total: 0,
            categories: []
        };
        if (categoryList == null || isExternal == null || modelSummary.Predictors == null) {
            return toReturn;
        }
        for (var x = 0; x < categoryList.length; x++) {
            var category = categoryList[x];
            var displayCategory = {
                name: category.name,
                count: 0,
                color: category.color,
                activeClass: ""
            };

            for (var i = 0; i < modelSummary.Predictors.length; i++) {
                var predictor = modelSummary.Predictors[i];

                if (predictor.Category == category.name && this.ShowBasedOnInternalOrExternal(predictor, isExternal) && AnalyticAttributeUtility.IsAllowedForInsights(predictor) && this.PredictorHasValidBuckets(predictor, modelSummary.ModelDetails.TotalLeads)) {
                    for (var y = 0; y < predictor.Elements.length; y++) {
                        var element = predictor.Elements[y];
                        var percentTotal = (element.Count / modelSummary.ModelDetails.TotalLeads * 100).toFixed(0);
                        var isCategorical = this.IsPredictorElementCategorical(element);
                        if (isCategorical && percentTotal < 1) {
                            continue;
                        }
                        toReturn.totalAttributeValues++;
                    }
                    displayCategory.count++;
                }
            }

            if (displayCategory.count > 0) {
                toReturn.categories.push(displayCategory);
                toReturn.total += displayCategory.count;
            }
        }

        return toReturn;
    };

    this.SortByCategoryName = function (a, b) {
        if (a.name.toUpperCase() < b.name.toUpperCase()) {
            return -1;
        }
        if (a.name.toUpperCase() > b.name.toUpperCase()) {
            return 1;
        }
        // a must be equal to b
        return 0;
    };

    this.SortBySize = function (a, b) {
        if (a.size > b.size) {
            return -1;
        }
        if (a.size < b.size) {
            return 1;
        }
        // a must be equal to b
        return 0;
    };

    this.SortByPredictivePower = function (a, b) {
        if (a.UncertaintyCoefficient > b.UncertaintyCoefficient) {
            return -1;
        }
        if (a.UncertaintyCoefficient < b.UncertaintyCoefficient) {
            return 1;
        }
        // a must be equal to b
        return 0;
    };

    this.SortByLift = function (a, b) {
        if (a.Lift > b.Lift) {
            return -1;
        }
        if (a.Lift < b.Lift) {
            return 1;
        }
        // a must be equal to b
        return 0;
    };

    this.AssignColorsToCategories = function (categoryList) {
        if (categoryList == null || categoryList.length === 0) {
            return;
        }
        var possibleNumberofCategories = categoryList.length <= 8 ? categoryList.length : 8;
        var colorChoices = ["#4bd1bb", "#00a2d0", "#f6b300", "#a981e1", "#95cb2c", "#9a9a9a", "#3488d3", "#e55e1b"];
        categoryList = categoryList.sort(this.SortByCategoryName);
        var categoryColors = {
            'Firmographics': '#4bd1bb',
            'Intent': '#f15a5a',
            'Growth Trends': '#00a2d0',
            'Online Presence': '#a981e1',
            'Technology Profile': '#70bf4a',
            'Website Keywords': '#f6b300',
            'Website Profile': '#26649b'
        };
        for (var i = 0; i < possibleNumberofCategories; i++) {
            var categoryName = categoryList[i].categoryName,
                color = categoryColors[categoryName] || '#f966bf'; //colorChoices[i];
            categoryList[i].color = color;
        }
    };

    this.CalculateAttributeSize = function (attributeList, numLargeCategories, numMediumCategories) {
        if (attributeList == null || attributeList.length === 0) {
            return null;
        }

        if (numLargeCategories == null) {
            numLargeCategories = Math.round(attributeList.length * 0.16);
        }

        if (numMediumCategories == null) {
            numMediumCategories = Math.round(attributeList.length * 0.32);
        }

        for (var i = 0; i < attributeList.length; i++) {
            var attribute = attributeList[i];
            if (numLargeCategories > 0) {
                attribute.size = 6.55;
                numLargeCategories--;
            } else if (numMediumCategories > 0) {
                attribute.size = 2.56;
                numMediumCategories--;
            } else {
                attribute.size = 1;
            }
        }
    };

    this.IsPredictorElementCategorical = function (predictorElement) {
        if (predictorElement == null) {
            return false;
        }

        return predictorElement.LowerInclusive == null && predictorElement.UpperExclusive == null && predictorElement.Values != null && predictorElement.Values.length > 0 && predictorElement.Values[0] != null;
    };

    this.GetTopPredictorExport = function (modelSummary) {
        if (modelSummary == null || modelSummary.Predictors == null || modelSummary.Predictors.length === 0) {
            return null;
        }

        /*
         * Apparently, excel does not like UTF-8 characters. Handle the current offenders.
         *
         * See: http://i18nqa.com/debug/utf8-debug.html
         */
        function cleanupForExcel(text) {
            return text.replace('\u2019', "'").replace('\u201C', "\"").replace('\u201D', "\"");
        }

        var columns = [ResourceUtility.getString('TOP_PREDICTOR_EXPORT_CATEGORY_LABEL'), ResourceUtility.getString('TOP_PREDICTOR_EXPORT_ATTRIBUTE_NAME_LABEL'), ResourceUtility.getString('TOP_PREDICTOR_EXPORT_ATTRIBUTE_VALUE_LABEL'), ResourceUtility.getString('TOP_PREDICTOR_EXPORT_ATTRIBUTE_DESCRIPTION_LABEL'), ResourceUtility.getString('TOP_PREDICTOR_EXPORT_PERCENT_LEADS_LABEL'), ResourceUtility.getString('TOP_PREDICTOR_EXPORT_LIFT_LABEL'), ResourceUtility.getString('TOP_PREDICTOR_EXPORT_CONVERSION_RATE_LABEL'), ResourceUtility.getString('TOP_PREDICTOR_EXPORT_PREDICTIVE_POWER_LABEL')];
        var toReturn = [];
        toReturn.push(columns);
        var indexOfBucketName = 2;

        var totalPredictors = modelSummary.Predictors.sort(this.SortByPredictivePower);
        var averageConversionRate = modelSummary.ModelDetails.TestingConversions / modelSummary.ModelDetails.TestingLeads;

        for (var x = 0; x < totalPredictors.length; x++) {
            var predictor = totalPredictors[x];
            var isNumericRange = false;
            if (predictor.FundamentalType != null) {
                isNumericRange = predictor.FundamentalType.toUpperCase() === AnalyticAttributeUtility.FundamentalType.Numeric || predictor.FundamentalType.toUpperCase() === AnalyticAttributeUtility.FundamentalType.Currency;
            }
            var maxBucket = null;

            if (!StringUtility.IsEmptyString(predictor.Category) && (this.ShowBasedOnInternalOrExternal(predictor, true) || this.ShowBasedOnInternalOrExternal(predictor, false)) && AnalyticAttributeUtility.IsAllowedForInsights(predictor) && this.PredictorHasValidBuckets(predictor, modelSummary.ModelDetails.TotalLeads)) {
                for (var y = 0; y < predictor.Elements.length; y++) {
                    var element = predictor.Elements[y];
                    var percentTotal = (element.Count / modelSummary.ModelDetails.TotalLeads * 100).toFixed(0);

                    var isCategorical = this.IsPredictorElementCategorical(element);
                    if (isCategorical && percentTotal < 1) {
                        continue;
                    }
                    // percentTotal = percentTotal.toFixed(1);
                    var lift = element.Lift.toPrecision(2);
                    var conversionRate = (element.Lift * averageConversionRate).toFixed(2);
                    var description = cleanupForExcel(predictor.Description ? predictor.Description : "");
                    var attributeValue = AnalyticAttributeUtility.GetAttributeBucketName(element, predictor);

                    if (attributeValue.toUpperCase() == "NULL" || attributeValue.toUpperCase() == "NOT AVAILABLE") {
                        attributeValue = NULL_BUCKET_NAME;
                    }
                    //PLS-352
                    attributeValue = "'" + attributeValue + "'";
                    var predictivePower = (predictor.UncertaintyCoefficient * 100).toFixed(2);
                    var attributeRow = [predictor.Category, predictor.DisplayName, attributeValue, description, percentTotal, lift, conversionRate, predictivePower];
                    toReturn.push(attributeRow);

                    var foundMax = false;
                    if (isNumericRange && element.LowerInclusive !== null) {
                        if (maxBucket === null) {
                            maxBucket = {};
                        }

                        if (!maxBucket.hasOwnProperty('LowerInclusive') || element.LowerInclusive >= maxBucket.UpperExclusive) {
                            maxBucket.LowerInclusive = element.LowerInclusive;
                            maxBucket.UpperExclusive = element.UpperExclusive;
                            foundMax = true;
                        }
                    }

                    if (foundMax) {
                        maxBucket.indexOfMax = toReturn.length - 1;
                    }
                }

                if (maxBucket !== null) {
                    var row = toReturn[maxBucket.indexOfMax];
                    row[indexOfBucketName] = "'" + AnalyticAttributeUtility.GetAttributeBucketName({ LowerInclusive: maxBucket.LowerInclusive }, predictor) + "'";
                }
            }
        }

        return toReturn;
    };

    this.FormatDataForTopPredictorChart = function (modelSummary) {
        if (modelSummary == null || modelSummary.Predictors == null || modelSummary.Predictors.length === 0) {
            return null;
        }

        // Get all unique categories
        var topCategories = this.GetTopCategories(modelSummary);

        // Need to assign colors based on alphabetical name, which will change the sort
        this.AssignColorsToCategories(topCategories);

        // So we need to re-sort it by UncertaintyCoefficient after the color assignment
        topCategories = topCategories.sort(this.SortByPredictivePower);

        //And finally calculate the size based on predictive power
        var attributesPerCategory = 3;
        var numLargeCategories = Math.round(topCategories.length * attributesPerCategory * 0.16);
        var numMediumCategories = Math.round(topCategories.length * attributesPerCategory * 0.32);
        var totalAttributes = [];
        var category;
        for (var x = 0; x < topCategories.length; x++) {
            category = topCategories[x];
            category.children = this.GetAttributesByCategory(modelSummary, category.name, category.color, attributesPerCategory);
            for (var y = 0; y < category.children.length; y++) {
                totalAttributes.push(category.children[y]);
            }
        }

        this.CalculateAttributeSize(totalAttributes, numLargeCategories, numMediumCategories);

        // Then sort the categories by the total size of their top attributes
        topCategories = topCategories.sort(this.SortBySize);

        var toReturn = {
            name: "root",
            size: 1,
            color: "#FFFFFF",
            attributesPerCategory: attributesPerCategory,
            children: topCategories
        };

        return toReturn;
    };

    this.GetAttributeByName = function (attributeName, predictorList) {
        if (attributeName == null || predictorList == null) {
            return null;
        }
        for (var i = 0; i < predictorList.length; i++) {
            if (attributeName == predictorList[i].Name) {
                return predictorList[i];
            }
        }
        return null;
    };

    this.FormatSimpleBuckets = function (attributeName, attributeColor, modelSummary) {
        if (attributeName == null || modelSummary == null) {
            return null;
        }

        var predictor = this.GetAttributeByName(attributeName, modelSummary.Predictors);

        if (predictor == null) {
            return null;
        }

        var toReturn = {
            name: predictor.DisplayName,
            color: attributeColor,
            description: predictor.Description || "",
            elementList: []
        };

        var nullBucket = null,
            miscBucket = null;

        var isContinuous = false;
        if (!AnalyticAttributeUtility.IsPredictorBoolean(predictor)) {
            for (var i = 0; i < predictor.Elements.length; i++) {
                bucket = predictor.Elements[i];
                if (bucket.LowerInclusive != null || bucket.UpperExclusive != null) {
                    isContinuous = true;
                    break;
                }
            }
        }

        var isNumericRange = false;
        if (!predictor.FundamentalType && predictor.FundamentalType != null) {
            isNumericRange = predictor.FundamentalType.toUpperCase() === AnalyticAttributeUtility.FundamentalType.Numeric || predictor.FundamentalType.toUpperCase() === AnalyticAttributeUtility.FundamentalType.Currency;
        }
        var maxBucket = null;

        for (var i = 0; i < predictor.Elements.length; i++) {

            var bucket = predictor.Elements[i];
            var matchingBuckets = [];

            var bucketName = AnalyticAttributeUtility.GetAttributeBucketName(bucket, predictor),
                foundMax = false;

            if (isNumericRange && bucket.LowerInclusive !== null) {
                if (maxBucket === null) {
                    maxBucket = {};
                }

                if (!maxBucket.hasOwnProperty('LowerInclusive') || bucket.LowerInclusive >= maxBucket.UpperExclusive) {
                    maxBucket.LowerInclusive = bucket.LowerInclusive;
                    maxBucket.UpperExclusive = bucket.UpperExclusive;
                    foundMax = true;
                }
            }

            var percentTotal = (bucket.Count / modelSummary.ModelDetails.TotalLeads * 100).toFixed(0),
                bucketToDisplay = {
                name: bucketName,
                lift: bucket.Lift,
                percentTotal: percentTotal
            };

            // Set sort property based on whether it is a discrete versus a continuous value
            if (isContinuous) {
                bucketToDisplay.SortProperty = bucket.LowerInclusive != null ? bucket.LowerInclusive : bucket.UpperExclusive;
                // Only when the attribute is continuous, sorting is increasing order
            } else if (toReturn.name === "Employee Range" || toReturn.name === 'Revenue Range') {

                if (bucketToDisplay.name.indexOf(">") > -1) {
                    var lessThanBucketName = bucketToDisplay.name,
                        removedLessThanCharacter = lessThanBucketName.substr(1),
                        million = bucketToDisplay.name.indexOf("M") >= 0,
                        billion = bucketToDisplay.name.indexOf("B") >= 0,
                        number = parseFloat(removedLessThanCharacter.replace(/,/g, '')),
                        sortValue;

                    if (million === true) {
                        sortValue = number * 1000000;
                    } else if (billion === true) {
                        sortValue = number * 1000000000;
                    } else {
                        sortValue = number;
                    }

                    bucketToDisplay.SortProperty = sortValue;
                } else if (bucketToDisplay.name.indexOf("-") > -1) {
                    var million = bucketToDisplay.name.indexOf("M") >= 0,
                        billion = bucketToDisplay.name.indexOf("B") >= 0,
                        values = bucketToDisplay.name.split('-'),
                        minValue = parseInt(values[0]),
                        maxValue = parseInt(values[1]);

                    if (million === true) {
                        minValue = minValue * 1000000;
                    } else if (billion === true) {
                        minValue = minValue * 1000000000;
                    } else {
                        minValue = minValue;
                    }

                    bucketToDisplay.SortProperty = minValue;
                }
            } else {
                bucketToDisplay.SortProperty = bucketToDisplay.lift;
            }

            if (bucket.IsVisible) {

                if (bucketToDisplay.name != null && typeof bucketToDisplay.name === 'string' && (bucketToDisplay.name.toUpperCase() === "NULL" || bucketToDisplay.name.toUpperCase() === "NONE" || bucketToDisplay.name.toUpperCase() === "NOT AVAILABLE")) {
                    nullBucket = bucketToDisplay;
                    nullBucket.name = NULL_BUCKET_NAME;
                    continue;
                }
                if (bucketToDisplay.name !== null && typeof bucketToDisplay.name === 'string' && bucketToDisplay.name === MISC_BUCKET_NAME) {
                    miscBucket = bucketToDisplay;
                    continue;
                }

                toReturn.elementList.push(bucketToDisplay);

                if (foundMax) {
                    maxBucket.indexOfMax = toReturn.elementList.length - 1;
                }
            }
        }

        if (maxBucket !== null) {
            toReturn.elementList[maxBucket.indexOfMax].name = AnalyticAttributeUtility.GetAttributeBucketName({ LowerInclusive: maxBucket.LowerInclusive }, predictor);
        }

        // sort the list of buckets
        toReturn.elementList.sort(function (a, b) {

            if (toReturn.name === 'Employee Range' || toReturn.name === 'Revenue Range') {
                if (a.SortProperty < b.SortProperty) {
                    return -1;
                }
                if (a.SortProperty == b.SortProperty) {
                    return 0;
                }
                if (a.SortProperty > b.SortProperty) {
                    return 1;
                }
            } else {

                if (a.SortProperty < b.SortProperty) {
                    return isContinuous ? -1 : 1;
                }
                if (a.SortProperty == b.SortProperty) {
                    return 0;
                }
                if (a.SortProperty > b.SortProperty) {
                    return isContinuous ? 1 : -1;
                }
                return 0;
            }
        });

        // Always sort NULL bucket to the bottom
        if (nullBucket != null) {
            toReturn.elementList.push(nullBucket);
        }
        if (miscBucket != null) {
            toReturn.elementList.push(miscBucket);
        }

        //DP-932
        if (isContinuous && nullBucket != null && toReturn.elementList.length == 2) {
            toReturn.elementList[0].name = "Available";
        }

        var foundOther = toReturn.elementList.some(function (el) {
            return el.name === "Other, Less Popular";
        });
        var foundZeroPercent = toReturn.elementList.some(function (el) {
            return el.percentTotal === "0";
        });
        if (foundOther && foundZeroPercent) {
            // Combine "Other, Less Popular" bucket and buckets with 0 percent total
            var otherLessPopular = {},
                zeroPercentTotal = {};

            // Find and remove current buckets, store in variable
            for (var i = 0; i < toReturn.elementList.length; i++) {
                if (toReturn.elementList[i].name === "Other, Less Popular") {
                    otherLessPopular = toReturn.elementList[i];
                    toReturn.elementList.splice(i, 1);
                };
            };
            for (var i = 0; i < toReturn.elementList.length; i++) {
                if (toReturn.elementList[i].percentTotal === "0") {
                    zeroPercentTotal = toReturn.elementList[i];
                    toReturn.elementList.splice(i, 1);
                };
            }

            // Use variables to combine and create a new "Other, Less Popular" bucket
            var newCombinedBucket = {
                name: otherLessPopular.name,
                lift: otherLessPopular.lift + zeroPercentTotal.lift,
                percentTotal: parseInt(otherLessPopular.percentTotal) + parseInt(zeroPercentTotal.percentTotal),
                SortProperty: otherLessPopular.lift + zeroPercentTotal.lift
            };

            // Push new bucket back to list
            toReturn.elementList.push(newCombinedBucket);
        }

        return toReturn;
    };

    this.FormatDataForAttributeValueChart = function (attributeName, attributeColor, modelSummary) {
        if (attributeName == null || modelSummary == null) {
            return null;
        }

        var predictor = this.GetAttributeByName(attributeName, modelSummary.Predictors);
        if (predictor == null) {
            return null;
        }

        var toReturn = {
            name: predictor.DisplayName,
            color: attributeColor,
            description: predictor.Description || "",
            elementList: []
        };

        // number that comfortably fit on screen without resizing
        var maxElementsToDisplay = 8;
        var nullBucket = null;
        var miscBucket = null;
        var otherBucket = null;
        var otherBucketElements = [];
        var topBucketCandidates = [];

        // Do "Other" bucketing if discrete and not boolean
        var doOtherBucket = false;
        var isContinuous = false;
        var i = 0;
        var bucket = null;
        var bucketName = null;

        if (!AnalyticAttributeUtility.IsPredictorBoolean(predictor)) {
            for (var i = 0; i < predictor.Elements.length; i++) {
                bucket = predictor.Elements[i];
                if (this.IsPredictorElementCategorical(bucket)) {
                    doOtherBucket = true;
                    break;
                } else if (bucket.LowerInclusive != null || bucket.UpperExclusive != null) {
                    isContinuous = true;
                    break;
                }
            }
        }

        if (doOtherBucket) {
            // Group elements less than 1% frequency into "Other" bucket
            for (var i = 0; i < predictor.Elements.length; i++) {

                bucket = predictor.Elements[i];
                bucketName = AnalyticAttributeUtility.GetAttributeBucketName(bucket, predictor);

                var percentTotal = (bucket.Count / modelSummary.ModelDetails.TotalLeads * 100).toFixed(0);
                if (percentTotal < 1 || bucketName != null && typeof bucketName === 'string' && bucketName.toLowerCase() == "other") {
                    otherBucketElements.push(bucket);
                } else {
                    topBucketCandidates.push(bucket);
                }
            }
        }

        var topPredictorElements = null;
        if (doOtherBucket) {
            topPredictorElements = topBucketCandidates;
        } else {
            topPredictorElements = predictor.Elements;
        }

        for (var i = 0; i < topPredictorElements.length; i++) {

            bucket = topPredictorElements[i];
            bucketName = AnalyticAttributeUtility.GetAttributeBucketName(bucket, predictor);

            var bucketToDisplay = {
                name: bucketName,
                lift: bucket.Lift,
                percentTotal: (bucket.Count / modelSummary.ModelDetails.TotalLeads * 100).toFixed(0)
            };

            // // Set sort property based on whether it is a discrete versus a continuous value
            // if (isContinuous) {
            //     bucketToDisplay.SortProperty = bucket.LowerInclusive != null ? bucket.LowerInclusive : bucket.UpperExclusive;
            //     // Only when the attribute is continuous, sorting is increasing order
            // } else {
            //     bucketToDisplay.SortProperty = bucketToDisplay.lift;
            // }


            // Set sort property based on whether it is a discrete versus a continuous value
            if (isContinuous) {
                bucketToDisplay.SortProperty = bucket.LowerInclusive != null ? bucket.LowerInclusive : bucket.UpperExclusive;
                // Only when the attribute is continuous, sorting is increasing order
            } else if (toReturn.name === "Employee Range") {

                if (bucketToDisplay.name.indexOf(">") > -1) {
                    var lessThanBucketName = bucketToDisplay.name,
                        removedLessThanCharacter = lessThanBucketName.substr(1);

                    bucketToDisplay.SortProperty = parseFloat(removedLessThanCharacter.replace(/,/g, ''));
                } else if (bucketToDisplay.name.indexOf("-") > -1) {
                    var values = bucketToDisplay.name.split('-'),
                        maxValue = parseInt(values[1]);

                    bucketToDisplay.SortProperty = maxValue;
                }
            } else {
                bucketToDisplay.SortProperty = bucketToDisplay.lift;
            }

            if (bucket.IsVisible) {
                // Always sort NA bucket to the bottom
                if (bucketToDisplay.name != null && typeof bucketToDisplay.name === 'string' && (bucketToDisplay.name.toUpperCase() === "NULL" || bucketToDisplay.name.toUpperCase() === "NONE" || bucketToDisplay.name.toUpperCase() === "NOT AVAILABLE")) {
                    nullBucket = bucketToDisplay;
                    nullBucket.name = NULL_BUCKET_NAME;
                    continue;
                }
                if (bucketToDisplay.name !== null && typeof bucketToDisplay.name === 'string' && bucketToDisplay.name === MISC_BUCKET_NAME) {
                    miscBucket = bucketToDisplay;
                    continue;
                }
                toReturn.elementList.push(bucketToDisplay);
            }
        }

        // sort the list of buckets
        toReturn.elementList.sort(function (a, b) {
            if (a.SortProperty < b.SortProperty) {
                return isContinuous ? -1 : 1;
            }
            if (a.SortProperty == b.SortProperty) {
                return 0;
            }
            if (a.SortProperty > b.SortProperty) {
                return isContinuous ? 1 : -1;
            }
            return 0;
        });

        var nullBucketLength = nullBucket == null ? 0 : 1;
        var otherBucketLength = otherBucketElements.length > 0 ? 1 : 0;
        var miscBucketLength = miscBucket == null ? 0 : 1;
        var currentTotalNumBuckets = toReturn.elementList.length + nullBucketLength + otherBucketLength + miscBucketLength;
        if (currentTotalNumBuckets > maxElementsToDisplay) {
            var numToRemove = currentTotalNumBuckets - maxElementsToDisplay;
            var removed = toReturn.elementList.splice(toReturn.elementList.length - numToRemove, numToRemove);
            Array.prototype.push.apply(otherBucketElements, removed);
        }

        // Merge "Other" bucket averaged out lift and percentage
        if (otherBucketElements.length > 0) {
            var otherBucketTotalPercentage = 0;
            var averagedLift = 0;
            for (var i = 0; i < otherBucketElements.length; i++) {
                var otherBucketElement = otherBucketElements[i];
                var otherBucketPercentage = otherBucketElement.Count != null ? otherBucketElement.Count / modelSummary.ModelDetails.TotalLeads : otherBucketElement.percentTotal / 100;
                otherBucketTotalPercentage += otherBucketPercentage;
                var otherBucketLift = otherBucketElement.Lift != null ? otherBucketElement.Lift : otherBucketElement.lift;
                averagedLift += otherBucketLift * otherBucketPercentage;
            }

            otherBucket = {
                name: "Other, Less Popular",
                lift: averagedLift / otherBucketTotalPercentage,
                percentTotal: (otherBucketTotalPercentage * 100).toFixed(0)
            };
        }

        // Always sort Other bucket second from bottom
        if (otherBucket != null) {
            toReturn.elementList.push(otherBucket);
        }

        // Always sort NULL bucket to the bottom
        if (nullBucket != null) {
            toReturn.elementList.push(nullBucket);
        }
        if (miscBucket != null) {
            toReturn.elementList.push(miscBucket);
        }

        //DP-932
        if (isContinuous && nullBucket != null && toReturn.elementList.length == 2) {
            toReturn.elementList[0].name = "Available";
        }

        return toReturn;
    };

    this.SumToOne = function (percentList) {
        var topPercentage = 100.0;

        // Find the bucket with the largest percentage
        var index = 0;
        var maxPercentage = 0;
        for (var i = 0; i < percentList.length; i++) {
            var currentPercentage = 0;
            if (typeof percentList[i] === 'string' && percentList[i] == "<0.1") {
                currentPercentage = 0.1;
            } else {
                currentPercentage = percentList[i];
            }

            if (currentPercentage > maxPercentage) {
                index = i;
                maxPercentage = currentPercentage;
            }
        }
        // Make the max percentage equal to 100 minus the sum of all the other percentages
        for (var i = 0; i < percentList.length; i++) {
            if (i == index) {
                continue;
            } else {
                if (typeof percentList[i] === 'string' && percentList[i] == "<0.1") {
                    topPercentage -= 0.1;
                } else {
                    topPercentage -= percentList[i];
                }
            }
        }
        percentList[index] = topPercentage.toFixed(0);

        return percentList;
    };

    this.FormatPercent = function (percent) {

        var formattedPercent = percent;
        if (formattedPercent >= 0.95) {
            formattedPercent = formattedPercent;
        } else if (formattedPercent <= 0.95 && formattedPercent >= 0.1) {
            formattedPercent = formattedPercent;
        } else {
            formattedPercent = "<0.1";
        }
        return formattedPercent;
    };

    this.createTicks = function (maxTickValue, maxTickNumber) {
        var steps = [0.5, 1, 2, 5, 10];
        // iterate options in steps, find the maximum appropriate step
        var step = _.reduce(steps, function (memo, s) {
            return maxTickNumber * memo >= maxTickValue ? memo : s;
        }, 0);
        // continue doubling step until find an appropriate one
        while (maxTickNumber * step < maxTickValue) {
            step *= 2;
        }
        // construct ticks
        var tick = 0;
        var ticks = [tick];
        while (tick < maxTickValue) {
            tick += step;
            ticks.push(tick);
        }

        return ticks;
    };

    this.ClearCategoryClasses = function (categoryList) {
        if (categoryList == null || categoryList.length === 0) {
            return;
        }

        for (var i = 0; i < categoryList.length; i++) {
            categoryList[i].activeClass = "";
        }
    };
}]);

/***/ }),

/***/ "./app/AppCommon/services/services.index.js":
/*!**************************************************!*\
  !*** ./app/AppCommon/services/services.index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./FilterService */ "./app/AppCommon/services/FilterService.js");

__webpack_require__(/*! ./HealthService */ "./app/AppCommon/services/HealthService.js");

__webpack_require__(/*! ./ModelAlertsService */ "./app/AppCommon/services/ModelAlertsService.js");

__webpack_require__(/*! ./ModelSummaryValidationService */ "./app/AppCommon/services/ModelSummaryValidationService.js");

__webpack_require__(/*! ./ThresholdExplorerService */ "./app/AppCommon/services/ThresholdExplorerService.js");

__webpack_require__(/*! ./TopPredictorService */ "./app/AppCommon/services/TopPredictorService.js");

/***/ }),

/***/ "./app/AppCommon/utilities/AnalyticAttributeUtility.js":
/*!*************************************************************!*\
  !*** ./app/AppCommon/utilities/AnalyticAttributeUtility.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.AnalyticAttributeUtility', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.DateTimeFormatUtility', 'mainApp.appCommon.utilities.NumberUtility']).service('AnalyticAttributeUtility', ["ResourceUtility", "DateTimeFormatUtility", "NumberUtility", function (ResourceUtility, DateTimeFormatUtility, NumberUtility) {

    var MISC_BUCKET_NAME = 'Other, Less Popular';

    // Enum used to determine whether a bucket should be shown
    this.ApprovedUsage = {
        None: "None",
        Model: "Model",
        ModelAndModelInsights: "ModelAndModelInsights",
        ModelAndAllInsights: "ModelAndAllInsights",
        IndividualDisplay: "IndividualDisplay"
    };

    // Enum used to determine attribute type information
    this.DataType = {
        String: "STRING",
        LongString: "LONGSTRING",
        Date: "DATE",
        DateTime: "DATETIME",
        Time: "TIME",
        Double: "DOUBLE",
        Float: "FLOAT",
        Int: "INT",
        Integer: "INTEGER",
        Short: "SHORT",
        Long: "LONG",
        Boolean: "BOOLEAN",
        Bit: "BIT",
        Epoch: "EPOCHTIME"
    };

    // Enum used to determine attribute type semantics
    this.FundamentalType = {
        Email: "EMAIL",
        Probability: "PROBABILITY",
        Phone: "PHONE",
        Enum: "ENUM",
        URI: "URI",
        Currency: "CURRENCY",
        Percent: "PERCENT",
        Year: "YEAR",
        Boolean: "BOOLEAN",
        Numeric: "NUMERIC"
    };

    this.FindAttributeMetadataData = function (modelSummary, attributeData) {
        var self = this;
        if (attributeData == null || modelSummary == null || modelSummary.AttributeMetadata == null || modelSummary.AttributeMetadata.length === 0) {
            return null;
        }

        for (var i = 0; i < modelSummary.AttributeMetadata.length; i++) {
            if (attributeData.AttributeName == modelSummary.AttributeMetadata[i].ColumnName) {
                return modelSummary.AttributeMetadata[i];
            }
        }

        return null;
    };

    this.FindAttributeBucket = function (modelSummary, attributeData) {
        var self = this;
        if (attributeData == null || modelSummary == null || modelSummary.Summary == null || modelSummary.Summary.Predictors == null || modelSummary.Summary.Predictors.length === 0) {
            return null;
        }

        var predictor = null;
        for (var i = 0; i < modelSummary.Summary.Predictors.length; i++) {
            if (attributeData.AttributeName == modelSummary.Summary.Predictors[i].Name) {
                predictor = modelSummary.Summary.Predictors[i];
                break;
            }
        }

        if (predictor == null || predictor.Elements == null || predictor.Elements.length === 0) {
            return null;
        }

        for (var x = 0; x < predictor.Elements.length; x++) {
            var bucket = predictor.Elements[x];
            if (bucket.Values != null && bucket.Values.length > 0) {
                // We are working with Discrete values
                for (var y = 0; y < bucket.Values.length; y++) {
                    if (attributeData.AttributeValue == bucket.Values[y]) {
                        return bucket;
                    }
                }
            } else {
                var lowerBound = bucket.LowerInclusive != null ? parseFloat(bucket.LowerInclusive) : null;
                var upperBound = bucket.UpperExclusive != null ? parseFloat(bucket.UpperExclusive) : null;
                var parsedAttributeValue = attributeData.AttributeValue != null ? parseFloat(attributeData.AttributeValue) : null;
                if (parsedAttributeValue >= lowerBound && (parsedAttributeValue < upperBound || upperBound == null)) {
                    return bucket;
                }
            }
        }

        return null;
    };

    this.FormatBooleanBucketName = function (value) {
        var toReturn = value;
        if (value == "NA" || value == "N/A" || value == "NULL" || value == "NOT AVAILABLE" || parseInt(value) == -1) {
            toReturn = "Not Available";
        } else if (value == "N" || value == "NO" || value == "FALSE" || value == "F" || parseInt(value) === 0) {
            toReturn = "No";
        } else if (value == "Y" || value == "YES" || value == "TRUE" || value == "T" || parseInt(value) == 1) {
            toReturn = "Yes";
        }
        return toReturn;
    };

    this.GetAttributeBucketName = function (bucket, attributeMetadata) {

        if (bucket == null) {
            return "";
        }
        if (bucket.LowerInclusive > 0 && bucket.UpperExclusive == 0) {
            bucket.UpperExclusive = null;
        }

        var toReturn = null;
        var lowerValue;
        var upperValue;

        if (bucket.Values != null && bucket.Values.length > 0) {
            // This is the Null bucket
            if (bucket.Values[0] == null) {
                toReturn = ResourceUtility.getString("ANALYTIC_ATTRIBUTE_NULL_VALUE_LABEL");
            } else if (bucket.Values[0] === 'Other') {
                toReturn = 'Other, Less Popular';
            } else {
                if (attributeMetadata != null) {
                    var fundamentalType = attributeMetadata.FundamentalType != null ? attributeMetadata.FundamentalType.toUpperCase() : null;
                    if (fundamentalType == this.FundamentalType.Boolean) {
                        var value = bucket.Values[0].toString().toUpperCase();
                        toReturn = this.FormatBooleanBucketName(value);
                        return toReturn;
                    }
                }
                var discreteValueString = "";
                for (var i = 0; i < bucket.Values.length; i++) {
                    var bucketValue = this.FormatBucketValue(bucket.Values[i], attributeMetadata);
                    if (discreteValueString === "") {
                        discreteValueString = bucketValue;
                    } else {
                        discreteValueString += ", " + bucketValue;
                    }
                }

                if (typeof discreteValueString === 'string' && discreteValueString.toUpperCase() === 'MISC.') {
                    toReturn = MISC_BUCKET_NAME;
                } else {
                    toReturn = discreteValueString;
                }
            }
        } else if (bucket.LowerInclusive != null && bucket.UpperExclusive != null) {

            if (attributeMetadata != null) {
                var dataType = attributeMetadata.DataType != null ? attributeMetadata.DataType.toUpperCase() : null;
                if (dataType == this.DataType.Int || dataType == this.DataType.Integer) {
                    toReturn = this.FormatIntegerBucket(bucket.LowerInclusive, bucket.UpperExclusive, attributeMetadata);
                } else {
                    upperValue = this.FormatBucketValue(bucket.UpperExclusive, attributeMetadata);
                    toReturn = ResourceUtility.getString('ANALYTIC_ATTRIBUTE_LESS_THAN_LABEL', [upperValue]);
                }
            } else {
                upperValue = this.FormatBucketValue(bucket.UpperExclusive, attributeMetadata);

                toReturn = ResourceUtility.getString('ANALYTIC_ATTRIBUTE_LESS_THAN_LABEL', [upperValue]);
            }
        } else if (bucket.LowerInclusive == null && bucket.UpperExclusive == null) {
            toReturn = ResourceUtility.getString('ANALYTIC_ATTRIBUTE_ALL_VALUES_LABEL');
        } else if (bucket.LowerInclusive != null) {
            lowerValue = this.FormatBucketValue(bucket.LowerInclusive, attributeMetadata);
            toReturn = ResourceUtility.getString('ANALYTIC_ATTRIBUTE_GREATER_THAN_LABEL', [lowerValue]);
        } else {
            upperValue = this.FormatBucketValue(bucket.UpperExclusive, attributeMetadata);
            toReturn = ResourceUtility.getString('ANALYTIC_ATTRIBUTE_LESS_THAN_LABEL', [upperValue]);
        }

        return String(toReturn);
    };

    this.FormatIntegerBucket = function (lower, upper, attributeMetadata) {
        var upperValue = this.FormatBucketValue(upper, attributeMetadata);

        return ResourceUtility.getString('ANALYTIC_ATTRIBUTE_LESS_THAN_LABEL', [upperValue]);
    };

    this.AbbreviateNumber = function (realValue, fundamentalType) {
        var parsedValue = parseFloat(realValue);
        // If the parsedValue is NaN then we have a mismatch of types so just return the value
        if (isNaN(parsedValue)) {
            return realValue;
        }

        // If the value's fundamental type is 'year', do not round it.
        if (fundamentalType == this.FundamentalType.Year) {
            return parsedValue;
        }

        // If the value is less than 1 it should get 2 decimal places
        // If the value is less than 1,000 it should get 1 decimal place, but only if it had a decimal place to begin with
        // Anything greater than 1,000 will be handled by NumberUtil.AbbreviateLargeNumber
        var abbreviatedNumber;
        if (parsedValue === 0) {
            abbreviatedNumber = parsedValue;
        } else if (parsedValue < 1) {
            abbreviatedNumber = parsedValue.toFixed(2);
        } else if (parsedValue < 1000 && parsedValue % 1 !== 0) {
            abbreviatedNumber = parsedValue.toFixed(1);
        } else {
            abbreviatedNumber = NumberUtility.AbbreviateLargeNumber(parsedValue, 1);
        }
        return abbreviatedNumber;
    };

    this.IsPredictorBoolean = function (attributeMetadata) {
        if (attributeMetadata == null) {
            return false;
        }
        var fundamentalType = attributeMetadata.FundamentalType != null ? attributeMetadata.FundamentalType.toUpperCase() : null;
        return fundamentalType == this.FundamentalType.Boolean;
    };

    this.FormatBucketValue = function (value, attributeMetadata) {
        if (value == null || attributeMetadata == null) {
            return value;
        }

        var fundamentalType = attributeMetadata.FundamentalType != null ? attributeMetadata.FundamentalType.toUpperCase() : null;
        // If the coming data has fundamental type specified, manipulate the value as required according to fundamental type.
        if (fundamentalType == this.FundamentalType.Year || fundamentalType == this.FundamentalType.Currency || fundamentalType == this.FundamentalType.Numeric || fundamentalType == this.FundamentalType.Percent) {
            var abbreviatedNumber = this.AbbreviateNumber(value, fundamentalType);
            // Handle currency and percent
            if (fundamentalType == this.FundamentalType.Currency) {
                return ResourceUtility.getString("CURRENCY_SYMBOL") + abbreviatedNumber;
            } else if (fundamentalType == this.FundamentalType.Percent) {
                return abbreviatedNumber + "%";
            } else {
                return abbreviatedNumber;
            }
        }

        var toReturn;
        var dataType = attributeMetadata.DataType != null ? attributeMetadata.DataType.toUpperCase() : null;
        switch (dataType) {
            // Format Numbers
            case this.DataType.Double:
            case this.DataType.Int:
            case this.DataType.Integer:
            case this.DataType.Short:
            case this.DataType.Long:
            case this.DataType.Float:
                toReturn = this.AbbreviateNumber(value, fundamentalType);
                break;
            // Format Date
            case this.DataType.Date:
                toReturn = DateTimeFormatUtility.FormatStringDate(value, false);
                break;
            // Format DateTime and Time
            case this.DataType.DateTime:
            case this.DataType.Time:
                toReturn = DateTimeFormatUtility.FormatStringDate(value, true);
                break;
            // Format Boolean and Bit
            case this.DataType.Boolean:
            case this.DataType.Bit:
                toReturn = this.FormatBooleanValueForDisplay(value);
                break;
            // Format EpochTime
            case this.DataType.Epoch:
                toReturn = DateTimeFormatUtility.FormatEpochDate(value);
                break;
            default:
                //No formatting required for String or LongString
                toReturn = value;
                break;
        }

        return toReturn;
    };

    this.SortAttributeList = function (groomedAttributeList, descending) {
        var self = this;
        if (groomedAttributeList == null || groomedAttributeList.length === 0) {
            return groomedAttributeList;
        }

        if (descending === false) {
            groomedAttributeList.sort(function (a, b) {
                if (a.Lift - b.Lift < 0) {
                    return -1;
                }
                if (a.Lift - b.Lift === 0) {
                    return 0;
                }
                if (a.Lift - b.Lift > 0) {
                    return 1;
                }
                return 0;
            });
        } else {
            groomedAttributeList.sort(function (a, b) {
                if (b.Lift - a.Lift < 0) {
                    return -1;
                }
                if (b.Lift - a.Lift === 0) {
                    return 0;
                }
                if (b.Lift - a.Lift > 0) {
                    return 1;
                }
                return 0;
            });
        }

        return groomedAttributeList;
    };

    this.FormatLift = function (rawLift) {
        if (rawLift == null || typeof rawLift !== 'number') {
            return null;
        }

        if (rawLift === 0) {
            return "0";
        }

        return rawLift.toFixed(1);
    };

    this.ShouldShowNullBucket = function (bucket, nullThreshold) {
        var self = this;
        if (bucket == null) {
            return false;
        }
        nullThreshold = nullThreshold != null ? parseFloat(nullThreshold) : 100;

        // Discrete and Continuous null bucket
        if (bucket.Values != null && bucket.Values.length > 0) {
            for (var i = 0; i < bucket.Values.length; i++) {
                if (bucket.Values[i] == null && bucket.Lift <= nullThreshold) {
                    return false;
                }
            }
        }

        return true;
    };

    this.ShowBasedOnTags = function (widgetConfig, attributeMetadata) {
        if (widgetConfig == null || attributeMetadata == null) {
            return false;
        }

        //TODO:pierce This is a hack because DataLoader is not providing internal metadata
        if (attributeMetadata.Tags == null) {
            attributeMetadata.Tags = [];
        }

        // Check RequiredTags first
        var hasAllRequired = true;
        if (widgetConfig.RequiredTags != null) {
            for (var i = 0; i < widgetConfig.RequiredTags.length; i++) {
                var requiredTag = widgetConfig.RequiredTags[i];
                var hasRequired = false;
                for (var x = 0; x < attributeMetadata.Tags.length; x++) {
                    if (requiredTag == attributeMetadata.Tags[x]) {
                        hasRequired = true;
                        break;
                    }
                }

                if (!hasRequired) {
                    hasAllRequired = false;
                    break;
                }
            }
        }

        //Then check ExcludedTags
        var hasExcluded = false;
        if (widgetConfig.ExcludedTags != null) {
            for (var y = 0; y < widgetConfig.ExcludedTags.length; y++) {
                var excludedTag = widgetConfig.ExcludedTags[y];
                for (var z = 0; z < attributeMetadata.Tags.length; z++) {
                    if (excludedTag == attributeMetadata.Tags[z]) {
                        hasExcluded = true;
                        break;
                    }
                }
            }
        }

        if (hasExcluded) {
            return false;
        } else if (widgetConfig.RequiredTags != null && !hasAllRequired) {
            return false;
        } else {
            return true;
        }
    };

    this.IsApprovedForUsage = function (usage, attributeMetadata) {
        if (usage == null || attributeMetadata == null || attributeMetadata.ApprovedUsage == null) {
            return false;
        }

        for (var i = 0; i < attributeMetadata.ApprovedUsage.length; i++) {
            if (attributeMetadata.ApprovedUsage[i] == usage) {
                return true;
            }
        }

        return false;
    };

    //TODO:pierce Another hack because DataLoader is not properly populating the metadata
    this.IsAllowedForInsights = function (attributeMetadata) {
        if (attributeMetadata == null) {
            return false;
        } else if (attributeMetadata.ApprovedUsage == null || attributeMetadata.ApprovedUsage.length === 0) {
            return true;
        } else {
            return this.IsApprovedForUsage(this.ApprovedUsage.ModelAndAllInsights, attributeMetadata) === true || this.IsApprovedForUsage(this.ApprovedUsage.ModelAndModelInsights, attributeMetadata) === true;
        }
    };

    this.FormatBooleanValueForDisplay = function (booleanValue) {
        if (booleanValue === null || booleanValue === "" || booleanValue === undefined) {
            return "";
        }
        if (typeof booleanValue === "boolean" || typeof booleanValue === "number") {
            booleanValue = booleanValue.toString();
        }
        booleanValue = booleanValue.toUpperCase();
        if (booleanValue == "1" || booleanValue === "TRUE") {
            return ResourceUtility.getString("BOOLEAN_TRUE_DISPLAY_LABEL");
        } else if (booleanValue == "0" || booleanValue === "FALSE") {
            return ResourceUtility.getString("BOOLEAN_FALSE_DISPLAY_LABEL");
        } else {
            return "";
        }
    };

    this.GetAttributeList = function (groomedPositiveAttributeList, groomedNegativeAttributeList, attributeLimit, score) {
        var groomedAttributeList = [];
        if (groomedPositiveAttributeList.length + groomedNegativeAttributeList.length <= attributeLimit) {
            return groomedPositiveAttributeList.concat(groomedNegativeAttributeList);
        }
        if (score >= 80) {
            return this.PopulateGroomedAttributeList(groomedPositiveAttributeList, groomedNegativeAttributeList, attributeLimit, 5);
        }
        if (score >= 60) {
            return this.PopulateGroomedAttributeList(groomedPositiveAttributeList, groomedNegativeAttributeList, attributeLimit, 4);
        }
        if (score >= 40) {
            return this.PopulateGroomedAttributeList(groomedPositiveAttributeList, groomedNegativeAttributeList, attributeLimit, 3);
        }
        return this.PopulateGroomedAttributeList(groomedPositiveAttributeList, groomedNegativeAttributeList, attributeLimit, 0);
    };

    this.PopulateGroomedAttributeList = function (groomedPositiveAttributeList, groomedNegativeAttributeList, attributeLimit, positiveAttributeCount) {
        var groomedAttributeList = [];
        if (attributeLimit < positiveAttributeCount) {
            return groomedAttributeList;
        }

        if (groomedPositiveAttributeList.length <= positiveAttributeCount) {
            groomedAttributeList = groomedPositiveAttributeList;
            var posAttrListLen = groomedPositiveAttributeList.length;
            for (var i = 0; i < attributeLimit - posAttrListLen && i < groomedNegativeAttributeList.length; i++) {
                groomedAttributeList.push(groomedNegativeAttributeList[i]);
            }
        } else {
            if (groomedNegativeAttributeList.length < attributeLimit - positiveAttributeCount) {
                positiveAttributeCount = Math.min(attributeLimit - groomedNegativeAttributeList.length, groomedPositiveAttributeList.length);
            }
            for (var j = 0; j < positiveAttributeCount; j++) {
                groomedAttributeList.push(groomedPositiveAttributeList[j]);
            }
            for (var k = 0; k < attributeLimit - positiveAttributeCount; k++) {
                groomedAttributeList.push(groomedNegativeAttributeList[k]);
            }
        }
        return groomedAttributeList;
    };

    this.GetLeadCount = function (modelSummary) {
        return modelSummary.Summary.DLEventTableData.SourceRowCount;
    };
}]);

/***/ }),

/***/ "./app/AppCommon/utilities/AnimationUtility.js":
/*!*****************************************************!*\
  !*** ./app/AppCommon/utilities/AnimationUtility.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.utilities.AnimationUtility', []).service('AnimationUtility', function () {

    this.CalculateRgbBetweenValues = function (highColor, lowColor, scalor) {
        if (highColor == null || lowColor == null || scalor == null || scalor < 0) {
            return null;
        }
        if (scalor > 1) {
            scalor = scalor / 100;
        }

        var diffRed = scalor * highColor.R + (1 - scalor) * lowColor.R;
        var diffGreen = scalor * highColor.G + (1 - scalor) * lowColor.G;
        var diffBlue = scalor * highColor.B + (1 - scalor) * lowColor.B;

        diffRed = Math.round(diffRed);
        diffGreen = Math.round(diffGreen);
        diffBlue = Math.round(diffBlue);

        return {
            R: diffRed,
            G: diffGreen,
            B: diffBlue
        };
    };

    this.ConvertSingleRgbToHex = function (c) {
        if (c == null) {
            return null;
        }
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    };

    this.ConvertRgbToHex = function (r, g, b) {
        if (r == null || g == null || b == null) {
            return null;
        }
        return "#" + this.ConvertSingleRgbToHex(r) + this.ConvertSingleRgbToHex(g) + this.ConvertSingleRgbToHex(b);
    };
});

/***/ }),

/***/ "./app/AppCommon/utilities/utilities.index.js":
/*!****************************************************!*\
  !*** ./app/AppCommon/utilities/utilities.index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./AnalyticAttributeUtility */ "./app/AppCommon/utilities/AnalyticAttributeUtility.js");

__webpack_require__(/*! ./AnimationUtility */ "./app/AppCommon/utilities/AnimationUtility.js");

/***/ }),

/***/ "./app/AppCommon/widgets/Widgets.js":
/*!******************************************!*\
  !*** ./app/AppCommon/widgets/Widgets.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.Widgets', ['mainApp.appCommon.widgets.AdminInfoAlertsWidget', 'mainApp.appCommon.widgets.AdminInfoSummaryWidget', 'mainApp.appCommon.widgets.LeadsTabWidget', 'mainApp.appCommon.widgets.ModelListCreationHistoryWidget', 'mainApp.appCommon.widgets.PerformanceTabWidget', 'mainApp.appCommon.widgets.ThresholdExplorerWidget', 'mainApp.appCommon.widgets.TopPredictorWidget', 'mainApp.appCommon.widgets.UserManagementWidget']);

/***/ }),

/***/ "./app/AppCommon/widgets/adminInfoAlertsWidget/AdminInfoAlertsWidget.js":
/*!******************************************************************************!*\
  !*** ./app/AppCommon/widgets/adminInfoAlertsWidget/AdminInfoAlertsWidget.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.AdminInfoAlertsWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.services.ModelAlertsService', 'mainApp.core.services.SessionService', 'mainApp.models.services.ModelService']).controller('AdminInfoAlertsWidgetController', ["$scope", "$rootScope", "$http", "ResourceUtility", "ModelAlertsService", "ModelStore", function ($scope, $rootScope, $http, ResourceUtility, ModelAlertsService, ModelStore) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.data = ModelStore.data;
    $scope.modelAlerts = $scope.data.ModelAlerts;
    $scope.suppressedCategories = $scope.data.SuppressedCategories;

    if ($scope.modelAlerts == null && $scope.suppressedCategories == null) {
        $scope.showErrorMessage = true;
        $scope.alertTabErrorMessage = ResourceUtility.getString("ADMIN_INFO_ALERTS_PAGE_ERROR_MESSAGE");
    } else {
        $scope.showErrorMessage = false;
        $scope.warnings = ModelAlertsService.GetWarnings($scope.modelAlerts, $scope.suppressedCategories);
    }
}]).directive('adminInfoAlertsWidget', function () {
    return {
        templateUrl: 'app/AppCommon/widgets/adminInfoAlertsWidget/AdminInfoAlertsWidgetTemplate.html'
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/adminInfoSummaryWidget/AdminInfoSummaryWidget.js":
/*!********************************************************************************!*\
  !*** ./app/AppCommon/widgets/adminInfoSummaryWidget/AdminInfoSummaryWidget.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.AdminInfoSummaryWidget', ['mainApp.appCommon.services.ThresholdExplorerService', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.services.SessionService', 'lp.jobs']).controller('AdminInfoSummaryWidgetController', ["$scope", "ResourceUtility", "ThresholdExplorerService", "BrowserStorageUtility", "FeatureFlagService", "JobsStore", function ($scope, ResourceUtility, ThresholdExplorerService, BrowserStorageUtility, FeatureFlagService, JobsStore) {
    FeatureFlagService.GetAllFlags().then(function (result) {
        var flags = FeatureFlagService.Flags();
        $scope.showPivotMapping = FeatureFlagService.FlagIsEnabled(flags.ALLOW_PIVOT_FILE);
        $scope.isCDL = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
    });

    $scope.ResourceUtility = ResourceUtility;
    $scope.Error = { ShowError: false };

    var clientSession = BrowserStorageUtility.getClientSession();
    var data = $scope.data;

    $scope.ModelId = data.ModelId;
    $scope.DataCloudVersion = data.EventTableProvenance.Data_Cloud_Version;
    $scope.TenantId = clientSession.Tenant.Identifier;
    $scope.TenantName = clientSession.Tenant.DisplayName;
    $scope.ModelHealthScore = data.ModelDetails.RocScore;
    $scope.modelUploaded = data.ModelDetails.Uploaded;
    $scope.PivotArtifactPath = data.ModelDetails.PivotArtifactPath;
    $scope.TrainingFileExist = data.ModelDetails.TrainingFileExist;
    $scope.AuthToken = BrowserStorageUtility.getTokenDocument();
    $scope.sourceType = data.ModelDetails.SourceSchemaInterpretation;
    $scope.EventTableName = data.EventTableProvenance.EventTableName;
    var propertyLength = data.ModelDetails.ModelSummaryProvenanceProperties.length;
    for (var i = 0; i < propertyLength; i++) {
        if (data.ModelDetails.ModelSummaryProvenanceProperties[i].ModelSummaryProvenanceProperty.option == ResourceUtility.getString("MODEL_TRAINING_FILE_PATH")) {
            $scope.TrainingFilePath = data.ModelDetails.ModelSummaryProvenanceProperties[i].ModelSummaryProvenanceProperty.value;
        } else if (data.ModelDetails.ModelSummaryProvenanceProperties[i].ModelSummaryProvenanceProperty.option == "WorkflowJobId") {
            $scope.workflowJobId = data.ModelDetails.ModelSummaryProvenanceProperties[i].ModelSummaryProvenanceProperty.value;
        }
    }

    $scope.modelCreationJobFinished = false;
    if ($scope.workflowJobId != null && $scope.workflowJobId > 0) {
        JobsStore.getJob($scope.workflowJobId).then(function (job) {
            if (job != null && job.jobStatus == "Completed") {
                $scope.modelCreationJobFinished = true;
            }
        });
    }

    $scope.exportThresholdClicked = function () {
        var csvRows = ThresholdExplorerService.PrepareExportData(data);
        alasql("SELECT * INTO CSV('performance.csv') FROM ?", [csvRows]);
    };
}]).directive('healthScore', function () {
    return {
        restrict: 'E',
        template: '{{score | number: 4}}&nbsp;&nbsp;&nbsp;&nbsp;<strong class="{{healthClass}}">{{healthLevel}}</strong>',
        scope: { score: '=' },
        controller: ['$scope', 'ResourceUtility', function ($scope, ResourceUtility) {

            if ($scope.score >= 0.75) {
                $scope.healthLevel = ResourceUtility.getString("MODEL_ADMIN_HEALTH_EXCELLENT");
                $scope.healthClass = "health-excellent";
            } else if ($scope.score >= 0.6) {
                $scope.healthLevel = ResourceUtility.getString("MODEL_ADMIN_HEALTH_GOOD");
                $scope.healthClass = "health-good";
            } else if ($scope.score >= 0.5) {
                $scope.healthLevel = ResourceUtility.getString("MODEL_ADMIN_HEALTH_MEDIUM");
                $scope.healthClass = "health-medium";
            } else {
                $scope.healthLevel = ResourceUtility.getString("MODEL_ADMIN_HEALTH_POOR");
                $scope.healthClass = "health-poor";
            }
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/leadsTabWidget/LeadsTabWidget.js":
/*!****************************************************************!*\
  !*** ./app/AppCommon/widgets/leadsTabWidget/LeadsTabWidget.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.LeadsTabWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.DateTimeFormatUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.core.services.FeatureFlagService', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.NavUtility']).controller('LeadsTabWidgetController', ["$scope", "$rootScope", "ResourceUtility", "BrowserStorageUtility", "RightsUtility", "FeatureFlagService", "NavUtility", function ($scope, $rootScope, ResourceUtility, BrowserStorageUtility, RightsUtility, FeatureFlagService, NavUtility) {
    $scope.ResourceUtility = ResourceUtility;
    var clientSession = BrowserStorageUtility.getClientSession();
    var flags = FeatureFlagService.Flags();
    $scope.showAdminLink = FeatureFlagService.FlagIsEnabled(flags.ADMIN_PAGE);
    $scope.data.TenantId = clientSession.Tenant.Identifier;
    $scope.data.TenantName = clientSession.Tenant.DisplayName;
    $scope.sourceType = $scope.data.ModelDetails.SourceSchemaInterpretation;

    $scope.adminLinkClick = function () {
        $rootScope.$broadcast(NavUtility.ADMIN_INFO_NAV_EVENT, $scope.data);
    };
}]).directive('leadsTabWidget', ["$compile", function ($compile) {
    var directiveDefinitionObject = {
        templateUrl: 'app/AppCommon/widgets/leadsTabWidget/LeadsTabWidgetTemplate.html'
    };

    return directiveDefinitionObject;
}]).directive('leadsTable', function () {
    return {
        restrict: 'E',
        templateUrl: 'app/AppCommon/widgets/leadsTabWidget/LeadsTableTemplate.html',
        scope: { leads: '=', title: '@', source: '=' },
        controller: ['$scope', '$attrs', '$http', 'ResourceUtility', function ($scope, $attrs, $http, ResourceUtility) {
            $scope.ResourceUtility = ResourceUtility;
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/modelDetailsWidget/ModelDetailsWidget.js":
/*!************************************************************************!*\
  !*** ./app/AppCommon/widgets/modelDetailsWidget/ModelDetailsWidget.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.ModelDetailsWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.DateTimeFormatUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService', 'mainApp.appCommon.services.TopPredictorService', 'mainApp.models.controllers.ModelDetailController', 'lp.ratingsengine']).controller('ModelDetailsWidgetController', ["$stateParams", "$scope", "$rootScope", "ResourceUtility", "DateTimeFormatUtility", "NavUtility", "StringUtility", "ModelStore", "ModelService", "RatingsEngineStore", function ($stateParams, $scope, $rootScope, ResourceUtility, DateTimeFormatUtility, NavUtility, StringUtility, ModelStore, ModelService, RatingsEngineStore) {
    $scope.ResourceUtility = ResourceUtility;
    var data = ModelStore.data;

    if (data === undefined) {

        var ratingEngine = $scope.RatingEngine;
        var dashboard = ModelStore.getDashboardData();

        $scope.IsRatingEngine = true;
        $scope.viewingIteration = false;
        $scope.type = ratingEngine.type;
        $scope.displayName = ratingEngine.displayName;
        $scope.createdBy = ratingEngine.createdBy;
        $scope.created = ratingEngine.created;
        $scope.lastRefreshedDate = ratingEngine.lastRefreshedDate;

        if (ratingEngine.segment) {
            $scope.segmentName = ratingEngine.segment.display_name;
            $scope.totalAccounts = ratingEngine.segment.accounts;
        } else {
            $scope.segmentName = 'No segment selected';
            $scope.totalAccounts = '0';
        }

        $scope.IsRuleBased = ratingEngine.type === 'RULE_BASED' ? true : false;
        $scope.IsCustomEvent = ratingEngine.type === 'CUSTOM_EVENT' ? true : false;
        if ($scope.IsRuleBased || $scope.IsCustomEvent) {
            if ($scope.IsRuleBased) {
                $scope.typeContext = 'rule';
            } else {
                $scope.typeContext = 'AI';
            }
            $scope.modelingStrategy = ratingEngine.type;
        } else {
            var type = ratingEngine.type.toLowerCase();
            $scope.typeContext = 'AI';

            $scope.modelingStrategy = ratingEngine.latest_iteration.AI.advancedModelingConfig[type].modelingStrategy;
        }

        if ($scope.typeContext == 'AI') {

            $scope.totalIterations = dashboard.iterations.length;

            if (ratingEngine.published_iteration || ratingEngine.scoring_iteration) {
                $scope.model = ratingEngine.published_iteration ? ratingEngine.published_iteration.AI : ratingEngine.scoring_iteration.AI;
            } else {
                $scope.model = ratingEngine.latest_iteration.AI;
            }

            $scope.viewingIteration = $stateParams.viewingIteration ? true : false;

            $scope.expectedValueModel = $scope.model.predictionType === 'EXPECTED_VALUE' ? true : false;
            if ($scope.expectedValueModel) {
                $scope.averageRevenue = data.ModelDetails.AverageRevenue ? data.ModelDetails.AverageRevenue : false;
            }

            var engineId = $stateParams.rating_id,
                ratingModelId = $scope.model.id;

            RatingsEngineStore.getRatingModel(engineId, ratingModelId).then(function (iteration) {
                $scope.iteration = iteration.AI;

                if ($scope.viewingIteration) {
                    $scope.createdBy = iteration.AI.createdBy;
                    $scope.created = iteration.AI.created;
                }
            });
        }

        $scope.activeIteration = ratingEngine.scoring_iteration ? ratingEngine.scoring_iteration[$scope.typeContext].iteration : ratingEngine.latest_iteration[$scope.typeContext].iteration;
        $scope.modelIsReady = ratingEngine.scoring_iteration ? ratingEngine.scoring_iteration[$scope.typeContext].modelSummaryId !== null || ratingEngine.published_iteration[$scope.typeContext].modelSummaryId !== undefined : ratingEngine.latest_iteration[$scope.typeContext].modelSummaryId !== null || ratingEngine.latest_iteration[$scope.typeContext].modelSummaryId !== undefined;
        $scope.activeStatus = ratingEngine.status;

        $scope.$on('statusChange', function (event, args) {
            $scope.activeStatus = args.activeStatus;
            $scope.activeIteration = args.activeIteration;
        });
    } else {

        var widgetConfig = ModelStore.widgetConfig;
        var metadata = ModelStore.metadata;
        var dashboard = ModelStore.getDashboardData();
        var modelDetails = data.ModelDetails;

        $scope.displayName = modelDetails[widgetConfig.NameProperty];
        $scope.IsPmml = data.IsPmml;
        $scope.IsRatingEngine = modelDetails.Name.substring(0, 2) === 'ai';

        if ($scope.IsRatingEngine) {
            var engineId = $stateParams.rating_id,
                ratingEngine = RatingsEngineStore.getRatingEngine();

            var type = ratingEngine.type.toLowerCase();

            $scope.$on('statusChange', function (event, args) {
                $scope.activeStatus = args.activeStatus;
                $scope.activeIteration = args.activeIteration;
            });

            $scope.totalIterations = dashboard.iterations.length;
            $scope.externalAttributeCount = data.ExternalAttributes.total;
            $scope.internalAttributeCount = data.InternalAttributes.total;
            $scope.displayName = ratingEngine.displayName;
            $scope.createdBy = ratingEngine.createdBy;
            $scope.created = ratingEngine.created;

            $scope.IsRuleBased = ratingEngine.type === 'RULE_BASED' ? true : false;
            $scope.IsCustomEvent = ratingEngine.type === 'CUSTOM_EVENT' ? true : false;
            if ($scope.IsRuleBased || $scope.IsCustomEvent) {
                if ($scope.IsRuleBased) {
                    $scope.typeContext = 'rule';
                } else {
                    $scope.typeContext = 'AI';
                }
                $scope.modelingStrategy = ratingEngine.type;
            } else {
                var type = ratingEngine.type.toLowerCase();
                $scope.typeContext = 'AI';

                $scope.modelingStrategy = ratingEngine.latest_iteration.AI.advancedModelingConfig[type].modelingStrategy;
            }

            if ($scope.typeContext == 'AI') {

                var engineId = $stateParams.rating_id,
                    ratingModelId = data.ModelDetails.Name;

                if (ratingEngine.published_iteration || ratingEngine.scoring_iteration) {
                    $scope.model = ratingEngine.published_iteration ? ratingEngine.published_iteration.AI : ratingEngine.scoring_iteration.AI;
                } else {
                    $scope.model = ratingEngine.latest_iteration.AI;
                }

                $scope.viewingIteration = $stateParams.viewingIteration ? true : false;

                $scope.expectedValueModel = $scope.model.predictionType === 'EXPECTED_VALUE' ? true : false;
                if ($scope.expectedValueModel) {
                    $scope.averageRevenue = data.ModelDetails.AverageRevenue ? data.ModelDetails.AverageRevenue : false;
                }

                RatingsEngineStore.getRatingModel(engineId, ratingModelId).then(function (iteration) {
                    $scope.iteration = iteration.AI;

                    if ($scope.viewingIteration) {
                        $scope.createdBy = iteration.AI.createdBy;
                        $scope.created = iteration.AI.created;
                    }
                });
            }

            $scope.activeIteration = ratingEngine.scoring_iteration ? ratingEngine.scoring_iteration[$scope.typeContext].iteration : ratingEngine.latest_iteration[$scope.typeContext].iteration;
            $scope.modelIsReady = ratingEngine.scoring_iteration ? ratingEngine.scoring_iteration[$scope.typeContext].modelSummaryId !== null || ratingEngine.published_iteration[$scope.typeContext].modelSummaryId !== undefined : ratingEngine.latest_iteration[$scope.typeContext].modelSummaryId !== null || ratingEngine.latest_iteration[$scope.typeContext].modelSummaryId !== undefined;
            $scope.lastRefreshedDate = ratingEngine.lastRefreshedDate;
            $scope.activeStatus = ratingEngine.status;

            if (ratingEngine.segment) {
                $scope.segmentName = ratingEngine.segment.display_name;
                $scope.totalAccounts = ratingEngine.segment.accounts;
            } else {
                $scope.segmentName = 'No segment selected';
                $scope.totalAccounts = '0';
            }
        }

        var isActive = modelDetails[widgetConfig.StatusProperty] == 'Active';

        if (isActive) {
            $scope.status = ResourceUtility.getString("MODEL_DETAILS_ACTIVE_LABEL");
        } else {
            $scope.status = ResourceUtility.getString("MODEL_DETAILS_INACTIVE_LABEL");
        }

        $scope.modelType = modelDetails[widgetConfig.TypeProperty];

        // LPI "Model" modelType options
        // ----------------------
        // SalesforceLead
        // SalesforceAccount

        // CDL "Rating Engine" modelingStrategy options & modelingType options
        // ----------------------
        // CROSS_SELL_FIRST_PURCHASE SalesforceAccount
        // CROSS_SELL_REPEAT_PURCHASE SalesforceAccount


        if ($scope.modelType == 'SalesforceAccount') {
            $scope.modelTypeLabel = ResourceUtility.getString("MODEL_DETAILS_ACCOUNTS_TITLE");
        } else {
            $scope.modelTypeLabel = ResourceUtility.getString("MODEL_DETAILS_LEADS_TITLE");
        }

        $scope.score = modelDetails[widgetConfig.ScoreProperty];
        if ($scope.score != null && $scope.score < 1) {
            $scope.score = Math.round($scope.score * 100);
        }

        //data.TopSample = ModelService.FormatLeadSampleData(data.TopSample);
        if (data.ExternalAttributes) {
            $scope.externalAttributes = data.ExternalAttributes.total;
            $scope.externalAttributes = StringUtility.AddCommas($scope.externalAttributes);
            $scope.totalExternalPredictors = data.ExternalAttributes.totalAttributeValues;

            $scope.internalAttributes = data.InternalAttributes.total;
            $scope.internalAttributes = StringUtility.AddCommas($scope.internalAttributes);
            $scope.totalInternalPredictors = data.InternalAttributes.totalAttributeValues;
        }
        $scope.createdDate = modelDetails[widgetConfig.CreatedDateProperty];
        $scope.createdDate = $scope.createdDate * 1000;
        $scope.createdDate = DateTimeFormatUtility.FormatShortDate($scope.createdDate);
        $scope.totalLeads = modelDetails[widgetConfig.TotalLeadsProperty];
        $scope.totalLeads = StringUtility.AddCommas($scope.totalLeads);

        $scope.testSet = modelDetails[widgetConfig.TestSetProperty];
        $scope.testSet = StringUtility.AddCommas($scope.testSet);

        $scope.trainingSet = modelDetails[widgetConfig.TrainingSetProperty];
        $scope.trainingSet = StringUtility.AddCommas($scope.trainingSet);

        $scope.totalSuccessEvents = modelDetails[widgetConfig.TotalSuccessEventsProperty];
        $scope.totalSuccessEvents = StringUtility.AddCommas($scope.totalSuccessEvents);

        $scope.conversionRate = modelDetails[widgetConfig.TotalSuccessEventsProperty] / (modelDetails[widgetConfig.TestSetProperty] + modelDetails[widgetConfig.TrainingSetProperty]);
        if ($scope.conversionRate != null && $scope.conversionRate < 1) {
            $scope.conversionRate = $scope.conversionRate * 100;
            $scope.conversionRate = $scope.conversionRate.toFixed(2);
        } else if ($scope.conversionRate != null && $scope.conversionRate === 1) {
            $scope.conversionRate = $scope.conversionRate * 100;
            $scope.conversionRate = $scope.conversionRate.toFixed(0);
        }
        $scope.leadSource = modelDetails[widgetConfig.LeadSourceProperty];
        $scope.opportunity = modelDetails[widgetConfig.OpportunityProperty];

        $scope.dataExpanded = false;
        $scope.showMoreLabel = ResourceUtility.getString('MODEL_DETAILS_SHOW_MORE_BUTTON');
        $("#moreDataPoints").hide();

        $scope.backButtonClick = function ($event) {
            if ($event != null) {
                $event.preventDefault();
            }

            $rootScope.$broadcast(NavUtility.MODEL_LIST_NAV_EVENT);
        };

        $scope.showMoreClicked = function ($event) {
            if ($event != null) {
                $event.preventDefault();
            }
            $scope.dataExpanded = !$scope.dataExpanded;
            if ($scope.dataExpanded) {
                $scope.showMoreLabel = ResourceUtility.getString('MODEL_DETAILS_SHOW_LESS_BUTTON');
            } else {
                $scope.showMoreLabel = ResourceUtility.getString('MODEL_DETAILS_SHOW_MORE_BUTTON');
            }

            $("#moreDataPoints").slideToggle('400');
        };
    }
}]).directive('modelDetailsWidget', ["$compile", function ($compile) {
    var directiveDefinitionObject = {
        templateUrl: 'app/AppCommon/widgets/modelDetailsWidget/ModelDetailsWidgetTemplate.html'
    };

    return directiveDefinitionObject;
}]);

/***/ }),

/***/ "./app/AppCommon/widgets/modelListCreationHistoryWidget/ModelListCreationHistoryWidget.js":
/*!************************************************************************************************!*\
  !*** ./app/AppCommon/widgets/modelListCreationHistoryWidget/ModelListCreationHistoryWidget.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var app = angular.module('mainApp.appCommon.widgets.ModelListCreationHistoryWidget', ['mainApp.models.services.ModelService', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.core.services.FeatureFlagService', 'mainApp.models.modals.ImportModelModal']).controller('ModelListCreationHistoryWidgetController', ["$scope", "$rootScope", "$state", "ModelService", "ResourceUtility", "FeatureFlagService", "NavUtility", "ImportModelModal", function ($scope, $rootScope, $state, ModelService, ResourceUtility, FeatureFlagService, NavUtility, ImportModelModal) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.models = $scope.data;
    var flags = FeatureFlagService.Flags();

    $scope.showUploadSummaryJson = FeatureFlagService.FlagIsEnabled(flags.UPLOAD_JSON);

    $scope.showUploadModel = FeatureFlagService.FlagIsEnabled(flags.UPLOAD_JSON);

    $scope.undoDeleteModel = function (modelId) {
        if (modelId == null) {
            return;
        }

        ModelService.undoDeletedModel(modelId).then(function (result) {
            if (result.success) {
                $state.go('home.models.history', {}, { reload: true });
            } else {
                //TODO:song handle errors
                $state.go('home.models.history', {}, { reload: true });
            }
        });
    };

    $scope.importClicked = function () {
        ImportModelModal.show();
    };

    $scope.importJSON = function () {
        ImportModelModal.show();
    };
}]).directive('modelListCreationHistoryWidget', function () {
    return {
        templateUrl: 'app/AppCommon/widgets/modelListCreationHistoryWidget/ModelListCreationHistoryWidgetTemplate.html'
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/modelListTileWidget/ModelListTileWidget.js":
/*!**************************************************************************!*\
  !*** ./app/AppCommon/widgets/modelListTileWidget/ModelListTileWidget.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.ModelListTileWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.core.services.FeatureFlagService', 'mainApp.models.services.ModelService', 'mainApp.models.modals.DeleteModelModal', 'mainApp.models.modals.StaleModelModal', 'mainApp.models.modals.DeactivateModelModal', 'mainApp.models.modals.CopyModelToTenantModal']).directive('modelListTileWidget', function () {
    return {
        restrict: 'A',
        scope: {
            data: '='
        },
        templateUrl: 'app/AppCommon/widgets/modelListTileWidget/ModelListTileWidgetTemplate.html',
        controller: ["$scope", "$state", "$rootScope", "$document", "$element", "ResourceUtility", "BrowserStorageUtility", "NavUtility", "DeleteModelModal", "StaleModelModal", "DeactivateModelModal", "FeatureFlagService", "ModelService", "CopyModelToTenantModal", "ModelRatingsService", function controller($scope, $state, $rootScope, $document, $element, ResourceUtility, BrowserStorageUtility, NavUtility, DeleteModelModal, StaleModelModal, DeactivateModelModal, FeatureFlagService, ModelService, CopyModelToTenantModal, ModelRatingsService) {
            $scope.ResourceUtility = ResourceUtility;
            $scope.nameStatus = {
                editing: false
            };

            var data = $scope.data;
            var flags = FeatureFlagService.Flags();

            $scope.hasRatingsAvailable = $scope.data.HasBucketMetadata;
            $scope.mayChangeModelNames = FeatureFlagService.FlagIsEnabled(flags.CHANGE_MODEL_NAME);
            $scope.mayDeleteModels = FeatureFlagService.FlagIsEnabled(flags.DELETE_MODEL);
            $scope.showRefineAndClone = FeatureFlagService.FlagIsEnabled(flags.VIEW_REFINE_CLONE);
            $scope.showReviewModel = FeatureFlagService.FlagIsEnabled(flags.REVIEW_MODEL);
            $scope.mayEditModelsClass = $scope.mayChangeModelNames ? "model-name-editable" : "";
            $scope.mayActivateModels = true;
            if (BrowserStorageUtility.getSessionDocument() != null && BrowserStorageUtility.getSessionDocument().User != null && BrowserStorageUtility.getSessionDocument().User.AccessLevel != null) {
                var accessLevel = BrowserStorageUtility.getSessionDocument().User.AccessLevel;
                if (accessLevel == "EXTERNAL_USER") {
                    $scope.mayActivateModels = false;
                }
            }

            $scope.isNotPmmlModel = $scope.data.ModelFileType !== 'PmmlModel';
            $scope.canRemodel = FeatureFlagService.FlagIsEnabled(flags.VIEW_REMODEL) && $scope.data.ModelFileType !== 'PmmlModel' && !$scope.data.Uploaded;
            $scope.modelRecommendation = !!$scope.data.ConflictWithOptionalRules;

            //TODO:pierce Field names subject to change
            $scope.isActive = data.Status === "Active";
            $scope.showCustomMenu = false;

            $scope.customMenuClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }

                $scope.showCustomMenu = !$scope.showCustomMenu;

                if ($scope.showCustomMenu) {
                    $(document).bind('click', function (event) {
                        var isClickedElementChildOfPopup = $element.find(event.target).length > 0;

                        if (isClickedElementChildOfPopup) return;

                        $scope.$apply(function () {
                            $scope.showCustomMenu = false;
                            $(document).unbind(event);
                        });
                    });
                }
            };

            $scope.reviewRatingsClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }
            };

            $scope.refineAndCloneClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }
            };

            $scope.reviewClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }
            };

            $scope.remodelClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }
            };

            $scope.updateAsActiveClick = function ($event) {

                if ($event != null) {
                    $event.stopPropagation();
                }
                var modelId = $scope.data.Id;

                updateAsActiveModel(modelId);

                function updateAsActiveModel(modelId) {
                    ModelService.updateAsActiveModel(modelId).then(function (result) {
                        if (result != null && result.success === true) {
                            $state.go('home.models', {}, { reload: true });
                        } else {
                            console.log("errors");
                        }
                    });
                };
            };

            $scope.updateAsInactiveClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }

                $scope.Deactivating = true;

                DeactivateModelModal.show($scope.data.Id);
                $scope.$on('deactivate:modal:cancel', function (event, args) {
                    $scope.Deactivating = false;
                });
            };

            $scope.deleteModelClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }
                DeleteModelModal.show($scope.data.Id);
            };

            $scope.modelNameEditClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }

                if ($scope.mayChangeModelNames) {
                    //Changing the name of the model
                    $scope.nameStatus.editing = true;
                }
            };

            $scope.tileClick = function ($event) {

                console.log($scope.data, data);

                if ($event != null && $scope.nameStatus.editing) {
                    $event.preventDefault();
                }
                if (!$scope.nameStatus.editing && !data.Incomplete) {
                    $rootScope.$broadcast(NavUtility.MODEL_DETAIL_NAV_EVENT, data);
                } else if (!$scope.nameStatus.editing && data.Incomplete && $scope.data.ModelFileType != "PmmlModel") {
                    StaleModelModal.show($scope.data.Id);
                }
            };

            $scope.showCopyModelToTenantModal = function ($event, model) {
                if ($event != null) {
                    $event.stopPropagation();
                }
                CopyModelToTenantModal.show(model);
            };
        }]
    };
}).controller('ChangeModelNameController', ["$scope", "$state", "$rootScope", "NavUtility", "ResourceUtility", "ModelStore", "ModelService", function ($scope, $state, $rootScope, NavUtility, ResourceUtility, ModelStore, ModelService) {
    $scope.submitting = false;
    $scope.showNameEditError = false;
    $scope.DisplayName = $scope.$parent.data.DisplayName == null ? $scope.$parent.name : $scope.$parent.data.DisplayName;

    $scope.closeErrorClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.showPasswordError = false;
    };

    $scope.submit = function ($event) {
        if ($event != null) $event.stopPropagation();

        $scope.showNameEditError = false;

        if ($scope.submitting) {
            return;
        }
        $scope.submitting = true;

        var validationResult = ModelService.validateModelName($scope.DisplayName);

        if (!validationResult.valid) {
            $scope.nameEditErrorMessage = validationResult.errMsg;
            $scope.showNameEditError = true;
            $scope.submitting = false;
            return;
        }

        ModelService.ChangeModelDisplayName($scope.$parent.data.Id, $scope.DisplayName).then(function (result) {

            if (result.Success) {
                $rootScope.$broadcast(NavUtility.MODEL_LIST_NAV_EVENT, {});

                $scope.nameStatus.editing = false;

                ModelStore.removeModel($scope.$parent.data.Id);

                $state.go('.', {}, { reload: true });
            } else {
                $scope.nameEditErrorMessage = result.ResultErrors;
                $scope.showNameEditError = true;
                $scope.submitting = false;
            }
        });
    };

    $scope.cancel = function ($event) {
        if ($event != null) $event.stopPropagation();
        $scope.showNameEditError = false;
        $scope.DisplayName = $scope.$parent.data.DisplayName == null ? $scope.$parent.name : $scope.$parent.data.DisplayName;
        $scope.nameStatus.editing = false;
    };
}]);

/***/ }),

/***/ "./app/AppCommon/widgets/performanceTabWidget/DataTable.js":
/*!*****************************************************************!*\
  !*** ./app/AppCommon/widgets/performanceTabWidget/DataTable.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.performanceTab.DataTable', ['mainApp.appCommon.utilities.ResourceUtility']).directive('dataTable', function () {
    return {
        templateUrl: 'app/AppCommon/widgets/performanceTabWidget/DataTableTemplate.html',
        scope: { data: "=", columns: "=", title: "@" },
        controller: ["$scope", "ResourceUtility", function controller($scope, ResourceUtility) {}]
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/performanceTabWidget/LiftChart.js":
/*!*****************************************************************!*\
  !*** ./app/AppCommon/widgets/performanceTabWidget/LiftChart.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.performanceTab.LiftChart', ['mainApp.appCommon.utilities.ResourceUtility']).directive('liftChart', function () {
    return {
        template: '<div id="liftChart" class="lift-chart"></div>',
        scope: { data: "=" },
        controller: ["$scope", "$filter", "ResourceUtility", function controller($scope, $filter, ResourceUtility) {
            if ($scope.data == null) {
                return;
            }

            var data = $scope.data;
            var targetSet = true;
            //==================================================
            // Specify Dimensions
            //==================================================
            var width = 840,
                margin = { top: 5, right: 0, bottom: 69, left: 936 - width },
                height = 363 - margin.top - margin.bottom;

            // iterators
            var i;

            //==================================================
            // Max Lift and Lift Ticks
            //==================================================
            var maxLift, nTicks;

            maxLift = d3.max(data) * 1.1; // 10% extra height for the lift label of the highest bar
            var halfIntegerTicks = maxLift <= 5.5; // show half integer ticks only if max lift is <= 5.0

            if (halfIntegerTicks) {
                nTicks = Math.ceil(maxLift * 2.0);
                maxLift = nTicks * 0.5;
            } else {
                nTicks = Math.ceil(maxLift);
                maxLift = nTicks;
            }

            //==================================================
            // Define Axes
            //==================================================
            var x = d3.scale.linear().range([0, width]);
            var y = d3.scale.linear().range([height, 0]);
            var yAxis = d3.svg.axis().scale(y).ticks(nTicks).innerTickSize(3).orient("left");

            //==================================================
            // Specify Tick Formats
            //==================================================
            if (halfIntegerTicks) {
                yAxis.tickFormat(function (d) {
                    return d * 2 % 1 === 0 ? $filter("number")(d, 1) : "";
                });
            } else {
                yAxis.tickFormat(function (d) {
                    return d % 1 === 0 ? $filter("number")(d, 1) : "";
                });
            }

            //==================================================
            // Define Domains
            //==================================================
            x.domain([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
            y.domain([0, maxLift]);

            //==================================================
            // Append Primary
            //==================================================
            var svg = d3.select("#liftChart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            //==================================================
            // Append Grey Background
            //==================================================
            svg.append("rect").attr("id", "upper-gradient").attr("x", 0).attr("y", 0).attr("width", width).attr("height", height).attr("fill", "#f2f4f8");

            //==================================================
            // Append Grid Lines and x Ticks
            //==================================================
            for (i = 1; i < 10; i++) {
                var xLoc = x(i * 0.1);
                svg.append("line").attr("x1", xLoc).attr("y1", "0").attr("x2", xLoc).attr("y2", height).attr("stroke-width", "1").style("stroke", "white");
            }

            for (i = 0; i < 10; i++) {
                svg.append("text").attr("x", x(i * 0.1 + 0.05)).attr("y", height + 15).style("text-anchor", "middle").style("font-size", "11px").style("font-family", "ProximaNova-Semibold").style("fill", "#aaa").text(bucketLabel(i));
            }

            function bucketLabel(i) {
                var start = 91 - i * 10;
                var end = 100 - i * 10;
                return String(start) + " - " + String(end);
            }

            //==================================================
            // Append Axes
            //==================================================
            svg.append("g").attr("class", "y axis").attr("transform", "translate(-3, 0)").style("font-size", "11px").style("font-weight", "700").style("fill", "#999").call(yAxis);

            svg.append("text").attr("transform", "translate(" + -55 + ", " + height / 2 + ") rotate(-90)").style("text-anchor", "middle").style("font-size", "12px").style("font-family", "ProximaNova-Semibold").style("fill", "#aaa").text(ResourceUtility.getString("LIFT_CHART_Y_AXIS_LABEL"));

            svg.append("text").attr("transform", "translate(" + x(0.5) + ", " + (height + 58) + ")").style("text-anchor", "middle").style("font-size", "12px").style("font-family", "ProximaNova-Semibold").style("fill", "#aaa").text(ResourceUtility.getString("LIFT_CHART_X_AXIS_LABEL"));

            //==================================================
            // Apply Tick Coloring
            //==================================================
            d3.selectAll(".axis g.tick line").style("stroke", "#999");

            //==================================================
            // Hide Axis Paths
            //==================================================
            d3.selectAll(".axis path").style("display", "none");

            //==================================================
            // Append Bars
            //==================================================

            data.forEach(function (lift, index) {
                drawBar(x(0.1 * (index + 0.5)), lift, lift >= 1.0 ? '#477cba' : '#f6b300', lift >= 1.0 ? '#4376b1' : '#e9aa00');
            });

            function drawBar(xCent, lift, majorColor, minorColor) {
                var yTop = y(lift);
                svg.append("rect").attr("x", xCent - 33).attr("y", yTop).attr("width", 59).attr("height", y(0) - yTop).attr("fill", majorColor);
                svg.append("rect").attr("x", xCent + 26).attr("y", yTop).attr("width", 7).attr("height", y(0) - yTop).attr("fill", minorColor);
                svg.append("text").attr("x", xCent).attr("y", yTop - 5).style("text-anchor", "middle").style("font-size", "16px").style("font-family", "ProximaNova-Bold").style("fill", "#333333").text(lift2str(lift));
            }

            //==================================================
            // Append Unity Lift Level
            //==================================================
            drawLiftLevel(1);

            function drawLiftLevel(lift) {
                var yLoc = y(lift);
                //==================================================
                // Level Grid Line
                //==================================================
                svg.append("line").attr("x1", 0).attr("y1", yLoc).attr("x2", x(1)).attr("y2", yLoc).attr("stroke-width", "1").style("stroke-dasharray", "2, 2").style("stroke", "#bbbbbb");

                //==================================================
                // Append Level Marker
                //==================================================
                var points = [{ "x": -3, "y": yLoc }, { "x": -8, "y": yLoc + 7 }, { "x": -23, "y": yLoc + 7 }, { "x": -24, "y": yLoc + 6 }, { "x": -24, "y": yLoc - 6 }, { "x": -23, "y": yLoc - 7 }, { "x": -8, "y": yLoc - 7 }];

                function points2str(pts) {
                    return pts.map(function (pt) {
                        return [String(pt.x), String(pt.y)].join(",");
                    }).join(" ");
                }

                svg.append("polygon").attr("points", points2str(points)).attr("fill", "#666");

                svg.append("text").attr("x", -15).attr("y", yLoc + 3.8).style("text-anchor", "middle").style("font-size", "11px").style("font-family", "ProximaNova-Bold").style("fill", "white").text($filter("number")(lift, 1));
            }

            function lift2str(lift) {
                return $filter("number")(lift, 1) + "x";
            }
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/performanceTabWidget/PerformanceTabWidget.js":
/*!****************************************************************************!*\
  !*** ./app/AppCommon/widgets/performanceTabWidget/PerformanceTabWidget.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.PerformanceTabWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.widgets.performanceTab.ThresholdExplorer', 'mainApp.appCommon.widgets.performanceTab.LiftChart', 'mainApp.appCommon.widgets.performanceTab.DataTable']).directive('performanceTabWidget', function () {
    return {
        templateUrl: 'app/AppCommon/widgets/performanceTabWidget/PerformanceTabTemplate.html',
        controller: ['$scope', '$filter', 'ResourceUtility', function ($scope, $filter, ResourceUtility) {
            //if ($scope.data == null) return;

            $scope.threasholdData = $scope.data.ThresholdChartData;
            $scope.sourceSchemaType = $scope.data.ModelDetails.SourceSchemaInterpretation;

            $scope.decileData = [[ResourceUtility.getString("DECILE_GRID_CONVERSIONS")]];
            $scope.data.ThresholdDecileData.forEach(function (d) {
                $scope.decileData[0].push($filter("number")(d, 0) + "%");
            });
            var top_label = ResourceUtility.getString("DECILE_GRID_TOP_LABEL");
            $scope.decileColumns = [{ title: $scope.sourceSchemaType == "SalesforceLead" ? ResourceUtility.getString("DECILE_GRID_LEADS_LABEL") : ResourceUtility.getString("DECILE_GRID_ACCOUNTS_LABEL") }, { title: "10%", superTitle: top_label }, { title: "20%", superTitle: top_label }, { title: "30%", superTitle: top_label }, { title: "40%", superTitle: top_label }, { title: "50%", superTitle: top_label }, { title: "60%", superTitle: top_label }, { title: "70%", superTitle: top_label }, { title: "80%", superTitle: top_label }, { title: "90%", superTitle: top_label }, { title: "100%", superTitle: top_label }];

            $scope.liftChartData = $scope.data.ThresholdLiftData;

            $scope.liftData = [[ResourceUtility.getString("LIFT_GRID_LIFT")]];
            ($scope.data.ThresholdLiftData || []).forEach(function (d) {
                $scope.liftData[0].push($filter("number")(d, 1) + "x");
            });
            $scope.liftColumns = [{ title: $scope.sourceSchemaType == "SalesforceLead" ? ResourceUtility.getString("LIFT_GRID_LEAD_SCORE") : ResourceUtility.getString("LIFT_GRID_ACCOUNT_SCORE") }, { title: "91-100" }, { title: "81-90" }, { title: "71-80" }, { title: "61-70" }, { title: "51-60" }, { title: "41-50" }, { title: "31-40" }, { title: "21-30" }, { title: "11-20" }, { title: "1-10" }];
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/performanceTabWidget/ThresholdExplorer.js":
/*!*************************************************************************!*\
  !*** ./app/AppCommon/widgets/performanceTabWidget/ThresholdExplorer.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.performanceTab.ThresholdExplorer', ['mainApp.appCommon.utilities.ResourceUtility']).directive('thresholdExplorer', function () {
    return {
        template: '<div id="thresholdExplorerChart" class="threshold-explorer-chart"></div>',
        scope: { data: "=", source: '=' },
        controller: ["$scope", "ResourceUtility", function controller($scope, ResourceUtility) {
            if ($scope.data == null) {
                return;
            }

            var data = $scope.data;
            var targetSet = true;
            //==================================================
            // Specify Dimensions
            //==================================================
            var margin = { top: 47, right: 50, bottom: 89, left: 130 },
                width = 936 - margin.left - margin.right,
                height = 336 - margin.top - margin.bottom;

            //==================================================
            // Define Axes
            //==================================================
            var x = d3.scale.linear().range([0, width]);

            var y = d3.scale.linear().range([height, 0]);

            var xAxis = d3.svg.axis().scale(x).ticks(100).innerTickSize(3).orient("bottom");

            var yAxis = d3.svg.axis().scale(y).ticks(10).innerTickSize(3).orient("left");

            //==================================================
            // Specify Tick Formats
            //==================================================
            xAxis.tickFormat(function (d) {
                return d % 10 === 0 ? d : "";
            });

            yAxis.tickFormat(function (d) {
                return d % 10 === 0 ? d : "";
            });

            //==================================================
            // Define Domains
            //==================================================
            x.domain(d3.extent(data, function (d) {
                return d.leads;
            }));
            y.domain(d3.extent(data, function (d) {
                return d.conversions;
            }));

            //==================================================
            // Define Line/Area
            //==================================================
            var line = d3.svg.line().x(function (d) {
                return x(d.leads);
            }).y(function (d) {
                return y(d.conversions);
            });

            var lowerArea = d3.svg.area().x(function (d) {
                return x(d.leads);
            }).y0(height).y1(function (d) {
                return y(d.conversions);
            });

            var upperArea = d3.svg.area().x(function (d) {
                return x(d.leads);
            }).y0(-1).y1(function (d) {
                return y(d.conversions);
            });

            //==================================================
            // Append Primary
            //==================================================
            var svg = d3.select("#thresholdExplorerChart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").style("cursor", "pointer").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            //==================================================
            // Append Lower Area (With Gradient)
            //==================================================
            // svg.append("linearGradient")
            //     .attr("id", "lower-gradient")
            //     .attr("x1", "0%").attr("y1", "0%")
            //     .attr("x2", "0%").attr("y2", "100%")
            //     .attr("spreadMethod", "pad")
            //     .selectAll("stop")
            //     .data([{offset: "0%", color: "#6aa9ff", opacity: 0.6},{offset: "100%", color: "#6aa9ff", opacity: 0.1}])
            //     .enter().append("stop")
            //     .attr("offset", function(d) { return d.offset; })
            //     .attr("stop-color", function(d) { return d.color; })
            //     .attr("stop-opacity", function(d) { return d.opacity; });

            svg.append("path").datum(data)
            // .style("fill", "url(#lower-gradient)")
            .style("fill", "rgba(106, 169, 255, 0.3)").attr("d", lowerArea);

            //==================================================
            // Append Upper Area (With Gradient)
            //==================================================
            // svg.append("linearGradient")
            //     .attr("id", "upper-gradient")
            //     .attr("x1", "0%")
            //     .attr("y1", "0%")
            //     .attr("x2", "100%")
            //     .attr("y2", "100%")
            //     .attr("spreadMethod", "pad")
            //     .selectAll("stop")
            //     .data([{offset: "0%", color: "#f2f4f8", opacity: 1.0},
            //         {offset: "100%", color: "#f2f4f8", opacity: 1.0}])
            //     .enter().append("stop")
            //     .attr("offset", function(d) { return d.offset; })
            //     .attr("stop-color", function(d) { return d.color; })
            //     .attr("stop-opacity", function(d) { return d.opacity; });

            svg.append("path").datum(data).style("fill", "#f2f4f8").attr("d", upperArea);

            //==================================================
            // Append Axes
            //==================================================
            svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + (height + 3) + ")").style("font-size", "9px").style("font-weight", "700").style("fill", "#999").call(xAxis).append("text").attr("transform", "translate(" + width / 2 + " , 77)").style("text-anchor", "middle").style("font-size", "12px").style("font-family", "ProximaNova-Semibold").style("fill", "#aaa").text($scope.source == "SalesforceLead" ? ResourceUtility.getString("THRESHOLD_EXPLORER_X_AXIS_LABEL") : ResourceUtility.getString("THRESHOLD_EXPLORER_X_AXIS_LABEL_ACCOUNTS"));

            svg.append("g").attr("class", "y axis").attr("transform", "translate(-3, 0)").style("font-size", "9px").style("font-weight", "700").style("fill", "#999").call(yAxis).append("text").attr("transform", "translate(" + -95 + ", " + height / 2 + ") rotate(-90)").style("text-anchor", "middle").style("font-size", "12px").style("font-family", "ProximaNova-Semibold").style("fill", "#aaa").text(ResourceUtility.getString("THRESHOLD_EXPLORER_Y_AXIS_LABEL"));

            //==================================================
            // Apply Tick Coloring
            //==================================================
            d3.selectAll(".axis g.tick line").style("stroke", function (d) {
                return d % 10 === 0 ? "#666" : "#ddd";
            });

            //==================================================
            // Hide Axis Paths
            //==================================================
            d3.selectAll(".axis path").style("display", "none");

            //==================================================
            // Append Grid Lines
            //==================================================
            for (var i = 1; i < 10; i++) {
                var xLoc = x(i * 10);
                if (xLoc) {
                    svg.append("line").attr("x1", xLoc).attr("y1", "0").attr("x2", xLoc).attr("y2", height).attr("stroke-width", "1").style("stroke", "white");
                }
            }

            //==================================================
            // Append Data Line
            //==================================================
            svg.append("path").datum(data).style("fill", "none").style("stroke", "#2579ad").style("stroke-width", "2").attr("d", line);

            //==================================================
            // Append Borders
            //==================================================
            svg.append("line").attr("x1", "0").attr("y1", "0").attr("x2", "0").attr("y2", height).style("stroke", "#ccc");

            svg.append("line").attr("x1", width).attr("y1", "0").attr("x2", width).attr("y2", height).style("stroke", "#ccc");

            //==================================================
            // Append Info Elements
            //==================================================
            var infoElements = svg.append("g");

            infoElements.append("line").attr("class", "x").attr("x1", -34).attr("y1", "0").attr("x2", width).attr("y2", "0").attr("stroke-dasharray", "2 2").style("stroke", "#666");

            infoElements.append("line").attr("class", "y").attr("x1", "0").attr("y1", "0").attr("x2", "0").attr("y2", height + 62).attr("stroke-dasharray", "2 2").style("stroke", "#666");

            infoElements.append("circle").attr("class", "y").style("fill", "white").style("stroke", "#2579ad").style("stroke-width", "2").attr("r", 6.5);

            infoElements.append("text").attr("class", "rltext").style("text-anchor", "start").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_LIFT_LABEL"));

            infoElements.append("text").attr("class", "rtext").style("text-anchor", "start").style("fill", "#333").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

            infoElements.append("text").attr("class", "lltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_LIFT_LABEL"));

            infoElements.append("text").attr("class", "ltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

            infoElements.append("text").attr("class", "xltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_CONVERSION_LABEL"));

            infoElements.append("text").attr("class", "xtext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#477cba").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

            infoElements.append("text").attr("class", "lyltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_LEADS_LABEL"));

            infoElements.append("text").attr("class", "lytext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#477cba").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

            infoElements.append("text").attr("class", "ryltext").style("text-anchor", "start").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_SCORE_LABEL"));

            infoElements.append("text").attr("class", "rytext").style("text-anchor", "start").style("fill", "#477cba").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

            infoElements.append("polygon").attr("class", "rarrow").attr("points", "0,0, 0,6, 4,3").style("fill", "#447bbc").attr("stroke", "#447bbc");

            infoElements.append("polygon").attr("class", "larrow").attr("points", "4,0, 4,6, 0,3").style("fill", "#447bbc").attr("stroke", "#447bbc");

            infoElements.append("circle").attr("class", "xball").style("fill", "#447bbc").attr("stroke", "#447bbc").attr("r", 2.0);

            infoElements.append("circle").attr("class", "yball").style("fill", "#447bbc").attr("stroke", "#447bbc").attr("r", 2.0);

            infoElements.append("line").attr("class", "d").attr("x1", "0").attr("y1", "0").attr("x2", "0").attr("y2", "25").style("stroke", "#c6cbd1");

            //==================================================
            // Specify Info Element Update
            //==================================================
            function updateInfoElements(d) {
                if (!d) {
                    return;
                }
                infoElements.select("circle.y").attr("transform", "translate(" + x(d.leads) + "," + y(d.conversions) + ")");

                infoElements.select("line.x").attr("transform", "translate(" + "0" + "," + y(d.conversions) + ")");

                infoElements.select("line.y").attr("transform", "translate(" + x(d.leads) + "," + "-40" + ")");

                infoElements.select("line.d").attr("transform", "translate(" + x(d.leads) + "," + (height + 30) + ")");

                infoElements.select("text.rltext").attr("transform", "translate(" + (x(d.leads) + 15) + "," + "-30" + ")");

                infoElements.select("text.rtext").text((d.rightLift !== 0 ? d.rightLift.toFixed(2) : 0) + "x").attr("transform", "translate(" + (x(d.leads) + 14) + "," + "-13" + ")");

                infoElements.select("text.lltext").attr("transform", "translate(" + (x(d.leads) - 16) + "," + "-30" + ")");

                infoElements.select("text.ltext").text(d.leftLift.toFixed(2) + "x").attr("transform", "translate(" + (x(d.leads) - 16) + "," + "-13" + ")");

                infoElements.select("polygon.larrow").attr("transform", "translate(" + (x(d.leads) - 10) + "," + "-30" + ")");

                infoElements.select("polygon.rarrow").attr("transform", "translate(" + (x(d.leads) + 5) + "," + "-30" + ")");

                infoElements.select("circle.xball").attr("transform", "translate(" + "-36" + "," + y(d.conversions) + ")");

                infoElements.select("circle.yball").attr("transform", "translate(" + x(d.leads) + "," + (height + 25) + ")");

                infoElements.select("text.xltext").attr("transform", "translate(" + -40 + "," + (y(d.conversions) - 3) + ")");

                infoElements.select("text.xtext").text(d.conversions.toFixed(0) + "%").attr("transform", "translate(" + -40 + "," + (y(d.conversions) + 14) + ")");

                infoElements.select("text.lyltext").attr("transform", "translate(" + (x(d.leads) - 10) + "," + (height + 38) + ")");

                infoElements.select("text.lytext").text(d.leads + "%").attr("transform", "translate(" + (x(d.leads) - 10) + "," + (height + 55) + ")");

                infoElements.select("text.ryltext").attr("transform", "translate(" + (x(d.leads) + 9) + "," + (height + 38) + ")");

                infoElements.select("text.rytext").text("> " + (d.score - 1)).attr("transform", "translate(" + (x(d.leads) + 9) + "," + (height + 55) + ")");
            }

            //==================================================
            // Specify Default Info Elements Location
            //==================================================
            function setDefaultInfoElements() {
                updateInfoElements(data[20]);
            }

            //==================================================
            // Update Info Elements
            //==================================================
            setDefaultInfoElements();

            //==================================================
            // Append Capture Area
            //==================================================
            svg.append("rect").attr("x", -10).attr("y", -10).attr("width", width + 20).attr("height", height + 20).style("fill", "none").style("pointer-events", "all").on("mousemove", captureMouseMove).on("mousedown", captureMouseDown);

            //==================================================
            // Capture Area: MouseMove
            //==================================================
            var bisectLeads = d3.bisector(function (d) {
                return d.leads;
            }).left;
            function captureMouseMove() {
                if (targetSet) {
                    return;
                }

                var x0 = x.invert(d3.mouse(this)[0]),
                    i = bisectLeads(data, x0, 1);

                if (i > 99) {
                    updateInfoElements(data[99]);
                    return;
                }

                var d0 = data[i - 1],
                    d1 = data[i],
                    d = x0 - d0.leads > d1.leads - x0 ? d1 : d0;

                if (d.leads === 0) {
                    updateInfoElements(data[1]);
                } else {
                    updateInfoElements(d);
                }
            }

            //==================================================
            // Capture Area: MouseDown
            //==================================================
            function captureMouseDown() {
                targetSet = !targetSet;
                var x0 = x.invert(d3.mouse(this)[0]),
                    i = bisectLeads(data, x0, 1);

                if (i > 99) {
                    updateInfoElements(data[99]);
                    return;
                }

                var d0 = data[i - 1],
                    d1 = data[i],
                    d = x0 - d0.leads > d1.leads - x0 ? d1 : d0;

                if (d.leads === 0) {
                    updateInfoElements(data[1]);
                } else {
                    updateInfoElements(d);
                }
            }
        }]
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/thresholdExplorerWidget/ThresholdExplorerWidget.js":
/*!**********************************************************************************!*\
  !*** ./app/AppCommon/widgets/thresholdExplorerWidget/ThresholdExplorerWidget.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.ThresholdExplorerWidget', ['mainApp.appCommon.utilities.ResourceUtility']).controller('ThresholdExplorerWidgetController', ["$scope", "ResourceUtility", function ($scope, ResourceUtility) {
    var widgetConfig = $scope.widgetConfig;
    var modelSummary = $scope.data;

    if (modelSummary == null) {
        return;
    }

    var data = modelSummary.ThresholdChartData;
    var targetSet = true;
    //==================================================
    // Specify Dimensions
    //==================================================
    var margin = { top: 47, right: 150, bottom: 89, left: 204 },
        width = 1154 - margin.left - margin.right,
        height = 336 - margin.top - margin.bottom;

    //==================================================
    // Define Axes
    //==================================================
    var x = d3.scale.linear().range([0, width]);

    var y = d3.scale.linear().range([height, 0]);

    var xAxis = d3.svg.axis().scale(x).ticks(100).innerTickSize(3).orient("bottom");

    var yAxis = d3.svg.axis().scale(y).ticks(100).innerTickSize(3).orient("left");

    //==================================================
    // Specify Tick Formats
    //==================================================
    xAxis.tickFormat(function (d) {
        return d % 10 === 0 ? d : "";
    });

    yAxis.tickFormat(function (d) {
        return d % 10 === 0 ? d : "";
    });

    //==================================================
    // Define Domains
    //==================================================
    x.domain(d3.extent(data, function (d) {
        return d.leads;
    }));
    y.domain(d3.extent(data, function (d) {
        return d.conversions;
    }));

    //==================================================
    // Define Line/Area
    //==================================================
    var line = d3.svg.line().x(function (d) {
        return x(d.leads);
    }).y(function (d) {
        return y(d.conversions);
    });

    var lowerArea = d3.svg.area().x(function (d) {
        return x(d.leads);
    }).y0(height).y1(function (d) {
        return y(d.conversions);
    });

    var upperArea = d3.svg.area().x(function (d) {
        return x(d.leads);
    }).y0(-1).y1(function (d) {
        return y(d.conversions);
    });

    //==================================================
    // Append Primary
    //==================================================
    var svg = d3.select("#thresholdExplorerChart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").style("cursor", "pointer").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    //==================================================
    // Append Lower Area (With Gradient)
    //==================================================
    svg.append("linearGradient").attr("id", "lower-gradient").attr("x1", "0%").attr("y1", "0%").attr("x2", "0%").attr("y2", "100%").attr("spreadMethod", "pad").selectAll("stop").data([{ offset: "0%", color: "#6aa9ff", opacity: 0.6 }, { offset: "100%", color: "#6aa9ff", opacity: 0.1 }]).enter().append("stop").attr("offset", function (d) {
        return d.offset;
    }).attr("stop-color", function (d) {
        return d.color;
    }).attr("stop-opacity", function (d) {
        return d.opacity;
    });

    svg.append("path").datum(data).style("fill", "url(#lower-gradient)").attr("d", lowerArea);

    //==================================================
    // Append Upper Area (With Gradient)
    //==================================================
    svg.append("linearGradient").attr("id", "upper-gradient").attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "100%").attr("spreadMethod", "pad").selectAll("stop").data([{ offset: "0%", color: "#f2f4f8", opacity: 1.0 }, { offset: "100%", color: "#f2f4f8", opacity: 1.0 }]).enter().append("stop").attr("offset", function (d) {
        return d.offset;
    }).attr("stop-color", function (d) {
        return d.color;
    }).attr("stop-opacity", function (d) {
        return d.opacity;
    });

    svg.append("path").datum(data).style("fill", "url(#upper-gradient)").attr("d", upperArea);

    //==================================================
    // Append Axes
    //==================================================
    svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + (height + 3) + ")").style("font-size", "9px").style("font-weight", "700").style("fill", "#999").call(xAxis).append("text").attr("transform", "translate(" + width / 2 + " , 77)").style("text-anchor", "middle").style("font-size", "14px").style("font-family", "ProximaNova-Semibold").style("fill", "#aaa").text(ResourceUtility.getString("THRESHOLD_EXPLORER_X_AXIS_LABEL"));

    svg.append("g").attr("class", "y axis").attr("transform", "translate(-3, 0)").style("font-size", "9px").style("font-weight", "700").style("fill", "#999").call(yAxis).append("text").attr("transform", "translate(" + -100 + ", " + height / 2 + ") rotate(-90)").style("text-anchor", "middle").style("font-size", "14px").style("font-family", "ProximaNova-Semibold").style("fill", "#aaa").text(ResourceUtility.getString("THRESHOLD_EXPLORER_Y_AXIS_LABEL"));

    //==================================================
    // Apply Tick Coloring
    //==================================================
    d3.selectAll(".axis g.tick line").style("stroke", function (d) {
        return d % 10 === 0 ? "#666" : "#ddd";
    });

    //==================================================
    // Hide Axis Paths
    //==================================================
    d3.selectAll(".axis path").style("display", "none");

    //==================================================
    // Append Grid Lines
    //==================================================
    for (var i = 1; i < 10; i++) {
        var xLoc = x(i * 10);
        svg.append("line").attr("x1", xLoc).attr("y1", "0").attr("x2", xLoc).attr("y2", height).attr("stroke-width", "1").style("stroke", "white");
    }

    //==================================================
    // Append Data Line
    //==================================================
    svg.append("path").datum(data).style("fill", "none").style("stroke", "#2579ad").style("stroke-width", "2").attr("d", line);

    //==================================================
    // Append Borders
    //==================================================
    svg.append("line").attr("x1", "0").attr("y1", "0").attr("x2", "0").attr("y2", height).style("stroke", "#ccc");

    svg.append("line").attr("x1", width).attr("y1", "0").attr("x2", width).attr("y2", height).style("stroke", "#ccc");

    //==================================================
    // Append Info Elements
    //==================================================
    var infoElements = svg.append("g");

    infoElements.append("line").attr("class", "x").attr("x1", -34).attr("y1", "0").attr("x2", width).attr("y2", "0").attr("stroke-dasharray", "2 2").style("stroke", "#666");

    infoElements.append("line").attr("class", "y").attr("x1", "0").attr("y1", "0").attr("x2", "0").attr("y2", height + 62).attr("stroke-dasharray", "2 2").style("stroke", "#666");

    infoElements.append("circle").attr("class", "y").style("fill", "white").style("stroke", "#2579ad").style("stroke-width", "2").attr("r", 6.5);

    infoElements.append("text").attr("class", "rltext").style("text-anchor", "start").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_LIFT_LABEL"));

    infoElements.append("text").attr("class", "rtext").style("text-anchor", "start").style("fill", "#333").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

    infoElements.append("text").attr("class", "lltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_LIFT_LABEL"));

    infoElements.append("text").attr("class", "ltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

    infoElements.append("text").attr("class", "xltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_CONVERSION_LABEL"));

    infoElements.append("text").attr("class", "xtext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#477cba").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

    infoElements.append("text").attr("class", "lyltext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_LEADS_LABEL"));

    infoElements.append("text").attr("class", "lytext").style("text-anchor", "end").style("startOffset", "100%").style("fill", "#477cba").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

    infoElements.append("text").attr("class", "ryltext").style("text-anchor", "start").style("fill", "#333").style("font-size", "11px").style("font-family", "ProximaNova-Bold").text(ResourceUtility.getString("THRESHOLD_EXPLORER_SCORE_LABEL"));

    infoElements.append("text").attr("class", "rytext").style("text-anchor", "start").style("fill", "#477cba").style("font-size", "18px").style("font-family", "ProximaNova-Bold");

    infoElements.append("polygon").attr("class", "rarrow").attr("points", "0,0, 0,6, 4,3").style("fill", "#447bbc").attr("stroke", "#447bbc");

    infoElements.append("polygon").attr("class", "larrow").attr("points", "4,0, 4,6, 0,3").style("fill", "#447bbc").attr("stroke", "#447bbc");

    infoElements.append("circle").attr("class", "xball").style("fill", "#447bbc").attr("stroke", "#447bbc").attr("r", 2.0);

    infoElements.append("circle").attr("class", "yball").style("fill", "#447bbc").attr("stroke", "#447bbc").attr("r", 2.0);

    infoElements.append("line").attr("class", "d").attr("x1", "0").attr("y1", "0").attr("x2", "0").attr("y2", "25").style("stroke", "#c6cbd1");

    //==================================================
    // Specify Info Element Update
    //==================================================
    function updateInfoElements(d) {
        infoElements.select("circle.y").attr("transform", "translate(" + x(d.leads) + "," + y(d.conversions) + ")");

        infoElements.select("line.x").attr("transform", "translate(" + "0" + "," + y(d.conversions) + ")");

        infoElements.select("line.y").attr("transform", "translate(" + x(d.leads) + "," + "-40" + ")");

        infoElements.select("line.d").attr("transform", "translate(" + x(d.leads) + "," + (height + 30) + ")");

        infoElements.select("text.rltext").attr("transform", "translate(" + (x(d.leads) + 15) + "," + "-30" + ")");

        infoElements.select("text.rtext").text((d.rightLift !== 0 ? d.rightLift.toFixed(2) : 0) + "x").attr("transform", "translate(" + (x(d.leads) + 14) + "," + "-13" + ")");

        infoElements.select("text.lltext").attr("transform", "translate(" + (x(d.leads) - 16) + "," + "-30" + ")");

        infoElements.select("text.ltext").text(d.leftLift.toFixed(2) + "x").attr("transform", "translate(" + (x(d.leads) - 16) + "," + "-13" + ")");

        infoElements.select("polygon.larrow").attr("transform", "translate(" + (x(d.leads) - 10) + "," + "-30" + ")");

        infoElements.select("polygon.rarrow").attr("transform", "translate(" + (x(d.leads) + 5) + "," + "-30" + ")");

        infoElements.select("circle.xball").attr("transform", "translate(" + "-36" + "," + y(d.conversions) + ")");

        infoElements.select("circle.yball").attr("transform", "translate(" + x(d.leads) + "," + (height + 25) + ")");

        infoElements.select("text.xltext").attr("transform", "translate(" + -40 + "," + (y(d.conversions) - 3) + ")");

        infoElements.select("text.xtext").text(d.conversions.toFixed(0) + "%").attr("transform", "translate(" + -40 + "," + (y(d.conversions) + 14) + ")");

        infoElements.select("text.lyltext").attr("transform", "translate(" + (x(d.leads) - 10) + "," + (height + 38) + ")");

        infoElements.select("text.lytext").text(d.leads + "%").attr("transform", "translate(" + (x(d.leads) - 10) + "," + (height + 55) + ")");

        infoElements.select("text.ryltext").attr("transform", "translate(" + (x(d.leads) + 9) + "," + (height + 38) + ")");

        infoElements.select("text.rytext").text("> " + (d.score - 1)).attr("transform", "translate(" + (x(d.leads) + 9) + "," + (height + 55) + ")");
    }

    //==================================================
    // Specify Default Info Elements Location
    //==================================================
    function setDefaultInfoElements() {
        updateInfoElements(data[20]);
    }

    //==================================================
    // Update Info Elements
    //==================================================
    setDefaultInfoElements();

    //==================================================
    // Append Capture Area
    //==================================================
    svg.append("rect").attr("x", -10).attr("y", -10).attr("width", width + 20).attr("height", height + 20).style("fill", "none").style("pointer-events", "all").on("mousemove", captureMouseMove).on("mousedown", captureMouseDown);

    //==================================================
    // Capture Area: MouseMove
    //==================================================
    var bisectLeads = d3.bisector(function (d) {
        return d.leads;
    }).left;
    function captureMouseMove() {
        if (targetSet) {
            return;
        }
        var x0 = x.invert(d3.mouse(this)[0]),
            i = bisectLeads(data, x0, 1),
            d0 = data[i - 1],
            d1 = data[i],
            d = x0 - d0.leads > d1.leads - x0 ? d1 : d0;

        if (d.leads === 0) {
            updateInfoElements(data[1]);
        } else {
            updateInfoElements(d);
        }
    }

    //==================================================
    // Capture Area: MouseDown
    //==================================================
    function captureMouseDown() {
        targetSet = !targetSet;
        var x0 = x.invert(d3.mouse(this)[0]),
            i = bisectLeads(data, x0, 1),
            d0 = data[i - 1],
            d1 = data[i],
            d = x0 - d0.leads > d1.leads - x0 ? d1 : d0;

        if (d.leads === 0) {
            updateInfoElements(data[1]);
        } else {
            updateInfoElements(d);
        }
    }
}]).directive('thresholdExplorerWidget', function () {
    var directiveDefinitionObject = {
        templateUrl: 'app/AppCommon/widgets/thresholdExplorerWidget/ThresholdExplorerWidgetTemplate.html'
    };

    return directiveDefinitionObject;
});

/***/ }),

/***/ "./app/AppCommon/widgets/topPredictorWidget/TopPredictorAttributeWidget.js":
/*!*********************************************************************************!*\
  !*** ./app/AppCommon/widgets/topPredictorWidget/TopPredictorAttributeWidget.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.TopPredictorAttributeWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.appCommon.services.TopPredictorService', 'ngSanitize']).controller('TopPredictorAttributeWidgetController', ["$scope", "_", "$sce", "$filter", "ResourceUtility", "TopPredictorService", "ModelStore", function ($scope, _, $sce, $filter, ResourceUtility, TopPredictorService, ModelStore) {

    var MISC_BUCKET_NAME = 'Other, Less Popular';

    var data = $scope.data;
    var modelData = ModelStore.data;

    // console.log(modelData);

    $scope.attributeName = data.name;
    $scope.attributeFullDescription = data.description;
    $scope.attributeDescription = data.description;
    /* no longer needed, truncation happens further down.
    if ($scope.attributeDescription != null && $scope.attributeDescription.length > 110) {
        $scope.attributeDescription = $scope.attributeDescription.substring(0, 110) + "&hellip;";
    }
    */
    $scope.attributeColor = data.color;

    var chartData = data.elementList;
    var liftValues = _.map(chartData, function (d) {
        return d.name === MISC_BUCKET_NAME ? 0 : d.lift;
    });
    var bucketNames = _.map(chartData, "name");
    var percentLeads = _.map(chartData, function (d) {
        return TopPredictorService.FormatPercent(d.percentTotal);
    });
    percentLeads = TopPredictorService.SumToOne(percentLeads);

    $scope.generateAttributeName = function () {
        return $sce.trustAsHtml('<h4 style="border-left: ' + $scope.attributeColor + ' solid 6px;" title="' + $scope.attributeName + '">' + $scope.attributeName + '</h4>' + '<p title="' + $scope.attributeDescription + '">' + decodeURIComponent(encodeURIComponent($scope.attributeDescription)) + '</p>');
    };

    var chart,
        width = 145,
        left_width = 101,
        chartWidth = left_width + width + 45,
        barHeight = 20,
        gap = 6,
        baseHeight = (barHeight + gap * 2) * chartData.length - gap * 2,
        titleHeight = 80,
        labelHeight = 70,
        chartHeight = baseHeight + labelHeight + titleHeight,
        labelSize = "10px",
        fontSize = "12px",
        commonDy = "0em",
        labelDx = 0,
        modelType = modelData.ModelDetails.SourceSchemaInterpretation;

    function setHoverPosition(xPos, chartHeight) {
        var attributeHover = $(".attribute-hover"),
            hoverElem = $("#topPredictorAttributeHover"),
            donut = document.getElementById('chart'),
            path = $scope.selectedPath[0][0],
            donutRect = donut.getBoundingClientRect(),
            pathRect = path.getBoundingClientRect(),
            center = donut.offsetLeft + (donutRect.width >> 1),
            top = (pathRect.top - donutRect.top + (pathRect.height >> 1)) / donutRect.height;

        //console.log(center, donutRect.left, donutRect.width);
        // Adjust height of tail pseudo-element to anchor to path element
        // FIXME - Find a better way to adjust pseudo-element when supported
        var styleSheet = document.styleSheets[0],
            addMethod = 'insertRule'; // doesn't work on IE8 and lower

        styleSheet[addMethod]('.attribute-hover-left-arrow>div:after,' + '.attribute-hover-left-arrow>div:before,' + '.attribute-hover-right-arrow>div:after,' + '.attribute-hover-right-arrow>div:before {' + 'top: ' + top * 100 + '% !important; ' + // !important to override previous
        '}', styleSheet.cssRules.length // append to end of styleSheet
        );

        hoverElem.css("top", donutRect.top + (donutRect.height >> 1));

        if (xPos > 0) {
            hoverElem.css("left", center + width - 5);
            attributeHover.removeClass("attribute-hover-left-arrow");
            attributeHover.addClass("attribute-hover-right-arrow");
        } else {
            hoverElem.css("left", center - width + 15 - 360);
            attributeHover.removeClass("attribute-hover-right-arrow");
            attributeHover.addClass("attribute-hover-left-arrow");
        }

        /*
            this code truncates the description.  It's a bit hacky,
            but there is no real good way of doing it.  The opacity
            changes are there to hide the box until the next frame to
            avoid HTML reflow when description gets adjusted.
        */
        hoverElem[0].style.opacity = 0;
        hoverElem.show();

        setTimeout(function () {
            var description = $('.attribute-hover-header p')[0];

            if (description) {
                var height = description.offsetHeight;
            }

            if (height > 28) {
                // determine > 2 lines, line-height 14.
                $(description).addClass('truncate_2lines');
            }

            hoverElem[0].style.opacity = 1;
        }, 0);
    }

    setHoverPosition($scope.mouseX, chartHeight);

    var maxTick = _.max([_.max(liftValues), 1.5]);
    var xTicks = TopPredictorService.createTicks(maxTick, 5);
    var x = d3.scale.linear().domain([0, xTicks[xTicks.length - 1]]).range([0, width]);

    chart = d3.select("#attributeChart").append('svg').attr('class', 'chart').attr('width', chartWidth).attr('height', baseHeight + labelHeight).append("g").attr("transform", "translate(0, 0)");

    // These are the background bars that alternate
    chart.selectAll("rect.background").data(liftValues).enter().append("rect").attr("display", function (d, i) {
        return i % 2 == 1 ? "none" : null;
    }).attr("x", left_width).attr("y", function (d, i) {
        return i * (barHeight + 2 * gap) + 24;
    }).attr("width", function () {
        return width + 80;
    }).attr("height", barHeight + 8).style("fill", "#EEF3F7").attr('opacity', 0.7);

    // These are the background ticks
    chart.selectAll("line").data(xTicks).enter().append("line").attr("x1", function (d) {
        return x(d) + left_width;
    }).attr("x2", function (d) {
        return x(d) + left_width;
    }).attr("y1", function (d, i) {
        if (i === 0 || i === xTicks.length - 1) {
            return 0;
        } else {
            return 15;
        }
    }).attr("y2", baseHeight + 32);

    // These are the background tick labels
    chart.selectAll(".rule").data(xTicks).enter().append("text").attr("class", "rule").attr("x", function (d) {
        return x(d) + left_width;
    }).attr("y", baseHeight + 50).attr("dx", function (d) {
        if (d === 0) {
            return 0;
        } else {
            return labelDx;
        }
    }).attr("dy", -6).attr("font-weight", "semi-bold").attr("font-size", "10px").attr("text-anchor", "middle").style("fill", "#666666").text(function (d) {
        if (d === 0) {
            return d;
        } else if (d === 1) {
            return "";
        } else {
            return d;
        }
    });

    // This is the lift label at the bottom of the chart
    var liftText = ResourceUtility.getString("TOP_PREDICTORS_HOVER_CHART_LIFT_LABEL").toUpperCase();
    chart.append("text").attr("x", function () {
        return left_width + width / 2 - 20;
    }).attr("y", baseHeight + 60).attr("dy", commonDy).attr("font-size", labelSize).style("fill", "#999").text(liftText);

    // These are the bars
    chart.selectAll("rect.bar").data(liftValues).enter().append("rect").attr("x", left_width).attr("y", function (d, i) {
        return i * (barHeight + 2 * gap) + 28;
    }).attr("width", x).attr("height", barHeight).style("fill", data.color).attr('opacity', 0.8);

    // These are the "borders" that accompany each bar
    chart.selectAll("rect.barBorder").data(liftValues).enter().append("rect").attr("x", left_width).attr("y", function (d, i) {
        return i * (barHeight + 2 * gap) + (28 + barHeight);
    }).attr("width", function (d) {
        var barWidth = x(d);
        return barWidth;
    }).attr("height", 1).style("fill", data.color).attr('opacity', 1);

    // This is the 1x line
    chart.selectAll("line.baselineLift").data([1]).enter().append("line").attr("x1", function (d) {
        return x(d) + left_width;
    }).attr("x2", function (d) {
        return x(d) + left_width;
    }).attr("y1", 15).attr("y2", baseHeight + 32).style("fill", "#BBB").attr('opacity', 1);

    // This is the 1x line label at the bottom
    chart.selectAll(".baselineLiftBottom").data([1]).enter().append("text").attr("x", function (d) {
        return x(d) + left_width;
    }).attr("y", baseHeight + 50).attr("dy", -6).attr("dx", labelDx).attr("font-weight", "semi-bold").attr("font-size", "10px").attr("text-anchor", "middle").style("fill", "#666").text(function (d) {
        return d;
    });

    // This is the 1x line label at the top
    chart.selectAll(".baselineLiftTop").data([1]).enter().append("text").attr("x", function (d) {
        return x(d) + left_width;
    }).attr("y", 15).attr("dy", -6).attr("dx", labelDx).attr("font-weight", "semi-bold").attr("font-size", fontSize).attr("text-anchor", "middle").style("fill", "#666").text(function (d) {
        return d + "x";
    });

    // These are the lift numbers to the right of the chart
    chart.selectAll("text.lift").data(liftValues).enter().append("text").attr("x", width + 135).attr("y", function (d, i) {
        return i * (barHeight + 2 * gap) + 42;
    }).attr("dy", commonDy).attr("font-weight", "semi-bold").attr("font-size", fontSize).attr("text-anchor", "end").attr("class", "lift").style("fill", "#666").text(function (d, i) {
        if (chartData[i].name === MISC_BUCKET_NAME) {
            return 'N/A';
        } else {
            return $filter('number')(d, 1) + "x";
        }
    });

    // This is the lift label to the right of the chart
    chart.append("text").attr("x", width + 115).attr("y", 5).attr("dy", "0.36em").attr("font-size", labelSize).style("fill", "#999").text(liftText);

    // These are the percent numbers to the right of the chart
    chart.selectAll("text.percentLeads").data(percentLeads).enter().append("text").attr("x", width + 177).attr("y", function (d, i) {
        return i * (barHeight + 2 * gap) + 42;
    }).attr("dx", 5).attr("dy", commonDy).attr("font-weight", "semi-bold").attr("font-size", fontSize).attr("text-anchor", "end").attr("class", "lift").style("fill", "#666").text(function (d) {
        return d + "%";
    });

    // This is the % Leads or % Accounts label to the right of the chart
    var isAccountBased = modelType == 'Account' || modelType == 'SalesforceAccount';
    var percentText = isAccountBased ? ResourceUtility.getString("TOP_PREDICTORS_HOVER_CHART_ACCOUNTS_LABEL").toUpperCase() : ResourceUtility.getString("TOP_PREDICTORS_HOVER_CHART_LEADS_LABEL").toUpperCase();
    chart.append("text").attr("x", width + 142).attr("y", 5).attr("dy", "0.36em").attr("font-size", labelSize).style("fill", "#999").text(percentText);

    // These are the bucket names to the left of the chart
    chart.selectAll("text.name").data(bucketNames).enter().append("text").attr("x", left_width - 5).attr("y", function (d, i) {
        return i * (barHeight + 2 * gap) + 42;
    }).attr("dy", commonDy).attr("font-weight", "semi-bold").attr("font-size", fontSize).attr("text-anchor", "end").style("fill", "black").text(String).call(wrap, left_width - 20);

    function wrap(text, width) {
        text.each(function () {
            var text = d3.select(this),
                words = text.text().split(/\s+/).reverse(),
                wordLength = words.length,
                word,
                line = [],
                lineNumber = 0,
                lineHeight = 1.05,
                // ems
            y = text.attr("y"),
                dy = parseFloat(text.attr("dy")),
                tspan = text.text(null).append("tspan").attr("x", left_width - 5).attr("y", y).attr("dy", dy + "em");
            for (var i = 0; i < wordLength; i++) {
                if (lineNumber >= 1) {
                    break;
                }
                word = words.pop();
                line.push(word);
                tspan.text(line.join(" "));
                if (tspan.node().getComputedTextLength() > width) {
                    if (wordLength === 1) {
                        var _length = text.node().getComputedTextLength(),
                            i = 0,
                            limit = 100; // let's be cool and not do this 10,000 times

                        while (_length > width - 2 && word.length > 0 && i < limit) {
                            word = word.slice(0, -1);
                            text.text(word);
                            _length = text.node().getComputedTextLength();
                            i++;
                        }
                        text.text(null); // I don't know why, but this seems to be necessary because it's done above ^
                        word = word + '...';
                    }
                    dy = -0.5;
                    tspan.attr("dy", dy + "em");
                    line.pop();
                    tspan.text(line.join(" ").substring(0, 18));
                    line = [word];
                    tspan = text.append("tspan").attr("x", left_width - 5).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                }
            }
        });
    }

    $scope.showtitle = true;
}]).directive('topPredictorAttributeWidget', function () {
    return {
        templateUrl: 'app/AppCommon/widgets/topPredictorWidget/TopPredictorAttributeWidgetTemplate.html'
    };
});

/***/ }),

/***/ "./app/AppCommon/widgets/topPredictorWidget/TopPredictorWidget.js":
/*!************************************************************************!*\
  !*** ./app/AppCommon/widgets/topPredictorWidget/TopPredictorWidget.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.TopPredictorWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.services.TopPredictorService', 'mainApp.appCommon.widgets.TopPredictorAttributeWidget', 'ngSanitize']).controller('TopPredictorWidgetController', ["$scope", "$sce", "$compile", "$rootScope", "ResourceUtility", "TopPredictorService", "ModelStore", "FeatureFlagService", function ($scope, $sce, $compile, $rootScope, ResourceUtility, TopPredictorService, ModelStore, FeatureFlagService) {

    var widgetConfig = ModelStore.widgetConfig;
    var metadata = ModelStore.metadata;
    var data = ModelStore.data;
    var parentData = $scope.parentData;
    var flags = FeatureFlagService.Flags();
    $scope.ResourceUtility = ResourceUtility;
    var chartData = data.ChartData;

    // console.log(chartData);

    if (chartData && chartData.children) {
        // THIS IS PART OF THE UI BAND-AID TO COMBINE INTERNAL, EXTERNAL CATEGORIES WITH SAME NAME
        for (var i = 0; i < chartData.children.length; i++) {
            if (chartData.children[i].children.length == 0) {
                chartData.children.splice(i, 1);
            }
        }
        $scope.chartHeader = ResourceUtility.getString("TOP_PREDICTORS_CHART_HEADER", [chartData.attributesPerCategory]);
    }

    $scope.backToSummaryView = false;

    // Get Internal category list
    var internalCategoryObj = data.InternalAttributes;
    if (internalCategoryObj) {
        $scope.internalPredictorTotal = internalCategoryObj.total + " " + ResourceUtility.getString("TOP_PREDICTORS_INTERNAL_TITLE");
        $scope.internalCategories = internalCategoryObj.categories;
        $scope.showInternalCategories = internalCategoryObj.total > 0;

        for (var i = 0; i < $scope.internalCategories.length; i++) {
            if ($scope.internalCategories[i].name == 'My Attributes') {

                $scope.hasAccountAttributes = false;
                $scope.internalCategories[i].color = '#457DB9';

                var myAttributesCategory = chartData.children.find(function (category) {
                    return category.name == 'My Attributes';
                });
                if (myAttributesCategory) {
                    setAttributeColor(myAttributesCategory, '#457DB9');
                }
            }
            if ($scope.internalCategories[i].name == 'ACCOUNT_ATTRIBUTES') {
                $scope.hasAccountAttributes = true;

                $scope.internalCategories[i].name = 'My Attributes';
                $scope.internalCategories[i].color = '#457DB9';

                var myAttributesCategory = chartData.children.find(function (category) {
                    return category.name == 'ACCOUNT_ATTRIBUTES';
                });
                if (myAttributesCategory) {
                    setAttributeColor(myAttributesCategory, '#457DB9');
                }
            }
            if ($scope.internalCategories[i].name == 'Product Spend Profile') {
                $scope.internalCategories[i].color = '#B887B6';
                var productSpendCategory = chartData.children.find(function (category) {
                    return category.name == 'Product Spend Profile';
                });
                if (productSpendCategory) {
                    setAttributeColor(productSpendCategory, '#B887B6');
                }
            }
        }

        // Get External category list
        var externalCategoryObj = data.ExternalAttributes;
        $scope.externalPredictorTotal = externalCategoryObj.total + " " + ResourceUtility.getString("TOP_PREDICTORS_EXTERNAL_TITLE");
        $scope.externalCategories = externalCategoryObj.categories;
        $scope.showExternalCategories = externalCategoryObj.total > 0;
    }

    // Calculate total
    var totalPredictors = data.TotalPredictors;
    $scope.topPredictorTitle = totalPredictors + " " + ResourceUtility.getString("TOP_PREDICTORS_TITLE");

    $scope.generateCategoryLabel = function (category) {
        return $sce.trustAsHtml(category.name + '<span style="background-color:' + category.color + '">' + category.count + '</span>');
    };

    function setAttributeColor(category, color) {
        category.color = color;
        if (category.children) {
            category.children.forEach(function (attr) {
                attr.color = color;
            });
        }
    }

    // Methods used for the Sunburst chart
    // Stash the old values for transition.
    function stash(d) {
        d.x0 = d.x;
        d.dx0 = d.dx;
    }

    var width = 300,
        height = 300,
        radius = Math.min(width, height) / 2,
        hoverOpacity = 0.7,
        showAttributeTimeout;

    // This is used to get an initial size so it can animate
    var fakePartition = d3.layout.partition().sort(null).size([0.01, 0.01]).value(function (d) {
        return 1;
    });

    var partition = d3.layout.partition().sort(null).size([2 * Math.PI, radius * radius]).value(function (d) {
        return d.size;
    });

    //Draw Sunburst chart
    $scope.drawSummaryChart = function () {
        $(".js-top-predictor-donut").empty();
        var svg = d3.select(".js-top-predictor-donut").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var gutterWidth = 0.0075; // radians

        var arc = d3.svg.arc().startAngle(function (d) {
            // if first category, make start angle larger for more gutter
            var gutter = null;

            if (d.depth === 2) {
                var children = d.parent.children;
                gutter = children[0].name == d.name ? gutterWidth : 0;
            }

            return d.x + (gutter || 0);
        }).endAngle(function (d) {
            // if last category, make end angle shorter for more gutter
            var gutter = null;

            if (d.depth === 2) {
                var children = d.parent.children,
                    child = children[children.length - 1];
                gutter = child && child.name == d.name ? gutterWidth * 2 : 0;
            }

            return d.x + d.dx - (gutter || 0);
        }).innerRadius(function (d) {
            switch (d.depth) {
                case 1:
                    return 50;
                case 2:
                    return 61;
                default:
                    return 0;
            }
        }).outerRadius(function (d) {
            switch (d.depth) {
                case 1:
                    return 60;
                case 2:
                    return 125;
                default:
                    return 0;
            }
        });

        if (chartData) {
            var path = svg.datum(chartData).selectAll("path").data(fakePartition.nodes).enter().append("path").attr("display", function (d) {
                return d.depth ? null : "none";
            }) // hide inner ring
            .attr("d", arc).attr('stroke-width', function (d) {
                return d.depth === 1 ? 2.5 : 1;
            }).style("stroke", "#fff").style("cursor", "pointer").attr('opacity', function (d) {
                if (d.depth === 1) {
                    return 1;
                } else if (d.depth === 2) {
                    return hoverOpacity;
                }
            }).style("fill", function (d) {
                return d.color;
            }).on("click", attributeClicked).on("mouseover", function (d) {
                var path = svg.selectAll("path").filter(function (node) {
                    return node.depth == 2 && node.name == d.name;
                });

                path.style("opacity", 1);

                if (d.depth == 2) {
                    showAttributeHover(d.name, d.color, d3.mouse(this)[0], d3.mouse(this)[1], path);
                }
            }).on("mouseout", function (d) {
                svg.selectAll("path").filter(function (node) {
                    return node.depth == 2;
                }).style("opacity", hoverOpacity);
                hideAttributeHover();
            }).each(stash);
        }

        function attributeClicked(d) {
            var category = null;
            for (var i = 0; i < chartData.children.length; i++) {
                if (chartData.children[i].categoryName == d.categoryName) {
                    category = chartData.children[i];
                    break;
                }
            }

            if (category != null) {
                // This is required to update bindings (although not sure why)
                $scope.$apply($scope.categoryClicked(category));
            }
        }

        // Interpolate the arcs in data space.
        function arcTween(a) {
            var i = d3.interpolate({ x: a.x0, dx: a.dx0 }, a);
            return function (t) {
                var b = i(t);
                a.x0 = b.x;
                a.dx0 = b.dx;
                return arc(b);
            };
        }

        if (path) {
            path.data(partition.nodes).transition().duration(1000).attrTween("d", arcTween);
        }
    };

    $scope.drawSummaryChart();

    $scope.exportClicked = function () {
        var fileName = "attributes.csv";
        var csvRows = TopPredictorService.GetTopPredictorExport(data);

        alasql("SELECT * INTO CSV('" + fileName + "') FROM ?", [csvRows]);
    };

    $scope.backToSummaryClicked = function () {

        if ($scope.hasAccountAttributes) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = chartData.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var attribute = _step.value;

                    if (attribute.categoryName === 'My Attributes') {
                        attribute.name = 'ACCOUNT_ATTRIBUTES';
                        attribute.categoryName = 'ACCOUNT_ATTRIBUTES';
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        clearSelectedCategory();
        $scope.backToSummaryView = false;
        $scope.chartHeader = ResourceUtility.getString("TOP_PREDICTORS_CHART_HEADER", [chartData.attributesPerCategory]);
        $scope.drawSummaryChart();
    };

    function clearSelectedCategory() {
        TopPredictorService.ClearCategoryClasses($scope.externalCategories);
        TopPredictorService.ClearCategoryClasses($scope.internalCategories);
    }

    function highlightSelectedCategory(category) {
        clearSelectedCategory();

        for (var i = 0; i < $scope.externalCategories.length; i++) {
            if ($scope.externalCategories[i].name === category.name) {
                $scope.externalCategories[i].activeClass = "active";
                break;
            }
        }

        for (var x = 0; x < $scope.internalCategories.length; x++) {
            if ($scope.internalCategories[x].name === category.name) {
                $scope.internalCategories[x].activeClass = "active";
                break;
            }
        }
    }

    $scope.categoryClicked = function (category) {

        if ($scope.hasAccountAttributes && category.name === 'My Attributes') {
            category.name = 'ACCOUNT_ATTRIBUTES';
            category.categoryName = 'ACCOUNT_ATTRIBUTES';
        }

        clearTimeout(showAttributeTimeout);
        var categoryList = TopPredictorService.GetAttributesByCategory(data, category.name, category.color, 50);
        highlightSelectedCategory(category);
        category.activeClass = "active";
        TopPredictorService.CalculateAttributeSize(categoryList);
        $scope.backToSummaryView = true;
        var prefix = categoryList.length >= 50 ? ResourceUtility.getString("TOP_PREDICTORS_CHART_CATEGORY_HEADER_PREFIX") : "";

        if (category.name === 'ACCOUNT_ATTRIBUTES') {
            category.name = 'My Attributes';
            category.categoryName = 'My Attributes';
        }

        $scope.chartHeader = ResourceUtility.getString("TOP_PREDICTORS_CHART_CATEGORY_HEADER", [category.name, prefix, categoryList.length]);
        var root = {
            name: "root",
            size: 1,
            color: "#FFFFFF",
            children: categoryList
        };
        $(".js-top-predictor-donut").empty();

        var svg = d3.select(".js-top-predictor-donut").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        // Append a back button
        setTimeout(function () {
            svg.append("svg:image").attr("id", "donutChartBackButton").attr("class", "donut-chart-back-button").attr("xlink:href", "assets/images/Donut-Center-Back.png").attr("x", -14).attr("y", -13).attr("width", "29px").attr("height", "29px").on("mouseover", function (d) {
                d3.select(this).attr("xlink:href", "assets/images/Donut-Center-Back-Hover.png");
            }).on("mouseout", function (d) {
                d3.select(this).attr("xlink:href", "assets/images/Donut-Center-Back.png");
            }).on("click", function () {
                $("#back-to-summary-link").click();
            });
        }, 1000);

        svg.append("circle").attr("cx", 0).attr("cy", 0).attr("r", 50).attr("fill", "#fff").on("mouseover", function () {
            svg.selectAll('circle').style('cursor', 'pointer');
        }).on("click", function () {
            $("#back-to-summary-link").click();
        });

        var arc2 = d3.svg.arc().startAngle(function (d) {
            return d.x;
        }).endAngle(function (d) {
            return d.x + d.dx;
        }).innerRadius(function (d) {
            if (d.depth === 1) {
                return 50;
            } else {
                return 0;
            }
        }).outerRadius(function (d) {
            if (d.depth === 1) {
                return 125;
            } else {
                return 0;
            }
        });

        var path = svg.datum(root).selectAll("path").data(fakePartition.nodes).enter().append("path").attr("display", function (d) {
            return d.depth ? null : "none";
        }) // hide inner ring
        .attr("d", arc2).style("stroke", "#fff").attr('opacity', function (d) {
            if (d.depth === 1) {
                return 1;
            } else if (d.depth === 2) {
                return hoverOpacity;
            }
        }).style("fill", function (d) {
            return d.color;
        }).on("mouseover", function (d) {
            var path = svg.selectAll("path").filter(function (node) {
                return node.depth == 1 && node.name == d.name;
            });

            path.style("opacity", hoverOpacity);

            if (d.depth == 1) {
                showAttributeHover(d.name, d.color, d3.mouse(this)[0], d3.mouse(this)[1], path);
            }
        }).on("mouseout", function (d) {
            svg.selectAll("path").filter(function (node) {
                return node.depth == 1;
            }).style("opacity", 1);
            hideAttributeHover();
        }).each(stash);

        // Interpolate the arcs in data space.
        function arcTween(a) {
            var i = d3.interpolate({ x: a.x0, dx: a.dx0 }, a);
            return function (t) {
                var b = i(t);
                a.x0 = b.x;
                a.dx0 = b.dx;
                return arc2(b);
            };
        }
        path.data(partition.nodes).transition().duration(1000).attrTween("d", arcTween);
    };

    function showAttributeHover(attributeName, attributeColor, mouseX, mouseY, path) {
        var topPredictorAttributeHover = $("#topPredictorAttributeHover");
        var scope = $rootScope.$new();
        scope.mouseX = mouseX;
        scope.mouseY = mouseY;
        scope.selectedPath = path; // for anchoring tail and hoverElem position
        var displaySimpleBuckets = false;
        for (var i = 0; i < data.ModelDetails.ModelSummaryProvenanceProperties.length; i++) {
            if (data.ModelDetails.ModelSummaryProvenanceProperties[i].ModelSummaryProvenanceProperty.option == "IsV2ProfilingEnabled") {
                displaySimpleBuckets = data.ModelDetails.ModelSummaryProvenanceProperties[i].ModelSummaryProvenanceProperty.value == "true";
            }
        }

        scope.data = displaySimpleBuckets ? TopPredictorService.FormatSimpleBuckets(attributeName, attributeColor, data) : TopPredictorService.FormatDataForAttributeValueChart(attributeName, attributeColor, data);

        $compile(topPredictorAttributeHover.html('<div data-top-predictor-attribute-widget></div>'))(scope);
    }

    function hideAttributeHover() {

        var topPredictorAttributeHover = $("#topPredictorAttributeHover");
        topPredictorAttributeHover.hide();
        topPredictorAttributeHover.empty();
    }
}]).directive('topPredictorWidget', function () {
    var directiveDefinitionObject = {
        templateUrl: 'app/AppCommon/widgets/topPredictorWidget/TopPredictorWidgetTemplate.html'
    };

    return directiveDefinitionObject;
});

/***/ }),

/***/ "./app/AppCommon/widgets/userManagementWidget/UserManagementWidget.js":
/*!****************************************************************************!*\
  !*** ./app/AppCommon/widgets/userManagementWidget/UserManagementWidget.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.appCommon.widgets.UserManagementWidget', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.DateTimeFormatUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.core.services.FeatureFlagService', 'mainApp.userManagement.modals.AddUserModal', 'mainApp.userManagement.modals.DeleteUserModal', 'mainApp.userManagement.modals.EditUserModal', 'mainApp.userManagement.services.UserManagementService', 'mainApp.core.utilities.BrowserStorageUtility']).controller('UserManagementWidgetController', ["$scope", "$rootScope", "_", "ResourceUtility", "BrowserStorageUtility", "RightsUtility", "FeatureFlagService", "AddUserModal", "DeleteUserModal", "EditUserModal", "UserList", function ($scope, $rootScope, _, ResourceUtility, BrowserStorageUtility, RightsUtility, FeatureFlagService, AddUserModal, DeleteUserModal, EditUserModal, UserList) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.deleteInProgress = false;

    if (Object.prototype.toString.call($scope.data) !== '[object Array]') {
        $scope.data = [$scope.data];
    }
    $scope.users = _.sortBy(_.sortBy(UserList, 'Email'), function (u) {
        var accessLevel = RightsUtility.getAccessLevel(u.AccessLevel);
        return accessLevel != null ? accessLevel.ordinal : 0;
    });

    var flags = FeatureFlagService.Flags();
    $scope.mayAddUsers = FeatureFlagService.FlagIsEnabled(flags.ADD_USER);
    $scope.mayDeleteUsers = FeatureFlagService.FlagIsEnabled(flags.DELETE_USER);
    $scope.showEditUserButton = FeatureFlagService.FlagIsEnabled(flags.CHANGE_USER_ACCESS);
    $scope.showDeleteUserButton = FeatureFlagService.FlagIsEnabled(flags.DELETE_USER);

    var currentLevel = RightsUtility.getAccessLevel(BrowserStorageUtility.getClientSession().AccessLevel);

    $scope.addUserClicked = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        AddUserModal.show($scope.users.map(function (u) {
            return u.Email;
        }));
    };

    $scope.deleteUserClicked = function (user) {
        DeleteUserModal.show(user);
    };

    $scope.editUserClicked = function (user) {
        EditUserModal.show(user);
    };

    $scope.manipulateAccessLevel = function (accessLevel) {
        var prefix = "ACCESS_LEVEL_";
        var toReturn = null;
        if (accessLevel == null) {
            toReturn = "NA";
        } else {
            toReturn = ResourceUtility.getString(prefix + accessLevel);
        }
        return toReturn;
    };

    $scope.showEditButton = function (user, number) {
        var currentLevel = RightsUtility.getAccessLevel(BrowserStorageUtility.getClientSession().AccessLevel) || {},
            userLevel = RightsUtility.getAccessLevel(user.AccessLevel) || {};

        if (currentLevel.ordinal == 3 && userLevel.ordinal == 4) {
            return false;
        }
        return number == 1 ? $scope.showEditUserButton : $scope.showDeleteUserButton;
    };
}]);

/***/ }),

/***/ "./app/AppCommon/widgets/widgets.index.js":
/*!************************************************!*\
  !*** ./app/AppCommon/widgets/widgets.index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ../services/services.index */ "./app/AppCommon/services/services.index.js");

__webpack_require__(/*! ../../models/services/ModelService */ "./app/models/services/ModelService.js");

__webpack_require__(/*! ./adminInfoAlertsWidget/AdminInfoAlertsWidget */ "./app/AppCommon/widgets/adminInfoAlertsWidget/AdminInfoAlertsWidget.js");

__webpack_require__(/*! ./adminInfoSummaryWidget/AdminInfoSummaryWidget */ "./app/AppCommon/widgets/adminInfoSummaryWidget/AdminInfoSummaryWidget.js");

__webpack_require__(/*! ./leadsTabWidget/LeadsTabWidget */ "./app/AppCommon/widgets/leadsTabWidget/LeadsTabWidget.js");

__webpack_require__(/*! ./modelDetailsWidget/ModelDetailsWidget */ "./app/AppCommon/widgets/modelDetailsWidget/ModelDetailsWidget.js");

__webpack_require__(/*! ./modelListCreationHistoryWidget/ModelListCreationHistoryWidget */ "./app/AppCommon/widgets/modelListCreationHistoryWidget/ModelListCreationHistoryWidget.js");

__webpack_require__(/*! ./modelListTileWidget/ModelListTileWidget */ "./app/AppCommon/widgets/modelListTileWidget/ModelListTileWidget.js");

__webpack_require__(/*! ./performanceTabWidget/DataTable */ "./app/AppCommon/widgets/performanceTabWidget/DataTable.js");

__webpack_require__(/*! ./performanceTabWidget/LiftChart */ "./app/AppCommon/widgets/performanceTabWidget/LiftChart.js");

__webpack_require__(/*! ./performanceTabWidget/PerformanceTabWidget */ "./app/AppCommon/widgets/performanceTabWidget/PerformanceTabWidget.js");

__webpack_require__(/*! ./performanceTabWidget/ThresholdExplorer */ "./app/AppCommon/widgets/performanceTabWidget/ThresholdExplorer.js");

__webpack_require__(/*! ./thresholdExplorerWidget/ThresholdExplorerWidget */ "./app/AppCommon/widgets/thresholdExplorerWidget/ThresholdExplorerWidget.js");

__webpack_require__(/*! ./topPredictorWidget/TopPredictorAttributeWidget */ "./app/AppCommon/widgets/topPredictorWidget/TopPredictorAttributeWidget.js");

__webpack_require__(/*! ./topPredictorWidget/TopPredictorWidget */ "./app/AppCommon/widgets/topPredictorWidget/TopPredictorWidget.js");

__webpack_require__(/*! ./userManagementWidget/UserManagementWidget */ "./app/AppCommon/widgets/userManagementWidget/UserManagementWidget.js");

__webpack_require__(/*! ./Widgets */ "./app/AppCommon/widgets/Widgets.js");

/***/ }),

/***/ "./app/apiConsole/api-console.index.js":
/*!*********************************************!*\
  !*** ./app/apiConsole/api-console.index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/APIConsoleController */ "./app/apiConsole/controllers/APIConsoleController.js");

__webpack_require__(/*! ./controllers/ScoringRequestController */ "./app/apiConsole/controllers/ScoringRequestController.js");

__webpack_require__(/*! ./controllers/ScoringResponseController */ "./app/apiConsole/controllers/ScoringResponseController.js");

__webpack_require__(/*! ./services/APIConsoleService */ "./app/apiConsole/services/APIConsoleService.js");

/***/ }),

/***/ "./app/apiConsole/controllers/APIConsoleController.js":
/*!************************************************************!*\
  !*** ./app/apiConsole/controllers/APIConsoleController.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.apiconsole', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.models.services.ModelService', 'lp.apiconsole.ScoringRequestController', 'lp.apiconsole.ScoringResponseController']).controller('APIConsoleController', ["$scope", "$state", "$stateParams", "$rootScope", "ResourceUtility", "ModelService", function ($scope, $state, $stateParams, $rootScope, ResourceUtility, ModelService) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.loading = true;
    ModelService.GetAllModels(true).then(function (result) {
        if (result != null && result.success === true) {
            $scope.models = result.resultObj;
            var i = $scope.models.length;
            while (i--) {
                if ($scope.models[i].Status.toLowerCase() != 'active') {
                    $scope.models.splice(i, 1);
                }
            }
        } else {
            $scope.showLoadingError = true;
            $scope.loadingError = resultErrors;
        }
        $scope.loading = false;
    });
}]);

/***/ }),

/***/ "./app/apiConsole/controllers/ScoringRequestController.js":
/*!****************************************************************!*\
  !*** ./app/apiConsole/controllers/ScoringRequestController.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.apiconsole.ScoringRequestController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'lp.apiconsole.APIConsoleService']).directive('scoringRequest', function () {
    return {
        templateUrl: 'app/apiConsole/views/ScoringRequestView.html',
        controller: ["$scope", "$rootScope", "$q", "$stateParams", "_", "ResourceUtility", "BrowserStorageUtility", "APIConsoleService", "ModelStore", "FeatureFlagService", function controller($scope, $rootScope, $q, $stateParams, _, ResourceUtility, BrowserStorageUtility, APIConsoleService, ModelStore, FeatureFlagService) {
            $scope.ResourceUtility = ResourceUtility;
            $scope.showScoringRequestError = false;
            initValues();

            BrowserStorageUtility.clearOAuthAccessToken();

            var ClientSession = BrowserStorageUtility.getClientSession(),
                Tenant = ClientSession ? ClientSession.Tenant : {},
                tenantId = (Tenant.Identifier || '').split('.')[0];

            var displayOrder = ['Email', 'CompanyName', 'State', 'Country', 'Website', 'DUNS', 'FirstName', 'LastName'];
            var oldFieldsValuesHash = {};

            var fuzzyMatchEnabled = FeatureFlagService.FlagIsEnabled(FeatureFlagService.Flags().ENABLE_FUZZY_MATCH);
            var fuzzyMatchFieldsSet = ['CompanyName', 'State', 'Country', 'DUNS', 'City', 'PostalCode', 'PhoneNumber'];

            $scope.modelChanged = function ($event) {
                $scope.scoringRequested = false;

                if ($event != null) {
                    $event.preventDefault();
                }

                if ($scope.modelId == null || $scope.modelId == '') {
                    initValues();
                } else {
                    $scope.fieldsLoading = true;
                    $scope.showFieldsLoadingError = false;
                    storeOldFieldsValues();
                    $scope.fields = [];

                    ModelStore.getModel($scope.modelId).then(function (model) {
                        $scope.schemaInterpretation = model.ModelDetails.SourceSchemaInterpretation;

                        // Note: Consider access token will be available in 24 hours, we store it in storage.
                        // If user login one account in different browsers, the saved access token in prior browser will invalid.
                        var token = BrowserStorageUtility.getOAuthAccessToken();
                        if (token != null) {
                            getModelFields(token);
                        } else {
                            APIConsoleService.GetOAuthAccessToken(tenantId).then(function (tokenResult) {
                                if (tokenResult.Success) {
                                    BrowserStorageUtility.setOAuthAccessToken(tokenResult.ResultObj);
                                    getModelFields(tokenResult.ResultObj);
                                } else {
                                    handleGetModelFieldsError(tokenResult);
                                }
                            });
                        }
                    });
                }
            };

            function storeOldFieldsValues() {
                oldFieldsValuesHash = {};
                for (var i = 0; i < $scope.fields.length; i++) {
                    if ($scope.fields[i] != null && $scope.fields[i].value != null) {
                        oldFieldsValuesHash[$scope.fields[i].name] = $scope.fields[i].value;
                    }
                }
            }

            function initValues() {
                $scope.showFields = false;
                $scope.fieldsLoading = false;
                $scope.showFieldsLoadingError = false;
                $scope.fieldsLoadingError = null;
                $scope.fields = [];
                $scope.scoringRequested = false;
                $scope.schemaInterpretation = null;
            }

            function getModelFields(token) {
                APIConsoleService.GetModelFields(token, $scope.modelId).then(function (result) {
                    if (result.Success) {
                        if (fuzzyMatchEnabled) {
                            addMissingFuzzyMatchFields(result.ResultObj);
                        }
                        shuffleFieldsInOrder(result.ResultObj);
                        $scope.showFields = true;
                        $scope.fieldsLoading = false;
                    } else {
                        handleGetModelFieldsError(result);
                    }
                });
            }

            function addMissingFuzzyMatchFields(fields) {
                var fuzzyMatchFieldsMap = {};
                fuzzyMatchFieldsSet.forEach(function (field) {
                    fuzzyMatchFieldsMap[field] = true;
                });

                if ($scope.schemaInterpretation === 'SalesforceAccount') {
                    fuzzyMatchFieldsMap.Website = true;
                } else {
                    fuzzyMatchFieldsMap.Email = true;
                }

                fields.forEach(function (field) {
                    if (fuzzyMatchFieldsMap[field.name]) {
                        fuzzyMatchFieldsMap[field.name] = false;
                    }
                });

                for (var field in fuzzyMatchFieldsMap) {
                    if (fuzzyMatchFieldsMap[field] === true) {
                        fields.push({
                            displayName: field,
                            name: field,
                            fieldType: "STRING",
                            isPrimary: true
                        });
                    }
                }
            }

            function shuffleFieldsInOrder(fields) {
                for (var i = 0; i < displayOrder.length; i++) {
                    for (var j = 0; j < fields.length; j++) {
                        if (displayOrder[i] == fields[j].name) {
                            if (fields[j].name != 'FirstName' && fields[j].name != 'LastName') {
                                fields[j].mandatory = true;
                            }
                            fields[j].value = oldFieldsValuesHash[fields[j].name];
                            $scope.fields.push(fields[j]);
                            fields.splice(j, 1);
                        }
                    }
                }

                fields = _.sortBy(fields, 'name');
                for (var i = 0; i < fields.length; i++) {
                    fields[i].value = oldFieldsValuesHash[fields[i].name];
                }
                $scope.fields = $scope.fields.concat(fields);
            }

            function handleGetModelFieldsError(result) {
                $scope.showFields = false;
                $scope.showFieldsLoadingError = true;
                $scope.fieldsLoadingError = result.ResultErrors;
                $scope.fieldsLoading = false;
            }

            $scope.clearClicked = function ($event) {
                if ($event != null) {
                    $event.preventDefault();
                }

                for (var i = 0; i < $scope.fields.length; i++) {
                    $scope.fields[i].value = null;
                }
            };

            $scope.sentClicked = function ($event) {
                $scope.scoringRequested = true;
                $scope.scoreRecordLoading = true;
                $scope.scoringRequestError = null;
                $scope.score = null;
                $scope.jsonData = null;
                $scope.timeElapsed = null;

                var scoreRequest = { modelId: $scope.modelId, source: 'APIConsole', record: {} };
                for (var i = 0; i < $scope.fields.length; i++) {
                    if ($scope.fields[i].value != null) {
                        if ($scope.fields[i].fieldType.toUpperCase() == 'FLOAT') {
                            scoreRequest.record[$scope.fields[i].name] = Number($scope.fields[i].value);
                        } else {
                            scoreRequest.record[$scope.fields[i].name] = $scope.fields[i].value;
                        }
                    }
                }
                var token = BrowserStorageUtility.getOAuthAccessToken();
                if (token != null) {
                    getScoreRecordWithRetries(token, scoreRequest);
                } else {
                    APIConsoleService.GetOAuthAccessToken(tenantId).then(function (tokenResult) {
                        if (tokenResult.Success) {
                            BrowserStorageUtility.setOAuthAccessToken(tokenResult.ResultObj);
                            getScoreRecord(tokenResult.ResultObj, scoreRequest).then(function (scoringResult) {
                                $scope.showScoringRequestError = true;
                                $scope.scoreRecordLoading = false;
                            });
                        } else {
                            $scope.scoringRequestError = result.ResultErrors;
                            $scope.showScoringRequestError = true;
                            $scope.scoreRecordLoading = false;
                        }
                    });
                }
            };

            function refreshAccessToken() {
                var deferred = $q.defer();
                var result = {
                    success: true,
                    accessToken: null
                };

                APIConsoleService.GetOAuthAccessToken(tenantId).then(function (tokenResult) {
                    if (tokenResult.Success) {
                        var accessToken = tokenResult.ResultObj;
                        BrowserStorageUtility.setOAuthAccessToken(accessToken);
                        result.accessToken = accessToken;
                        deferred.resolve(result);
                    } else {
                        $scope.scoringRequestError = $scope.scoringRequestError + ' and refresh access token failed';
                        result.success = false;
                        deferred.resolve(result);
                    }
                });

                return deferred.promise;
            }

            function getScoreRecordWithRetries(token, scoringRequest) {
                getScoreRecord(token, scoringRequest).then(function (scoringResult) {
                    if (!scoringResult.success && $scope.scoringRequestError.indexOf('Invalid access token') > -1) {
                        refreshAccessToken().then(function (tokenResult) {
                            if (tokenResult.success) {
                                getScoreRecord(tokenResult.accessToken, scoringRequest).then(function (scoringResult) {
                                    $scope.showScoringRequestError = true;
                                    $scope.scoreRecordLoading = false;
                                });
                            } else {
                                $scope.showScoringRequestError = true;
                                $scope.scoreRecordLoading = false;
                            }
                        });
                    } else {
                        $scope.showScoringRequestError = true;
                        $scope.scoreRecordLoading = false;
                    }
                });
            }

            function getScoreRecord(token, scoreRequest) {
                var deferred = $q.defer();
                var start = new Date();
                var scoringResult = {
                    success: true
                };

                APIConsoleService.GetScoreRecord(token, scoreRequest).then(function (result) {
                    var end = new Date();
                    $scope.timeElapsed = end.getTime() - start.getTime() + ' MS';
                    /**
                    if (result.ResultObj != null) {
                        $scope.jsonData = JSON.stringify(result.ResultObj, null, "    ");
                    }
                    */
                    if (result.Success) {
                        $scope.score = result.ResultObj.score;
                        $scope.warnings = result.ResultObj.warnings;
                        $scope.scoreId = result.ResultObj.scoreId;
                        $scope.scoreTimestamp = result.ResultObj.timestamp;
                        $scope.classification = result.ResultObj.classification;

                        $scope.scoringRequestError = null;
                        deferred.resolve(scoringResult);
                    } else {
                        $scope.scoringRequestError = result.ResultErrors;
                        scoringResult.success = false;
                        deferred.resolve(scoringResult);
                    }
                });

                return deferred.promise;
            }

            function stringDivider(str, width, spaceReplacer) {}
        }]
    };
});

/***/ }),

/***/ "./app/apiConsole/controllers/ScoringResponseController.js":
/*!*****************************************************************!*\
  !*** ./app/apiConsole/controllers/ScoringResponseController.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.apiconsole.ScoringResponseController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.directives.charts.ArcChartDirective', 'lp.apiconsole.APIConsoleService']).directive('scoringResponse', function () {
    return {
        templateUrl: 'app/apiConsole/views/ScoringResponseView.html',
        controller: ['$scope', 'ResourceUtility', 'APIConsoleService', function ($scope, ResourceUtility, APIConsoleService) {
            $scope.ResourceUtility = ResourceUtility;
            $scope.ChartSize = 30;
            $scope.ChartTotal = 100;
            $scope.ChartColor = APIConsoleService.CalculateArcColor($scope.score);
        }]
    };
});

/***/ }),

/***/ "./app/apiConsole/services/APIConsoleService.js":
/*!******************************************************!*\
  !*** ./app/apiConsole/services/APIConsoleService.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.apiconsole.APIConsoleService', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.AnimationUtility']).service('APIConsoleService', ["$http", "$q", "$location", "ResourceUtility", "StringUtility", "AnimationUtility", function ($http, $q, $location, ResourceUtility, StringUtility, AnimationUtility) {

    this.GetOAuthAccessToken = function (tenantId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/oauth2/accesstoken/json?tenantId=' + tenantId + '.' + tenantId + '.Production',
            headers: {
                'Content-Type': "application/json",
                'ErrorDisplayMethod': 'modal|home.models'
            }
        }).success(function (data, status, headers, config) {
            var result = {
                Success: data && data.token ? true : false,
                ResultObj: data && data.token ? data.token : null,
                ResultErrors: data && data.token ? null : ResourceUtility.getString('API_CONSOLE_SCORING_REQUEST_GET_ACCESS_TOKEN_ERROR')
            };
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: ResourceUtility.getString('API_CONSOLE_SCORING_REQUEST_GET_ACCESS_TOKEN_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetModelFields = function (accessToken, modelId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/score/models/' + modelId + '/fields',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken
            }
        }).success(function (data, status, headers, config) {
            var result = {
                Success: data && data.fields ? true : false,
                ResultObj: data && data.fields ? getDisplayFieldsFromResponseFields(data.fields) : null,
                ResultErrors: data && data.fields ? null : ResourceUtility.getString('API_CONSOLE_SCORING_REQUEST_GET_MODEL_FIELDS_ERROR')
            };
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: ResourceUtility.getString('API_CONSOLE_SCORING_REQUEST_GET_MODEL_FIELDS_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.CalculateArcColor = function (score) {
        if (score == null) {
            return null;
        }

        var highestRgb = { R: 27, G: 172, B: 94 };
        var midRangeRgb = { R: 255, G: 255, B: 102 };
        var lowestRgb = { R: 178, G: 0, B: 0 };

        var rgbColor = null;
        if (score > 50) {
            rgbColor = AnimationUtility.CalculateRgbBetweenValues(highestRgb, midRangeRgb, score);
            return AnimationUtility.ConvertRgbToHex(rgbColor.R, rgbColor.G, rgbColor.B);
        } else {
            // Need to double the score when it is below 50
            // because we use a different color scale from 0-50
            score = score * 2;
            rgbColor = AnimationUtility.CalculateRgbBetweenValues(midRangeRgb, lowestRgb, score);
            return AnimationUtility.ConvertRgbToHex(rgbColor.R, rgbColor.G, rgbColor.B);
        }
    };

    function getDisplayFieldsFromResponseFields(responseFields) {
        var displayFields = [];

        for (var i = 0; i < responseFields.length; i++) {
            displayFields.push(generateField(responseFields[i]));
        }

        return displayFields;
    }

    function generateField(field) {
        return { name: field.fieldName, displayName: StringUtility.SubstituteAllSpecialCharsWithSpaces(field.fieldName), placeholder: field.fieldValue, fieldType: field.fieldType };
    }

    this.GetScoreRecord = function (accessToken, scoreRequest) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/score/record',
            data: scoreRequest,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken,
                'ErrorDisplayMethod': 'none'
            }
        }).success(function (data, status, headers, config) {
            var result = {
                Success: data ? true : false,
                ResultObj: data,
                ResultErrors: data ? null : ResourceUtility.getString('API_CONSOLE_SCORING_REQUEST_GET_SCORE_RECORD_ERROR')
            };
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var jsonData = null;
            if (typeof data === 'string') {
                jsonData = { error: data, code: status };
            } else if (data != null) {
                jsonData = data;
                jsonData.code = status;
            }
            var result = {
                Success: false,
                ResultObj: jsonData,
                ResultErrors: data.error_description
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/app.js":
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _httpService = __webpack_require__(/*! ../../common/app/http/http-service */ "../common/app/http/http-service.js");

var _httpService2 = _interopRequireDefault(_httpService);

var _messagingService = __webpack_require__(/*! ../../common/app/utilities/messaging-service */ "../common/app/utilities/messaging-service.js");

var _messagingService2 = _interopRequireDefault(_messagingService);

var _message = __webpack_require__(/*! ../../common/app/utilities/message */ "../common/app/utilities/message.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mainApp = angular.module("mainApp", ["templates-main",
//'ngAnimate',
"ngRoute", "ui.router", "ui.bootstrap", "oc.lazyLoad", "angulartics", "angulartics.mixpanel", "mainApp.appCommon.Widgets", "common.modules", "common.modal", "common.banner", "common.notice", "common.exceptions", "common.attributes", "common.datacloud",

//'lp.header',
"pd.navigation", "lp.jobs", "lp.campaigns", "lp.campaigns.models", "lp.segments.segments", "lp.models.list", "lp.models.review", "lp.models.ratings", "lp.notes", "lp.playbook", "lp.ratingsengine", "lp.importtemplates", "lp.import", "lp.delete", "lp.create.import", "lp.sfdc", "lp.ssoconfig", "lp.sfdc.credentials", "lp.marketo", "lp.marketo.enrichment", "lp.marketo.models", "lp.apiconsole", "lp.managefields", "lp.configureattributes"]).controller("MainController", ["$scope", "BrowserStorageUtility", "SessionTimeoutUtility", "TimestampIntervalUtility", "LeMessaging", "Banner", "Notice", "Modal", "ServiceErrorUtility", function ($scope, BrowserStorageUtility, SessionTimeoutUtility, TimestampIntervalUtility, LeMessaging, Banner, Notice, Modal, ServiceErrorUtility) {
  var previousSession = BrowserStorageUtility.getClientSession();
  var loginDocument = BrowserStorageUtility.getLoginDocument();

  SessionTimeoutUtility.init();

  if (loginDocument && mustUserChangePassword(loginDocument)) {
    window.open("/login", "_self");
  } else if (previousSession != null && !SessionTimeoutUtility.hasSessionTimedOut()) {
    //SessionTimeoutUtility.refreshPreviousSession(previousSession.Tenant);
  } else {
    window.open("/login", "_self");
  }

  function mustUserChangePassword(loginDocument, $scope) {
    return loginDocument.MustChangePassword || TimestampIntervalUtility.isTimestampFartherThanNinetyDaysAgo(loginDocument.PasswordLastModified);
  }

  var ClientSession = BrowserStorageUtility.getClientSession();

  if (ClientSession != null) {
    var LoginDocument = BrowserStorageUtility.getLoginDocument();
    var Tenant = ClientSession ? ClientSession.Tenant : {};

    $scope.userDisplayName = LoginDocument.UserName;
    $scope.tenantName = window.escape(Tenant.DisplayName);
  }

  // Get IE or Edge browser version
  var version = detectIE();

  if (version === false) {
    document.getElementById("body").classList.add("not-ie");
  } else if (version >= 12) {
    document.getElementById("body").classList.add("edge-" + version);
  } else {
    document.getElementById("body").classList.add("ie-" + version);
  }

  // add details to debug result
  console.log(window.navigator.userAgent);
  LeMessaging.subscribe({
    next: function next(message) {
      // console.log("RECEIVED", message);
      if (message.isErrorUtility()) {
        ServiceErrorUtility.process(message.getResponse());
        $scope.$apply(function () {});
      } else {
        switch (message.getPosition()) {
          case _message.BANNER:
            // console.log(message.getMessage());
            Banner[message.getType()]({
              title: message.getMessage(),
              message: message.getFullMessage()
            });
            $scope.$apply(function () {});
            break;

          case _message.MODAL:
            // console.log(message.getMessage());
            Modal[message.getType()]({
              title: message.getMessage(),
              message: message.getFullMessage()
            });
            $scope.$apply(function () {});
            break;

          case _message.NOTIFICATION:
            // console.log(message.getMessage());
            Notice[message.getType()]({
              title: message.getMessage(),
              message: message.getFullMessage()
            });
            $scope.$apply(function () {});
            break;
        }
      }
    }
  });
  /**
   * detect IE
   * returns version of IE or false, if browser is not Internet Explorer
   */
  function detectIE() {
    var ua = window.navigator.userAgent;

    var msie = ua.indexOf("MSIE ");
    if (msie > 0) {
      // IE 10 or older => return version number
      return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
    }

    var trident = ua.indexOf("Trident/");
    if (trident > 0) {
      // IE 11 => return version number
      var rv = ua.indexOf("rv:");
      return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
    }

    var edge = ua.indexOf("Edge/");
    if (edge > 0) {
      // Edge (IE 12+) => return version number
      return parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10);
    }

    // other browser
    return false;
  }
}]).factory("LeMessaging", function () {
  return {
    subscribe: function subscribe(observer) {
      _messagingService2.default.addSubscriber(observer);
    }
  };
}).factory("LeHTTP", function () {
  return {
    initHeader: function initHeader(headerObj) {
      _httpService2.default.setUpHeader(headerObj);
    },
    unsubscribeObservable: function unsubscribeObservable(observer) {
      _httpService2.default.unsubscribeObservable(observer);
    },
    get: function get(url, observer) {
      return _httpService2.default.get(url, observer);
    }
  };
})
// adds Authorization token to $http requests to access API
.factory("authInterceptor", ["$rootScope", "$q", "BrowserStorageUtility", "LeHTTP", function ($rootScope, $q, BrowserStorageUtility, LeHTTP) {
  return {
    request: function request(config) {
      config.headers = config.headers || {};

      if (config.headers.Authorization == null && BrowserStorageUtility.getTokenDocument()) {
        config.headers.Authorization = BrowserStorageUtility.getTokenDocument();
        LeHTTP.initHeader({ Authorization: config.headers.Authorization });
      }

      var ClientSession = BrowserStorageUtility.getClientSession();

      if (ClientSession && ClientSession.Tenant) {
        config.headers.TenantId = ClientSession.Tenant.Identifier;
      }

      return config;
    },
    response: function response(_response) {
      return _response || $q.when(_response);
    }
  };
}])
// add authInterceptor factory for Authorization header (above)
.config(["$httpProvider", function ($httpProvider) {
  $httpProvider.interceptors.push("authInterceptor");
}])
// prevent $http caching of API results
.config(["$httpProvider", function ($httpProvider) {
  //initialize get if not there
  if (!$httpProvider.defaults.headers.get) {
    $httpProvider.defaults.headers.get = {};
  }

  //disable IE ajax request caching
  $httpProvider.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT";
  $httpProvider.defaults.headers.get["Cache-Control"] = "no-cache";
  $httpProvider.defaults.headers.get["Pragma"] = "no-cache";
}]).config(["$animateProvider", function ($animateProvider) {
  $animateProvider.classNameFilter(/ngAnimate/);
}])
// add escape filter to angular {{ foobar | escape }}
.filter("escape", function () {
  return window.escape;
}); //Initial load of the application

/***/ }),

/***/ "./app/campaigns/campaigns.index.js":
/*!******************************************!*\
  !*** ./app/campaigns/campaigns.index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/CampaignListController */ "./app/campaigns/controllers/CampaignListController.js");

__webpack_require__(/*! ./controllers/CampaignModelsController */ "./app/campaigns/controllers/CampaignModelsController.js");

__webpack_require__(/*! ./modals/DeleteCampaignModal */ "./app/campaigns/modals/DeleteCampaignModal.js");

__webpack_require__(/*! ./services/CampaignService */ "./app/campaigns/services/CampaignService.js");

/***/ }),

/***/ "./app/campaigns/controllers/CampaignListController.js":
/*!*************************************************************!*\
  !*** ./app/campaigns/controllers/CampaignListController.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.campaigns', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.campaigns.modals.DeleteCampaignModal']).controller('CreateCampaignController', ['$scope', '$state', '$stateParams', 'BrowserStorageUtility', 'ResourceUtility', 'CampaignService', function ($scope, $state, $stateParams, BrowserStorageUtility, ResourceUtility, CampaignService) {

    var vm = this;

    angular.extend(vm, {
        campaignName: '',
        campaignDescription: '',
        saveInProgress: false,
        addCampaignErrorMessage: "",
        showAddCampaignError: false
    });
}]).controller('CampaignListController', ['Campaigns', 'CampaignService', 'DeleteCampaignModal', 'ResourceUtility', function (Campaigns, CampaignService, DeleteCampaignModal, ResourceUtility) {
    var vm = this;

    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        campaigns: Campaigns
    });

    vm.showCustomMenu = false;
    vm.customMenuClick = function ($event) {
        if ($event != null) {
            $event.stopPropagation();
        }

        $scope.showCustomMenu = !$scope.showCustomMenu;

        if ($scope.showCustomMenu) {
            $(document).bind('click', function (event) {
                var isClickedElementChildOfPopup = $element.find(event.target).length > 0;

                if (isClickedElementChildOfPopup) return;

                $scope.$apply(function () {
                    $scope.showCustomMenu = false;
                    $(document).unbind(event);
                });
            });
        }
    };

    /* Navigate to Campaign Detail page */
    vm.tileClick = function ($event) {
        $event.preventDefault();
    };

    vm.showCreateCampaignClicked = function ($event) {
        vm.showCreateCampaignForm = true;
    };
    vm.createCampaignClicked = function () {

        vm.saveInProgress = true;

        var campaign = {
            campaignName: vm.campaignName,
            campaignDescription: vm.campaignDescription
        };

        CampaignService.CreateCampaign(campaign).then(function (result) {

            if (result != null && result.success === true) {
                $state.go('home.campaigns', {}, { reload: true });
            } else {
                vm.saveInProgress = false;
                vm.addCampaignErrorMessage = result;
                vm.showAddCampaignError = true;
            }
        });
    };

    vm.cancelCreateCampaignClicked = function () {
        vm.showCreateCampaignForm = false;
    };

    vm.deleteCampaignClicked = function (campaignId) {
        DeleteCampaignModal.show(campaignId);
    };
}]);

/***/ }),

/***/ "./app/campaigns/controllers/CampaignModelsController.js":
/*!***************************************************************!*\
  !*** ./app/campaigns/controllers/CampaignModelsController.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.campaigns.models', ['mainApp.appCommon.utilities.ResourceUtility']).controller('CampaignModelsController', ["$stateParams", "BrowserStorageUtility", "ResourceUtility", "CampaignStore", function ($stateParams, BrowserStorageUtility, ResourceUtility, CampaignStore) {

    var vm = this;
    angular.extend(vm, {
        campaignId: $stateParams.campaignId
    });

    vm.init = function () {};

    vm.init();
}]);

/***/ }),

/***/ "./app/campaigns/modals/DeleteCampaignModal.js":
/*!*****************************************************!*\
  !*** ./app/campaigns/modals/DeleteCampaignModal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.campaigns.modals.DeleteCampaignModal', ['mainApp.appCommon.utilities.ResourceUtility', 'lp.campaigns']).service('DeleteCampaignModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "CampaignService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, CampaignService) {
    var self = this;
    this.show = function (credentialId) {
        $http.get('app/marketo/views/DeleteCampaignModal.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.credentialId = credentialId;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteCampaignError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DeleteCampaignController', ["$scope", "$rootScope", "$state", "ResourceUtility", "CampaignService", function ($scope, $rootScope, $state, ResourceUtility, CampaignService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deleteCampaignClick = function () {
        $("#deleteCampaignError").hide();
        CampaignService.DeleteCampaign($scope.campaignId).then(function (result) {
            if (result != null && result.success === true) {
                $("#modalContainer").modal('hide');
                $state.go('home.campaigns', {}, { reload: true });
            } else {
                $scope.deleteCampaignErrorMessage = result.ResultErrors;
                $("#deleteCampaignError").fadeIn();
            }
        });
    };

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/campaigns/services/CampaignService.js":
/*!***************************************************!*\
  !*** ./app/campaigns/services/CampaignService.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.campaigns').service('CampaignService', ["$http", "$q", "$state", function ($http, $q, $state) {
    this.GetCampaigns = function (id) {
        var deferred = $q.defer();
        var result;
        var id = id || '';
        var url = '/pls/campaigns/' + id;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetCampaignById = function (campaignId) {
        var deferred = $q.defer(),
            result,
            url = '/pls/campaigns/' + campaignId;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.CreateCampaign = function (campaign) {
        var deferred = $q.defer(),
            data = {
            name: campaign.campaignName,
            description: campaign.campaignDescription
        },
            url = '/pls/campaigns/' + data.name;

        $http({
            method: 'POST',
            url: url,
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.DeleteCampaign = function (campaignId) {
        var deferred = $q.defer(),
            result = {},
            url = '/pls/campaigns/' + campaignId;

        $http({
            method: 'DELETE',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/cgtalkingpoint/attributepane/attributepane.component.js":
/*!*********************************************************************!*\
  !*** ./app/cgtalkingpoint/attributepane/attributepane.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.cg.talkingpoint.attributepane', []).directive('cgTpAttributePane', function () {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            opts: '=',
            entities: '='
        },
        templateUrl: 'app/cgtalkingpoint/attributepane/attributepane.component.html',
        link: function link($scope, $element) {
            $scope.$on("deleteClicked", function (event, args) {
                $element[0].style.top = '';
            });
        },
        controller: ["$scope", "$element", "$filter", "$window", "CgTalkingPointStore", function controller($scope, $element, $filter, $window, CgTalkingPointStore) {
            //console.log($scope.entities);

            $scope.selected = $scope.entities[0]; //Object.keys($scope.opts)[0];
            $scope.categories = new Set($scope.opts['account'].map(function (attr) {
                return attr.category;
            }));
            $scope.categories = Array.from($scope.categories);
            $scope.search = {};
            $scope.search.name = '';
            $scope.search.category = $scope.categories[0];
            $scope.priorSelectedCategory = null;

            $window.addEventListener('scroll', handleWindowScroll);

            $scope.$on('$destroy', function () {
                $window.removeEventListener('scroll', handleWindowScroll);
            });

            var originalTop = $element[0].offsetTop;

            $scope.changeEntity = function () {
                if ($scope.selected != 'account') {
                    $scope.priorSelectedCategory = $scope.search.category;
                    delete $scope.search.category;
                } else {
                    $scope.search.category = $scope.priorSelectedCategory ? $scope.priorSelectedCategory : $scope.categories[0];
                }
            };

            $scope.getAttributes = function () {
                return $scope.opts[$scope.selected];
            };

            function handleWindowScroll(evt) {

                var scrollY = evt.currentTarget.scrollY,
                    paneBottom = $element.offset().top + $element.outerHeight(),
                    container = $element[0].parentElement,
                    $container = angular.element(container),
                    containerBottom = $container.offset().top + $container.outerHeight();

                if (scrollY > originalTop) {
                    $element.addClass('loose');
                    if (paneBottom < containerBottom) {
                        $element[0].style.top = scrollY - originalTop + 10 + 'px';
                    }
                } else {
                    $element.removeClass('loose');
                    $element[0].style.top = '';
                }
            }

            $scope.eleMouseDown = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();

                $event.target.style.width = '200%';
                $event.target.style.left = '-200%';

                $window.addEventListener('mousemove', eleMouseMove, false);
                $window.addEventListener('mouseup', eleMouseUp, false);
            };

            var originalX = null,
                originalWidth;
            function eleMouseMove(evt) {
                evt.preventDefault();
                evt.stopPropagation();

                if (originalX === null) {
                    originalX = evt.clientX;
                    originalWidth = $element[0].offsetWidth;
                }

                var dx = originalX - evt.clientX;
                $element[0].style.width = originalWidth + dx + 'px';
            };

            function eleMouseUp(evt) {
                evt.preventDefault();
                evt.stopPropagation();

                evt.target.style.width = '';
                evt.target.style.left = '';

                originalX = null;
                originalWidth = null;

                $window.removeEventListener('mousemove', eleMouseMove, false);
                $window.removeEventListener('mouseup', eleMouseUp, false);
            };
        }],
        controllerAs: 'vm'
    };
}).directive('attributeDraggable', function () {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            attribute: '='
        },
        templateUrl: 'app/cgtalkingpoint/attributepane/attributedraggable.component.html',
        controller: ["$scope", "$element", function controller($scope, $element) {
            $element[0].addEventListener('dragstart', onDragStart);

            $scope.$on('$destroy', function () {
                $element[0].removeEventListener('dragstart', onDragStart);
            });

            function onDragStart(evt) {
                evt.dataTransfer.dropEffect = 'move';
                evt.dataTransfer.effectAllowed = 'all';
                evt.dataTransfer.setData('text', '{!' + $scope.attribute.value + '}');
            }
        }]
    };
});

/***/ }),

/***/ "./app/cgtalkingpoint/cg-talking-point.index.js":
/*!******************************************************!*\
  !*** ./app/cgtalkingpoint/cg-talking-point.index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./attributepane/attributepane.component */ "./app/cgtalkingpoint/attributepane/attributepane.component.js");

__webpack_require__(/*! ./cgtalkingpoint.component */ "./app/cgtalkingpoint/cgtalkingpoint.component.js");

__webpack_require__(/*! ./cgtalkingpoint.service */ "./app/cgtalkingpoint/cgtalkingpoint.service.js");

__webpack_require__(/*! ./tpeditor/tpeditor.component */ "./app/cgtalkingpoint/tpeditor/tpeditor.component.js");

__webpack_require__(/*! ./tppreview/tppreview.component */ "./app/cgtalkingpoint/tppreview/tppreview.component.js");

/***/ }),

/***/ "./app/cgtalkingpoint/cgtalkingpoint.component.js":
/*!********************************************************!*\
  !*** ./app/cgtalkingpoint/cgtalkingpoint.component.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.cg.talkingpoint', ['lp.cg.talkingpoint.talkingpointservice', 'lp.cg.talkingpoint.attributepane', 'lp.cg.talkingpoint.editor', 'lp.cg.talkingpoint.preview']);

/***/ }),

/***/ "./app/cgtalkingpoint/cgtalkingpoint.service.js":
/*!******************************************************!*\
  !*** ./app/cgtalkingpoint/cgtalkingpoint.service.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('lp.cg.talkingpoint.talkingpointservice', []).service('CgTalkingPointStore', ["$q", "$rootScope", "$timeout", "CgTalkingPointService", function ($q, $rootScope, $timeout, CgTalkingPointService) {
    var CgTalkingPointStore = this;

    this.init = function () {
        this.danteUrl = null;
        this.accounts = null;
        this.danteAccounts = null;
        this.attributes = null;
        this.talkingPoints = [];
        this.talkingPointsPreviewResources = null;
        this.editedTalkingPoint = {};

        this.savedTalkingPoints = null;
        this.deleteClicked = false;
        this.calling = [];
    };
    this.init();

    this.saving = false;
    this.saveOnBlur = true;

    this.clear = function () {
        this.init();
    };

    this.getDeleteClicked = function () {
        return this.deleteClicked;
    };

    this.setEditedTalkingPoint = function (talkingPoint, propertyName) {
        if (talkingPoint && !propertyName) {
            this.editedTalkingPoint = talkingPoint;
        } else if (talkingPoint && propertyName && (typeof talkingPoint === 'undefined' ? 'undefined' : _typeof(talkingPoint)) === 'object') {
            this.editedTalkingPoint = talkingPoint;
            this.editedTalkingPoint[propertyName] = talkingPoint[propertyName];
        } else if (talkingPoint && propertyName && typeof talkingPoint === 'string') {
            this.editedTalkingPoint[propertyName] = talkingPoint;
        }
    };

    this.getEditedTalkingPoint = function (property) {
        if (property) {
            return this.editedTalkingPoint[property] ? this.editedTalkingPoint[property] : null;
        }
        return this.editedTalkingPoint;
    };

    this.getTalkingPoint = function (name) {
        if (this.talkingPoints) {
            var talkingPoint = this.talkingPoints.find(function (item) {
                return name === item.name;
            });
            return talkingPoint;
        }
    };

    this.isTalkingPointDirty = function (talkingPoint) {
        if (!talkingPoint) {
            return false;
        }
        var talkingPoint = angular.copy(talkingPoint),
            dirty = false,
            check = ['content', 'title', 'offset'];

        if (!talkingPoint.pid) {
            // this means it's a new talking point
            return true; // "dirty"
        }

        // get the current talking point from the reference of saved talking points (i.e. not talking points from the mutable object)
        for (var i in this.savedTalkingPoints) {
            var currentTalkingPoint = this.savedTalkingPoints[i];
            if (currentTalkingPoint.name === talkingPoint.name) {
                var foundCurrentTalkingPoint = currentTalkingPoint;
                break;
            }
        }

        // just check from a whitelist to see if the properties are equal
        for (var i in check) {
            var property = check[i];
            if (foundCurrentTalkingPoint[property] !== talkingPoint[property]) {
                dirty = true;
                break;
            }
        };
        return dirty;
    };

    this.setTalkingPoints = function (talkingPoints) {
        this.talkingPoints = talkingPoints;
    };

    var expandValues = function expandValues(talkingPoints) {
        for (var i in talkingPoints) {
            talkingPoints[i].value = JSON.parse(talkingPoints[i].value);
        }
        return talkingPoints;
    };

    var stringifyValues = function stringifyValues(talkingPoints) {
        for (var i in talkingPoints) {
            talkingPoints[i].value = JSON.stringify(talkingPoints[i].value);
        }
        return talkingPoints;
    };

    this.getTalkingPoints = function (play_name, no_cache) {
        if (!play_name) {
            return this.talkingPoints;
        }
        var deferred = $q.defer();
        if (this.talkingPoints && this.talkingPoints.length && !no_cache) {
            deferred.resolve(this.talkingPoints);
        } else {
            CgTalkingPointService.getTalkingPoints(play_name).then(function (data) {
                CgTalkingPointStore.setTalkingPoints(data);
                CgTalkingPointStore.savedTalkingPoints = angular.copy(data);
                deferred.resolve(data);
            });
        }
        return deferred.promise;
    };

    this.getTalkingPointsPreviewResources = function () {
        var callname = 'getTalkingPointsPreviewResources';
        if (!this.calling[callname]) {
            this.calling[callname] = true; // prevent double calling

            var deferred = $q.defer();
            // don't cache this because we always want a fresh oauth token every time
            CgTalkingPointService.getTalkingPointsPreviewResources().then(function (data) {
                CgTalkingPointStore.talkingPointsPreviewResources = data;
                deferred.resolve(data);

                CgTalkingPointStore.calling[callname] = false;
            });
            return deferred.promise;
        }
    };

    this.setSavingFlag = function (bool) {
        this.saving = bool;
    };

    this.getSavingFlag = function () {
        return this.saving;
    };

    this.saveTalkingPoints = function (opts) {
        var deferred = $q.defer();
        var callname = 'saveTalkingPoints';
        if (!this.calling[callname]) {
            this.calling[callname] = true; // prevent double calling

            $rootScope.$broadcast('talkingPoints:saving');
            CgTalkingPointStore.setSavingFlag(true);

            CgTalkingPointService.saveTalkingPoints(opts).then(function (data) {
                $rootScope.$broadcast('talkingPoints:saved');

                CgTalkingPointStore.setTalkingPoints(data);
                CgTalkingPointStore.savedTalkingPoints = angular.copy(data);
                CgTalkingPointStore.setSavingFlag(false);

                deferred.resolve(data);
                $timeout(function () {
                    CgTalkingPointStore.calling[callname] = false;
                }, 500);
            });
        }
        return deferred.promise;
    };

    this.deleteTalkingPoint = function (name) {
        $rootScope.$broadcast('talkingPoints:saving');
        var deferred = $q.defer();
        CgTalkingPointService.deleteTalkingPoint(name).then(function (data) {
            $rootScope.$broadcast('talkingPoints:saved');
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    this.getDanteUrl = function (opts) {
        var deferred = $q.defer(),
            no_cache = opts.no_cache || false;
        if (this.danteUrl !== null && !no_cache) {
            deferred.resolve(this.danteUrl);
        } else {
            this.getTalkingPointsPreviewResources().then(function (data) {
                CgTalkingPointService.getDanteUrl(data).then(function (response) {
                    CgTalkingPointStore.danteUrl = response.data;
                    deferred.resolve(response.data);
                });
            });
        }

        return deferred.promise;
    };

    var makeDanteAccountsObj = function makeDanteAccountsObj(obj) {
        var accounts = [];
        obj.forEach(function (value, key) {
            var nameToAdd = value.CompanyName;
            if (nameToAdd == null) {
                nameToAdd = value.Website;
            }
            if (nameToAdd == null) {
                nameToAdd = value.AccountId;
            }
            var tmpObj = {
                name: nameToAdd,
                id: value.AccountId
            };

            accounts.push(tmpObj);
        });
        return accounts;
    };

    this.getDanteAccounts = function (opts) {
        var deferred = $q.defer(),
            no_cache = opts.no_cache || false;
        if (this.danteAccounts !== null && !no_cache) {
            deferred.resolve(this.danteAccounts);
        } else {
            var self = this;
            CgTalkingPointService.getDanteAccounts(20, opts).then(function (response) {
                self.danteAccounts = makeDanteAccountsObj(response.data);
                deferred.resolve(self.danteAccounts);
            });
        }

        return deferred.promise;
    };

    this.getAccounts = function () {
        var query = {
            "free_form_text_search": "",
            "restrict_with_sfdcid": false,
            "restrict_without_sfdcid": false,
            "page_filter": {
                "row_offset": 0,
                "num_rows": 10
            }
        };

        return QueryStore.GetDataByQuery('accounts', query, PlaybookWizardStore.currentPlay.segment);
    };

    this.makeAttributesArray = function (attributes) {
        array = [];
        for (var i in attributes) {
            var key = i,
                value = attributes[i],
                attribute = {
                name: key,
                value: value
            };

            array.push(attribute);
        }
        return array;
    };

    this.getAttributes = function (entities) {
        var stub = false;
        var deferred = $q.defer();

        if (this.attributes !== null) {
            deferred.resolve(this.attributes);
        } else {
            if (stub) {
                CgTalkingPointService.getStubAttributes().then(function (response) {
                    CgTalkingPointStore.attributes = response;
                    deferred.resolve(CgTalkingPointStore.attributes);
                });
            } else {

                CgTalkingPointService.getAttributes(entities).then(function (response) {
                    // console.log('Entities',JSON.stringify(response.notionAttributes));
                    CgTalkingPointStore.attributes = response.notionAttributes;
                    deferred.resolve(CgTalkingPointStore.attributes);
                });
            }
        }
        return deferred.promise;
    };

    this.generateLeadPreviewObject = function (opts) {
        var deferred = $q.defer();
        CgTalkingPointService.getPreviewObject(opts).then(function (data) {
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    this.generateTalkingPoint = function (opts) {
        // {
        //     "name": "string" // random id, doesn't matter what it is
        //     "content": "string",
        //     "created": "2017-07-14T06:57:07.910Z",
        //     "name": "string",
        //     "offset": 0,
        //     "pid": 0,
        //     "playname": 0, // play name (id)
        //     "title": "string",
        //     "updated": "2017-07-14T06:57:07.911Z" // ISO date
        // }
        var opts = opts || {};
        opts.timestamp = opts.timestamp;

        var talkingPoint = {},
            ISOdate = opts.timestamp ? new Date(opts.timestamp).toISOString() : '';

        talkingPoint.created = opts.creationDate || opts.timestamp;
        //talkingPoint.customerID = opts.customerID; //tenant id and will be removed eventially
        talkingPoint.name = opts.externalID || 'fakeId' + Math.round(Math.random() * 10 * 10000); // this will be removed someday I assume since this is supposed to be an internal id made by backend
        talkingPoint.playname = opts.playExternalID; // play_name (which is the play id)
        talkingPoint.pid = opts.pid;
        talkingPoint.offset = opts.offset;
        talkingPoint.title = opts.title;
        talkingPoint.content = opts.content;

        return talkingPoint;
    };

    this.publishTalkingPoints = function (play_name) {
        var deferred = $q.defer();
        CgTalkingPointService.publishTalkingPoints(play_name).then(function (data) {
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    this.revertTalkingPoints = function (play_name) {
        var deferred = $q.defer();
        CgTalkingPointService.revertTalkingPoints(play_name).then(function (data) {
            deferred.resolve(data);
        });
        return deferred.promise;
    };
}]).service('CgTalkingPointService', ["$q", "$http", "$state", function ($q, $http, $state) {
    this.host = '/pls'; //default

    this.getTalkingPoints = function (play_name) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/dante/talkingpoints/play/' + play_name
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.getTalkingPointsPreviewResources = function () {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/dante/talkingpoints/previewresources'
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.saveTalkingPoints = function (opts) {
        var deferred = $q.defer();
        // for(var i in opts) {
        //     opts[i].created = new Date(opts[i].created).toISOString();
        // }
        $http({
            method: 'POST',
            url: this.host + '/dante/talkingpoints/',
            data: opts
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.deleteTalkingPoint = function (name) {
        var deferred = $q.defer();
        $http({
            method: 'DELETE',
            url: this.host + '/dante/talkingpoints/' + name
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.getDanteUrl = function (previewResources) {
        var deferred = $q.defer();
        var sessionid = previewResources.oAuthToken,
            preview_url = previewResources.danteUrl,
            server_url = previewResources.serverUrl,
            custom_settings_json = {
            hideNavigation: true,
            HideTabs: true,
            HideHeader: true
        },
            custom_settings = JSON.stringify(custom_settings_json).replace(/\"/g, '%22');

        deferred.resolve({ data: preview_url + '?sessionid=' + sessionid + '&serverurl=' + server_url + '&CustomSettings=' + custom_settings + '&LpiPreview=true' });

        return deferred.promise;
    };

    this.getPreviewObject = function (opts) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/dante/talkingpoints/preview',
            params: {
                playName: opts.playName
            }
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.getDanteAccounts = function (count, opts) {
        var deferred = $q.defer(),
            count = count || 20;
        var data = {
            'page_filter': {
                'num_rows': count,
                'row_offset': 0
            },
            'restrict_with_sfdcid': false
        };

        var keys = Object.keys(opts);
        keys.forEach(function (key) {
            data[key] = opts[key];
        });
        $http({
            // method: 'GET',
            // url: this.host + '/dante/accounts/' + count
            method: 'POST',
            url: this.host + '/accounts/data',
            data: data
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.getStubAttributes = function () {
        var deferred = $q.defer();
        var data = { "data": { "Company": [{ "value": "Account.Address1", "name": "Address1" }, { "value": "Account.Address2", "name": "Address2" }, { "value": "Account.City", "name": "City" }, { "value": "Account.Country", "name": "Country" }, { "value": "Account.DisplayName", "name": "Company Name" }, { "value": "Account.EstimatedRevenue", "name": "Estimated Revenue" }, { "value": "Account.LastModified", "name": "Last Modification Date" }, { "value": "Account.NAICSCode", "name": "NAICS Code" }, { "value": "Account.OwnerDisplayName", "name": "Sales Rep" }, { "value": "Account.SICCode", "name": "SIC Code" }, { "value": "Account.StateProvince", "name": "StateProvince" }, { "value": "Account.Territory", "name": "Territory" }, { "value": "Account.Vertical", "name": "Industry" }, { "value": "Account.Zip", "name": "Zip" }], "Recommendation": [{ "name": "Expected Value", "value": "ExpectedValue" }, { "name": "Likelihood", "value": "LikelihoodBucketOffset" }, { "name": "Campaign Name", "value": "PlayDisplayName" }, { "name": "Solution Name", "value": "PlaySolutionName" }, { "name": "Solution Type", "value": "PlaySolutionType" }, { "name": "Play Owner", "value": "UserRoleDisplayName" }, { "name": "Target Product", "value": "PlayTargetProductName" }, { "name": "Theme", "value": "Theme" }] } };
        deferred.resolve(data.data);
        return deferred.promise;
    };

    this.getAttributes = function (entities) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: this.host + '/dante/attributes',
            data: entities
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.getAccountAttributes = function () {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/dante/attributes/accountattributes'
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.getRecommendationAttributes = function () {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/dante/attributes/recommendationattributes'
        }).then(function (response) {
            deferred.resolve(response.data);
        });

        return deferred.promise;
    };

    this.publishTalkingPoints = function (play_name) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: this.host + '/dante/talkingpoints/publish',
            params: {
                playName: play_name
            }
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };

    this.revertTalkingPoints = function (play_name) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: this.host + '/dante/talkingpoints/revert',
            params: {
                playName: play_name
            }
        }).then(function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/cgtalkingpoint/tpeditor/tpeditor.component.js":
/*!***********************************************************!*\
  !*** ./app/cgtalkingpoint/tpeditor/tpeditor.component.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.cg.talkingpoint.editor', []).directive('cgTalkingPointEditor', function () {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            onDelete: '&',
            tp: '='
        },
        templateUrl: 'app/cgtalkingpoint/tpeditor/tpeditor.component.html',
        controller: 'CgTalkingPointEditorController',
        controllerAs: 'vm'
    };
}).service('CgTinyMceConfig', ["$stateParams", "$rootScope", "$timeout", "CgTalkingPointStore", function ($stateParams, $rootScope, $timeout, CgTalkingPointStore) {
    this.config = {
        branding: false,
        plugins: 'textcolor lists link table legacyoutput paste code',
        menubar: false,
        toolbar: 'undo redo | bold italic underline | alignleft aligncenter alignright alignjustify | bullist fontsizeselect forecolor link unlink | pastetext code | table',
        elementpath: false,
        resize: true,
        height: 250,
        paste_auto_cleanup_on_paste: true,
        paste_text_linebreaktype: 'p',
        paste_retain_style_properties: 'font-size',
        forced_root_block: 'p',
        convert_newlines_to_brs: true,
        element_format: 'html',
        preformatted: true,
        convert_fonts_to_spans: false,
        default_link_target: '_blank',
        target_list: false,
        setup: function setup(ed) {
            ed.on('keydown', function (e, evt) {
                // prevents tabbing while in the wysiwyg
                if (e.keyCode == 9) {
                    e.preventDefault();
                }
            });
            ed.on('focus', function (e) {
                var textarea = angular.element(tinymce.activeEditor.getElement()),
                    name = textarea.data('name'),
                    talkingPoint = CgTalkingPointStore.getTalkingPoint(name);

                CgTalkingPointStore.setEditedTalkingPoint(talkingPoint);
            });
            ed.on('blur', function (e) {
                $timeout(function () {
                    if (!CgTalkingPointStore.saveOnBlur || CgTalkingPointStore.deleteClicked) {
                        return false;
                    }
                    var talkingPoint = CgTalkingPointStore.getEditedTalkingPoint(),
                        elementName = angular.element(e.target.contentAreaContainer).closest('.tinymce-container').data('name');

                    if (elementName !== talkingPoint.name) {
                        return false;
                    }
                    var content = tinymce.activeEditor.getContent();

                    if (content === '') {
                        return false;
                    }

                    talkingPoint.content = content;

                    if (CgTalkingPointStore.isTalkingPointDirty(talkingPoint) && !CgTalkingPointStore.getSavingFlag()) {
                        $rootScope.$broadcast('talkingPoints:lock', true);
                        CgTalkingPointStore.saveTalkingPoints([talkingPoint]).then(function (results) {
                            if (talkingPoint.IsNew) {
                                $rootScope.$broadcast('talkingPoints:sync');
                            }
                            $rootScope.$broadcast('talkingPoints:lock', false);
                        });
                    }
                }, 100);
            });
        }
    };
}]).controller('CgTalkingPointEditorController', ["$scope", "$stateParams", "$rootScope", "$element", "$document", "$timeout", "$q", "CgTinyMceConfig", "CgTalkingPointStore", function ($scope, $stateParams, $rootScope, $element, $document, $timeout, $q, CgTinyMceConfig, CgTalkingPointStore) {
    var vm = this;
    angular.extend(this, {
        tinyMceConfig: CgTinyMceConfig.config,
        expanded: false,
        deleteClicked: false,
        lockTalkingPoints: false
    });

    if ($scope.tp.IsNew === true || !($scope.tp.title && $scope.tp.content) || Date.now() - $scope.tp.created < 1000) {
        // if it hasn't been saved
        vm.expanded = true;
    }

    vm.CgTalkingPointStore = CgTalkingPointStore;

    vm.expand = function (bool) {
        vm.expanded = bool ? bool : !vm.expanded;
        $timeout(function () {
            if (vm.expanded) {
                CgTalkingPointStore.setEditedTalkingPoint($scope.tp);
            }
        }, 100);
    };

    vm.titleFocus = function (talkingPoint) {
        $timeout(function () {
            CgTalkingPointStore.setEditedTalkingPoint(talkingPoint);
        }, 100);
    };

    if (Date.now() - $scope.tp.updated < 2000) {
        // if it has been saved but you want to re-open it
        vm.expand(true);
    }

    vm.deleteClick = function ($event, val) {
        $event.stopPropagation();

        vm.deleteClicked = val;
        CgTalkingPointStore.deleteClicked = val;
        if (val) {
            $document.on('click', handleDocumentClick);
        } else {
            $document.off('click', handleDocumentClick);
            vm.saveTitle();
        }
    };

    vm.setDeleteClicked = function (bool) {
        vm.deleteClicked = bool;
        CgTalkingPointStore.deleteClicked = bool;
        $rootScope.$broadcast("deleteClicked");
    };

    $rootScope.$on('talkingPoints:lock', function (e, bool) {
        vm.lockTalkingPoints = bool;
    });

    vm.saveTitle = function () {
        $timeout(function () {
            if (!CgTalkingPointStore.saveOnBlur || vm.deleteClicked || !$scope.tp.title) {
                return false;
            }
            CgTalkingPointStore.setEditedTalkingPoint($scope.tp, 'title');
            if (CgTalkingPointStore.isTalkingPointDirty($scope.tp)) {
                vm.lockTalkingPoints = true;
                CgTalkingPointStore.saveTalkingPoints([$scope.tp]).then(function (data) {
                    if ($scope.tp.IsNew) {
                        $rootScope.$broadcast('talkingPoints:sync');
                        $rootScope.$on('talkingPoints:sync:complete', function (e) {
                            vm.lockTalkingPoints = false;
                        });
                    } else {
                        vm.lockTalkingPoints = false;
                    }
                });
            };
        }, 100);
    };

    function handleDocumentClick(evt) {
        if (vm.deleteClicked) {
            vm.deleteClicked = false;
            CgTalkingPointStore.deleteClicked = false;
            $document.off('click', handleDocumentClick);
            $scope.$digest();
        }
    }

    $scope.$on('$destroy', function () {
        $document.off('click', handleDocumentClick);
    });

    $scope.$watch('tp.offset', function (a, b) {
        if (a !== b) {
            var wasExpanded = vm.expanded;
            vm.expanded = false;

            broadcastRefresh().then(function () {
                vm.expanded = wasExpanded;
            });
        }
    });

    function broadcastRefresh() {
        var deferred = $q.defer();
        deferred.resolve($scope.$broadcast('$tinymce:refresh'));
        return deferred.promise;
    }
}]);

/***/ }),

/***/ "./app/cgtalkingpoint/tppreview/tppreview.component.js":
/*!*************************************************************!*\
  !*** ./app/cgtalkingpoint/tppreview/tppreview.component.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.cg.talkingpoint.preview', []).directive('cgTalkingPointPreview', function () {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            play: '='
        },
        templateUrl: 'app/cgtalkingpoint/tppreview/tppreview.component.html',
        controller: 'cgTalkingPointPreviewCtrl',
        controllerAs: 'vm'
    };
}).controller('cgTalkingPointPreviewCtrl', ["$scope", "$stateParams", "$sce", "$element", "CgTalkingPointStore", function ($scope, $stateParams, $sce, $element, CgTalkingPointStore) {
    var iframe = null;

    var vm = this;
    angular.extend(vm, {
        talkingPoints: [],
        leadPreviewObject: null,
        accounts: null,
        selected: null,
        sceIframeSrc: null
    });

    CgTalkingPointStore.getTalkingPoints($stateParams.play_name).then(function (data) {
        vm.talkingPoints = data;
        if (vm.talkingPoints.length) {
            vm.init();
        }
    });

    vm.init = function () {
        iframe = $element.find('#tppreview_iframe')[0];
        window.addEventListener('message', handleLpiPreviewInit);

        CgTalkingPointStore.generateLeadPreviewObject({ playName: $stateParams.play_name }).then(function (leadPreviewObject) {
            vm.leadPreviewObject = leadPreviewObject;
            var opts = {
                no_cache: true,
                account_restriction: $scope.play.ratingEngine.segment.account_restriction,
                lookups: [{
                    attribute: {
                        entity: 'Account',
                        attribute: 'AccountId'
                    }
                }, {
                    attribute: {
                        entity: 'Account',
                        attribute: 'LookupId'
                    }
                }, {
                    attribute: {
                        entity: 'Account',
                        attribute: 'CompanyName'
                    }
                }, {
                    attribute: {
                        entity: 'Account',
                        attribute: 'Website'
                    }
                }]
            };
            CgTalkingPointStore.getDanteAccounts(opts).then(function (accounts) {
                vm.accounts = filterInvalidAccounts(accounts);
                return CgTalkingPointStore.getDanteUrl({ no_cache: true });
            }).then(function (danteUrl) {
                var danteUrlParts = danteUrl.split('?'),
                    newDanteUrl = '/dante' + (danteUrlParts && danteUrlParts[1] ? '?' + danteUrlParts[1] : '');

                vm.sceIframeSrc = $sce.trustAsResourceUrl(newDanteUrl);
            }).then(function () {
                vm.selected = vm.accounts[0];
                if (vm.selected) {
                    vm.leadPreviewObject.notionObject.SalesforceAccountID = vm.selected.id;
                }
                vm.leadPreviewObject.notionObject.PlayDisplayName = $scope.play.display_name;
                vm.leadPreviewObject.notionObject.PlayDescription = $scope.play.description;
                //vm.leadPreviewObject.notionObject.TalkingPoints = vm.talkingPoints;
            });
        });
    };

    function filterInvalidAccounts(accounts) {
        var result = [];
        for (var i = 0; i < accounts.length; i++) {
            if (accounts[i].name !== undefined && accounts[i].name !== null) {
                result.push(accounts[i]);
            }
        }
        return result;
    }

    function handleLpiPreviewInit(evt) {
        if (evt.data === 'initLpiPreview') {
            window.removeEventListener('message', handleLpiPreviewInit);
            emitLeadObject();
        }
    }

    function emitLeadObject() {
        iframe.contentWindow.postMessage(vm.leadPreviewObject, '*');
    }

    vm.onAccountChange = function () {
        vm.leadPreviewObject.notionObject.SalesforceAccountID = vm.selected.id;
        emitLeadObject();
    };

    $scope.$on('$destroy', function () {
        window.removeEventListener('message', handleLpiPreviewInit);
    });
}]);

/***/ }),

/***/ "./app/config/services/ConfigService.js":
/*!**********************************************!*\
  !*** ./app/config/services/ConfigService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.config.services.ConfigService', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.URLUtility', 'mainApp.core.services.SessionService']).service('ConfigService', ["$http", "$q", "BrowserStorageUtility", "ResourceUtility", "URLUtility", "SessionService", function ($http, $q, BrowserStorageUtility, ResourceUtility, URLUtility, SessionService) {

    this.GetWidgetConfigDocument = function () {
        var deferred = $q.defer();
        var result = null;

        // Check cache first
        var cachedConfigDoc = BrowserStorageUtility.getWidgetConfigDocument();
        if (cachedConfigDoc != null && cachedConfigDoc.Timestamp > new Date().getTime()) {
            result = {
                success: true,
                resultObj: cachedConfigDoc,
                resultErrors: null
            };
            deferred.resolve(result);
            return deferred.promise;
        }

        var test = URLUtility.GetBaseUrl();
        var webServer = "assets/resources/WidgetConfigurationDocument.json";

        $http({
            method: 'GET',
            url: webServer
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: null
                };
                deferred.resolve(result);
                return;
            }

            BrowserStorageUtility.setWidgetConfigDocument(data);
            result = {
                success: true,
                resultObj: data,
                resultErrors: null
            };
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            result = {
                success: false,
                resultObj: null,
                resultErrors: null
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetCurrentTopology = function () {
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;

        var credentialUrl = "/pls/config/topology?tenantId=" + tenant;
        var result;
        $http({
            method: "GET",
            url: credentialUrl
        }).success(function (data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data.Topology,
                    resultErrors: null
                };
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: data.errorMsg
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var errorMessage;
            if (data != null && data !== "") {
                errorMessage = data.errorMsg;
            } else {
                errorMessage = ResourceUtility.getString("SYSTEM_ERROR");
            }

            result = {
                success: false,
                resultObj: null,
                resultErrors: errorMessage
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetCurrentCredentials = function (topologyType, isProduction) {
        isProduction = typeof isProduction !== 'undefined' ? isProduction : true;
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;

        var credentialUrl = "/pls/credentials/" + topologyType + "?tenantId=" + tenant;
        if (topologyType === "sfdc") {
            credentialUrl += "&isProduction=" + isProduction;
        }
        var result;
        $http({
            method: "GET",
            url: credentialUrl
        }).success(function (data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: data.errorMsg
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString("SYSTEM_ERROR")
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    //If a user forgets their password, this will reset it and notify them
    this.ValidateApiCredentials = function (topologyType, apiObj, isProduction) {
        if (apiObj == null) {
            return null;
        }
        isProduction = typeof isProduction !== 'undefined' ? isProduction : true;
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;
        var credentialUrl = "/pls/credentials/" + topologyType + "/?tenantId=" + tenant;
        if (topologyType === "sfdc") {
            credentialUrl += "&isProduction=" + isProduction;
        }
        var result;
        $http({
            method: "POST",
            url: credentialUrl,
            data: JSON.stringify(apiObj),
            timeout: 60000
        }).success(function (data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            } else {
                SessionService.HandleResponseErrors(data, status);
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString("VALIDATE_CREDENTIALS_FAILURE")
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var errorMessage;
            if (status === 0) {
                errorMessage = ResourceUtility.getString("VALIDATE_CREDENTIALS_TIMEOUT");
            } else if (data.errorCode === "LEDP_18030") {
                errorMessage = ResourceUtility.getString("VALIDATE_CREDENTIALS_FAILURE");
            } else {
                errorMessage = ResourceUtility.getString("SYSTEM_ERROR");
                console.error(data.errorMsg);
            }
            result = {
                success: false,
                resultObj: null,
                resultErrors: errorMessage
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetCurrentDataLoaderUrl = function () {
        var deferred = $q.defer();

        $http({
            method: "GET",
            url: "/pls/config/dataloaderurl?tenantId=" + BrowserStorageUtility.getClientSession().Tenant.Identifier
        }).success(function (data) {
            var result = {
                success: true,
                resultObj: data,
                resultErrors: null
            };
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString("GET_DATALOADER_URL_ERROR")
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/configureattributes/configure-attributes.index.js":
/*!***************************************************************!*\
  !*** ./app/configureattributes/configure-attributes.index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./content/configure/configure.component */ "./app/configureattributes/content/configure/configure.component.js");

__webpack_require__(/*! ./configureattributes.routes */ "./app/configureattributes/configureattributes.routes.js");

__webpack_require__(/*! ./configureattributes.service */ "./app/configureattributes/configureattributes.service.js");

/***/ }),

/***/ "./app/configureattributes/configureattributes.routes.js":
/*!***************************************************************!*\
  !*** ./app/configureattributes/configureattributes.routes.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.configureattributes', ['lp.configureattributes.configure']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.configureattributes', {
        url: '/configureattributes',
        onExit: ["ConfigureAttributesStore", function onExit(ConfigureAttributesStore) {
            ConfigureAttributesStore.clear();
        }],
        resolve: {
            PurchaseHistory: ["$q", "ConfigureAttributesStore", function PurchaseHistory($q, ConfigureAttributesStore) {
                var deferred = $q.defer();

                ConfigureAttributesStore.getPurchaseHistory().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            Precheck: ["$q", "ConfigureAttributesStore", function Precheck($q, ConfigureAttributesStore) {
                var deferred = $q.defer();

                ConfigureAttributesStore.getPrecheck().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        redirectTo: 'home.configureattributes.spend_change'
    }).state('home.configureattributes.spend_change', {
        url: '/spend_change',
        views: {
            'main@': {
                component: 'configureAttributesConfigure'
            }
        }
    }).state('home.configureattributes.spend_over_time', {
        url: '/spend_over_time',
        views: {
            'main@': {
                component: 'configureAttributesConfigure'
            }
        }
    }).state('home.configureattributes.share_of_wallet', {
        url: '/share_of_wallet',
        views: {
            'main@': {
                component: 'configureAttributesConfigure'
            }
        }
    }).state('home.configureattributes.margin', {
        url: '/margin',
        views: {
            'main@': {
                component: 'configureAttributesConfigure'
            }
        }
    }).state('home.configureattributes.done', {
        url: '/done',
        views: {
            'main@': {
                component: 'configureAttributesConfigure'
            }
        }
    });
}]);

/***/ }),

/***/ "./app/configureattributes/configureattributes.service.js":
/*!****************************************************************!*\
  !*** ./app/configureattributes/configureattributes.service.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.configureattributes').service('ConfigureAttributesStore', ["$q", "$state", "ConfigureAttributesService", function ($q, $state, ConfigureAttributesService) {
    var ConfigureAttributesStore = this;

    this.init = function () {
        this.purchaseHistory = null;
        this.steps = null;
        this.options = {};
        this.saved = [];
        this.precheck = null;
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.getPurchaseHistory = function () {
        var deferred = $q.defer();

        if (this.purchaseHistory) {
            deferred.resolve(this.purchaseHistory);
        } else {
            ConfigureAttributesService.getPurchaseHistory().then(function (result) {
                ConfigureAttributesStore.purchaseHistory = result;
                deferred.resolve(result);
            });
        }

        return deferred.promise;
    };

    this.savePurchaseHistory = function () {
        var deferred = $q.defer();
        ConfigureAttributesService.savePurchaseHistory(this.purchaseHistory).then(function (result) {
            deferred.resolve(result);
        });
        // deferred.resolve(this.purchaseHistory);
        // console.log(this.purchaseHistory);

        return deferred.promise;
    };

    this.setOptions = function (options) {
        for (var i in options) {
            var key = i,
                option = options[key];
            for (var j in option) {
                var first_key = 'null'; //Object.keys(option[j])[0]; // leave this be
                if (Object.keys(option[j]).length > 1 && option[j][first_key]) {
                    //fixes weird behavior where options can become duplicated or go missing
                    delete option[j][first_key];
                }
            }
            ConfigureAttributesStore.options[key] = options[key];
        }
    };

    this.getOptions = function () {
        return this.options;
    };

    var addSpendOvertimeSaveObject = function addSpendOvertimeSaveObject(metric, _option) {
        var periods = [];
        for (var i in _option) {
            for (var j in _option[i]) {
                var cmp = j;
                var option = _option[i][cmp],
                    period = {
                    Cmp: cmp !== 'null' ? cmp : 'WITHIN',
                    Vals: [parseInt(option.Val)],
                    Period: option.Period
                },
                    timestamp = +new Date(),
                    obj = {
                    metrics: metric,
                    periods: [period],
                    type: "PurchaseHistory",
                    created: timestamp,
                    updated: timestamp,
                    eol: false,
                    IsEOL: false
                };

                if (period.Vals && Number.isInteger(parseInt(period.Vals[0]))) {
                    ConfigureAttributesStore.purchaseHistory.push(obj);
                }
            }
        }
    };

    var addDefaultSaveObject = function addDefaultSaveObject(metric, _option, addVals) {
        var periods = [];
        for (var j in _option) {
            var cmp = j,
                option = _option[cmp],
                period = {
                Cmp: cmp,
                Vals: [option.Val],
                Period: option.Period
            };
            if (addVals) {
                if (!periods.length) {
                    period.Vals[0] = period.Vals[0];
                } else {
                    period.Vals = [periods[0].Vals[0] + 1, periods[0].Vals[0] + period.Vals[0]]; // val1 + 1, val1 + val2
                }
            }
            if (period.Vals && Number.isInteger(period.Vals[0])) {
                // prevents empty period data from from being saved
                periods.push(period);
            }
        }
        var timestamp = +new Date(),
            obj = {
            metrics: metric,
            periods: periods,
            type: "PurchaseHistory",
            created: timestamp,
            updated: timestamp,
            eol: false,
            IsEOL: false
        };
        if (obj.periods.length) {
            ConfigureAttributesStore.purchaseHistory.push(obj);
        }
    };

    var cleanPurchaseHistory = function cleanPurchaseHistory() {
        var _purchaseHistory = [];
        ConfigureAttributesStore.purchaseHistory.forEach(function (item, key) {
            if (item) {
                _purchaseHistory.push(item);
            }
        });
        ConfigureAttributesStore.purchaseHistory = _purchaseHistory;
    };

    this.setSaved = function (step) {
        if (this.saved.indexOf(step) === -1) {
            this.saved.push(step);
        }
    };

    this.getSaved = function () {
        return this.saved;
    };

    this.saveSteps = function (step) {
        for (var i in this.options) {
            var metric = i,
                _option = this.options[metric];

            this.purchaseHistory.forEach(function (item, key) {
                // delete previous obejcts for this kind
                if (item.metrics === metric) {
                    delete ConfigureAttributesStore.purchaseHistory[key];
                }
            });
            switch (metric) {
                case 'TotalSpendOvertime':
                case 'AvgSpendOvertime':
                    addSpendOvertimeSaveObject(metric, _option);
                    break;
                case 'SpendChange':
                    addDefaultSaveObject(metric, _option, true);
                    break;
                case 'ShareOfWallet':
                case 'Margin':
                default:
                    addDefaultSaveObject(metric, _option);
                    break;
            }
        }
        cleanPurchaseHistory();
        ConfigureAttributesStore.setSaved(step);
    };

    this.getSteps = function (data, steps) {
        if (this.steps) {
            return this.steps;
        } else {
            var _data = {},
                steps = steps || {};
            for (var i in data) {
                var item = data[i];
                _data[item.metrics] = _data[item.metrics] || [];
                _data[item.metrics].push(item);
            }
            for (var key in steps) {
                var types = steps[key].type.split(','),
                    typesObj = {};
                for (var j in types) {
                    var type = types[j];
                    steps[key].data = steps[key].data || {};
                    if (_data[type]) {
                        steps[key].data[type] = _data[type];
                    }
                }
            }
            return steps;
        }
    };

    this.getPrecheck = function () {
        var deferred = $q.defer();

        if (this.precheck) {
            deferred.resolve(this.precheck);
        } else {
            ConfigureAttributesService.getPrecheck().then(function (result) {
                ConfigureAttributesStore.precheck = result;
                deferred.resolve(result);
            });
        }

        return deferred.promise;
    };
}]).service('ConfigureAttributesService', ["$q", "$http", "$state", "ResourceUtility", function ($q, $http, $state, ResourceUtility) {
    this.getPurchaseHistory = function () {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/datacollection/metrics/PurchaseHistory/active',
            headers: { 'Content-Type': 'application/json' }
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.resolve(error);
        });

        return deferred.promise;
        var deferred = $q.defer();
    };

    this.savePurchaseHistory = function (data) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/datacollection/metrics/PurchaseHistory',
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.resolve(error);
        });

        return deferred.promise;
        var deferred = $q.defer();
    };

    this.getPrecheck = function () {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/datacollection/precheck',
            headers: { 'Content-Type': 'application/json' }
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            deferred.resolve(error);
        });

        return deferred.promise;
        var deferred = $q.defer();
    };
}]);

/***/ }),

/***/ "./app/configureattributes/content/configure/configure.component.js":
/*!**************************************************************************!*\
  !*** ./app/configureattributes/content/configure/configure.component.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.configureattributes.configure', []).component('configureAttributesConfigure', {
    controllerAs: 'vm',
    templateUrl: 'app/configureattributes/content/configure/configure.component.html',
    controller: ["$state", "$stateParams", "$scope", "$timeout", "$sce", "$window", "$q", "ResourceUtility", "ConfigureAttributesStore", "Modal", "StateHistory", function controller($state, $stateParams, $scope, $timeout, $sce, $window, $q, ResourceUtility, ConfigureAttributesStore, Modal, StateHistory) {
        var vm = this,
            forceNextStep = false,
            resolve = $scope.$parent.$resolve,
            PurchaseHistory = resolve.PurchaseHistory,
            Precheck = resolve.Precheck,
            totalMonths = 60,
            timestamp = +new Date(),
            defaultOption = {
            metrics: null,
            periods: [{
                Cmp: null,
                Vals: [0],
                Period: null
            }],
            type: "PurchaseHistory",
            created: timestamp,
            updated: timestamp,
            eol: false,
            IsEOL: false
        };

        angular.extend(vm, {
            stateParams: $stateParams,
            steps: {
                spend_change: {
                    type: 'SpendChange',
                    label: '% Spend Change',
                    description: $sce.trustAsHtml('<p>This curated attribute is calculated by comparing average spend for a given product of a given account in the specified time window with that of the range in prior time window.</p><p>The insights are useful to drive sales &amp; marketing campaigns for the accounts where the spend is declining.</p>')
                },
                spend_over_time: {
                    type: 'TotalSpendOvertime,AvgSpendOvertime',
                    label: 'Spend Over Time',
                    description: $sce.trustAsHtml('<p>This curated attribute is calulated by aggregating spend for a given product of a given account over a specified time window</p><p>The insights are useful to provide dynamic talking points to the reps when executing x-sell &amp; upsell plays for a set of accounts.</p>')
                },
                share_of_wallet: {
                    type: 'ShareOfWallet',
                    label: '% Share of Wallet',
                    disabled: Precheck.disableShareOfWallet,
                    description: $sce.trustAsHtml('<p>This curated attribute is calculated by comparing spend ratio for a given product of a given account with that of other accounts in the same segment.</p><p>This insignts are useful to drive sales &amp; marketing campaigns for the accounts where the share of wallet is below the desired range.</p>')
                },
                margin: {
                    type: 'Margin',
                    label: '% Margin',
                    disabled: Precheck.disableMargin,
                    description: $sce.trustAsHtml('<p>This curated attribute is calculated by analyzing cost of sell &amp; revenue for a given product of a given account in the specified time window.</p><p>The insights are useful to drive sales &amp; marketing campaigns for the accounts where the profit margins are below expected levels</p>')
                }
            },
            step: $state.current.name.split('.').pop(-1),
            periods: {
                Week: totalMonths * 4,
                Month: totalMonths,
                Quarter: totalMonths / 3, // 3 quaters a month
                Year: totalMonths / 12
            },
            periodsOptions: [],
            options: ConfigureAttributesStore.getOptions() || {},
            completed: ConfigureAttributesStore.getSaved(),
            PurchaseHistory: PurchaseHistory,
            hasChanges: false,
            disabledObj: {},
            precheck: Precheck
        });

        vm.steps_count = Object.keys(vm.steps).length;

        vm.log = function (log) {
            console.log(log);
        };

        vm.newArray = function (count) {
            return new Array(count).join().split(',').map(function (item, index) {
                return ++index;
            });
        };

        vm.getVals = function (type, data, index) {
            if (!type || !data) {
                return false;
            }
            var index = index || 0,
                periods = data[index].periods,
                valObj = periods.find(function (item) {
                return item.Cmp === type;
            }),
                val;
            if (type === 'WITHIN') {
                val = valObj ? valObj.Vals[0] : null;
            } else if (type === 'BETWEEN') {
                var max = Math.max.apply(null, valObj.Vals),
                    min = Math.min.apply(null, valObj.Vals);
                val = max - min + 1;
            }
            return val;
        };

        vm.getPeriod = function (type, data, index) {
            if (!type || !data) {
                return false;
            }

            var index = index || 0,
                periods = data[index].periods,
                valObj = periods.find(function (item) {
                return item.Cmp === type;
            }),
                period = valObj.Period;

            return period;
        };

        vm.setOptions = function (form) {
            ConfigureAttributesStore.setOptions(vm.options);
            if (form) {
                vm.checkValid(form);
            }
        };

        vm.setDisabled = function (key, debug) {
            var options = vm.options[key];

            vm.disabledObj[key] = {};

            for (var i in options) {
                var first_key = Object.keys(options[i])[0],
                    option = options[i][first_key];
                if (!vm.disabledObj[key][option.Period]) {
                    vm.disabledObj[key][option.Period] = [];
                }
                vm.disabledObj[key][option.Period].push(option.Val);
            }
        };

        vm.disableSpendOvertime = function (option, period, value) {
            if (vm.disabledObj[option] && vm.disabledObj[option][period]) {
                return vm.disabledObj[option][period].indexOf("" + value) >= 0;
            }
            return false;
        };

        vm.addPeriod = function (array, type, form) {
            var timestamp = new Date().valueOf(),
                obj = {
                eol: false,
                IsEOL: false,
                type: "PurchaseHistory",
                created: timestamp,
                updated: timestamp,
                metrics: null,
                periods: [{
                    Cmp: null,
                    Vals: [],
                    Period: null
                }]
            };

            array.push(obj);

            ConfigureAttributesStore.setOptions(vm.options);

            vm.makeSpendOverTimes(type);

            if (form) {
                form.$setDirty();
            }
        };

        vm.spendOverTimes = {};
        vm.makeSpendOverTimes = function (type) {
            vm.spendOverTimes[type] = vm.spendOverTimes[type] || {};
            for (var i in vm.options[type]) {
                vm.spendOverTimes[type]['periods'] = vm.spendOverTimes[type]['periods'] || {};
                for (var j in vm.options[type][i]) {
                    var val = vm.options[type][i][j].Val,
                        period = vm.options[type][i][j].Period;

                    vm.spendOverTimes[type]['periods'][period] = vm.spendOverTimes[type]['periods'][period] || [];

                    if (vm.spendOverTimes[type]['periods'][period].indexOf(val) === -1) {
                        vm.spendOverTimes[type]['periods'][period].push(val);
                    }
                }
            }
        };

        /**
         * Used to rebuild the model because the ngRepeat doesn't like 
         * it if you delete objects from it's array and the indexes are
         * weird or something
         */
        var rebuildModel = function rebuildModel(key) {
            var newOptions = [];
            for (var i in vm.options[key]) {
                var newCmp = [];
                for (var j in vm.options[key][i]) {
                    newCmp[j] = vm.options[key][i][j];
                }
                newOptions.push(newCmp);
            }
            vm.options[key] = newOptions;
        };

        vm.removePeriod = function (array, key, index, form) {
            var tmp = array[key].filter(function (value, _index) {
                return _index !== index;
            });

            vm.spendOvertime[key] = tmp;

            delete vm.options[key][index];

            ConfigureAttributesStore.setOptions(vm.options);

            rebuildModel(key);

            if (form) {
                form.$setDirty();
            }
        };

        vm.nextStep = function (step) {
            var steps = Object.keys(vm.steps),
                currentIndex = steps.indexOf(step);

            if (steps[currentIndex + 1]) {
                return steps[currentIndex + 1];
            }
            return null;
        };

        vm.gotoNextStep = function (step) {
            var nextStep = vm.nextStep(step);
            if (nextStep) {
                $state.go('home.configureattributes.' + nextStep);
            }
        };

        vm.goto = function (name, item) {
            if (item.disabled) {
                return false;
            }
            if (!forceNextStep) {
                $state.go('home.configureattributes.' + name);
            } else {
                // this doesn't really work when you have null stats, because how would you get to % Margin if you can't configure Share of Wallet?
                var completed = ConfigureAttributesStore.getSaved(),
                    steps = Object.keys(vm.steps),
                    previousStep = steps[steps.indexOf(name) - 1];

                if (steps.indexOf(name) === 0 || vm.steps[name].completed || vm.steps[previousStep] && vm.steps[previousStep].completed) {
                    $state.go('home.configureattributes.' + name);
                }
            }
        };

        vm.save = function (form) {
            vm.hasChanges = true;
            ConfigureAttributesStore.saveSteps(vm.step);
            ConfigureAttributesStore.getPurchaseHistory().then(function (result) {
                vm.saveObj = result;
            });
            vm.steps[vm.step].completed = true;
            if (forceNextStep) {
                vm.gotoNextStep(vm.step);
            }

            if (form) {
                form.$setPristine();
            }
        };

        vm.submit = function () {
            ConfigureAttributesStore.savePurchaseHistory(vm.step).then(function () {
                vm.hasChanges = false;
                $state.go('home.configureattributes.done');
            });
        };

        vm.enableSave = function (form) {
            var options = ConfigureAttributesStore.getOptions(),
                hasOptions = false;

            if (form) {
                var valid = form.$valid,
                    dirty = form.$dirty;
            }

            if (options && valid) {
                var types = vm.steps[vm.step].type.split(',');
                types.forEach(function (type, key) {
                    if (options[type] && dirty) {
                        hasOptions = true;
                    }
                });
            }

            if (vm.step === 'spend_over_time') {
                var types = vm.steps[vm.step].type.split(',');
                for (var i in types) {
                    var type = types[i],
                        option = vm.options[type];
                    for (var j in option) {
                        for (var k in option[j]) {
                            if (Object.keys(option[j][k]).length >= 2) {
                                hasOptions = true;
                            }
                        }
                    }
                }
            }

            return hasOptions ? true : false;
        };

        vm.enableSubmit = function () {
            var completed = ConfigureAttributesStore.getSaved(),
                required = Object.keys(vm.steps).length;

            return completed.length;
            //return (required <= completed.length); // works but design requirements don't
        };

        var getObj = function getObj(path, obj) {
            return path.split('.').reduce(function (obj, i) {
                if (obj && obj[i]) {
                    return obj[i];
                }
            }, obj);
        };

        var setObj = function setObj(path, value, scope) {
            var levels = path.split('.'),
                max_level = levels.length - 1,
                target = scope;

            levels.some(function (level, i) {
                if (typeof level === 'undefined') {
                    return true;
                }
                if (i === max_level) {
                    target[level] = value;
                } else {
                    var obj = target[level] || {};
                    target[level] = obj;
                    target = obj;
                }
            });
        };

        vm.initValue = function (path, value) {
            var model = getObj(path, vm.options),
                keys = path.split('.'),
                key = keys[0],
                obj = {};
            if (value) {
                setObj(path, value, obj);
                angular.merge(vm.options, obj);
            }
        };

        vm.checkValidDelay = function (form) {
            $timeout(function () {
                vm.checkValid(form);
            }, 1);
        };

        vm.checkValid = function (form) {
            //console.log(form.$valid);
        };

        vm.validateSendOvertime = function (name, debug) {
            if (debug) {
                console.group();
                console.log('validateSendOvertime', 'start', name, vm.options[name]);
            }
            var model = vm.options[name] || {},
                spendOvertime = vm.spendOvertime[name] || [];
            if (!model) {
                if (debug) {
                    console.log('if(!model)');
                    console.groupEnd();
                }
                return false;
            }
            if (Object.keys(model).length !== spendOvertime.length) {
                if (debug) {
                    console.log('if(Object.keys(model).length !== spendOvertime.length)');
                    console.groupEnd();
                }
                return false;
            }
            var valid = [];
            for (var i in model) {
                for (var j in model[i]) {
                    if (debug) {
                        console.log('for(var j in model[i])', i, model[i]);
                    }
                    if (model[i][j].Val && model[i][j].Period) {
                        if (debug) {
                            console.log('validateSendOvertime', 'if(model[i][j].Val && model[i][j].Period)', model[i][j]);
                        }
                        valid.push(true);
                    } else {
                        if (debug) {
                            console.log('if(model[i][j].Val && model[i][j].Period) -- else', model[i][j]);
                        }
                        valid.push(false);
                    }
                }
            }
            if (debug) {
                console.log('validateSendOvertime', 'completed', '(valid.indexOf(false) === -1)', valid.indexOf(false) === -1, valid);
                console.groupEnd();
            }
            return valid.indexOf(false) === -1;
        };

        vm.dataCheckWrapper = function (data) {
            return true; //subverting for PLS-8323
            return data;
        };

        vm.uiCanExit = function (Transition) {
            var deferred = $q.defer();

            var goingTo = Transition.targetState().identifier(),
                goingToBase = goingTo.substr(0, goingTo.lastIndexOf(".")),
                comingFrom = $state.current.name,
                model,
                comingFromBase = comingFrom.substr(0, comingFrom.lastIndexOf("."));

            if (goingToBase === comingFromBase || !vm.hasChanges) {
                deferred.resolve(true);
            } else {
                vm.toggleModal();

                vm.modalCallback = function (args) {
                    if (args.action === 'proceed') {
                        deferred.resolve(true);
                    } else {
                        vm.toggleModal();
                        deferred.resolve(false);
                    }
                };
            }
            return deferred.promise;
        };

        vm.initModalWindow = function () {
            vm.modalConfig = {
                'name': "configure_attributes",
                'type': 'sm',
                'title': 'Warning',
                'titlelength': 100,
                'dischargetext': 'Cancel',
                'dischargeaction': 'cancel',
                'confirmtext': 'Yes, Confirm',
                'confirmaction': 'proceed',
                'icon': 'fa fa-exclamation-triangle',
                'iconstyle': { 'color': 'white' },
                'confirmcolor': 'blue-button',
                'showclose': true,
                'headerconfig': { 'background-color': '#FDC151', 'color': 'white' },
                'confirmstyle': { 'background-color': '#FDC151' }
            };

            vm.toggleModal = function () {
                var modal = Modal.get(vm.modalConfig.name);
                if (modal) {
                    modal.toggle();
                }
            };

            $scope.$on("$destroy", function () {
                Modal.remove(vm.modalConfig.name);
            });
        };

        var makePeriodsObject = function makePeriodsObject(periods) {
            vm.periodsOptions = [];
            for (var i in periods) {
                var key = i,
                    total = periods[key],
                    period = {
                    label: key + 's',
                    value: key
                };
                vm.periodsOptions.push(period);
            }
        };

        vm.$onInit = function () {
            vm.initModalWindow();
            makePeriodsObject(vm.periods);
            var completedSteps = ConfigureAttributesStore.getSaved(),
                totalSpendOvertimeOptionsAr,
                avgSpendOvertimeOptionsAr;

            completedSteps.forEach(function (step) {
                vm.steps[step].completed = true;
            });

            vm.steps = ConfigureAttributesStore.getSteps(ConfigureAttributesStore.purchaseHistory, vm.steps);

            // I changed behavior with setting options and this now breaks Spend Over Time
            // when you go switch to that page after setting options
            // 
            // if(vm.options.TotalSpendOvertime) {
            //     totalSpendOvertimeOptionsAr = [];
            //     for(var i in vm.options.TotalSpendOvertime) {
            //         var option = angular.copy(vm.options.TotalSpendOvertime[i]);
            //         totalSpendOvertimeOptionsAr.push(option);
            //     }
            // }

            // if(vm.options.AvgSpendOvertime) {
            //     avgSpendOvertimeOptionsAr = [];
            //     for(var i in vm.options.AvgSpendOvertime) {
            //         var option =  angular.copy(vm.options.AvgSpendOvertime[i]);
            //         avgSpendOvertimeOptionsAr.push(option);
            //     }
            // }

            vm.spendOvertime = {
                TotalSpendOvertime: totalSpendOvertimeOptionsAr || vm.steps.spend_over_time.data.TotalSpendOvertime || [defaultOption],
                AvgSpendOvertime: avgSpendOvertimeOptionsAr || vm.steps.spend_over_time.data.AvgSpendOvertime || [defaultOption]
            };
        };
    }]
});

/***/ }),

/***/ "./app/create/CreateRoutes.js":
/*!************************************!*\
  !*** ./app/create/CreateRoutes.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import').config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $stateProvider.state('home.models.import', {
        url: '/import',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Create Model - CSV'
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/ModelCreateView.html'
            },
            "main@": {
                templateUrl: 'app/create/csvform/CSVFormView.html'
            }
        }
    }).state('home.models.pmml', {
        url: '/pmml',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Create Model - PMML'
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/PMMLCreateView.html'
            },
            "main@": {
                templateUrl: 'app/create/pmmlform/PMMLFormView.html'
            }
        }
    }).state('home.models.import.columns', {
        url: '/:csvFileName/columns',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Create Model - CSV'
        },
        resolve: {
            FieldDocument: ["$q", "$stateParams", "ImportService", "ImportStore", function FieldDocument($q, $stateParams, ImportService, ImportStore) {
                var deferred = $q.defer();

                ImportService.GetFieldDocument($stateParams.csvFileName).then(function (result) {
                    ImportStore.SetFieldDocument($stateParams.csvFileName, result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            UnmappedFields: ["$q", "$stateParams", "ImportService", "ImportStore", function UnmappedFields($q, $stateParams, ImportService, ImportStore) {
                var deferred = $q.defer();

                ImportService.GetSchemaToLatticeFields().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/ModelCreateView.html'
            },
            "main@": {
                controllerAs: 'vm',
                controller: 'CustomFieldsController',
                templateUrl: 'app/create/customfields/CustomFieldsView.html'
            }
        }
    }).state('home.model.scoring', {
        url: '/scoring',
        redirectto: 'model.scoring.import',
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'csvBulkUploadController',
                controllerAs: 'vm',
                templateUrl: 'app/create/scorefile/ScoreFileView.html'
            }
        }
    }).state('home.model.scoring.mapping', {
        url: '/:csvFileName/mapping',
        params: {
            pageIcon: 'ico-model',
            pageTitle: ''
        },
        resolve: {
            FileHeaders: ["$q", "$stateParams", "ImportService", "ImportStore", function FileHeaders($q, $stateParams, ImportService, ImportStore) {
                var deferred = $q.defer();

                ImportService.GetSchemaToLatticeFields($stateParams.csvFileName).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            FieldDocument: ["$q", "$stateParams", "ImportService", "ImportStore", function FieldDocument($q, $stateParams, ImportService, ImportStore) {
                var deferred = $q.defer();

                ImportService.GetFieldDocument($stateParams.csvFileName, true).then(function (result) {
                    ImportStore.SetFieldDocument($stateParams.csvFileName, result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controllerAs: 'vm',
                controller: 'ScoreFieldsController',
                templateUrl: 'app/create/scorefields/ScoreFieldsView.html'
            }
        }
    }).state('home.models.import.job', {
        url: '/:applicationId/job',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Create Model - CSV'
        },
        resolve: {
            BuildProgressConfig: function BuildProgressConfig() {
                return null;
            }
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/ModelCreateView.html'
            },
            "main@": {
                controller: 'ImportJobController',
                templateUrl: 'app/create/buildprogress/BuildProgressView.html'
            }
        }
    }).state('home.models.pmml.job', {
        url: '/:applicationId/job',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Create Model - PMML'
        },
        resolve: {
            BuildProgressConfig: function BuildProgressConfig() {
                return null;
            }
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/PMMLCreateView.html'
            },
            "main@": {
                controller: 'ImportJobController',
                templateUrl: 'app/create/buildprogress/BuildProgressView.html'
            }
        }
    });
}]);

/***/ }),

/***/ "./app/create/CreateService.js":
/*!*************************************!*\
  !*** ./app/create/CreateService.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import').service('ImportStore', ["$q", function ($q) {
    var ImportStore = this;

    this.files = {};

    this.FieldDocuments = {};
    this.CurrentFieldMapping = null;
    this.ScoreFieldDocuments = {};
    this.ScoreCurrentFieldMapping = null;

    this.advancedSettings = {
        oneLeadPerDomain: true,
        includePersonalEmailDomains: true,
        useLatticeAttributes: true,
        enableTransformations: true
    };

    this.SetAdvancedSettings = function (key, value) {
        this.advancedSettings[key] = value;
    };

    this.GetAdvancedSetting = function (key) {
        return this.advancedSettings[key];
    };

    this.ResetAdvancedSettings = function () {
        this.advancedSettings.oneLeadPerDomain = true;
        this.advancedSettings.includePersonalEmailDomains = true;
        this.advancedSettings.useLatticeAttributes = true;
        this.advancedSettings.enableTransformations = true;
    };

    this.Get = function (name, root) {
        return root ? this[name] : this.files[name];
    };

    this.Set = function (name, data, root) {
        if (root) {
            this[name] = data;
        } else {
            this.files[name] = data;
        }
    };

    this.GetFieldDocument = function (name) {
        var deferred = $q.defer();

        if (this.FieldDocuments[name]) {
            deferred.resolve(this.FieldDocuments[name]);
        }

        return deferred.promise;
    };

    this.SetFieldDocument = function (name, data) {
        this.FieldDocuments[name] = data;
    };

    this.GetScoreFieldDocument = function (name) {
        var deferred = $q.defer();

        if (this.ScoreFieldDocuments[name]) {
            deferred.resolve(this.ScoreFieldDocuments[name]);
        }

        return deferred.promise;
    };

    this.SetScoreFieldDocument = function (name, data) {
        this.ScoreFieldDocuments[name] = data;
    };
}]).service('ImportService', ["$q", "$http", "$stateParams", "ResourceUtility", "BrowserStorageUtility", "ImportStore", "ServiceErrorUtility", function ($q, $http, $stateParams, ResourceUtility, BrowserStorageUtility, ImportStore, ServiceErrorUtility) {
    this.Upload = function (options) {
        var deferred = $q.defer(),
            formData = new FormData(),
            params = options.params || {},
            whitelist = ['schema', 'modelId', 'notesContent', 'compressed', 'displayName', 'file', 'metadataFile', 'entity', 'fileName', 'operationType'];

        if (params.metadataFile) {
            params['metadataFile'] = options.file;
        } else if (options.file) {
            params['file'] = options.file;
        }

        if (params.displayName) {
            params['displayName'] = params.displayName.replace('C:\\fakepath\\', '');
        }

        whitelist.forEach(function (key, value) {
            if (params[key] && (params[key] != null || params[key] != undefined)) {
                formData.append(key, params[key]);
            }
        });

        // can't use $http because it does not expose onprogress event
        var xhr = new XMLHttpRequest();

        if (options.progress) {
            (xhr.upload || xhr).addEventListener('progress', options.progress);
        }

        xhr.addEventListener('load', function (event) {
            var status = this.status;
            if (status != 200) {
                var obj = JSON.parse(this.responseText);
                var txt = obj.errorMsg;
                var result = {
                    Success: false,
                    ResultErrors: txt,
                    Result: null
                };
                deferred.resolve(result);
            } else {
                xhr.data = JSON.parse(this.responseText);
                ServiceErrorUtility.process(xhr);
                deferred.resolve(xhr.data);
            }
        });

        xhr.addEventListener('error', function (event) {

            xhr.data = JSON.parse(this.responseText);
            ServiceErrorUtility.process(xhr);

            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('MODEL_IMPORT_CONNECTION_ERROR'),
                Result: null
            };

            console.log("addEventListener('error')", result, this.responseText, xhr); // adding this so once it's deployed I can see when it triggers for  PLS-7212

            deferred.resolve(result);
        });

        xhr.addEventListener('abort', function (event) {
            deferred.resolve(this.responseText);
            console.log("addEventListener('abort')", this.responseText, xhr); // adding this so once it's deployed I can see when it triggers for  PLS-7212
        });

        xhr.open('POST', options.url);

        if (BrowserStorageUtility.getTokenDocument()) {
            xhr.setRequestHeader("Authorization", BrowserStorageUtility.getTokenDocument());
        }

        xhr.setRequestHeader("ErrorDisplayMethod", options.ErrorDisplayMethod || 'banner');
        //xhr.setRequestHeader("Content-Encoding", "gzip");

        ImportStore.Set('cancelXHR', xhr, true);

        xhr.send(formData);

        return deferred.promise;
    };

    this.GetSchemaToLatticeFields = function (csvFileName) {
        var deferred = $q.defer();
        var params = csvFileName ? { 'csvFileName': csvFileName } : { 'excludeLatticeDataAttributes': ImportStore.GetAdvancedSetting('useLatticeAttributes') ? false : true };

        $http({
            method: 'GET',
            url: csvFileName ? '/pls/scores/fileuploads/headerfields' : '/pls/models/uploadfile/latticeschema',
            params: params,
            headers: { 'Content-Type': 'application/json' }
        }).then(function (data) {
            deferred.resolve(data.data.Result);
        });

        return deferred.promise;
    };

    this.GetFieldDocument = function (FileName, score) {
        var deferred = $q.defer();
        var modelId = $stateParams.modelId;
        var metaData = ImportStore.Get(FileName);
        var schema = metaData.schemaInterpretation;
        var params = score ? { 'modelId': modelId, 'csvFileName': FileName } : { 'schema': schema };

        $http({
            method: 'POST',
            url: score ? '/pls/scores/fileuploads/fieldmappings' : '/pls/models/uploadfile/' + FileName + '/fieldmappings',
            params: params,
            headers: { 'Content-Type': 'application/json' },
            data: {
                deduplicationType: ImportStore.GetAdvancedSetting('oneLeadPerDomain') ? 'ONELEADPERDOMAIN' : 'MULTIPLELEADSPERDOMAIN',
                excludePublicDomains: ImportStore.GetAdvancedSetting('includePersonalEmailDomains') ? false : true,
                excludePropDataColumns: ImportStore.GetAdvancedSetting('useLatticeAttributes') ? false : true,
                transformationGroup: ImportStore.GetAdvancedSetting('enableTransformations') ? null : 'NONE'
            }
        }).success(function (data, status, headers, config) {

            console.log("GetFieldDocument:", data);

            if (data == null || !data.Success) {
                if (data && data.Errors.length > 0) {
                    var errors = data.Errors.join('\n');
                }
                var result = {
                    Success: false,
                    ResultErrors: errors || ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                var result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.SaveFieldDocuments = function (FileName, FieldDocument, score) {
        var deferred = $q.defer();
        var result;
        var modelId = $stateParams.modelId;
        var params = score ? { 'modelId': modelId, 'csvFileName': FileName } : { 'displayName': FileName };

        $http({
            method: 'POST',
            url: score ? '/pls/scores/fileuploads/fieldmappings/resolve' : '/pls/models/uploadfile/fieldmappings',
            headers: { 'Content-Type': 'application/json' },
            params: params,
            data: {
                'fieldMappings': FieldDocument.fieldMappings,
                'ignoredFields': FieldDocument.ignoredFields
            }
        }).success(function (data, status, headers, config) {
            console.log("SaveFieldDocuments:", data);
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.StartModeling = function (MetaData) {
        var deferred = $q.defer();
        var data = {
            notesContent: MetaData.notesContent,
            filename: MetaData.name,
            name: MetaData.modelName,
            deduplicationType: ImportStore.GetAdvancedSetting('oneLeadPerDomain') ? 'ONELEADPERDOMAIN' : 'MULTIPLELEADSPERDOMAIN',
            excludePublicDomains: ImportStore.GetAdvancedSetting('includePersonalEmailDomains') ? false : true,
            excludePropDataColumns: ImportStore.GetAdvancedSetting('useLatticeAttributes') ? false : true,
            transformationGroup: ImportStore.GetAdvancedSetting('enableTransformations') ? null : 'NONE',
            displayName: MetaData.displayName
        };

        if (MetaData.moduleName && MetaData.pivotFileName) {
            data.moduleName = MetaData.moduleName;
            data.pivotFileName = MetaData.pivotFileName;
        }

        $http({
            method: 'POST',
            url: '/pls/models/' + MetaData.modelName,
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).success(function (data, status, headers, config) {
            console.log("StartModeling:", data);
            if (data == null) {
                var result = {
                    Success: false,
                    ResultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                var result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.StartPMMLModeling = function (options) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/models/pmml/' + options.modelName,
            params: {
                'displayname': options.displayname,
                'module': options.module,
                'pmmlfile': options.pmmlfile,
                'pivotfile': options.pivotfile,
                'schema': options.schema
            },
            headers: { 'Content-Type': 'application/json' }
        }).success(function (data, status, headers, config) {

            console.log("StartPMMLModeling:", data);
            if (data == null) {
                var result = {
                    Success: false,
                    ResultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                var result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.StartTestingSet = function (modelId, fileName, performEnrichment) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/scores/' + modelId,
            params: {
                fileName: fileName,
                performEnrichment: performEnrichment,
                useRtsApi: performEnrichment
            },
            headers: { 'Content-Type': 'application/json' }
        }).success(function (data, status, headers, config) {
            console.log("StartTestingSet:", data);
            if (data == null) {
                var result = {
                    Success: false,
                    ResultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                var result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/create/buildprogress/BuildProgressController.js":
/*!*************************************************************!*\
  !*** ./app/create/buildprogress/BuildProgressController.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import.job', ['mainApp.appCommon.utilities.ResourceUtility', 'lp.create.import', 'lp.jobs']).controller('ImportJobController', ["$scope", "$state", "$stateParams", "$interval", "ResourceUtility", "JobsStore", "JobsService", "ImportStore", "ServiceErrorUtility", "CancelJobModal", "BuildProgressConfig", function ($scope, $state, $stateParams, $interval, ResourceUtility, JobsStore, JobsService, ImportStore, ServiceErrorUtility, CancelJobModal, BuildProgressConfig) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.applicationId = $stateParams.applicationId;

    BuildProgressConfig = BuildProgressConfig || {};

    $scope.config = BuildProgressConfig;
    $scope.button_goto_sref = BuildProgressConfig.button_goto_sref || 'home.models';

    var REFRESH_JOB_INTERVAL_ID;
    var REFRESH_PERFORM_CALC_ID;
    var TIME_BETWEEN_JOB_REFRESH = 30 * 1000;

    getJobStatusFromAppIdAndPerformCalc();

    REFRESH_JOB_INTERVAL_ID = $interval(getJobStatusFromAppIdAndPerformCalc, TIME_BETWEEN_JOB_REFRESH);

    var lastKnownStepBeforeCancel = null;
    var jobSteps = ['no_mapped_step_name', 'load_data', 'generate_insights', 'create_global_target_market', 'score_training_set'];

    $scope.jobStepsRunningStates = jobSteps.reduce(function (state, step) {
        state[step] = false;
        return state;
    }, {});

    $scope.jobStepsCompletedStates = jobSteps.reduce(function (state, step) {
        state[step] = false;
        return state;
    }, {});

    $scope.isPMMLJob = $state.includes('home.models.pmml.job');
    $scope.isPMMLCompleted = false;
    $scope.compress_percent = 0;

    $scope.create_new_sref = $scope.isPMMLJob ? 'home.models.pmml' : 'home.models.import';

    var up = true,
        value = 0,
        increment = 4,
        ceiling = 10,
        initialized = false;

    $scope.$on("$destroy", function () {
        $interval.cancel(REFRESH_JOB_INTERVAL_ID);
        $interval.cancel(REFRESH_PERFORM_CALC_ID);
    });

    function performCalc(job) {
        ServiceErrorUtility.process({ data: job });

        // console.log(job);

        if (job.jobStatus === 'Pending' || job.stepRunning === 'no_mapped_step_name') {
            ceiling = 10;
        } else if (job.stepRunning === 'load_data') {
            ceiling = 35;
        } else if (job.stepRunning === 'generate_insights') {
            ceiling = 60;
        } else if (job.stepRunning === 'create_global_target_market') {
            ceiling = 80;
        } else if (job.stepRunning === 'score_training_set') {
            ceiling = 90;
        } else if (job.jobStatus === 'Completed') {
            ceiling = 100;
        }

        $scope.isPMMLCompleted = $scope.isPMMLJob && $scope.jobStepsCompletedStates && $scope.jobStepsCompletedStates.create_global_target_market;

        if (initialized) {
            value = ceiling;
        } else if (up == true && value <= ceiling) {
            value += increment;
        }

        if (value == ceiling) {
            up = false;
        }

        $scope.compress_percent = value;
        initialized = true;
    };

    function updateStatesBasedOnJobStatus(job) {
        $scope.startTimestamp = job.startTimestamp;
        for (var i = 0; i < job.stepsCompleted.length; i++) {
            $scope.jobStepsCompletedStates[job.stepsCompleted[i]] = true;
            $scope.jobStepsRunningStates[job.stepsCompleted[i]] = false;
        }

        if (job.jobStatus == "Running") {
            $scope.jobStepsRunningStates[job.stepRunning] = true;
            $scope.jobStepsCompletedStates[job.stepRunning] = false;

            if ($scope.jobStepsCompletedStates["score_training_set"]) {
                $scope.jobStepsCompletedStates['generate_insights'] = true;
                $scope.jobStepsCompletedStates['create_global_target_market'] = true;

                $scope.jobStepsRunningStates['generate_insights'] = false;
                $scope.jobStepsRunningStates['create_global_target_market'] = false;

                $scope.jobStepsRunningStates['score_training_set'] = true;
                $scope.jobStepsCompletedStates['score_training_set'] = false;
            }
        }

        $scope.stepsCompletedTimes = job.completedTimes;

        var stepFailed = lastKnownStepBeforeCancel || job.stepFailed;
        if ((stepFailed === "no_mapped_step_name" || stepFailed === "load_data" || stepFailed === "generate_insights" || stepFailed === "create_global_target_market") && $scope.jobStepsCompletedStates["score_training_set"]) {
            stepFailed = "score_training_set";
        }
        if (stepFailed) {
            $scope.jobStepsRunningStates[stepFailed] = false;
            $scope.jobStepsCompletedStates[stepFailed] = false;
            $scope.stepFailed = stepFailed;

            if ($scope.stepsCompletedTimes[stepFailed]) {
                delete $scope.stepsCompletedTimes[stepFailed];
            }
        }

        if (job.jobStatus == "Completed") {
            $scope.jobRunning = false;
            $scope.jobCompleted = true;
            $scope.compress_percent = 100;
            $scope.jobStatus = job.jobStatus;
        } else if (job.jobStatus == "Failed" || job.jobStatus == "Cancelled") {
            $scope.jobRunning = false;
            for (var jobState in $scope.jobStepsRunningStates) {
                $scope.jobStepsRunningStates[jobState] = false;
            }
        }
    }

    function cancelPeriodJobStatusQuery() {
        $interval.cancel(REFRESH_JOB_INTERVAL_ID);
        REFRESH_JOB_INTERVAL_ID = null;
    }

    function getJobStatusFromAppIdAndPerformCalc() {
        JobsService.getJobStatusFromApplicationId($scope.applicationId).then(function (response) {
            if (response.success) {
                var resultObj = response.resultObj;

                $scope.jobStatus = resultObj.jobStatus;
                $scope.jobId = resultObj.id;

                if ($scope.jobStatus == "Completed" || $scope.jobStatus == "Failed" || $scope.jobStatus == "Cancelled") {
                    ServiceErrorUtility.process({ data: resultObj });
                    cancelPeriodJobStatusQuery();
                }

                updateStatesBasedOnJobStatus(resultObj);
                performCalc(resultObj);
            }
        });
    }

    $scope.cancelJob = function ($event, jobId) {
        if ($event != null) {
            $event.stopPropagation();
        }
        CancelJobModal.show(jobId, {}, function () {
            $state.go('home.jobs.status');
        });
    };

    $scope.$on('updateAsCancelledJob', function () {

        for (var i = 0; i < jobSteps.length; i++) {
            var step = jobSteps[i];
            if ($scope.jobStepsRunningStates[step] && !$scope.jobStepsCompletedStates[step]) {
                lastKnownStepBeforeCancel = step;
                break;
            }
        }
    });
}]);

/***/ }),

/***/ "./app/create/create.index.js":
/*!************************************!*\
  !*** ./app/create/create.index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./buildprogress/BuildProgressController */ "./app/create/buildprogress/BuildProgressController.js");

__webpack_require__(/*! ./csvform/CSVFormController */ "./app/create/csvform/CSVFormController.js");

__webpack_require__(/*! ./customfields/CustomFieldsController */ "./app/create/customfields/CustomFieldsController.js");

__webpack_require__(/*! ./fileuploader/FileUploaderDirective */ "./app/create/fileuploader/FileUploaderDirective.js");

__webpack_require__(/*! ./jobreport/JobReportController */ "./app/create/jobreport/JobReportController.js");

__webpack_require__(/*! ./pmmlform/PMMLFormController */ "./app/create/pmmlform/PMMLFormController.js");

__webpack_require__(/*! ./scorefields/ScoreFieldsController */ "./app/create/scorefields/ScoreFieldsController.js");

__webpack_require__(/*! ./scorefile/ScoreFileController */ "./app/create/scorefile/ScoreFileController.js");

__webpack_require__(/*! ./CreateRoutes */ "./app/create/CreateRoutes.js");

__webpack_require__(/*! ./CreateService */ "./app/create/CreateService.js");

/***/ }),

/***/ "./app/create/csvform/CSVFormController.js":
/*!*************************************************!*\
  !*** ./app/create/csvform/CSVFormController.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'lp.create.import.job', 'lp.create.import.report', 'mainApp.setup.modals.FieldMappingSettingsModal', '720kb.tooltips']).controller('csvImportController', ["$scope", "$state", "$q", "ResourceUtility", "StringUtility", "ImportService", "FieldMappingSettingsModal", "ImportStore", "FeatureFlagService", "CancelJobModal", "ServiceErrorUtility", "Banner", function ($scope, $state, $q, ResourceUtility, StringUtility, ImportService, FieldMappingSettingsModal, ImportStore, FeatureFlagService, CancelJobModal, ServiceErrorUtility, Banner) {
    var vm = this;

    FeatureFlagService.GetAllFlags().then(function (result) {
        var flags = FeatureFlagService.Flags();
        vm.showPivotMapping = FeatureFlagService.FlagIsEnabled(flags.ALLOW_PIVOT_FILE);
    });

    ImportStore.ResetAdvancedSettings();

    angular.extend(vm, {
        importErrorMsg: '',
        accountLeadCheck: '',
        modelDisplayName: '',
        modelDescription: '',
        notesContent: '',
        uploaded: false,
        showTypeDefault: false,
        showNameDefault: false,
        showImportError: false,
        showImportSuccess: false,
        oneLeadPerDomain: ImportStore.GetAdvancedSetting('oneLeadPerDomain'),
        includePersonalEmailDomains: ImportStore.GetAdvancedSetting('includePersonalEmailDomains'),
        useLatticeAttributes: ImportStore.GetAdvancedSetting('useLatticeAttributes'),
        enableTransformations: ImportStore.GetAdvancedSetting('enableTransformations'),
        ResourceUtility: ResourceUtility,
        params: {
            infoTemplate: "<div class='row divider'><div class='twelve columns'><h4>What is a Training File?</h4><p class='template-description'>A training set is a CSV file with records of your historical successes. It is used to build your ideal customer profile by leveraging the Lattice Predictive Insights platform. Ideal training set should have at least 7,000 accounts, 150 success events and a conversion rate of less than 10%.</p></div></div><hr><div class='row'><div class='six columns'><h4>Account Model:</h4><p>Upload a CSV file with accounts</p><p>Required: Id (any unique value for each record), Website (domain of company website), Event (1 for success, 0 otherwise)</p><p>Optional fields: Additional internal attributes about the accounts you would like to use as predictive attributes.</p></div><div class='six columns'><h4>Lead Model:</h4><p>Upload a CSV file with leads</p><p>Required: Id (any unique value for each record), Email, Event (1 for success, 0 otherwise)</p><p>Optional: Lead engagement data can be used as predictive attributes. Below are supported attributes:<ul><li>Marketo (4 week counts): Email Bounces (Soft), Email Clicks, Email Opens, Email Unsubscribes, Form Fills, Web-Link Clicks, Webpage Visits, Interesting Moments</li><li>Eloqua (4 week counts): Email Open, Email Send, Email Click Though, Email Subscribe, Email Unsubscribe, Form Submit, Web Visit, Campaign Membership, External Activity</li></ul></p></div></div>",
            compressed: true,
            importError: false,
            importErrorMsg: '',
            tooltipConfiguration: {
                tooltipSide: 'bottom',
                whiteFont: true
            }
        },
        pivotParams: {
            infoTemplate: "<h4>Pivot Mapping File</h4><p>Choose a Pivot Mapping File</p>",
            defaultMessage: "Example: pivot-mapping.txt",
            compressed: false,
            metadataFile: true
        }
    });

    vm.advancedSettingsClicked = function () {
        FieldMappingSettingsModal.showForModelCreation(ImportStore.GetAdvancedSetting('oneLeadPerDomain'), ImportStore.GetAdvancedSetting('includePersonalEmailDomains'), ImportStore.GetAdvancedSetting('useLatticeAttributes'), ImportStore.GetAdvancedSetting('enableTransformations'), vm.accountLeadCheck);
    };

    vm.fileLoad = function (headers) {
        var columns = headers.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/),
            columnLimit = 200,
            nonDuplicatedColumns = [],
            duplicatedColumns = [],
            schemaSuggestion;

        vm.params.importError = false;
        vm.showImportError = false;

        if (columns.length > 0) {

            if (columns.length > columnLimit) {
                var columnErrorMsg = 'We are unable to build your model because your file is too large.  Your file has ' + columns.length + ' columns.  Please reduce the numer of columns to below ' + columnLimit + '.';
                vm.showImportError = false;
                vm.params.importError = true;
                Banner.error({ message: columnErrorMsg });
            }

            for (var i = 0; i < columns.length; i++) {
                if (nonDuplicatedColumns.indexOf(columns[i]) < 0) {
                    nonDuplicatedColumns.push(columns[i]);
                } else {
                    duplicatedColumns.push(columns[i]);
                }
            }
            if (duplicatedColumns.length != 0) {
                vm.showImportError = false;
                vm.importErrorMsg = "Duplicate column(s) detected: '[" + duplicatedColumns + "]'";
                vm.params.importError = true;
                Banner.error({ message: vm.importErrorMsg });
            }

            var hasWebsite = columns.indexOf('Website') != -1 || columns.indexOf('"Website"') != -1,
                hasEmail = columns.indexOf('Email') != -1 || columns.indexOf('"Email"') != -1;

            if (hasWebsite && !hasEmail) {
                schemaSuggestion = 'SalesforceAccount';
            }

            if (!hasWebsite && hasEmail) {
                schemaSuggestion = 'SalesforceLead';
            }

            if (!vm.accountLeadCheck && schemaSuggestion) {
                vm.accountLeadCheck = schemaSuggestion;
                vm.showTypeDefault = true;
            }
        }
    };

    vm.fileSelect = function (fileName) {
        setTimeout(function () {
            vm.uploaded = false;

            var timestamp = new Date().getTime(),
                artifactName = vm.artifactName = vm.stripExt(vm.sanitize(fileName)),
                moduleName = vm.moduleName = artifactName + '_' + timestamp;

            if (vm.modelDisplayName) {
                return;
            }

            var date = new Date(),
                day = date.getDate(),
                year = date.getFullYear(),
                month = date.getMonth() + 1,
                seconds = date.getSeconds(),
                minutes = date.getMinutes(),
                hours = date.getHours(),
                month = month < 10 ? '0' + month : month,
                day = day < 10 ? '0' + day : day,
                minutes = minutes < 10 ? '0' + minutes : minutes,
                hours = hours < 10 ? '0' + hours : hours,
                schema = !vm.accountLeadCheck ? '' : vm.accountLeadCheck == "SalesforceLead" ? 'lead_' : 'account_',
                timestamp = schema + '' + year + '' + month + '' + day + '-' + hours + '' + minutes,
                displayName = fileName.replace('.csv', ''),
                displayName = displayName.substr(0, 50 - (timestamp.length + 1));

            if ((vm.modelDisplayName || '').indexOf(displayName) < 0) {
                vm.modelDisplayName = displayName + '_' + timestamp;
                vm.showNameDefault = true;
            }

            var modelDisplayNameEl = $('#modelDisplayName');
            modelDisplayNameEl.focus();

            setTimeout(function () {
                modelDisplayNameEl.select();
            }, 1);

            modelDisplayNameEl.parent('div.form-group').removeClass('is-pristine');
        }, 25);
    };

    vm.fileDone = function (result) {
        vm.uploaded = true;

        if (result.Result) {
            vm.fileName = result.Result.name;
        }
    };

    vm.fileCancel = function () {
        if (vm.showTypeDefault) {
            vm.showTypeDefault = false;
            vm.accountLeadCheck = '';
        }

        if (vm.showNameDefault) {
            vm.showNameDefault = false;
            vm.modelDisplayName = '';
        }

        var xhr = ImportStore.Get('cancelXHR', true);

        if (xhr) {
            xhr.abort();
        }
    };

    vm.pivotSelect = function (fileName) {
        var fileName = vm.sanitize(fileName),
            artifactName = vm.artifactName = vm.stripExt(fileName),
            pivotFile = vm.pivotFileName = fileName,
            endpoint = '/pls/metadatauploads/modules/',
            moduleName = vm.moduleName;

        vm.pivotUploaded = false;
        vm.pivotParams.url = endpoint + moduleName + '/pivotmappings?artifactName=' + artifactName;

        return vm.pivotParams;
    };

    vm.pivotDone = function () {
        vm.pivotUploaded = true;
    };

    vm.pivotCancel = function () {
        vm.pivotUploaded = false;
    };

    vm.stripExt = function (fileName) {
        var fnSplit = (fileName || '').split('.');

        if (fnSplit.length > 1) {
            fnSplit.pop();
        }

        return fnSplit.join('.');
    };

    vm.changeType = function () {
        vm.showTypeDefault = false;
    };

    vm.changeName = function () {
        vm.showNameDefault = false;
    };

    vm.clickUpload = function () {
        vm.showImportError = false;
        vm.importErrorMsg = "";
    };

    vm.clickNext = function (fileName) {
        var fileName = fileName || vm.fileName,
            metaData = vm.metadata = vm.metadata || {},
            displayName = vm.modelDisplayName,
            notesContent = vm.notesContent,
            modelName = StringUtility.SubstituteAllSpecialCharsWithDashes(displayName),
            schemaInterpretation = vm.accountLeadCheck;

        metaData.name = fileName;
        metaData.modelName = modelName;
        metaData.displayName = displayName;
        metaData.notesContent = notesContent;
        metaData.schemaInterpretation = schemaInterpretation;

        if (vm.pivotUploaded) {
            metaData.moduleName = vm.moduleName;
            metaData.pivotFileName = vm.stripExt(vm.pivotFileName) + '.csv';
        }

        ImportStore.Set(fileName, metaData);

        setTimeout(function () {
            $state.go('home.models.import.columns', { csvFileName: fileName });
        }, 1);
    };

    vm.keyupTextArea = function (event) {
        var target = event.target;
        target.style.height = 0;
        target.style.height = target.scrollHeight + 'px';
    };

    vm.cancelJob = function ($event) {
        if ($event != null) {
            $event.stopPropagation();
        }
        CancelJobModal.show(null, { sref: 'home.models' });
    };

    vm.sanitize = function (fileName) {
        return fileName.replace(/[^A-Za-z0-9_\.]/g, '_');
    };
}]);

/***/ }),

/***/ "./app/create/customfields/CustomFieldsController.js":
/*!***********************************************************!*\
  !*** ./app/create/customfields/CustomFieldsController.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import').controller('CustomFieldsController', ["$scope", "$state", "$stateParams", "$timeout", "$anchorScroll", "ResourceUtility", "FeatureFlagService", "ImportService", "ImportStore", "FieldDocument", "UnmappedFields", "CancelJobModal", "RatingsEngineStore", function ($scope, $state, $stateParams, $timeout, $anchorScroll, ResourceUtility, FeatureFlagService, ImportService, ImportStore, FieldDocument, UnmappedFields, CancelJobModal, RatingsEngineStore) {
    var _mappingOptions = [{ id: 0, name: "Custom Predictor" }, { id: 1, name: "Standard Field" }, { id: 2, name: "Ignore this field" }];

    var vm = this;

    angular.extend(vm, {
        FormValidated: true,
        ResourceUtility: ResourceUtility,
        csvFileName: $stateParams.csvFileName,
        cdlEnabled: FeatureFlagService.FlagIsEnabled(FeatureFlagService.Flags().ENABLE_CDL),
        fuzzyMatchEnabled: FeatureFlagService.FlagIsEnabled(FeatureFlagService.Flags().ENABLE_FUZZY_MATCH),
        mappingOptions: _mappingOptions.slice(),
        mappingOptionsReserved: Array.prototype.concat(_mappingOptions.slice(0, 1), _mappingOptions.slice(2)),
        ignoredFields: FieldDocument.ignoredFields = [],
        fieldMappings: FieldDocument.fieldMappings,
        initialized: false,
        NextClicked: false,
        standardFieldsList: ['Event', 'Id', null, 'CompanyName', 'DUNS', 'City', 'State', 'PostalCode', 'Country'],
        standardFieldsListMap: {},
        requiredFieldsMissing: {
            'Event': true,
            'Id': true
        },
        requiredFieldsFuzzyMatching: {
            'CompanyName': true,
            'DUNS': true
        },
        ignoredFieldLabel: '-- Unmapped Field --',
        UnmappedFieldsMap: {},
        standardFieldMappings: {},
        AvailableFields: [],
        showAdditionalFieldsCDL: false
    });

    vm.init = function () {
        if (RatingsEngineStore.getCustomEventModelingType()) {
            RatingsEngineStore.setValidation("mapping", false);
            vm.showAdditionalFieldsCDL = RatingsEngineStore.getDataStores().indexOf('CustomFileAttributes') >= 0;
        }
        vm.initialized = true;
        vm.csvMetadata = ImportStore.Get($stateParams.csvFileName) || {};
        vm.schema = vm.cdlEnabled ? 'SalesforceAccount' : vm.csvMetadata.schemaInterpretation || 'SalesforceLead';
        vm.UnmappedFields = UnmappedFields[vm.schema] || [];

        vm.standardFieldsList[2] = vm.schema === 'SalesforceLead' ? 'Email' : 'Website';
        vm.requiredFieldsMissing[vm.standardFieldsList[2]] = true;

        if (vm.schema === 'SalesforceAccount') {
            vm.standardFieldsList.push('PhoneNumber');
        }
        if (vm.fuzzyMatchEnabled) {
            angular.extend(vm.requiredFieldsMissing, vm.requiredFieldsFuzzyMatching);
        }
        if (RatingsEngineStore.getCustomEventModelingType() == 'CDL') {
            vm.standardFieldsList[1] = 'AccountId';
            delete vm.requiredFieldsMissing['Id'];
            vm.requiredFieldsMissing['AccountId'] = true;
        }

        vm.UnmappedFields.forEach(function (field) {
            vm.UnmappedFieldsMap[field.name] = field;
        });

        var fieldMappingsMap = {};
        vm.fieldMappings.forEach(function (fieldMapping) {
            fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
        });

        vm.standardFieldsList.forEach(function (field) {
            // create a copy of mapping object to preserve FieldDocument
            // FieldDocument updated when NextClicked
            if (fieldMappingsMap[field]) {
                vm.standardFieldMappings[field] = angular.copy(fieldMappingsMap[field]);
                vm.standardFieldMappings[field].mappedToLatticeField = true;
            } else {
                vm.standardFieldMappings[field] = {
                    fieldType: vm.UnmappedFieldsMap[field] ? vm.UnmappedFieldsMap[field].fieldType : null,
                    mappedField: field,
                    mappedToLatticeField: true,
                    userField: vm.ignoredFieldLabel
                };
            }

            // creating a map for special handling of fields in standardFieldsList
            vm.standardFieldsListMap[field] = field;
        });

        vm.refreshLatticeFields();
    };

    vm.changeMappingOption = function (mapping, selectedOption) {
        vm.setMappingOption(mapping, selectedOption);

        vm.refreshLatticeFields();
    };

    vm.setMappingOption = function (mapping, selectedOption) {
        mapping.mappedToLatticeField = mapping.mappedToLatticeField || false;
        delete mapping.ignored;

        switch (selectedOption.id) {
            case 0:
                // custom user mapping
                mapping.mappedField = mapping.userField;
                mapping.mappedToLatticeField = false;
                break;
            case 1:
                // map to lattice cloud
                mapping.mappedField = vm.UnmappedFieldsMap[mapping.mappedField] ? mapping.mappedField : '';

                mapping.mappedToLatticeField = true;
                break;
            case 2:
                // ignore this field
                mapping.mappedField = mapping.userField;
                mapping.mappedToLatticeField = false;
                mapping.ignored = true;
                break;
        }
    };

    vm.changeLatticeField = function (mapping) {
        mapping.mappedToLatticeField = true;
        mapping.fieldType = vm.UnmappedFieldsMap[mapping.mappedField] ? vm.UnmappedFieldsMap[mapping.mappedField].fieldType : null;

        vm.refreshLatticeFields();

        if (vm.cdlEnabled) {
            vm.updateFieldMappings();
        }
    };

    vm.refreshLatticeFields = function () {
        vm.fieldMappingsMapped = {};

        vm.fieldMappings.forEach(function (fieldMapping) {
            if (fieldMapping.mappedField && !fieldMapping.ignored && fieldMapping.mappedToLatticeField) {

                vm.fieldMappingsMapped[fieldMapping.mappedField] = fieldMapping;
            }
        });

        if (!vm.NextClicked) {
            vm.AvailableFields = [];

            var usedUserField = {};

            for (var standardFieldMap in vm.standardFieldMappings) {
                var fieldMapping = vm.standardFieldMappings[standardFieldMap];

                var userField = fieldMapping.userField;
                usedUserField[userField] = true;
            }

            vm.fieldMappings.forEach(function (fieldMapping) {
                var userField = fieldMapping.userField;
                if (!usedUserField[userField]) {
                    vm.AvailableFields.push(userField);
                }
            });
        }
        RatingsEngineStore.setAvailableFields(vm.AvailableFields);

        $timeout(vm.validateForm, 0);
    };

    vm.resetClicked = function ($event) {
        if ($event != null) {
            $event.stopPropagation();
        }
        CancelJobModal.show(null, { resetImport: true });
    };

    vm.clickNext = function () {
        vm.NextClicked = true;

        vm.updateFieldMappings();
    };

    vm.updateFieldMappings = function () {
        var userFieldMappingsMap = {},
            mappedFieldMappingsMap = {};

        vm.fieldMappings.forEach(function (fieldMapping) {
            userFieldMappingsMap[fieldMapping.userField] = fieldMapping;

            if (fieldMapping.mappedField) {
                mappedFieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            }
        });

        for (var standardField in vm.standardFieldMappings) {
            var stdFieldMapping = vm.standardFieldMappings[standardField];
            var userField = stdFieldMapping.userField;

            if (userField && userField !== vm.ignoredFieldLabel) {
                // clear any lattice field that has been remapped
                if (stdFieldMapping.mappedField) {
                    var mappedMapping = mappedFieldMappingsMap[stdFieldMapping.mappedField];
                    if (mappedMapping) {
                        mappedMapping.mappedField = null;
                        mappedMapping.mappedToLatticeField = false;
                    }
                }

                // update user fields that has been mapped
                var userMapping = userFieldMappingsMap[userField];
                if (userMapping) {
                    userMapping.mappedField = stdFieldMapping.mappedField;
                    userMapping.fieldType = stdFieldMapping.fieldType;
                    userMapping.mappedToLatticeField = true;
                    delete userMapping.ignored;
                }
            } else if (userField && userField === vm.ignoredFieldLabel && vm.standardFieldsListMap[standardField]) {
                // if a userfield is reserved, and was unmapped, set as custom predictor
                var mappedFieldMapping = mappedFieldMappingsMap[standardField];
                if (mappedFieldMapping) {
                    mappedFieldMapping.mappedField = standardField;
                    mappedFieldMapping.mappedToLatticeField = false;
                }
            }
        }
    };

    vm.clickRemap = function () {
        $anchorScroll();

        vm.NextClicked = false;
    };

    vm.clickNextModel = function () {

        ShowSpinner('Saving Field Mappings and Executing Modeling Job...');

        // build ignoredFields list from temp 'ignored' fieldMapping property
        vm.fieldMappings.forEach(function (fieldMapping) {
            if (fieldMapping.ignored) {
                vm.ignoredFields.push(fieldMapping.userField);

                delete fieldMapping.ignored;
            }
        });

        ImportService.SaveFieldDocuments(vm.csvFileName, FieldDocument).then(function (result) {

            ImportService.StartModeling(vm.csvMetadata).then(function (result) {
                if (result.Result && result.Result != "") {
                    $timeout(function () {
                        $state.go('home.models.import.job', { applicationId: result.Result });
                    }, 0);
                }
            });
        });
    };

    vm.validateMappingSelect = function (mapping) {
        var name = 'mapping_lattice_field_select_';

        vm.validateIsDuplicate(name, mapping);
    };

    vm.validateMappingInput = function (mapping) {
        var name = 'mapping_custom_field_input_';

        vm.validateIsReserved(name, mapping);
        vm.validateIsDuplicate(name, mapping);

        if (RatingsEngineStore.getCustomEventModelingType()) {
            RatingsEngineStore.setValidation('mapping', vm.FormValidated && $scope.fieldMappingForm.$valid);
        }
    };

    vm.validateIsReserved = function (name, mapping) {
        var isReserved = !!vm.UnmappedFieldsMap[mapping.mappedField] && !mapping.ignored;

        if ($scope.fieldMappingForm[name + mapping.userField]) {
            $scope.fieldMappingForm[name + mapping.userField].$setValidity("Reserved", !isReserved);
        }
    };

    vm.validateIsDuplicate = function (name, mapping) {
        var value = mapping.mappedField;
        var isDuplicate = false;

        if (!mapping.ignored) {
            vm.fieldMappings.forEach(function (field) {
                if (field.mappedField == value && !field.ignored) {
                    if (mapping.userField != field.userField) {
                        isDuplicate = true;
                    }
                }
            });
        }

        if ($scope.fieldMappingForm[name + mapping.userField]) {
            $scope.fieldMappingForm[name + mapping.userField].$setValidity("Duplicate", !isDuplicate);
        }
    };

    vm.validateRequiredFields = function () {
        for (var requiredField in vm.requiredFieldsMissing) {
            var fieldMapping = vm.standardFieldMappings[requiredField];

            if (fieldMapping && fieldMapping.userField && fieldMapping.userField !== vm.ignoredFieldLabel) {
                vm.requiredFieldsMissing[requiredField] = false;
            } else {
                vm.requiredFieldsMissing[requiredField] = true;
            }
        }

        if (vm.fuzzyMatchEnabled) {
            var domainLikeField = vm.schema === 'SalesforceAccount' ? 'Website' : 'Email';

            if (!vm.requiredFieldsMissing[domainLikeField]) {
                vm.requiredFieldsMissing['CompanyName'] = false;
                vm.requiredFieldsMissing['DUNS'] = false;
            } else if (!vm.requiredFieldsMissing['CompanyName']) {
                vm.requiredFieldsMissing[domainLikeField] = false;
                vm.requiredFieldsMissing['DUNS'] = false;
            } else if (!vm.requiredFieldsMissing['DUNS']) {
                vm.requiredFieldsMissing['CompanyName'] = false;
                vm.requiredFieldsMissing[domainLikeField] = false;
            }
        }

        for (var field in vm.requiredFieldsMissing) {
            vm.FormValidated = vm.FormValidated && !vm.requiredFieldsMissing[field];
        }

        if (vm.cdlEnabled) {
            RatingsEngineStore.setValidation("mapping", vm.FormValidated);
        }
    };

    // here are additional checks not covered by angular's built in form validation
    vm.validateForm = function () {
        vm.FormValidated = true;

        if (!vm.NextClicked) {
            vm.validateRequiredFields();
        }

        if (vm.NextClicked || RatingsEngineStore.getCustomEventModelingType() == 'LPI') {
            vm.fieldMappings.forEach(function (fieldMapping) {
                if (!fieldMapping.mappedField && fieldMapping.mappedToLatticeField) {
                    vm.FormValidated = false;
                }

                if (fieldMapping.mappedToLatticeField) {
                    vm.validateMappingSelect(fieldMapping);
                } else {
                    vm.validateMappingInput(fieldMapping);
                }
            });
        }
    };

    vm.filterStandardList = function (input) {
        for (var stdField in vm.standardFieldMappings) {
            if (vm.standardFieldMappings[stdField].userField === input.userField) {
                return false;
            }
        }
        return true;
    };

    vm.getModelingType = function () {
        return RatingsEngineStore.getCustomEventModelingType();
    };

    if (FieldDocument) {
        vm.init();
    }
}]);

/***/ }),

/***/ "./app/create/fileuploader/FileUploaderDirective.js":
/*!**********************************************************!*\
  !*** ./app/create/fileuploader/FileUploaderDirective.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import').directive('fileUploaderContainer', ["$parse", function ($parse) {
    return {
        restrict: 'A',
        scope: {
            params: '=',
            label: '@',
            inputName: '@',
            inputDisabled: '=',
            infoTemplate: '=',
            defaultMessage: '=',
            defaultMessageFn: '&',
            fileRequired: '@',
            fileAccept: '@',
            fileSelect: '&',
            fileLoad: '&',
            fileDone: '&',
            fileCancel: '&',
            fileValidation: '&',
            readOnly: '@?',
            tooltipConfig: '@'
        },
        templateUrl: 'app/create/fileuploader/FileUploaderTemplate.html',
        controllerAs: 'vm_uploader_container',
        controller: ["$scope", function controller($scope) {
            angular.extend(this, $scope);

            this.getTooltipConfig = function (key) {
                return this.tooltipConfig != undefined ? JSON.parse(this.tooltipConfig)[key] : '';
            };
        }]
    };
}]).directive('fileUploader', ["$parse", function ($parse) {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function link(scope, element, attrs, ngModel) {
            var model = $parse(attrs.fileUploader);
            var modelSetter = model.assign;
            element.bind('change', function () {
                scope.$apply(function () {
                    modelSetter(scope, element[0].files[0]);
                    ngModel.$setViewValue(element.val());
                    ngModel.$render();

                    scope.vm_uploader.startUpload();
                });
            });
        },
        controllerAs: 'vm_uploader',
        controller: ["$scope", "$state", "$q", "$element", "ImportService", "ImportStore", "ImportWizardStore", "ServiceErrorUtility", "Banner", function controller($scope, $state, $q, $element, ImportService, ImportStore, ImportWizardStore, ServiceErrorUtility, Banner) {
            var vm = this,
                options = {
                compress_percent: 0,
                upload_percent: 0,
                uploading: false,
                uploaded: false,
                compressing: false,
                compressed: true,
                selectedFileDisplayName: '',
                defaultMessage: $scope.defaultMessage || 'Example: us-enterprise-model.csv',
                message: ''
            },
                element = this.element = $element[0],
                GB = 1073741824,
                GBLimit = 2;

            vm.file = {};

            vm.init = function () {
                vm.params.scope = vm;
                vm.fileRequired = typeof vm.fileRequired == "undefined" ? true : vm.fileRequired;
            };

            vm.startUpload = function () {
                if (!vm.selectedFile) {
                    return false;
                }

                if (!vm.params.noSizeLimit && vm.selectedFile.size > GB * GBLimit) {
                    Banner.error({ title: 'Error', message: 'Your file is too large.  Please try again with a file that is smaller than ' + GBLimit + 'GB.' });
                    return;
                } else if (!vm.matchesFileExtension(vm.selectedFileName)) {
                    var fileExt = vm.fileAccept ? vm.fileAccept.split(',')[0].split('.').pop().toUpperCase() : 'CSV'; //get first file extension in file-accept or use CSV as default;
                    Banner.error({ title: 'Error', message: 'Invalid file format. Please try uploading the file in ' + fileExt + ' format.' });
                    return;
                }

                // ServiceErrorUtility.hideBanner();

                vm.startTime = new Date();
                vm.upload_percent = 0;

                vm.changeFile();
                vm.readHeaders(vm.selectedFile).then(function (headers) {
                    if (typeof vm.fileLoad == 'function') {
                        vm.params = vm.fileLoad({ headers: headers }) || vm.params;
                    }
                    if (vm.params.importError) {
                        var result = { Success: false };
                        vm.uploadResponse(result);
                        return;
                    }

                    var fnFallBack = function fnFallBack() {
                        vm.compress_percent = 100;
                        vm.uploadFile(vm.selectedFile);
                    };

                    if (vm.isCompressed(vm.selectedFile)) {
                        try {
                            vm.processFile(vm.selectedFile).then(vm.uploadFile);
                        } catch (e) {
                            fnFallBack();
                        }
                    } else {
                        fnFallBack();
                    }
                });
            };

            vm.getFileName = function (s) {
                return typeof s === 'string' && (s = s.match(/[^\\\/]+$/)) && s[0] || '';
            };

            vm.getFileExtension = function (fileName) {
                return fileName.split('.').pop();
            };

            vm.matchesFileExtension = function (fileName) {
                if (vm.fileAccept) {
                    return vm.fileAccept.includes(vm.getFileExtension(fileName));
                } else {
                    return vm.getFileExtension(vm.selectedFileName) == 'csv';
                }
            };

            vm.changeFile = function (scope) {
                vm.cancel(true);
                var input = element,
                    fileName = vm.getFileName(input.value);

                vm.selectedFileDisplayName = fileName;

                if (fileName && typeof vm.fileSelect == 'function') {
                    vm.fileSelect({ fileName: fileName });
                }
            };

            vm.readHeaders = function (file) {
                vm.message = 'Compressing: ' + (vm.getElapsedTime(vm.startTime) || '0 seconds');
                vm.compress_percent = 0;

                var deferred = $q.defer(),
                    FR = new FileReader(),
                    sliced = file.slice(0, 1024 * 8); // grab first 1024 * 8 chars

                FR.onload = function (e) {
                    var lines = e.target.result.split(/[\r\n]+/g);
                    deferred.resolve(lines[0]);
                };

                FR.readAsText(sliced);

                return deferred.promise;
            };

            vm.processFile = function (file) {
                var deferred = $q.defer();

                try {
                    // make 16k chunks, compress chunks, reconstitute
                    vm.processInChunks(file).then(function (result) {
                        deferred.resolve(result);
                    });
                } catch (err) {
                    // read whole file, compress whole file
                    vm.processWhole(file).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            };

            vm.processWhole = function (file) {
                var deferred = $q.defer();

                vm.readFile(file).then(vm.compressFileInWorker).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            };

            vm.processInChunks = function (file) {
                vm.compressing = true;

                var deferred = $q.defer(),
                    blob = new Blob(["onmessage = function(e) {" + "   importScripts(e.data.url + '/lib/js/pako_deflate.min.js');" + "" + "   var file = e.data.file," + "       FR = new FileReaderSync()," + "       deflator = new pako.Deflate({ gzip: true })," + "       totalSize = file.size," + "       maxChunk = 16384," + "       chunkSize = (totalSize < maxChunk ? totalSize : maxChunk)," + "       curSize = 0," + "       chunks = 0," + "       chunk;" + "" + "   while (curSize < totalSize) { " + "       if (chunks++ % 100 == 0) {" + "           var percentage = ((curSize / totalSize) * 100).toFixed(2);" + "           postMessage({ file: null, progress: percentage });" + "       }" + "" + "       chunk = file.slice(curSize, curSize + chunkSize);" + "       curSize += chunkSize;" + "       lastChunk = (curSize >= totalSize);" + "       deflator.push(FR.readAsArrayBuffer(chunk), lastChunk);" + "   }" + "" + "   postMessage({ file: deflator.result, progress: 100 });" + "}"]),
                    blobURL = window.URL.createObjectURL(blob),
                    worker = new Worker(blobURL);

                worker.onmessage = function (result) {
                    if (result.data.progress) {
                        vm.message = 'Compressing: ' + (vm.getElapsedTime(vm.startTime) || '0 seconds');
                        vm.compress_percent = result.data.progress;
                        vm.percentage = Math.ceil(result.data.progress);
                        $scope.$digest();
                    }

                    if (result.data.file) {
                        var blob = new Blob([new Uint8Array(result.data.file)]);
                        deferred.resolve(blob);
                    }
                };

                worker.postMessage({
                    url: document.location.origin,
                    file: file
                });

                return deferred.promise;
            };

            vm.readFile = function (file) {
                var deferred = $q.defer(),
                    FR = new FileReader();

                FR.onload = function (e) {
                    deferred.resolve(FR.result);
                };

                FR.readAsArrayBuffer(file);

                return deferred.promise;
            };

            vm.readFileAsText = function (file) {
                var deferred = $q.defer(),
                    FR = new FileReader();

                FR.onload = function (e) {
                    deferred.resolve(FR.result);
                };

                FR.readAsText(file);

                return deferred.promise;
            };

            vm.compressFileInWorker = function (file) {
                vm.message = 'Compressing: ' + (vm.getElapsedTime(vm.startTime) || '0 seconds');
                vm.compressing = true;

                var deferred = $q.defer(),
                    fnComplete = function fnComplete(file) {
                    vm.compress_percent = 67;
                    clearInterval(vm.compress_timer);
                    deferred.resolve(file);
                };

                vm.compress_timer = setInterval(function () {
                    var currentTime = new Date(),
                        seconds = Math.floor((currentTime - vm.startTime) / 1000);

                    vm.compress_percent = 100 - 100 / seconds;
                    vm.message = 'Compressing: ' + (vm.getElapsedTime(vm.startTime) || '0 seconds');
                    $scope.$digest();
                }, 1000);

                try {
                    var convertedData = new Uint8Array(file),

                    // Workers must exist in external files. this fakes that
                    blob = new Blob(["onmessage = function(e) {" + "   importScripts(e.data.url + '/lib/js/pako_deflate.min.js');" + "   postMessage(pako.gzip(e.data.file, { to : 'Uint8Array' }));" + "}"]),

                    // Obtain a blob URL reference to our fake worker 'file'
                    blobURL = window.URL.createObjectURL(blob),
                        worker = new Worker(blobURL);

                    worker.onmessage = function (result) {
                        var zipped = result.data,
                            array = new Array(zipped),
                            blob = new Blob(array);

                        fnComplete(blob);
                    };

                    // pass the file and absolute URL to the worker
                    worker.postMessage({ url: document.location.origin, file: convertedData }, [convertedData.buffer]);
                } catch (err) {
                    // Web Workers not working, try synchronous
                    vm.compressFile(file).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            };

            vm.compressFile = function (file) {
                vm.compressing = true;
                vm.message = 'Compressing the file.  This might take awhile...';

                var deferred = $q.defer(),
                    fnComplete = function fnComplete(file) {
                    vm.compress_percent = 100;
                    clearInterval(vm.compress_timer);
                    deferred.resolve(file);
                };

                // fallback for IE and other browsers that dont support webworker method
                setTimeout(function () {
                    try {
                        var convertedData = new Uint8Array(file),
                            zipped = pako.gzip(convertedData, { to: 'Uint8Array' }),
                            array = new Array(zipped),
                            blob = new Blob(array);

                        fnComplete(blob);
                    } catch (err) {
                        // compression error, turn it off & send uncompressed
                        if (vm.params) {
                            vm.params.compressed = false;
                        } else {
                            vm.compressed = false;
                        }

                        fnComplete(vm.selectedFile);
                    }
                }, 1);

                return deferred.promise;
            };

            vm.uploadFile = function (file) {
                vm.uploading = true;
                vm.upload_percent = 0;
                var cancelDeferred;
                if (!vm.params) {
                    vm.params = {};
                }

                var fileType = vm.accountLeadCheck ? vm.accountLeadCheck : 'SalesforceLead',
                    modelName = vm.modelDisplayName = vm.modelDisplayName || vm.selectedFileName,
                    options;

                if (!vm.readOnly) {
                    if ($state.includes('home.import.entry')) {
                        var fileName = "file_" + new Date().getTime() + ".csv";
                        ImportWizardStore.setCsvFileName(fileName);
                        options = {
                            file: file,
                            url: vm.params.url || '/pls/models/uploadfile',
                            params: {
                                entity: 'account',
                                fileName: fileName,
                                modelId: vm.params.modelId || false,
                                metadataFile: vm.params.metadataFile || null,
                                compressed: vm.isCompressed(),
                                displayName: vm.selectedFileDisplayName
                            },
                            progress: vm.uploadProgress
                        };
                    } else {
                        options = {
                            file: file,
                            url: vm.params.url || '/pls/models/uploadfile/unnamed',
                            params: {
                                schema: vm.params.schema || fileType,
                                modelId: vm.params.modelId || false,
                                metadataFile: vm.params.metadataFile || null,
                                compressed: vm.isCompressed(),
                                displayName: vm.selectedFileDisplayName,
                                operationType: vm.params.operationType || null
                            },
                            progress: vm.uploadProgress
                        };
                    }
                    vm.cancelDeferred = cancelDeferred = $q.defer();

                    ImportService.Upload(options).then(vm.uploadResponse);
                } else {
                    vm.readFileAsText(file).then(vm.uploadResponse);
                }
            };

            vm.isCompressed = function (file) {
                //console.log('file',file)
                if (!vm.params) {
                    vm.params = {};
                }

                // don't bother compressing if file size is small
                if (file && file.size < 16384) {
                    vm.params.compressed = false;
                }

                return vm.params.compressed || vm.params.compressed === false ? vm.params.compressed : vm.compressed;
            };

            vm.uploadResponse = function (result) {
                if (typeof vm.fileDone == 'function') {
                    vm.fileDone({ result: result });
                }

                vm.uploading = false;

                if (vm.readOnly && typeof vm.fileValidation == 'function') {
                    vm.fileValidation({ result: result }).then(function (response) {
                        if (response) {
                            vm.choosenFileName = vm.selectedFileDisplayName, vm.metadata = {};

                            vm.completeTransfer();
                        } else {

                            vm.abortTransfer(result);
                        }
                    });
                } else {
                    if (result.Success && result.Result) {
                        var fileName = vm.choosenFileName = result.Result ? result.Result.name : vm.selectedFileDisplayName,
                            metaData = vm.metadata = result.Result || {};

                        vm.completeTransfer();
                    } else {
                        vm.abortTransfer(result);
                        var msg = result.ResultErrors ? result.ResultErrors : 'Unknown error while uploading file.';
                        Banner.error({ message: msg });
                        // var errorCode = result.errorCode || 'LEDP_ERR';
                        // var errorMsg  = result.errorMsg || result.ResultErrors || 'Unknown error while uploading file.';
                    }
                }
            };

            vm.completeTransfer = function () {
                vm.upload_percent = 0;
                vm.uploaded = true;
                vm.message = 'Done in ' + (vm.getElapsedTime(vm.startTime) || '0 seconds');
            };

            vm.abortTransfer = function (result) {
                vm.cancel(true, result);
                vm.message = 'Transfer aborted';

                setTimeout(function () {
                    vm.message = '';
                }, 1500);
            };

            vm.uploadProgress = function (e) {
                if (e.total / 1024 > 4194304) {
                    vm.message = 'ERROR: Over ~' + GBLimit + 'GB file size limit.';

                    var xhr = ImportStore.Get('cancelXHR', true);

                    if (xhr) {
                        xhr.abort();
                    }
                } else {
                    var done = e.loaded / 1024,
                        total = e.total / 1024,
                        percent = vm.upload_percent = done / total * 100;

                    if (vm.uploading) {
                        if (percent < 100) {
                            vm.message = 'Sending: ' + (vm.getElapsedTime(vm.startTime) || '0 seconds');
                        } else {
                            vm.message = 'Processing...';
                        }
                        vm.percentage = percent ? Math.ceil(percent) : 1;
                        $scope.$digest();
                    }
                }
            };

            vm.getElapsedTime = function (startTime) {
                var format = function format(num, type) {
                    if (num > 0) {
                        return num + ' ' + (num == 1 ? type : type + 's') + ' ';
                    } else {
                        return '';
                    }
                },
                    currentTime = new Date(),
                    seconds = Math.floor((currentTime - startTime) / 1000),
                    minutes = Math.floor(seconds / 60),
                    hours = Math.floor(minutes / 60),
                    seconds = seconds % 60,
                    minutes = minutes % 60,
                    hours = hours % 24,
                    timestamp = format(hours, 'hour') + format(minutes, 'minute') + (seconds && (minutes || hours) ? ' and ' : '') + format(seconds, 'second');

                return timestamp;
            };

            vm.cancel = function (IGNORE_FILENAME, data) {
                vm.compressing = false;
                vm.uploading = false;
                vm.uploaded = false;
                vm.percentage = '';
                vm.compress_percent = 0;
                vm.upload_percent = 0;
                vm.message = '';

                if (!IGNORE_FILENAME) {
                    //vm.selectedFileName = null;
                    vm.selectedFileDisplayName = '';
                    vm.choosenFileName = '';
                }

                if (typeof vm.fileCancel == 'function') {
                    vm.fileCancel({ data: data });
                }
                setTimeout(function () {
                    $scope.$apply();
                }, 100);
            };

            vm.showFileDisplayName = function () {
                return vm.compressing || vm.uploading || vm.uploaded;
            };

            vm.showFileIcon = function () {
                return !vm.compressing && !vm.uploading && !vm.uploaded;
            };

            vm.showSpinnerIcon = function () {
                return vm.compressing && vm.compress_percent < 100;
            };

            vm.showCancelIcon = function () {
                return vm.uploading && vm.upload_percent > 0;
            };

            vm.showCheckIcon = function () {
                return vm.uploaded;
            };

            vm.showCompressingBar = function () {
                return vm.processing || vm.compressing;
            };

            vm.showUploadingBar = function () {
                return vm.uploading || vm.uploaded;
            };

            angular.extend(vm, $scope, options);

            vm.init();
        }]
    };
}]);

/***/ }),

/***/ "./app/create/jobreport/JobReportController.js":
/*!*****************************************************!*\
  !*** ./app/create/jobreport/JobReportController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import.report', ['mainApp.appCommon.utilities.ResourceUtility', 'common.exceptions']).controller('CSVReportController', ["$scope", "JobsService", "JobResult", "ResourceUtility", "BrowserStorageUtility", "ServiceErrorUtility", function ($scope, JobsService, JobResult, ResourceUtility, BrowserStorageUtility, ServiceErrorUtility) {
    var reports = JobResult.reports,
        JobReport = null;

    reports.forEach(function (item) {
        if (item.purpose == "IMPORT_DATA_SUMMARY") {
            JobReport = item;
        }
    });

    if (!JobReport) {
        return;
    }

    JobReport.name = JobReport.name.substr(0, JobReport.name.indexOf('.csv') + 4);

    var clientSession = BrowserStorageUtility.getClientSession();

    $scope.TenantId = clientSession.Tenant.Identifier;
    $scope.AuthToken = BrowserStorageUtility.getTokenDocument();
    $scope.report = JobReport;
    $scope.data = JSON.parse(JobReport.json.Payload);
    var data = $scope.data;
    $scope.data.total_records = data.imported_records + data.ignored_records;
    $scope.errorlog = '/files/fileuploads/' + JobReport.name + '/import/errors' + '?Authorization=' + $scope.AuthToken + '&TenantId=' + $scope.TenantId;

    $scope.ResourceUtility = ResourceUtility;
}]);

/***/ }),

/***/ "./app/create/pmmlform/PMMLFormController.js":
/*!***************************************************!*\
  !*** ./app/create/pmmlform/PMMLFormController.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import').controller('pmmlImportController', ["$scope", "$state", "$q", "ResourceUtility", "StringUtility", "ImportService", "ImportStore", "CancelJobModal", function ($scope, $state, $q, ResourceUtility, StringUtility, ImportService, ImportStore, CancelJobModal) {
    var vm = this;

    angular.extend(vm, {
        importErrorMsg: '',
        accountLeadCheck: 'SalesforceLead',
        modelDisplayName: '',
        modelDescription: '',
        moduleName: '',
        showTypeDefault: false,
        showNameDefault: false,
        showImportError: false,
        showImportSuccess: false,
        pmmlUploaded: false,
        pivotUploaded: false,
        ResourceUtility: ResourceUtility,
        endpoint: '/pls/metadatauploads/modules/',
        pmmlParams: {
            infoTemplate: "<p class='template-description'>Upload a PMML model file.</p>",
            defaultMessage: "Example: enterprise-pmml-model.xml",
            compressed: true,
            metadataFile: true,
            tooltipConfiguration: {
                tooltipSize: 'small',
                whiteFont: true
            }
        },
        pivotParams: {
            infoTemplate: "<h4>Pivot Mapping File</h4><p>Choose a Pivot Mapping File</p>",
            defaultMessage: "Example: pivot-mapping.txt",
            compressed: false,
            metadataFile: true
        }
    });

    vm.pmmlSelect = function (fileName) {
        vm.fileName = vm.pmmlFileName = fileName;

        var fileName = vm.sanitize(fileName),
            timestamp = new Date().getTime(),
            artifactName = vm.artifactName = vm.stripExt(fileName),
            moduleName = vm.moduleName = artifactName + '_' + timestamp;

        vm.pmmlUploaded = false;
        vm.pmmlParams.url = vm.endpoint + moduleName + '/pmmlfiles?artifactName=' + artifactName;

        if (vm.modelDisplayName) {
            return vm.pmmlParams;
        }

        var date = new Date(),
            day = date.getDate(),
            year = date.getFullYear(),
            month = date.getMonth() + 1,
            seconds = date.getSeconds(),
            minutes = date.getMinutes(),
            hours = date.getHours(),
            month = month < 10 ? '0' + month : month,
            day = day < 10 ? '0' + day : day,
            minutes = minutes < 10 ? '0' + minutes : minutes,
            hours = hours < 10 ? '0' + hours : hours,
            timestamp = year + '' + month + '' + day + '-' + hours + '' + minutes + '-' + seconds,
            displayName = fileName.replace('.csv', '').replace('.xml', ''),
            displayName = displayName.substr(0, 50 - (timestamp.length + 1));

        if ((vm.modelDisplayName || '').indexOf(displayName) < 0) {
            vm.modelDisplayName = displayName + '_' + timestamp;
            vm.showNameDefault = true;
        }

        var modelDisplayNameEl = $('#modelDisplayName');
        modelDisplayNameEl.focus();

        setTimeout(function () {
            modelDisplayNameEl.select();
        }, 1);

        modelDisplayNameEl.parent('div.form-group').removeClass('is-pristine');

        return vm.pmmlParams;
    };

    vm.pivotSelect = function (fileName) {
        var artifactName = vm.sanitize(fileName),
            pivotFile = vm.pivotFileName = artifactName,
            moduleName = vm.moduleName;

        vm.pivotUploaded = false;
        vm.pivotParams.url = vm.endpoint + moduleName + '/pivotmappings?artifactName=' + vm.stripExt(artifactName);

        return vm.pivotParams;
    };

    vm.pmmlLoad = function (headers) {};

    vm.pmmlDone = function () {
        vm.pmmlUploaded = true;
    };

    vm.pivotDone = function () {
        vm.pivotUploaded = true;
    };

    vm.pmmlCancel = function () {
        vm.pivotParams.scope.cancel();
        vm.pivotUploaded = false;
        vm.moduleName = '';

        if (vm.showTypeDefault) {
            vm.showTypeDefault = false;
            vm.accountLeadCheck = 'SalesforceLead';
        }

        if (vm.showNameDefault) {
            vm.showNameDefault = false;
            vm.modelDisplayName = '';
        }

        var xhr = ImportStore.Get('cancelXHR', true);

        if (xhr) {
            xhr.abort();
        }
    };

    vm.pivotCancel = function () {};

    vm.changeType = function () {
        vm.showTypeDefault = false;
    };

    vm.changeName = function () {
        vm.showNameDefault = false;
    };

    vm.clickUpload = function () {
        vm.showImportError = false;
        vm.importErrorMsg = "";
    };

    vm.clickNext = function () {
        ShowSpinner('Modeling...');

        var options = {
            displayname: this.modelDisplayName,
            modelName: vm.sanitize(this.modelDisplayName),
            schema: vm.accountLeadCheck,
            module: this.moduleName,
            pmmlfile: vm.stripExt(vm.sanitize(this.pmmlFileName)) + '.xml'
        };

        if (this.pivotFileName) {
            options.pivotfile = vm.stripExt(vm.sanitize(this.pivotFileName)) + '.csv';
        }

        ImportService.StartPMMLModeling(options).then(function (result) {
            if (result.Result && result.Result != "") {
                setTimeout(function () {
                    $state.go('home.models.pmml.job', { applicationId: result.Result });
                }, 1);
            }
        });
    };

    vm.keyupTextArea = function (event) {
        var target = event.target;
        target.style.height = 0;
        target.style.height = target.scrollHeight + 'px';
    };

    vm.cancelJob = function ($event) {
        if ($event != null) {
            $event.stopPropagation();
        }
        CancelJobModal.show(null, { sref: 'home.models' });
    };

    vm.sanitize = function (fileName) {
        return fileName.replace(/[^A-Za-z0-9_\.]/g, '_');
    };

    vm.stripExt = function (fileName) {
        var fnSplit = (fileName || '').split('.');

        if (fnSplit.length > 1) {
            fnSplit.pop();
        }

        return fnSplit.join('.');
    };
}]);

/***/ }),

/***/ "./app/create/scorefields/ScoreFieldsController.js":
/*!*********************************************************!*\
  !*** ./app/create/scorefields/ScoreFieldsController.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.create.import').controller('ScoreFieldsController', ["$scope", "$state", "$stateParams", "$timeout", "$rootScope", "$anchorScroll", "ResourceUtility", "FeatureFlagService", "ScoreLeadEnrichmentModal", "ImportService", "ImportStore", "FileHeaders", "FieldDocument", "CancelJobModal", "Model", function ($scope, $state, $stateParams, $timeout, $rootScope, $anchorScroll, ResourceUtility, FeatureFlagService, ScoreLeadEnrichmentModal, ImportService, ImportStore, FileHeaders, FieldDocument, CancelJobModal, Model) {

    var vm = this;
    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        modelId: $stateParams.modelId,
        csvFileName: $stateParams.csvFileName,
        schema: Model.ModelDetails.SourceSchemaInterpretation,
        useFuzzyMatch: false,
        standardFieldsList: ['Id', null, 'CompanyName', 'DUNS', 'City', 'State', 'PostalCode', 'Country'],
        requiredFieldsMissing: {
            'Id': true
        },
        requiredFieldsFuzzyMatching: {
            'CompanyName': true,
            'DUNS': true
        },
        standardFieldMappings: {},
        additionalFieldMappings: {},
        initialized: false,
        FormValidated: true,
        NextClicked: false,
        ignoredFieldLabel: '-- Unmapped Field --'
    });

    vm.init = function () {
        vm.initialized = true;

        vm.standardFieldsList[1] = vm.schema === 'SalesforceAccount' ? 'Website' : 'Email';
        vm.requiredFieldsMissing[vm.standardFieldsList[1]] = true;

        var fuzzyMatchEnabled = FeatureFlagService.FlagIsEnabled(FeatureFlagService.Flags().ENABLE_FUZZY_MATCH);
        var isRTS = Model.EventTableProvenance && (!Model.EventTableProvenance.hasOwnProperty('Data_Cloud_Version') || Model.EventTableProvenance.Data_Cloud_Version === null || Model.EventTableProvenance.Data_Cloud_Version.substring(0, 2) === '1.');
        vm.useFuzzyMatch = fuzzyMatchEnabled && !isRTS;

        if (vm.useFuzzyMatch) {
            angular.extend(vm.requiredFieldsMissing, vm.requiredFieldsFuzzyMatching);
        }

        if (vm.schema === 'SalesforceAccount') {
            vm.standardFieldsList.push('PhoneNumber');
        }
        var fieldMappingsMap = {};
        FieldDocument.fieldMappings.forEach(function (fieldMapping) {
            if (fieldMapping.mappedField) {
                fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            }

            if (!fieldMapping.userField && fieldMapping.mappedField) {
                fieldMapping.userField = vm.ignoredFieldLabel;
            }
        });

        vm.standardFieldsList.forEach(function (field) {
            if (fieldMappingsMap[field]) {
                vm.standardFieldMappings[field] = fieldMappingsMap[field];
            } else {
                vm.standardFieldMappings[field] = {
                    fieldType: null,
                    mappedField: field,
                    mappedToLatticeField: true,
                    userField: vm.ignoredFieldLabel
                };
            }
        });

        vm.refreshFields();

        vm.validateForm();
    };

    vm.refreshFields = function (current) {
        vm.AvailableFields = [];
        var mappedSet = {};

        for (var standardField in vm.standardFieldMappings) {
            var mapping = vm.standardFieldMappings[standardField];

            if (mapping.userField && mapping.userField !== vm.ignoredFieldLabel) {
                mappedSet[mapping.userField] = true;
            }
        }

        if (current) {
            FieldDocument.fieldMappings.forEach(function (mapping) {
                if (mapping.mappedField !== current.mappedField && mapping.userField === current.userField) {
                    mapping.userField = vm.ignoredFieldLabel;
                }
            });
        }

        FileHeaders.forEach(function (userField, index) {
            if (!mappedSet[userField]) {
                vm.AvailableFields.push(userField);
            }
        });
    };

    vm.changeField = function (mapping) {
        vm.refreshFields(mapping);

        $timeout(function () {
            vm.validateForm();
        }, 100);
    };

    vm.clickRemap = function () {
        $anchorScroll();

        vm.NextClicked = false;
    };

    vm.clickCancel = function ($event) {
        if ($event != null) {
            $event.stopPropagation();
        }

        CancelJobModal.show(null, { sref: 'home.model.jobs' });
    };

    vm.clickNext = function () {
        vm.NextClicked = true;

        var fieldMappingsMap = {};
        FieldDocument.fieldMappings.forEach(function (fieldMapping) {
            if (fieldMapping.mappedField && fieldMapping.mappedField !== vm.ignoredFieldLabel) {
                fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            }
        });

        FieldDocument.fieldMappings.forEach(function (fieldMapping) {
            if (!vm.standardFieldMappings[fieldMapping.mappedField]) {
                if (fieldMapping.mappedField && fieldMapping.mappedField !== vm.ignoredFieldLabel) {
                    vm.additionalFieldMappings[fieldMapping.mappedField] = fieldMappingsMap[fieldMapping.mappedField];
                }
            }
        });
    };

    vm.clickNextScore = function () {
        $anchorScroll();

        ShowSpinner('Saving Field Mappings and Preparing Scoring Job...');

        FieldDocument.fieldMappings = _.chain(angular.extend({}, vm.standardFieldMappings, vm.additionalFieldMappings)).pick(function (item) {
            if (item.userField == vm.ignoredFieldLabel) {
                FieldDocument.ignoredFields.push(item.mappedField);
            }
            return item.userField !== vm.ignoredFieldLabel;
        }).values().value();

        var mappedUserAttributes = _.map(FieldDocument.fieldMappings, 'userField');
        vm.AvailableFields.forEach(function (availableField) {
            if (mappedUserAttributes.indexOf(availableField) < 0) {
                FieldDocument.fieldMappings.push({ mappedField: null, mappedToLatticeField: false, userField: availableField, fieldType: null });
            }
        });

        ImportService.SaveFieldDocuments(vm.csvFileName, FieldDocument, true).then(function (result) {
            ScoreLeadEnrichmentModal.showFileScoreModal(vm.modelId, vm.csvFileName, 'home.model.jobs');
        });

        // ImportService.SaveFieldDocuments(vm.csvFileName, FieldDocument, true).then(function(result) {

        //     ImportService.StartTestingSet(vm.modelId, vm.csvFileName, true).then(function(result) {
        //         $scope.saveInProgress = false;
        //         if (result.Success) {
        //             $state.go('home.model.jobs', { 'jobCreationSuccess': result.Success });
        //         } else {
        //             $state.go('home.model.scoring', { 'showImportError': result.Error });
        //         }
        //     });

        // });
    };

    vm.validateForm = function () {
        vm.FormValidated = true;

        for (var field in vm.requiredFieldsMissing) {
            var fieldMapping = vm.standardFieldMappings[field];
            if (!fieldMapping || fieldMapping.userField === vm.ignoredFieldLabel) {
                vm.requiredFieldsMissing[field] = true;
            } else {
                vm.requiredFieldsMissing[field] = false;
            }
        }

        if (vm.useFuzzyMatch) {
            var domainLikeField = vm.schema === 'SalesforceAccount' ? 'Website' : 'Email';

            if (!vm.requiredFieldsMissing[domainLikeField]) {
                vm.requiredFieldsMissing['CompanyName'] = false;
                vm.requiredFieldsMissing['DUNS'] = false;
            } else if (!vm.requiredFieldsMissing['CompanyName']) {
                vm.requiredFieldsMissing[domainLikeField] = false;
                vm.requiredFieldsMissing['DUNS'] = false;
            } else if (!vm.requiredFieldsMissing['DUNS']) {
                vm.requiredFieldsMissing['CompanyName'] = false;
                vm.requiredFieldsMissing[domainLikeField] = false;
            }
        }

        for (var field in vm.requiredFieldsMissing) {
            vm.FormValidated = vm.FormValidated && !vm.requiredFieldsMissing[field];
        }
    };

    if (FieldDocument) {
        vm.init();
    }
}]);

/***/ }),

/***/ "./app/create/scorefile/ScoreFileController.js":
/*!*****************************************************!*\
  !*** ./app/create/scorefile/ScoreFileController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.create.csvBulkUpload', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.leadenrichment', 'mainApp.core.utilities.NavUtility']).controller('csvBulkUploadController', ["$state", "$stateParams", "ResourceUtility", "ImportService", "ImportStore", "StringUtility", "ScoreLeadEnrichmentModal", "Model", "IsPmml", function ($state, $stateParams, ResourceUtility, ImportService, ImportStore, StringUtility, ScoreLeadEnrichmentModal, Model, IsPmml) {
    var vm = this;

    vm.importErrorMsg = "";
    vm.importing = false;
    vm.uploaded = false;
    vm.showImportError = null;
    vm.showImportSuccess = false;
    vm.accountLeadCheck = false;
    vm.ResourceUtility = ResourceUtility;
    vm.schema = Model.ModelDetails.SourceSchemaInterpretation == 'SalesforceLead' ? 'Lead' : 'Account';
    vm.isPmml = IsPmml;

    console.log(vm.showImportError);

    vm.params = {
        url: '/pls/scores/fileuploads',
        label: vm.schema + ' List',
        infoTemplate: vm.schema == 'Lead' ? 'Upload a CSV file with leads to score. The list of expected column headers is displayed below.' : 'Upload a CSV file with accounts to score. The list of expected column headers is displayed below.',
        defaultMessage: "Example: us-target-list.csv",
        modelId: $stateParams.modelId,
        compressed: true,
        schema: null,
        noSizeLimit: true
    };

    vm.fileSelect = function (result) {
        vm.uploaded = false;
    };

    vm.fileLoad = function (result) {};

    vm.fileDone = function (result) {
        if (result.Result && result.Result.name) {
            vm.uploaded = true;
            vm.Result = result.Result;
            vm.fileName = result.Result.name;
        }
    };

    vm.fileCancel = function () {
        var xhr = ImportStore.Get('cancelXHR', true);

        if (xhr) {
            xhr.abort();
        }
    };

    vm.clickNext = function () {
        if (IsPmml) {
            ShowSpinner('Executing Scoring Job...');

            ImportService.StartTestingSet(vm.params.modelId, vm.fileName, false).then(function (result) {
                $state.go('home.model.jobs', { 'jobCreationSuccess': !!vm.fileName });
            });
        } else {
            var fileName = fileName || vm.fileName,
                modelName = StringUtility.SubstituteAllSpecialCharsWithDashes(vm.Result.display_name),
                metaData = vm.metadata = vm.metadata || {};

            metaData.name = fileName;
            metaData.modelName = modelName;
            metaData.displayName = vm.Result.display_name;
            metaData.description = vm.Result.description;
            metaData.schemaInterpretation = vm.Result.schema_interpretation;

            ImportStore.Set(fileName, metaData);

            setTimeout(function () {
                $state.go('home.model.scoring.mapping', { csvFileName: fileName });
            }, 1);
        }
    };
}]);

/***/ }),

/***/ "./app/delete/content/delete.component.js":
/*!************************************************!*\
  !*** ./app/delete/content/delete.component.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.delete.entry', []).component('deleteEntry', {
    templateUrl: 'app/delete/content/delete.component.html',
    controller: ["$state", "$stateParams", "$scope", "$location", "DeleteDataStore", "DeleteDataService", "ImportStore", "Banner", "Modal", "BrowserStorageUtility", function controller($state, $stateParams, $scope, $location, DeleteDataStore, DeleteDataService, ImportStore, Banner, Modal, BrowserStorageUtility) {
        var vm = this,
            resolve = $scope.$parent.$resolve,
            EntitiesCount = resolve.EntitiesCount;

        angular.extend(vm, {
            uploading: false,
            showSuccessMsg: false,
            showWarningMsg: true,
            showFromTime: true,
            showToTime: true,
            submittingJob: false,
            currentTab: 'account',
            deleteWarningMsg: 'Once the delete action is submitted, it canâ€™t be undone.',
            uploadParams: DeleteDataStore.getFileUploadParams(),
            fileName: '',
            counts: {
                'accounts': EntitiesCount.AccountCount,
                'contacts': EntitiesCount.ContactCount,
                'transactions': EntitiesCount.TransactionCount
            },
            periodTimeConf: {
                from: { name: 'from-time', initial: undefined, position: 0, type: 'Time', visible: true },
                to: { name: 'to-time', initial: undefined, position: 1, type: 'Time', visible: true }
            },
            bucketRestriction: {
                "attr": "delete"
            },
            uploadOperations: ['BYUPLOAD_ID', 'BYUPLOAD_ACPD', 'BYUPLOAD_MINDATEANDACCOUNT'],
            ClientSession: BrowserStorageUtility.getClientSession(),
            modalConfigName: 'delete_data'
        });

        vm.init = function () {
            Banner.warning({ title: 'Delete Operation', message: 'Once the delete action is submitted, it canâ€™t be undone.' });
            vm.startTime = '';
            vm.endTime = '';
            vm.cleanupOperationType = {
                'account': '',
                'contact': '',
                'transaction': ''
            };
            vm.isValid = {
                'account': false,
                'contact': false,
                'transaction': false
            };
        };

        vm.getForm = function () {
            return $scope.delete_form;
        };

        vm.setEntity = function (type, goState) {
            if (!vm.uploading) {
                // prevent changing tabs when file is uploading
                clearPreviousSelection();
                vm.cleanupOperationType[vm.currentTab] = '';
                vm.isValid[vm.currentTab] = false;

                vm.currentTab = goState || type.toLowerCase();
                vm.isValid[vm.currentTab] = false;
            }
        };

        vm.setCleanupType = function (option) {
            clearPreviousSelection(option);

            vm.cleanupOperationType[vm.currentTab] = option;
            if (vm.getCleanupType() == 'ALLDATA') {
                vm.isValid[vm.currentTab] = true;
            } else {
                vm.isValid[vm.currentTab] = false;
            }
        };

        vm.getCleanupType = function () {
            var type = vm.cleanupOperationType[vm.currentTab];
            switch (type) {
                case 'BYUPLOAD_ACPD_1':
                case 'BYUPLOAD_ACPD_2':
                    return 'BYUPLOAD_ACPD';
                default:
                    return type;
            }
        };

        vm.getSchema = function () {
            var cleanupType = vm.getCleanupType();
            var isUploadOperation = vm.uploadOperations.indexOf(cleanupType) >= 0;
            switch (vm.currentTab) {
                case 'account':
                    return isUploadOperation ? 'DeleteAccountTemplate' : 'Account';
                case 'contact':
                    return isUploadOperation ? 'DeleteContactTemplate' : 'Contact';
                case 'transaction':
                    return isUploadOperation ? 'DeleteTransactionTemplate' : 'Transaction';
            }
        };

        vm.getEntityImage = function (entity, ico_name) {
            ico_name = !ico_name ? entity : ico_name;
            return vm.currentTab == entity ? '/assets/images/ico-' + ico_name + 's-white.png' : '/assets/images/ico-' + ico_name + 's-dark.png';
        };

        vm.fileLoad = function (headers) {
            vm.uploading = true;
        };

        vm.fileSelect = function (fileName) {
            if (vm.currentTab == 'account' || vm.currentTab == 'contact') {
                vm.uploadParams['BYUPLOAD_ID'].schema = vm.getSchema();
            }
        };

        vm.fileDone = function (result) {
            vm.uploading = false;

            if (result.Result) {
                vm.fileName = result.Result.name;
                vm.isValid[vm.currentTab] = vm.fileName != '';
            } else {
                vm.showWarningMsg = false;
            }
        };

        vm.fileCancel = function () {
            vm.uploading = false;
            var xhr = ImportStore.Get('cancelXHR', true);

            if (xhr) {
                xhr.abort();
            }
        };

        vm.disableSubmit = function () {
            if (!hasAccessRights() || vm.submittingJob) {
                return true;
            }
            return vm.getCleanupType() != 'BYDATERANGE' ? !vm.isValid[vm.currentTab] : !$scope.delete_form || $scope.delete_form['from-time'].$invalid || $scope.delete_form['to-time'].$invalid;
        };

        function hasAccessRights() {
            return vm.ClientSession.AccessLevel == 'INTERNAL_ADMIN' || vm.ClientSession.AccessLevel == 'EXTERNAL_ADMIN' || vm.ClientSession.AccessLevel == 'SUPER_ADMIN';
        }

        vm.click = function () {
            Modal.warning({
                name: "delete_data",
                title: "Warning",
                message: 'Are you sure you want to Delete these data? Once the delete job is submitted, it canâ€™t be undone.',
                confirmtext: 'Yes, Delete'
            }, vm.modalCallback);
        };

        vm.callbackChangedValue = function (type, position, value) {
            vm.startTime = position == 0 ? value : vm.startTime;
            vm.endTime = position == 1 ? value : vm.endTime;
        };

        vm.getPeriodTimeConfString = function () {
            vm.periodTimeConf.from.visible = vm.showFromTime;
            vm.periodTimeConf.to.visible = vm.showToTime;
            var ret = JSON.stringify(vm.periodTimeConf);
            return ret;
        };

        vm.submitCleanupJob = function () {
            vm.submittingJob = true;
            var cleanupType = vm.getCleanupType();
            var schema = vm.getSchema();
            var params = {};
            var url = '';

            switch (cleanupType) {
                case 'BYUPLOAD_ID':
                case 'BYUPLOAD_ACPD':
                case 'BYUPLOAD_MINDATEANDACCOUNT':
                    url = 'cleanupbyupload';
                    params = {
                        fileName: vm.fileName,
                        schema: schema,
                        cleanupOperationType: cleanupType
                    };
                    break;
                case 'BYDATERANGE':
                    url = 'cleanupbyrange';
                    params = {
                        startTime: vm.startTime,
                        endTime: vm.endTime,
                        schema: schema
                    };
                    break;
                case 'ALLDATA':
                    url = 'cleanupall';
                    params = {
                        schema: schema
                    };
                    break;
            }
            if (url != '') {
                DeleteDataService.cleanup(url, params).then(function (result) {
                    if (result && result.Success) {
                        Banner.reset();
                        var href = getDataProcessingPageHref();
                        var bannerMsg = "The delete action will be scheduled to process and analyze after validation. You can track the status from the <a href='" + href + "'> Data Processing Job page. </a>";
                        Banner.success({ title: "Success! Delete Action has been submitted.", message: bannerMsg });

                        setTimeout(vm.reset, 0);
                    }
                    vm.submittingJob = false;
                });
            }
        };

        function getDataProcessingPageHref() {
            var url = $location.absUrl().split('/');
            url[url.length - 1] = "jobs/status";
            return url.join("/");
        }

        vm.reset = function () {
            clearPreviousSelection();

            vm.init();

            $scope.$apply();
        };

        function clearPreviousSelection(option) {
            if (vm.uploadOperations.indexOf(vm.getCleanupType()) >= 0) {
                vm.fileName = '';
                var cleanupType = vm.cleanupOperationType[vm.currentTab];
                vm.uploadParams[cleanupType].scope.cancel();
            } else if (vm.getCleanupType() == 'BYDATERANGE' && option != 'BYDATERANGE') {
                vm.resetDatePicker();
                $scope.delete_form['from-time'].$pristine = true;
                $scope.delete_form['to-time'].$pristine = true;
                vm.startTime = '';
                vm.endTime = '';
            }
        }

        vm.modalCallback = function (args) {
            var modal = Modal.get(vm.modalConfigName);
            if (args.action === 'cancel') {
                Modal.modalRemoveFromDOM(modal, args);
            } else if (args.action === 'ok') {
                Modal.modalRemoveFromDOM(modal, args);

                vm.submitCleanupJob();
            }
        };

        $scope.$on("$destroy", function () {
            var modal = Modal.get(vm.modalConfigName);
            if (modal) {
                Modal.modalRemoveFromDOM(modal, { name: 'delete_data' });
            }
        });

        vm.init();
    }]
});

/***/ }),

/***/ "./app/delete/delete.index.js":
/*!************************************!*\
  !*** ./app/delete/delete.index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./content/delete.component */ "./app/delete/content/delete.component.js");

__webpack_require__(/*! ./delete.routes */ "./app/delete/delete.routes.js");

__webpack_require__(/*! ./delete.service */ "./app/delete/delete.service.js");

/***/ }),

/***/ "./app/delete/delete.routes.js":
/*!*************************************!*\
  !*** ./app/delete/delete.routes.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.delete', ['lp.delete.entry', 'mainApp.core.utilities.AuthorizationUtility']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.delete', {
        url: '/delete',
        onEnter: ['AuthorizationUtility', function (AuthorizationUtility) {
            AuthorizationUtility.redirectIfNotAuthorized(AuthorizationUtility.excludeExternalUser, {}, 'home');
        }],
        onExit: ['Banner', function (Banner) {
            Banner.reset();
        }],
        resolve: {
            EntitiesCount: ["$q", "QueryStore", function EntitiesCount($q, QueryStore) {
                var deferred = $q.defer();

                QueryStore.getCollectionStatus().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'main@': {
                template: '<delete-entry></delete-entry>'
            }
        }
    });
}]);

/***/ }),

/***/ "./app/delete/delete.service.js":
/*!**************************************!*\
  !*** ./app/delete/delete.service.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.delete').service('DeleteDataStore', ["$sce", function ($sce) {
    var DeleteDataStore = this;

    this.init = function () {
        this.fileUploadParams = { // need separate file upload params in order to use cancel method in fileMethod when resetting after successfully submitting the delete job
            BYUPLOAD_ID: {
                // accountInfoTemplate: "<div> <div class='twelve columns'> <h4>Sample File Format</h4> <p>Upload a CSV file using the following data format to delete your Account Data. All the fields are required.</p> </div></div><div class='row'> <div style='margin-top: 0px;'> <table> <thead> <tr> <th>Account ID</th> </tr> </thead> <tbody> <tr> <td>1</td> </tr> <tr> <td>2</td> <tr> <td>3</td> </tbody> </table> </div></div>",
                // accountInfoTemplate: '<div> <div class="twelve columns"> <h5>Sample File Format</h5> <p style="margin-top:5px;">Upload a CSV file using the following data format to delete your Account Data. All the fields are required.</p> </div></div> <div class="row"> <div style="margin-top: 5px;"> <table> <thead> <tr> <th>Account ID</th> </tr> </thead> <tbody> <tr> <td>1</td> </tr> <tr> <td>2</td> <tr> <td>3</td> </tbody> </table> </div></div>',
                // accountInfoTemplate: '"<div class=\"row divider\"> <div class=\"twelve columns\"> <h4>Sample File Format</h4> <p>Upload a CSV file using the following data format to delete your Account Data. All the fields are required.</p> </div></div><div class=\"row\"> <div style=\"margin-top: 0px;\"> <table> <thead> <tr> <th>Account ID</th> </tr> </thead> <tbody> <tr> <td>1</td> </tr> <tr> <td>2</td> <tr> <td>3</td> </tbody> </table> </div></div>"',
                // accountInfoTemplate: $sce.trustAsHtml('\"<div class=\"row divider\"> <div class=\"twelve columns\"> <h4>Sample File Format</h4> <p>Upload a CSV file using the following data format to delete your Account Data. All the fields are required.</p> </div></div><div class=\"row\"> <div style=\"margin-top: 0px;\"> <table> <thead> <tr> <th>Account ID</th> </tr> </thead> <tbody> <tr> <td>1</td> </tr> <tr> <td>2</td> <tr> <td>3</td> </tbody> </table> </div></div>\"'),
                // accountInfoTemplate: '<p> Hello </p>',
                accountInfoTemplate: "<div class='template-section'> <div class='twelve columns'> <h4>Sample File Format</h4> <p class='template-description'>Upload a CSV file using the following data format to delete your Account Data. All the fields are required.</p></div></div><div class='template-section row'> <div> <table class='medium'> <thead> <tr> <th>Account ID</th> </tr></thead> <tbody> <tr> <td>1</td></tr><tr> <td>2</td><tr> <td>3</td></tbody> </table> </div></div>",
                // accountInfoTemplate: '<div><div class="columns twelve"><h5>Sample File Format</h5><p>Upload a CSV file using the following data format to delete your Account Data. All the fields are required.</div></div><div class=row><div><table><thead><tr><th>Account ID<tbody><tr><td>1<tr><td>2<tr><td>3</table></div></div>',
                contactInfoTemplate: "<div class='template-section'> <div class='twelve columns'> <h4>Sample File Format</h4> <p class='template-description'>Upload a CSV file using the following data format to delete your Contact Data. All the fields are required.</p> </div></div><div class='template-section row'> <div> <table class='medium'> <thead> <tr> <th>Contact ID</th> </tr> </thead> <tbody> <tr> <td>1</td> </tr> <tr> <td>2</td> <tr> <td>3</td> </tbody> </table> </div></div>",
                accountLabel: "Upload a single csv file with Account IDs",
                contactLabel: "Upload a single csv file with Contact IDs",
                tooltipConfiguration: {
                    whiteBackground: true,
                    tooltipSide: 'top',
                    tooltipSize: 'large'
                },
                compressed: true,
                importError: false,
                importErrorMsg: '',
                url: '/pls/models/uploadfile/uploaddeletefiletemplate',
                schema: 'DeleteAccountTemplate',
                whiteBackground: true,
                operationType: 'BYUPLOAD_ID'
            },
            BYUPLOAD_MINDATEANDACCOUNT: {
                // infoTemplate: "<div class='row divider'> <div class='twelve columns'> <h4>Sample File Format</h4> <p>Upload a CSV file using the following data format to delete your Transaction Data. All the fields are required.</p> </div></div><div class='row'> <div style='margin-top: 0px;'> <table> <thead> <tr> <th>Account ID</th> <th>TransactionTime</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>4/1/17 0:00</td> </tr> <tr> <td>2</td> <td>11/1/15 0:00</td> </tr> <tr> <td>3</td> <td>8/1/15 0:00</td> </tr> </tbody> </table> </div></div>",
                infoTemplate: "<div class='template-section'> <div class='twelve columns'> <h4>Sample File Format</h4> <p class='template-description'>Upload a CSV file using the following data format to delete your Transaction Data. All the fields are required.</p></div></div><div class='template-section row'> <div> <table class='medium'> <thead> <tr> <th>Account ID</th> <th>TransactionTime</th> </tr></thead> <tbody> <tr> <td>1</td><td>4/1/17 0:00</td></tr><tr> <td>2</td><td>11/1/15 0:00</td></tr><tr> <td>3</td><td>8/1/15 0:00</td></tr></tbody> </table> </div></div>",
                tooltipConfiguration: {
                    whiteBackground: true,
                    tooltipSide: 'top',
                    tooltipSize: 'large'
                },
                compressed: true,
                importError: false,
                importErrorMsg: '',
                url: '/pls/models/uploadfile/uploaddeletefiletemplate',
                schema: 'DeleteTransactionTemplate',
                operationType: 'BYUPLOAD_MINDATEANDACCOUNT'
            },
            BYUPLOAD_ACPD_1: {
                infoTemplate: "<div class='template-section'> <div class='twelve columns'> <h4>Sample File Format</h4> <p class='template-description'>Upload a CSV file using the following data format to delete your Transaction Data. All the fields are required.</p> </div></div><div class='template-description row'> <div> <table class='medium'> <thead> <tr> <th>Account ID</th> <th>Product ID</th> <th>TransactionTime</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>1</td> <td>4/1/17 0:00</td> </tr> <tr> <td>1</td> <td>2</td> <td>11/1/15 0:00</td> </tr> <tr> <td>1</td> <td>3</td> <td>8/1/15 0:00</td> </tr> </tbody> </table> </div></div>",
                tooltipConfiguration: {
                    whiteBackground: true,
                    tooltipSide: 'top',
                    tooltipSize: 'large'
                },
                compressed: true,
                importError: false,
                importErrorMsg: '',
                url: '/pls/models/uploadfile/uploaddeletefiletemplate',
                schema: 'DeleteTransactionTemplate',
                operationType: 'BYUPLOAD_ACPD'
            },
            BYUPLOAD_ACPD_2: {
                infoTemplate: "<div class='template-section'> <div class='twelve columns'> <h4>Sample File Format</h4> <p class='template-description'>Upload a CSV file using the following data format to delete your Transaction Data. All the fields are required.</p> </div></div><div class='template-section row'> <div> <table class='medium'> <thead> <tr> <th>Account ID</th> <th>Product ID</th> <th>Contact ID</th> <th>TransactionTime</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>1</td> <td>1</td> <td>4/1/17 0:00</td> </tr> <tr> <td>2</td> <td>2</td> <td>1</td> <td>11/1/15 0:00</td> </tr> <tr> <td>2</td> <td>3</td> <td>1</td> <td>8/1/15 0:00</td> </tr> </tbody> </table> </div></div>",
                tooltipConfiguration: {
                    whiteBackground: true,
                    tooltipSide: 'top',
                    tooltipSize: 'large'
                },
                compressed: true,
                importError: false,
                importErrorMsg: '',
                url: '/pls/models/uploadfile/uploaddeletefiletemplate',
                schema: 'DeleteTransactionTemplate',
                whiteBackground: true,
                operationType: 'BYUPLOAD_ACPD'
            }
        };
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.getFileUploadParams = function () {
        return this.fileUploadParams;
    };
}]).service('DeleteDataService', ["$q", "$http", function ($q, $http) {

    this.cleanup = function (url, params) {
        console.log('url,', url);
        console.log('params,', params);
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/cdl/' + url,
            params: params,
            headers: { 'Content-Type': 'application/json' }
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.resolve(error);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/import/content/accountids/accountids.component.js":
/*!***************************************************************!*\
  !*** ./app/import/content/accountids/accountids.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.accountids', []).controller('ImportWizardAccountIDs', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "ImportWizardStore", "FieldDocument", "UnmappedFields", function ($state, $stateParams, $scope, $timeout, ResourceUtility, ImportWizardStore, FieldDocument, UnmappedFields) {
    var vm = this;

    angular.extend(vm, {
        state: ImportWizardStore.getAccountIdState(),
        fieldMapping: {},
        fieldMappings: FieldDocument.fieldMappings,
        fieldMappingsMap: {},
        AvailableFields: [],
        unavailableFields: [],
        idFieldMapping: {
            userField: "Id",
            mappedField: "Id",
            fieldType: "TEXT",
            mappedToLatticeField: true
        },
        mappedFieldMap: {
            account: 'AccountId'
        },
        UnmappedFieldsMappingsMap: {},
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        initialMapping: {},
        keyMap: {},
        saveMap: {}
    });

    vm.init = function () {
        vm.UnmappedFields = UnmappedFields;
        ImportWizardStore.setUnmappedFields(UnmappedFields);
        ImportWizardStore.setValidation('ids', false);

        vm.UnmappedFields.forEach(function (field) {
            vm.UnmappedFieldsMappingsMap[field.name] = field;
        });

        var userFields = [];
        vm.fieldMappings.forEach(function (fieldMapping, index) {
            vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            if (userFields.indexOf(fieldMapping.userField) === -1) {
                userFields.push(fieldMapping.userField);
                vm.AvailableFields.push(fieldMapping);
            }
            for (var i in vm.mappedFieldMap) {
                if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                    vm.fieldMapping[i] = fieldMapping.userField;
                }
            }
        });
        if (vm.savedFields) {
            vm.savedFields.forEach(function (fieldMapping, index) {
                vm.saveMap[fieldMapping.originalMappedField] = fieldMapping;

                vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
                if (userFields.indexOf(fieldMapping.userField) === -1) {
                    userFields.push(fieldMapping.userField);
                    vm.AvailableFields.push(fieldMapping);
                }
                for (var i in vm.mappedFieldMap) {
                    if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                        vm.fieldMapping[i] = fieldMapping.userField;
                    }
                }
            });
        }
    };

    vm.changeLatticeField = function (mapping, form) {
        var mapped = [];
        vm.unavailableFields = [];
        for (var i in mapping) {
            var key = i,
                userField = mapping[key],
                map = {
                userField: userField,
                mappedField: vm.mappedFieldMap[key],
                // removing the following 3 lines makes it update instead of append
                originalUserField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalUserField : vm.keyMap[vm.mappedFieldMap[key]],
                originalMappedField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalMappedField : vm.mappedFieldMap[key],
                append: true
            };
            mapped.push(map);
            if (userField) {
                vm.unavailableFields.push(userField);
            }
        }
        ImportWizardStore.setSaveObjects(mapped, $state.current.name);
        vm.checkValid(form);
    };

    vm.checkFieldsDelay = function (form) {
        var mapped = [];
        $timeout(function () {
            for (var i in vm.fieldMapping) {
                var key = i,
                    userField = vm.fieldMapping[key];

                vm.keyMap[vm.mappedFieldMap[key]] = userField;
                vm.initialMapping[key] = userField;
                if (userField) {
                    vm.unavailableFields.push(userField);
                }
            }
        }, 1);
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        ImportWizardStore.setValidation('ids', form.$valid);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/calendar/calendar.component.js":
/*!***********************************************************!*\
  !*** ./app/import/content/calendar/calendar.component.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.calendar', []).controller('ImportWizardCalendar', ["$state", "$stateParams", "$scope", "$timeout", "$sce", "$window", "NumberUtility", "ResourceUtility", "ImportWizardStore", "ImportWizardService", "Calendar", "FieldDocument", "StateHistory", "Modal", function ($state, $stateParams, $scope, $timeout, $sce, $window, NumberUtility, ResourceUtility, ImportWizardStore, ImportWizardService, Calendar, FieldDocument, StateHistory, Modal) {
    var vm = this,
        debug = false,
        // goto /import/calendar
    preventUnload = false,
        //!debug,
    year = new Date().getFullYear(),
        months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        picker;

    if (preventUnload) {
        $window.onbeforeunload = function (event) {
            var warning = 'Changes you made may not be saved. Are you sure?';
            event.returnValue = warning;
            return warning;
        };
    }

    $scope.$on("$destroy", function () {
        $window.onbeforeunload = null;
    });

    angular.extend(vm, {
        debug: debug,
        lastFrom: StateHistory.lastFrom(),
        saving: false,
        calendar: Calendar,
        selectedMonth: 1,
        selectedQuarter: '1',
        mode: '',
        calendarStore: {},
        dateParams: {},
        calendarOptions: {}
    });

    function initDatePicker() {
        var DATE_FORMAT = 'DD-MM-YYYY',
            selectedDateObj = {},
            field = document.getElementById('datepicker');

        picker = new Pikaday({
            format: DATE_FORMAT,
            theme: 'file-import-datepicker',
            minDate: new Date("01-01-" + year),
            maxDate: new Date("12-31-" + year),
            i18n: { // if you have any of these you have to have them all or it will error out
                previousMonth: 'Previous Month',
                nextMonth: 'Next Month',
                months: months,
                weekdays: weekdays,
                weekdaysShort: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
            },
            onSelect: function onSelect(date) {
                var dateParams = {
                    monthNumber: date.getMonth() + 1, // starts at 0 for some reason
                    month: months[date.getMonth()].substring(0, 3).toUpperCase(), // just use date.getMonth because of array 0 is good place to start
                    day: NumberUtility.PadNumber(date.getDate(), 2),
                    year: date.getFullYear()
                };
                vm.dateParams = dateParams;
                selectedDateObj = {
                    mode: "STARTING_DATE",
                    startingDate: dateParams.month + "-" + dateParams.day,
                    evaluationYear: dateParams.year,
                    longerMonth: vm.selectedQuarter

                };
                vm.setCalendar(selectedDateObj);
            }
        });
        field.parentNode.insertBefore(picker.el, field.nextSibling);
        if (vm.calendarOptions && vm.calendarOptions.mode === 'STARTING_DATE') {
            var startingDateMonth = 1;
            months.some(function (month, index) {
                if (vm.calendarOptions.month === month.substring(0, 3).toUpperCase()) {
                    startingDateMonth = index + 1;
                }
            });
            vm.dateParams.monthNumber = startingDateMonth;
            vm.dateParams.month = vm.calendarOptions.month;
            vm.dateParams.day = vm.calendarOptions.day;
            vm.selectedQuarter = vm.calendarOptions.longerMonth;

            picker.setDate(('0' + startingDateMonth).slice(-2) + '-' + vm.calendarOptions.day + '-' + year, true); // second param prevents onSelect callback //MM/DD/YYYY
            picker.gotoDate(new Date(year, startingDateMonth - 1));
        } else {
            picker.setDate('01-01-' + year, true); // second param prevents onSelect callback
            picker.gotoDate(new Date(year, 0));
        }
    }

    vm.selectMonth = function (date) {
        vm.selectedMonth = date;
        picker.gotoDate(new Date(year, date - 1));
    };

    vm.selectQuarter = function (quarter) {
        vm.selectedQuarter = quarter;
        if (vm.calendar && vm.calendar.longerMonth) {
            vm.calendar.longerMonth = vm.selectedQuarter;
            ImportWizardService.validateCalendar(vm.calendar).then(function (result) {
                vm.note = result.note;
            });
        }
    };

    vm.changeMode = function (mode) {
        if (vm.mode !== mode) {
            vm.mode = mode;
            vm.note = '';
            if (vm.calendarStore[mode]) {
                vm.setCalendar(vm.calendarStore[mode]);
            }
        }
    };

    vm.changeNth = function (nthMapping) {
        var nth = nthMapping.nth || '',
            day = nthMapping.day || '',
            month = nthMapping.month || '',
            selectedNthObj = {
            mode: "STARTING_DAY",
            startingDay: nth + "-" + day + "-" + month,
            longerMonth: vm.selectedQuarter
        };

        if (nth && day && month) {
            vm.setCalendar(selectedNthObj);
        }
    };

    vm.miniMarkdown = function (string) {
        if (!string) {
            return '';
        }
        var regex = /\*\*(\S(.*?\S)?)\*\*/gm,
            ret = string.replace(regex, '<strong>$1</strong>');
        return $sce.trustAsHtml(ret);
    };

    vm.setCalendar = function (obj) {
        ImportWizardStore.setCalendar(obj);
        ImportWizardStore.getCalendar().then(function (result) {
            vm.calendar = result;
            vm.calendarStore[vm.mode] = result;
            ImportWizardService.validateCalendar(vm.calendar).then(function (result) {
                vm.note = result && result.note ? result.note : '';
            });
        });
    };

    vm.saveCalendar = function () {
        vm.calendar.longerMonth = vm.selectedQuarter;
        ImportWizardService.validateCalendar(vm.calendar).then(function (result) {
            if (!result.errorCode) {
                Modal.warning({
                    name: 'calendar_warning',
                    title: "Business Calendar",
                    message: 'The Business Calendar will be updated throughout the tenant.',
                    confirmtext: "Yes, Update"
                }, vm.modalCallback);
            }
        });
    };

    vm.saveStandardCalendar = function () {
        Modal.warning({
            name: 'standard_calendar_warning',
            title: "Standard Calendar",
            message: 'The <strong>Standard</strong> Calendar will be used to build accurate time based analytics through out the tenant.',
            confirmtext: "Yes, Update"
        }, vm.modalCallbackStandardCalendar);
    };

    var parseCalendar = function parseCalendar(calendar) {
        if (!calendar) {
            return false;
        }
        var options = {
            mode: calendar.mode,
            longerMonth: calendar.longerMonth
        };

        if (calendar.mode === 'STARTING_DATE') {
            options.month = calendar.startingDate.split('-')[0];
            options.day = calendar.startingDate.split('-')[1];
        } else if (calendar.mode === 'STARTING_DAY') {
            options.nth = calendar.startingDate.split('-')[0];
            options.day = calendar.startingDate.split('-')[1];
            options.month = calendar.startingDate.split('-')[2];
        }
        vm.calendarOptions = options;
    };

    vm.useStandardCalendar = function () {
        vm.saveStandardCalendar();
        /**
         * If you wanted to change the calendar you'd do as below
         */

        // var mode = 'STARTING_DATE';
        // vm.mode = mode;
        // var date = new Date(),
        //     _day = '03',
        //     _month = '11',
        //     year = date.getFullYear(),
        //     day = parseInt(_day),
        //     dayText = _day,
        //     month = parseInt(_month),
        //     monthText = months[month - 1].substring(0,3).toUpperCase(),
        //     standardCalendarObj = {
        //         mode: mode,
        //         startingDate: monthText + '-' + dayText,
        //         evaluationYear: year, 
        //         longerMonth: '1',
        //     };
        // console.log(standardCalendarObj);
        // picker.setDate(monthText + '-' + dayText + '-' + year); // MM/DD/YYYY - second param prevents onSelect callback
        // picker.gotoDate(new Date(year, month - 1));  
    };

    vm.modalCallback = function (args) {
        var modal = Modal.get('calendar_warning');
        if ('cancel' === args.action) {
            Modal.modalRemoveFromDOM(modal, { name: 'calendar_warning' });
            // vm.toggleModal();
        } else if ('ok' === args.action) {
            modal.waiting(true);
            if (debug) {
                console.log('valid calendar, 10/10 woudl save', vm.lastFrom.name, vm.calendar);
            } else {
                vm.saving = true;
                ImportWizardService.saveCalendar(vm.calendar).then(function (result) {
                    Modal.modalRemoveFromDOM(modal, { name: 'calendar_warning' });
                    $state.go('home');
                });
            }
        }
    };

    vm.modalCallbackStandardCalendar = function (args) {
        var modal = Modal.get('standard_calendar_warning');
        if ('cancel' === args.action) {
            Modal.modalRemoveFromDOM(modal, { name: 'standard_calendar_warning' });
            // vm.toggleModal();
        } else if ('ok' === args.action) {
            modal.waiting(true);
            if (debug) {
                console.log('valid calendar, 10/10 woudl save', vm.lastFrom.name, vm.calendar);
            } else {
                vm.saving = true;
                // this just deletes the calendar, then standard calendar is used by default
                Modal.modalRemoveFromDOM(modal, { name: 'standard_calendar_warning' });
                ImportWizardService.deleteCalendar().then(function (result) {
                    console.log(result);
                    vm.saving = false;
                    $state.go('home');
                });
            }
        }
    };

    vm.init = function () {
        //parseCalendar(vm.calendar); // uncomment this to create a non-null state for existing calendars PLS-8479
        if (vm.calendarOptions.mode === 'STARTING_DAY') {
            vm.nthMapping.nth = vm.calendarOptions.nth;
            vm.nthMapping.day = vm.calendarOptions.day;
            vm.nthMapping.month = vm.calendarOptions.month;
            vm.selectedQuarter = vm.calendarOptions.longerMonth;
        }

        // if((preventUnload) && !FieldDocument) {
        //     $state.go('home.import.entry.product_hierarchy');
        //     return false;
        // }

        $timeout(initDatePicker, 0);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/contactids/contactids.component.js":
/*!***************************************************************!*\
  !*** ./app/import/content/contactids/contactids.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.contactids', []).controller('ImportWizardContactIDs', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "ImportWizardStore", "FieldDocument", "UnmappedFields", function ($state, $stateParams, $scope, $timeout, ResourceUtility, ImportWizardStore, FieldDocument, UnmappedFields) {
    var vm = this;

    angular.extend(vm, {
        state: ImportWizardStore.getAccountIdState(),
        fieldMapping: {},
        fieldMappings: FieldDocument.fieldMappings,
        fieldMappingsMap: {},
        AvailableFields: [],
        unavailableFields: [],
        idFieldMapping: { "userField": "Id", "mappedField": "Id", "fieldType": "TEXT", "mappedToLatticeField": true },
        mappedFieldMap: {
            contact: 'ContactId',
            account: 'AccountId'
        },
        UnmappedFieldsMappingsMap: {},
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        initialMapping: {},
        keyMap: {},
        saveMap: {}
    });

    vm.init = function () {
        vm.UnmappedFields = UnmappedFields;

        ImportWizardStore.setUnmappedFields(UnmappedFields);
        ImportWizardStore.setValidation('ids', false);

        var userFields = [];
        vm.fieldMappings.forEach(function (fieldMapping, index) {
            vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            if (userFields.indexOf(fieldMapping.userField) === -1) {
                userFields.push(fieldMapping.userField);
                vm.AvailableFields.push(fieldMapping);
            }
            for (var i in vm.mappedFieldMap) {
                if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                    vm.fieldMapping[i] = fieldMapping.userField;
                }
            }
        });
        if (vm.savedFields) {
            vm.savedFields.forEach(function (fieldMapping, index) {
                vm.saveMap[fieldMapping.originalMappedField] = fieldMapping;

                vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
                if (userFields.indexOf(fieldMapping.userField) === -1) {
                    userFields.push(fieldMapping.userField);
                    vm.AvailableFields.push(fieldMapping);
                }
                for (var i in vm.mappedFieldMap) {
                    if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                        vm.fieldMapping[i] = fieldMapping.userField;
                    }
                }
            });
        }
    };

    vm.changeLatticeField = function (mapping, form) {
        var mapped = [];
        vm.unavailableFields = [];
        for (var i in mapping) {
            var key = i,
                userField = mapping[key],
                map = {
                userField: userField,
                mappedField: vm.mappedFieldMap[key],
                // removing the following 3 lines makes it update instead of append
                originalUserField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalUserField : vm.keyMap[vm.mappedFieldMap[key]],
                originalMappedField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalMappedField : vm.mappedFieldMap[key],
                append: true
            };
            mapped.push(map);
            if (userField) {
                vm.unavailableFields.push(userField);
            }
        }
        ImportWizardStore.setSaveObjects(mapped, $state.current.name);
        vm.checkValid(form);
    };

    vm.checkFieldsDelay = function (form) {
        var mapped = [];
        $timeout(function () {
            for (var i in vm.fieldMapping) {
                var key = i,
                    userField = vm.fieldMapping[key];

                vm.keyMap[vm.mappedFieldMap[key]] = userField;
                vm.initialMapping[key] = userField;
                if (userField) {
                    vm.unavailableFields.push(userField);
                }
            }
        }, 1);
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        ImportWizardStore.setValidation('ids', form.$valid);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/content.index.js":
/*!*********************************************!*\
  !*** ./app/import/content/content.index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./accountids/accountids.component */ "./app/import/content/accountids/accountids.component.js");

__webpack_require__(/*! ./calendar/calendar.component */ "./app/import/content/calendar/calendar.component.js");

__webpack_require__(/*! ./contactids/contactids.component */ "./app/import/content/contactids/contactids.component.js");

__webpack_require__(/*! ./customfields/customfields.component */ "./app/import/content/customfields/customfields.component.js");

__webpack_require__(/*! ./jobstatus/jobstatus.component */ "./app/import/content/jobstatus/jobstatus.component.js");

__webpack_require__(/*! ./latticefields/latticefields.component */ "./app/import/content/latticefields/latticefields.component.js");

__webpack_require__(/*! ./producthierarchy/producthierarchy.component */ "./app/import/content/producthierarchy/producthierarchy.component.js");

__webpack_require__(/*! ./producthierarchyids/producthierarchyids.component */ "./app/import/content/producthierarchyids/producthierarchyids.component.js");

__webpack_require__(/*! ./productids/productids.component */ "./app/import/content/productids/productids.component.js");

__webpack_require__(/*! ./thirdpartyids/thirdpartyids.component */ "./app/import/content/thirdpartyids/thirdpartyids.component.js");

__webpack_require__(/*! ./transactionids/transactionids.component */ "./app/import/content/transactionids/transactionids.component.js");

/***/ }),

/***/ "./app/import/content/customfields/customfields.component.js":
/*!*******************************************************************!*\
  !*** ./app/import/content/customfields/customfields.component.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.customfields', []).controller('ImportWizardCustomFields', ["$state", "$stateParams", "$scope", "ResourceUtility", "ImportWizardStore", "FieldDocument", "mergedFieldDocument", "ImportUtils", "$transition$", function ($state, $stateParams, $scope, ResourceUtility, ImportWizardStore, FieldDocument, mergedFieldDocument, ImportUtils, $transition$) {
    var vm = this;
    var alreadySaved = ImportWizardStore.getSavedDocumentFields($state.current.name);
    if (alreadySaved) {
        FieldDocument.fieldMappings = alreadySaved;
    } else {
        var from = $transition$._targetState._definition.parent.name;
        FieldDocument.fieldMappings = ImportWizardStore.getSavedDocumentFields(from);
    }
    angular.extend(vm, {
        AvailableFields: [],
        ignoredFields: FieldDocument.ignoredFields || [],
        fieldMappings: FieldDocument.fieldMappings,
        mergedFields: mergedFieldDocument.main || mergedFieldDocument,
        fieldMappingIgnore: {},
        defaultsIgnored: []
    });

    vm.init = function () {
        vm.size = vm.AvailableFields.length;
        if (vm.mergedFields) {
            vm.mergedFields.forEach(function (item) {
                var appended = null;
                if (item.mappedField == null) {
                    if (mergedFieldDocument.appended) {
                        appended = mergedFieldDocument.appended.find(function (dup) {
                            return item.userField === dup.userField;
                        });
                    }
                    if (appended) {
                        vm.AvailableFields.push(appended);
                    } else {
                        vm.AvailableFields.push(item);
                    }
                }
            });
            setTimeout(function () {
                setDefaultIgnore();
            }, 0);
        }
    };

    function setDefaultIgnore() {
        vm.AvailableFields.forEach(function (element) {

            var ignore = ImportUtils.isFieldInSchema(ImportWizardStore.getEntityType(), element.userField, vm.fieldMappings);
            if (ignore == false) {
                ignore = ImportUtils.isFieldInSchema(ImportWizardStore.getEntityType(), element.userField, ImportWizardStore.fieldDocument.fieldMappings);
            }
            var name = element.userField;
            if (ignore === true && $scope.fieldMapping[name]) {
                // console.log(name);
                $scope.fieldMapping[name].ignore = true;
                element.defaultIgnored = true;
                vm.defaultsIgnored.push(element);
                vm.changeIgnore($scope.fieldMapping);
            }
        });
        setTimeout(function () {
            $scope.$apply();
        }, 100);
    }

    vm.toggleIgnores = function (checked, fieldMapping) {
        // angular.element('.ignoreCheckbox').prop('checked', checked);
        for (var i in fieldMapping) {
            var blocked = ImportUtils.isFieldInSchema(ImportWizardStore.getEntityType(), i, vm.fieldMappings);
            if (!blocked) {
                fieldMapping[i].ignore = checked;
            }
        }
        vm.changeIgnore(fieldMapping);
    };

    vm.changeIgnore = function (fieldMapping) {
        var ignoredFields = [];
        for (var i in fieldMapping) {
            var userField = i,
                item = fieldMapping[userField],
                ignore = item.ignore;
            if (ignore) {
                ignoredFields.push(userField);
            }
        }
        ImportWizardStore.setIgnore(ignoredFields);
    };

    vm.changeType = function (fieldMapping) {
        for (var i in fieldMapping) {
            var userField = i,
                item = fieldMapping[userField];

            ImportWizardStore.remapType(userField, item.fieldType);
            ImportWizardStore.userFieldsType[userField] = item.fieldType;
        }
    };

    vm.getNumberDroppedFields = function () {
        if (vm.defaultsIgnored && vm.defaultsIgnored != null) {
            return vm.defaultsIgnored.length;
        } else {
            return 0;
        }
    };

    vm.filterStandardList = function (input) {
        if (input.mappedField) {
            return false;
        }
        return true;
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/jobstatus/jobstatus.component.js":
/*!*************************************************************!*\
  !*** ./app/import/content/jobstatus/jobstatus.component.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.jobstatus', []).controller('ImportWizardJobStatus', ["$state", "$stateParams", "$scope", "ResourceUtility", "ImportWizardStore", function ($state, $stateParams, $scope, ResourceUtility, ImportWizardStore) {
    var vm = this;

    angular.extend(vm, {
        autoImport: true
    });

    vm.init = function () {
        //ImportWizardStore.setValidation('jobstatus', true);

        console.log(vm.autoImport);
    };

    vm.checkForAutoImport = function () {
        ImportWizardStore.setAutoImport(vm.autoImport);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/latticefields/latticefields.component.js":
/*!*********************************************************************!*\
  !*** ./app/import/content/latticefields/latticefields.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.latticefields', []).controller('ImportWizardLatticeFields', ["$state", "$stateParams", "$timeout", "$scope", "ResourceUtility", "ImportWizardService", "ImportWizardStore", "FieldDocument", "UnmappedFields", "Type", "MatchingFields", "AnalysisFields", function ($state, $stateParams, $timeout, $scope, ResourceUtility, ImportWizardService, ImportWizardStore, FieldDocument, UnmappedFields, Type, MatchingFields, AnalysisFields) {
    var vm = this;
    var alreadySaved = ImportWizardStore.getSavedDocumentFields($state.current.name);
    if (alreadySaved) {
        FieldDocument.fieldMappings = alreadySaved;
    }
    var makeList = function makeList(object) {
        var list = [];
        for (var i in object) {
            list.push(object[i]);
        }
        return list;
    };

    var matchingFieldsList = makeList(MatchingFields),
        analysisFieldsList = makeList(AnalysisFields),
        ignoredFieldLabel = '-- Unmapped Field --',
        noFieldLabel = '-- No Fields Available --';

    angular.extend(vm, {
        importType: Type,
        matchingFieldsList: angular.copy(matchingFieldsList),
        analysisFieldsList: angular.copy(analysisFieldsList),
        matchingFields: MatchingFields,
        analysisFields: AnalysisFields,
        initialized: false,
        matchingFieldsListMap: {},
        analysisFieldsListMap: {},
        csvFileName: ImportWizardStore.getCsvFileName(),
        ignoredFields: FieldDocument.ignoredFields || [],
        fieldMappings: FieldDocument.fieldMappings,
        ignoredFieldLabel: ignoredFieldLabel,
        UnmappedFieldsMap: {},
        matchingFieldMappings: {},
        analysisFieldMappings: {},
        availableFields: [],
        unavailableFields: [],
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        initialMapping: {},
        keyMap: {}
    });

    vm.latticeFieldsDescription = function (type) {
        switch (type) {
            case 'Account':
                return "Lattice uses several account fields that you should provide for each record, if possible. Please review the fields below to make sure everything is mapping correctly.";
            case 'Contacts':
                return "Lattice uses several contact fields that you should provide for each record, if possible. Please review the fields below to make sure everything is mapping correctly.";
            case 'Transactions':
                return "Please provide the following attributes Lattice platform should use to analyze your customer purchase behavior.  The data provided in this file will override the existing data.";
            case 'Products':
                return "Please provide product bundle names Lattice platform should use aggregate your products into logical grouping that marketings and sales team would like to use to run their plays and campaigns. The data provided in this file override existing data.";
        }
        return;
    };

    vm.init = function () {
        ImportWizardStore.setValidation('latticefields', false);

        vm.matchingFieldsArr = [];
        vm.matchingFields.forEach(function (matchingField) {
            vm.matchingFieldsArr.push(matchingField.name);
        });
        if (vm.savedFields) {
            vm.fieldMappings.forEach(function (fieldMapping) {
                vm.availableFields.push(fieldMapping);
            });
            vm.savedFields.forEach(function (fieldMapping) {
                if (fieldMapping.mappedField && vm.matchingFieldsArr.indexOf(fieldMapping.userField) != -1) {
                    vm.unavailableFields.push(fieldMapping.userField);
                }
                var fieldItem = vm.fieldMappings.find(function (item) {
                    return item.userField === fieldMapping.userField;
                });

                if (fieldMapping && fieldItem && fieldItem.mappedField) {
                    fieldItem.mappedField = fieldMapping.mappedField;
                }
            });
        } else {
            vm.fieldMappings.forEach(function (fieldMapping) {
                if (fieldMapping.mappedField && vm.matchingFieldsArr.indexOf(fieldMapping.userField) != -1) {
                    vm.unavailableFields.push(fieldMapping.userField);
                }
                vm.availableFields.push(fieldMapping);
            });
        }
    };

    /**
     * NOTE: The delimiter could cause a problem if the column name has : as separator 
     * @param {*} string 
     * @param {*} delimiter 
     */
    var makeObject = function makeObject(string, delimiter) {
        var delimiter = delimiter || '^/',
            string = string || '',
            pieces = string.split(delimiter);

        return {
            mappedField: pieces[0],
            userField: pieces[1] === "" ? fallbackUserField : pieces[1] // allows unmapping
        };
    };

    vm.ifAvailableFields = function () {
        return vm.unavailableFields.length >= vm.availableFields.length;
    };

    vm.changeLatticeField = function (mapping, form) {
        var _mapping = [];
        vm.unavailableFields = [];
        vm.ignoredFieldLabel = ignoredFieldLabel;

        for (var i in mapping) {
            var item = mapping[i],
                map = makeObject(item.userField);

            if (!map.userField) {
                /**
                 * to unmap find the userField using the original fieldMappings object
                 */
                var fieldItem = vm.fieldMappings.find(function (item) {
                    return item.mappedField === i;
                });
                if (fieldItem && fieldItem.userField) {
                    map.userField = fieldItem.userField;
                    map.mappedField = null;
                    map.unmap = true;
                }
            }

            if (item.userField) {
                vm.unavailableFields.push(map.userField);
            }

            if (map.userField) {
                _mapping.push(map);
            }
        }

        if (vm.unavailableFields.length >= vm.availableFields.length) {
            vm.ignoredFieldLabel = noFieldLabel;
        }
        ImportWizardStore.setSaveObjects(_mapping);
        vm.checkValid(form);
    };

    vm.checkFieldsDelay = function (form) {
        $timeout(function () {
            for (var i in vm.fieldMapping) {
                var key = i,
                    userField = vm.fieldMapping[key];

                vm.keyMap[key] = userField;
                vm.initialMapping[key] = userField;

                var fieldMapping = vm.fieldMapping[i],
                    fieldObj = makeObject(fieldMapping.userField);

                vm.unavailableFields.push(fieldObj.userField);
            }
        }, 1);
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        ImportWizardStore.setValidation('latticefields', form.$valid);
    };

    if (FieldDocument) {
        vm.init();
    }
}]);

/***/ }),

/***/ "./app/import/content/producthierarchy/producthierarchy.component.js":
/*!***************************************************************************!*\
  !*** ./app/import/content/producthierarchy/producthierarchy.component.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.producthierarchy', []).controller('ImportWizardProductHierarchy', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "ImportWizardStore", "FieldDocument", "UnmappedFields", function ($state, $stateParams, $scope, $timeout, ResourceUtility, ImportWizardStore, FieldDocument, UnmappedFields) {
    var vm = this;

    angular.extend(vm, {
        state: ImportWizardStore.getAccountIdState(),
        fieldMapping: {},
        fieldMappings: FieldDocument.fieldMappings,
        fieldMappingsMap: {},
        AvailableFields: [],
        unavailableFields: [],
        idFieldMapping: { "userField": "Id", "mappedField": "Id", "fieldType": "TEXT", "mappedToLatticeField": true },
        mappedFieldMap: {
            product_category: 'ProductCategory',
            product_family: 'ProductFamily',
            product_line: 'ProductLine'
        },
        UnmappedFieldsMappingsMap: {},
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        allSavedFields: ImportWizardStore.getSaveObjects(),
        initialMapping: {},
        keyMap: {},
        saveMap: {}
    });

    vm.init = function () {
        vm.UnmappedFields = UnmappedFields;

        ImportWizardStore.setUnmappedFields(UnmappedFields);
        ImportWizardStore.setValidation('ids', false);

        var userFields = [];
        vm.fieldMappings.forEach(function (fieldMapping, index) {
            vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            if (userFields.indexOf(fieldMapping.userField) === -1) {
                userFields.push(fieldMapping.userField);
                vm.AvailableFields.push(fieldMapping);
            }
            for (var i in vm.mappedFieldMap) {
                if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                    vm.fieldMapping[i] = fieldMapping.userField;
                }
            }
        });
        if (vm.savedFields) {
            vm.savedFields.forEach(function (fieldMapping, index) {
                vm.saveMap[fieldMapping.originalMappedField] = fieldMapping;

                vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
                if (fieldMapping.userField && userFields.indexOf(fieldMapping.userField) === -1) {
                    userFields.push(fieldMapping.userField);
                    vm.AvailableFields.push(fieldMapping);
                }
                for (var i in vm.mappedFieldMap) {
                    if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                        vm.fieldMapping[i] = fieldMapping.userField;
                    }
                }
            });
        }
        if (vm.allSavedFields && Object.keys(vm.allSavedFields).length) {
            for (var i in vm.allSavedFields) {
                var fieldMappings = vm.allSavedFields[i];

                fieldMappings.forEach(function (fieldMapping, index) {
                    if (fieldMapping.mappedField) {
                        vm.unavailableFields.push(fieldMapping.userField);
                    }
                });
            }

            var tmpMappedFields = [];
            for (var i in vm.mappedFieldMap) {
                tmpMappedFields.push(vm.mappedFieldMap[i]);
            }
            vm.fieldMappings.forEach(function (item) {
                if (item.mappedField && tmpMappedFields.indexOf(item.mappedField) === -1) {
                    vm.unavailableFields.push(item.userField);
                }
            });
        } else {
            vm.fieldMappings.forEach(function (fieldMapping, index) {
                if (fieldMapping.mappedField) {
                    vm.unavailableFields.push(fieldMapping.userField);
                }
            });
        }
    };

    vm.changeLatticeField = function (mapping, form) {
        var mapped = [],
            changedFields = [];

        vm.unavailableFields = [];
        for (var i in mapping) {
            var key = i,
                userField = mapping[key];
            var map = {
                userField: userField,
                mappedField: vm.mappedFieldMap[key],
                originalUserField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalUserField : vm.keyMap[vm.mappedFieldMap[key]],
                originalMappedField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalMappedField : vm.mappedFieldMap[key],
                append: false
            };
            mapped.push(map);
            changedFields.push(vm.mappedFieldMap[key]);
            if (userField) {
                vm.unavailableFields.push(userField);
            }
        }
        vm.fieldMappings.forEach(function (item) {
            if (item.mappedField && changedFields.indexOf(item.mappedField) === -1) {
                vm.unavailableFields.push(item.userField);
            }
        });

        ImportWizardStore.setSaveObjects(mapped, $state.current.name);
        vm.checkValid(form);
    };

    vm.checkFieldsDelay = function (form) {
        var mapped = [];
        $timeout(function () {
            for (var i in vm.fieldMapping) {
                var key = i,
                    userField = vm.fieldMapping[key];

                vm.keyMap[vm.mappedFieldMap[key]] = userField;
                vm.initialMapping[key] = userField;
            }
        }, 1);
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        ImportWizardStore.setValidation('producthierarchy', form.$valid);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/producthierarchyids/producthierarchyids.component.js":
/*!*********************************************************************************!*\
  !*** ./app/import/content/producthierarchyids/producthierarchyids.component.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.producthierarchyids', []).controller('ImportWizardProductHierarchyIDs', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "ImportWizardStore", "FieldDocument", "UnmappedFields", "Calendar", function ($state, $stateParams, $scope, $timeout, ResourceUtility, ImportWizardStore, FieldDocument, UnmappedFields, Calendar) {
    var vm = this;

    angular.extend(vm, {
        state: ImportWizardStore.getAccountIdState(),
        fieldMapping: {},
        fieldMappings: FieldDocument && FieldDocument.fieldMappings ? FieldDocument.fieldMappings : [],
        fieldMappingsMap: {},
        AvailableFields: [],
        unavailableFields: [],
        idFieldMapping: { "userField": "Id", "mappedField": "Id", "fieldType": "TEXT", "mappedToLatticeField": true },
        mappedFieldMap: {
            product: 'ProductId'
        },
        UnmappedFieldsMappingsMap: {},
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        initialMapping: {},
        keyMap: {},
        saveMap: {},
        showPage: false,
        calendar: Calendar
    });

    vm.init = function () {
        if (!FieldDocument) {
            $state.go('home.import.entry.product_hierarchy');
            return false;
            // } else if (!Calendar || (Calendar && Object.keys(Calendar).length === 0)) {
            //     $state.go('home.import.calendar');
            //     return false;
        }
        vm.showPage = true;

        vm.UnmappedFields = UnmappedFields;

        ImportWizardStore.setUnmappedFields(UnmappedFields);
        ImportWizardStore.setValidation('ids', false);

        var userFields = [];
        vm.fieldMappings.forEach(function (fieldMapping, index) {
            vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            if (userFields.indexOf(fieldMapping.userField) === -1) {
                userFields.push(fieldMapping.userField);
                vm.AvailableFields.push(fieldMapping);
            }
            for (var i in vm.mappedFieldMap) {
                if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                    vm.fieldMapping[i] = fieldMapping.userField;
                }
            }
        });
        if (vm.savedFields) {
            vm.savedFields.forEach(function (fieldMapping, index) {
                vm.saveMap[fieldMapping.originalMappedField] = fieldMapping;

                vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
                if (userFields.indexOf(fieldMapping.userField) === -1) {
                    userFields.push(fieldMapping.userField);
                    vm.AvailableFields.push(fieldMapping);
                }
                for (var i in vm.mappedFieldMap) {
                    if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                        vm.fieldMapping[i] = fieldMapping.userField;
                    }
                }
            });
        }
    };

    vm.changeLatticeField = function (mapping, form) {
        var mapped = [];
        vm.unavailableFields = [];
        for (var i in mapping) {
            var key = i,
                userField = mapping[key],
                map = {
                userField: userField,
                mappedField: vm.mappedFieldMap[key],
                // removing the following 3 lines makes it update instead of append
                originalUserField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalUserField : vm.keyMap[vm.mappedFieldMap[key]],
                originalMappedField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalMappedField : vm.mappedFieldMap[key],
                append: true
            };
            mapped.push(map);
            if (userField) {
                vm.unavailableFields.push(userField);
            }
        }
        ImportWizardStore.setSaveObjects(mapped, $state.current.name);
        vm.checkValid(form);
    };

    vm.checkFieldsDelay = function (form) {
        var mapped = [];
        $timeout(function () {
            for (var i in vm.fieldMapping) {
                var key = i,
                    userField = vm.fieldMapping[key];

                vm.keyMap[vm.mappedFieldMap[key]] = userField;
                vm.initialMapping[key] = userField;
                if (userField) {
                    vm.unavailableFields.push(userField);
                }
            }
        }, 1);
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        ImportWizardStore.setValidation('ids', form.$valid);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/productids/productids.component.js":
/*!***************************************************************!*\
  !*** ./app/import/content/productids/productids.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.productids', []).controller('ImportWizardProductIDs', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "ImportWizardStore", "FieldDocument", "UnmappedFields", "Calendar", function ($state, $stateParams, $scope, $timeout, ResourceUtility, ImportWizardStore, FieldDocument, UnmappedFields, Calendar) {
    var vm = this;

    angular.extend(vm, {
        state: ImportWizardStore.getAccountIdState(),
        fieldMapping: {},
        fieldMappings: FieldDocument.fieldMappings,
        fieldMappingsMap: {},
        AvailableFields: [],
        unavailableFields: [],
        idFieldMapping: { "userField": "Id", "mappedField": "Id", "fieldType": "TEXT", "mappedToLatticeField": true },
        mappedFieldMap: {
            product: 'ProductId'
        },
        UnmappedFieldsMappingsMap: {},
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        initialMapping: {},
        keyMap: {},
        saveMap: {},
        showPage: false,
        calendar: Calendar
    });

    vm.init = function () {
        if (!FieldDocument) {
            $state.go('home.import.entry.product_hierarchy');
            return false;
            // } else if (!Calendar || (Calendar && Object.keys(Calendar).length === 0)) {
            //     $state.go('home.import.calendar');
            //     return false;
        }
        vm.showPage = true;

        vm.UnmappedFields = UnmappedFields;

        ImportWizardStore.setUnmappedFields(UnmappedFields);
        ImportWizardStore.setValidation('ids', false);

        var userFields = [];
        vm.fieldMappings.forEach(function (fieldMapping, index) {
            vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            if (userFields.indexOf(fieldMapping.userField) === -1) {
                userFields.push(fieldMapping.userField);
                vm.AvailableFields.push(fieldMapping);
            }
            for (var i in vm.mappedFieldMap) {
                if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                    vm.fieldMapping[i] = fieldMapping.userField;
                }
            }
        });
        if (vm.savedFields) {
            vm.savedFields.forEach(function (fieldMapping, index) {
                vm.saveMap[fieldMapping.originalMappedField] = fieldMapping;

                vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
                if (userFields.indexOf(fieldMapping.userField) === -1) {
                    userFields.push(fieldMapping.userField);
                    vm.AvailableFields.push(fieldMapping);
                }
                for (var i in vm.mappedFieldMap) {
                    if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                        vm.fieldMapping[i] = fieldMapping.userField;
                    }
                }
            });
        }
    };

    vm.changeLatticeField = function (mapping, form) {
        var mapped = [];
        vm.unavailableFields = [];
        for (var i in mapping) {
            var key = i,
                userField = mapping[key],
                map = {
                userField: userField,
                mappedField: vm.mappedFieldMap[key],
                // removing the following 3 lines makes it update instead of append
                originalUserField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalUserField : vm.keyMap[vm.mappedFieldMap[key]],
                originalMappedField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalMappedField : vm.mappedFieldMap[key],
                append: true
            };
            mapped.push(map);
            if (userField) {
                vm.unavailableFields.push(userField);
            }
        }
        ImportWizardStore.setSaveObjects(mapped, $state.current.name);
        vm.checkValid(form);
    };

    vm.checkFieldsDelay = function (form) {
        var mapped = [];
        $timeout(function () {
            for (var i in vm.fieldMapping) {
                var key = i,
                    userField = vm.fieldMapping[key];

                vm.keyMap[vm.mappedFieldMap[key]] = userField;
                vm.initialMapping[key] = userField;
                if (userField) {
                    vm.unavailableFields.push(userField);
                }
            }
        }, 1);
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        ImportWizardStore.setValidation('ids', form.$valid);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/thirdpartyids/thirdpartyids.component.js":
/*!*********************************************************************!*\
  !*** ./app/import/content/thirdpartyids/thirdpartyids.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.thirdpartyids', []).controller('ImportWizardThirdPartyIDs', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "ImportWizardStore", "Identifiers", "FieldDocument", function ($state, $stateParams, $scope, $timeout, ResourceUtility, ImportWizardStore, Identifiers, FieldDocument) {
    var vm = this;
    var alreadySaved = ImportWizardStore.getSavedDocumentFields($state.current.name);
    if (alreadySaved) {
        FieldDocument.fieldMappings = alreadySaved;
    }

    angular.extend(vm, {
        identifliers: Identifiers,
        fieldMappings: FieldDocument.fieldMappings,
        fieldMapping: ImportWizardStore.getThirdpartyidFields().map,
        fields: ImportWizardStore.getThirdpartyidFields().fields,
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        entityType: ImportWizardStore.entityType,
        availableFields: [],
        unavailableFields: [],
        unavailableTypes: [],
        hiddenFields: [],
        field: { name: '', types: ['MAP', 'CRM',
            //'ERP',
            'OTHER'], field: '' }
    });

    vm.init = function () {
        vm.fieldMappings.forEach(function (fieldMapping) {
            vm.availableFields.push(fieldMapping.userField);
        });
    };

    vm.hiddenFilter = function (item) {
        if (vm.hiddenFields.indexOf(item) !== -1) {
            return false;
        }
        return true;
    };

    vm.changeLatticeField = function (mapping, form) {
        vm.unavailableFields = [];
        vm.unavailableTypes = [];
        mapping.forEach(function (item) {
            //vm.unavailableFields.push(item.userField);
            vm.unavailableTypes.push(item.userField);
            item.append = true;
        });

        ImportWizardStore.setSaveObjects(mapping);
        ImportWizardStore.setThirdpartyidFields(vm.fields, mapping);
        vm.checkValid(form);
    };

    vm.addIdentifier = function () {
        vm.fields.push(vm.field);
    };

    vm.removeIdentifier = function (index, form) {
        vm.fieldMapping.splice(index, 1);
        vm.fields.splice(index, 1);
        vm.checkValid(form);
    };

    var validateMapping = function validateMapping(mapping) {
        var keys = [],
            valid = true;
        mapping.forEach(function (item) {
            var type = item.cdlExternalSystemType,
                name = item.mappedField ? item.mappedField.toLowerCase() : '',
                key = name + type;
            valid = keys.indexOf(key) === -1;
            keys.push(key);
        });
        return valid;
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        $timeout(function () {
            if (!validateMapping(vm.fieldMapping)) {
                ImportWizardStore.setValidation('thirdpartyids', false);
            } else if (!vm.fieldMapping.length) {
                ImportWizardStore.setValidation('thirdpartyids', true);
            } else {
                ImportWizardStore.setValidation('thirdpartyids', form.$valid);
            }
        }, 0);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/content/transactionids/transactionids.component.js":
/*!***********************************************************************!*\
  !*** ./app/import/content/transactionids/transactionids.component.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.wizard.transactionids', []).controller('ImportWizardTransactionIDs', ["$state", "$stateParams", "$scope", "$timeout", "ResourceUtility", "ImportWizardStore", "FieldDocument", "UnmappedFields", function ($state, $stateParams, $scope, $timeout, ResourceUtility, ImportWizardStore, FieldDocument, UnmappedFields) {
    var vm = this;

    angular.extend(vm, {
        state: ImportWizardStore.getAccountIdState(),
        fieldMapping: {},
        fieldMappings: FieldDocument.fieldMappings,
        fieldMappingsMap: {},
        AvailableFields: [],
        unavailableFields: [],
        idFieldMapping: { "userField": "Id", "mappedField": "Id", "fieldType": "TEXT", "mappedToLatticeField": true },
        mappedFieldMap: {
            product: 'ProductId',
            contact: 'ContactId',
            account: 'AccountId'
        },
        UnmappedFieldsMappingsMap: {},
        savedFields: ImportWizardStore.getSaveObjects($state.current.name),
        initialMapping: {},
        keyMap: {},
        saveMap: {}
    });

    vm.init = function () {
        vm.UnmappedFields = UnmappedFields;

        ImportWizardStore.setUnmappedFields(UnmappedFields);
        ImportWizardStore.setValidation('ids', false);

        var userFields = [];
        vm.fieldMappings.forEach(function (fieldMapping, index) {
            vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
            if (userFields.indexOf(fieldMapping.userField) === -1) {
                userFields.push(fieldMapping.userField);
                vm.AvailableFields.push(fieldMapping);
            }
            for (var i in vm.mappedFieldMap) {
                if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                    vm.fieldMapping[i] = fieldMapping.userField;
                }
            }
        });
        if (vm.savedFields) {
            vm.savedFields.forEach(function (fieldMapping, index) {
                vm.saveMap[fieldMapping.originalMappedField] = fieldMapping;

                vm.fieldMappingsMap[fieldMapping.mappedField] = fieldMapping;
                if (userFields.indexOf(fieldMapping.userField) === -1) {
                    userFields.push(fieldMapping.userField);
                    vm.AvailableFields.push(fieldMapping);
                }
                for (var i in vm.mappedFieldMap) {
                    if (fieldMapping.mappedField == vm.mappedFieldMap[i]) {
                        vm.fieldMapping[i] = fieldMapping.userField;
                    }
                }
            });
        }
    };

    vm.changeLatticeField = function (mapping, form) {
        var mapped = [];
        vm.unavailableFields = [];
        for (var i in mapping) {
            var key = i,
                userField = mapping[key],
                map = {
                userField: userField,
                mappedField: vm.mappedFieldMap[key],
                // removing the following 3 lines makes it update instead of append
                originalUserField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalUserField : vm.keyMap[vm.mappedFieldMap[key]],
                originalMappedField: vm.saveMap[vm.mappedFieldMap[key]] ? vm.saveMap[vm.mappedFieldMap[key]].originalMappedField : vm.mappedFieldMap[key],
                append: true
            };
            mapped.push(map);
            if (userField) {
                vm.unavailableFields.push(userField);
            }
        }
        ImportWizardStore.setSaveObjects(mapped, $state.current.name);
        vm.checkValid(form);
    };

    vm.checkFieldsDelay = function (form) {
        var mapped = [];
        $timeout(function () {
            for (var i in vm.fieldMapping) {
                var key = i,
                    userField = vm.fieldMapping[key];

                vm.keyMap[vm.mappedFieldMap[key]] = userField;
                vm.initialMapping[key] = userField;
                if (userField) {
                    vm.unavailableFields.push(userField);
                }
            }
        }, 1);
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        ImportWizardStore.setValidation('ids', form.$valid);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/entry/accountfields/accountfields.component.js":
/*!*******************************************************************!*\
  !*** ./app/import/entry/accountfields/accountfields.component.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.accountfields', []).controller('ImportEntryAccountFields', ["$state", "$stateParams", "$scope", "ResourceUtility", "ImportWizardStore", function ($state, $stateParams, $scope, ResourceUtility, ImportWizardStore) {
    var vm = this;

    angular.extend(vm, {});

    vm.init = function () {};

    vm.init();
}]);

/***/ }),

/***/ "./app/import/entry/accounts/accounts.component.js":
/*!*********************************************************!*\
  !*** ./app/import/entry/accounts/accounts.component.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.accounts', []).component('accountsContent', {
    templateUrl: 'app/import/entry/accounts/accounts.component.html',
    controller: ["$q", "$scope", "$stateParams", "ResourceUtility", function controller($q, $scope, $stateParams, ResourceUtility) {

        var vm = this;

        angular.extend(vm, {
            ResourceUtility: ResourceUtility,
            action: $stateParams.action
        });

        vm.$onInit = function () {};
    }]
});

/***/ }),

/***/ "./app/import/entry/contactfields/contactfields.component.js":
/*!*******************************************************************!*\
  !*** ./app/import/entry/contactfields/contactfields.component.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.contactfields', []).controller('ImportEntryContactFields', ["$state", "$stateParams", "$scope", "ResourceUtility", "ImportWizardStore", function ($state, $stateParams, $scope, ResourceUtility, ImportWizardStore) {
    var vm = this;

    angular.extend(vm, {});

    vm.init = function () {};

    vm.init();
}]);

/***/ }),

/***/ "./app/import/entry/contacts/contacts.component.js":
/*!*********************************************************!*\
  !*** ./app/import/entry/contacts/contacts.component.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.contacts', []).component('contactsContent', {
    templateUrl: 'app/import/entry/contacts/contacts.component.html',
    controller: ["$q", "$scope", "$stateParams", "ResourceUtility", function controller($q, $scope, $stateParams, ResourceUtility) {

        var vm = this;

        angular.extend(vm, {
            ResourceUtility: ResourceUtility,
            action: $stateParams.action
        });

        vm.$onInit = function () {};
    }]
});

/***/ }),

/***/ "./app/import/entry/eloquoa/eloquoa.component.js":
/*!*******************************************************!*\
  !*** ./app/import/entry/eloquoa/eloquoa.component.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.eloquoa', []).controller('ImportEntryEloquoa', ["$state", "$stateParams", "$scope", "ResourceUtility", "ImportWizardStore", function ($state, $stateParams, $scope, ResourceUtility, ImportWizardStore) {
    var vm = this;

    angular.extend(vm, {});

    vm.init = function () {};

    vm.init();
}]);

/***/ }),

/***/ "./app/import/entry/entry.component.js":
/*!*********************************************!*\
  !*** ./app/import/entry/entry.component.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry', ['lp.import.entry.accounts', 'lp.import.entry.contacts', 'lp.import.entry.productpurchases', 'lp.import.entry.productbundles', 'lp.import.entry.producthierarchy']).controller('ImportEntry', ["$state", "$stateParams", "$scope", "FeatureFlagService", "ResourceUtility", "ImportWizardStore", "ImportWizardService", "ImportStore", "AuthorizationUtility", "Banner", function ($state, $stateParams, $scope, FeatureFlagService, ResourceUtility, ImportWizardStore, ImportWizardService, ImportStore, AuthorizationUtility, Banner) {
    var vm = this,
        flags = FeatureFlagService.Flags();

    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        params: {
            infoTemplate: "<div class='row divider'><div class='twelve columns'><h4>What is a Training File?</h4><p>A training set is a CSV file with records of your historical successes. It is used to build your ideal customer profile by leveraging the Lattice Predictive Insights platform. Ideal training set should have at least 7,000 accounts, 150 success events and a conversion rate of less than 10%.</p></div></div><div class='row'><div class='six columns'><h4>Account Model:</h4><p>Upload a CSV file with accounts</p><p>Required: Id (any unique value for each record), Website (domain of company website), Event (1 for success, 0 otherwise)</p><p>Optional fields: Additional internal attributes about the accounts you would like to use as predictive attributes.</p></div><div class='six columns'><h4>Lead Model:</h4><p>Upload a CSV file with leads</p><p>Required: Id (any unique value for each record), Email, Event (1 for success, 0 otherwise)</p><p>Optional: Lead engagement data can be used as predictive attributes. Below are supported attributes:<ul><li>Marketo (4 week counts): Email Bounces (Soft), Email Clicks, Email Opens, Email Unsubscribes, Form Fills, Web-Link Clicks, Webpage Visits, Interesting Moments</li><li>Eloqua (4 week counts): Email Open, Email Send, Email Click Though, Email Subscribe, Email Unsubscribe, Form Submit, Web Visit, Campaign Membership, External Activity</li></ul></p></div></div>",
            compressed: true,
            importError: false,
            invalidcolumns: [],
            importErrorMsg: '',
            editing: $stateParams.editing,
            importOnly: $stateParams.importOnly
        },
        uploaded: false,
        goState: null,
        next: false,
        showProductBundleImport: false,
        showProductHierarchyImport: false,
        showProductPurchaseImport: false
    });

    vm.init = function () {

        var templateAction = $stateParams.action ? $stateParams.action : ImportWizardStore.getTemplateAction();

        ImportWizardStore.setTemplateAction(templateAction);

        var flowType = "";
        switch (templateAction) {
            case "create-template":
                {
                    flowType = "Create";
                    break;
                }
            case "edit-template":
                {
                    flowType = "Edit";
                    break;
                }
            case "import-data":
                {
                    flowType = "Import";
                    break;
                }
        }
        vm.formType = flowType;
        vm.nextButtonText = vm.formType == 'Import' ? 'Import File' : 'Next, Field Mappings';

        vm.displayType = $stateParams.type ? $stateParams.type : ImportWizardStore.getDisplayType();
        ImportWizardStore.setDisplayType(vm.displayType);

        // ImportWizardStore.clear();

        ImportWizardStore.setPostBody($stateParams.data);

        vm.setFeatureFlagPermissions();
        vm.changingEntity = false;
        var state = $state.current.name;
        switch (state) {
            case 'home.import.entry.accounts':
                vm.changeEntityType('Account', 'accounts');
                break;
            case 'home.import.entry.contacts':
                vm.changeEntityType('Contact', 'contacts');
                break;
            case 'home.import.entry.productpurchases':
                vm.changeEntityType('Transaction', 'productpurchases');
                break;
            case 'home.import.entry.productbundles':
                vm.changeEntityType('Product', 'productbundles', 'BundleSchema');
                break;
            case 'home.import.entry.producthierarchy':
                vm.changeEntityType('Product', 'producthierarchy', 'HierarchySchema');
                break;
        }
    };

    vm.getDefaultMessage = function () {
        return "your-" + vm.goState + ".csv";
    };

    vm.changeEntityType = function (type, goState, feedType) {
        vm.goState = goState || type.toLowerCase();
        ImportWizardStore.setEntityType(type);
        ImportWizardStore.setFeedType(feedType || null);
        if (vm.params.scope) {
            vm.params.scope.cancel();
        }
        vm.next = false;
    };

    function getInvalidColumns(columns) {
        var invalid = columns.filter(function (element) {
            if (element.includes('^/')) {
                return true;
            }
        });
        return invalid;
    }

    vm.closeWarning = function () {
        vm.next = false;
        vm.invalidcolumns = [];
        if (vm.params.scope) {
            vm.params.scope.cancel();
        }
    };

    vm.fileLoad = function (headers) {
        vm.next = false;
        vm.invalidcolumns = [];
        var columns = headers.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/),
            nonDuplicatedColumns = [],
            duplicatedColumns = [],
            schemaSuggestion;

        vm.params.importError = false;

        vm.params.infoTemplate = "<p>Please prepare a CSV file with the data you wish to import, using the sample CSV file above as a guide.</p><p>You will be asked to map your fields to the Lattice system, so you may want to keep the uploaded file handy for the next few steps.</p>";
        vm.invalidcolumns = getInvalidColumns(columns);
        if (columns.length > 0) {
            for (var i = 0; i < columns.length; i++) {
                if (nonDuplicatedColumns.indexOf(columns[i]) < 0) {
                    nonDuplicatedColumns.push(columns[i]);
                } else {
                    duplicatedColumns.push(columns[i]);
                }
            }
            if (duplicatedColumns.length != 0) {
                vm.params.importError = true;
                Banner.error({ message: "Duplicate column(s) detected: '[" + duplicatedColumns + "]'" });
            }

            var hasWebsite = columns.indexOf('Website') != -1 || columns.indexOf('"Website"') != -1,
                hasEmail = columns.indexOf('Email') != -1 || columns.indexOf('"Email"') != -1;

            // do stuff
        }
    };

    vm.fileSelect = function (fileName) {
        setTimeout(function () {
            vm.uploaded = false;
        }, 25);
    };

    vm.fileDone = function (result) {
        vm.uploaded = true;

        if (result.Result && vm.invalidcolumns.length === 0) {
            vm.fileName = result.Result.name;
            vm.next = vm.goState;
        }
    };

    vm.fileCancel = function () {
        var xhr = ImportStore.Get('cancelXHR', true);

        if (xhr) {
            xhr.abort();
        }
    };

    vm.click = function () {
        if (vm.formType != 'Import') {
            $state.go('home.import.data.' + vm.goState + '.ids');
        } else {
            var fileName = ImportWizardStore.getCsvFileName(),
                importOnly = true,
                autoImportData = ImportWizardStore.getAutoImport(),
                postBody = $stateParams.data;

            ImportWizardService.templateDataIngestion(fileName, importOnly, autoImportData, postBody).then(function () {
                $state.go('home.importtemplates');
            });
        }
    };

    vm.setFeatureFlagPermissions = function () {
        var featureFlags = {};
        featureFlags[flags.VDB_MIGRATION] = false;
        featureFlags[flags.ENABLE_FILE_IMPORT] = true;

        vm.showProductPurchaseImport = AuthorizationUtility.checkFeatureFlags(featureFlags) && FeatureFlagService.FlagIsEnabled(flags.ENABLE_PRODUCT_PURCHASE_IMPORT);
        vm.showProductBundleImport = AuthorizationUtility.checkFeatureFlags(featureFlags) && FeatureFlagService.FlagIsEnabled(flags.ENABLE_PRODUCT_BUNDLE_IMPORT);
        vm.showProductHierarchyImport = AuthorizationUtility.checkFeatureFlags(featureFlags) && FeatureFlagService.FlagIsEnabled(flags.ENABLE_PRODUCT_HIERARCHY_IMPORT);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/import/entry/entry.index.js":
/*!*****************************************!*\
  !*** ./app/import/entry/entry.index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./accountfields/accountfields.component */ "./app/import/entry/accountfields/accountfields.component.js");

__webpack_require__(/*! ./accounts/accounts.component */ "./app/import/entry/accounts/accounts.component.js");

__webpack_require__(/*! ./contactfields/contactfields.component */ "./app/import/entry/contactfields/contactfields.component.js");

__webpack_require__(/*! ./contacts/contacts.component */ "./app/import/entry/contacts/contacts.component.js");

__webpack_require__(/*! ./eloquoa/eloquoa.component */ "./app/import/entry/eloquoa/eloquoa.component.js");

__webpack_require__(/*! ./productbundles/productbundles.component */ "./app/import/entry/productbundles/productbundles.component.js");

__webpack_require__(/*! ./producthierarchy/producthierarchy.component */ "./app/import/entry/producthierarchy/producthierarchy.component.js");

__webpack_require__(/*! ./productpurchases/productpurchases.component */ "./app/import/entry/productpurchases/productpurchases.component.js");

__webpack_require__(/*! ./entry.component */ "./app/import/entry/entry.component.js");

/***/ }),

/***/ "./app/import/entry/productbundles/productbundles.component.js":
/*!*********************************************************************!*\
  !*** ./app/import/entry/productbundles/productbundles.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.productbundles', []).component('productBundlesContent', {
    templateUrl: 'app/import/entry/productbundles/productbundles.component.html',
    controller: ["$q", "$scope", "$stateParams", "ResourceUtility", function controller($q, $scope, $stateParams, ResourceUtility) {

        var vm = this;

        angular.extend(vm, {
            ResourceUtility: ResourceUtility,
            action: $stateParams.action
        });

        vm.$onInit = function () {};
    }]
});

/***/ }),

/***/ "./app/import/entry/producthierarchy/producthierarchy.component.js":
/*!*************************************************************************!*\
  !*** ./app/import/entry/producthierarchy/producthierarchy.component.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.producthierarchy', []).component('productHierarchyContent', {
    templateUrl: 'app/import/entry/producthierarchy/producthierarchy.component.html',
    controller: ["$q", "$scope", "$stateParams", "ResourceUtility", function controller($q, $scope, $stateParams, ResourceUtility) {

        var vm = this;

        angular.extend(vm, {
            ResourceUtility: ResourceUtility,
            action: $stateParams.action
        });

        vm.$onInit = function () {};
    }]
});

/***/ }),

/***/ "./app/import/entry/productpurchases/productpurchases.component.js":
/*!*************************************************************************!*\
  !*** ./app/import/entry/productpurchases/productpurchases.component.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.import.entry.productpurchases', []).component('productPurchasesContent', {
    templateUrl: 'app/import/entry/productpurchases/productpurchases.component.html',
    controller: ["$q", "$scope", "$stateParams", "ResourceUtility", function controller($q, $scope, $stateParams, ResourceUtility) {

        var vm = this;

        angular.extend(vm, {
            ResourceUtility: ResourceUtility,
            action: $stateParams.action
        });

        vm.$onInit = function () {};
    }]
});

/***/ }),

/***/ "./app/import/import.index.js":
/*!************************************!*\
  !*** ./app/import/import.index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./content/content.index */ "./app/import/content/content.index.js");

__webpack_require__(/*! ./entry/entry.index */ "./app/import/entry/entry.index.js");

__webpack_require__(/*! ./templates/templates.router */ "./app/import/templates/templates.router.js");

__webpack_require__(/*! ./import.routes */ "./app/import/import.routes.js");

__webpack_require__(/*! ./import.service */ "./app/import/import.service.js");

/***/ }),

/***/ "./app/import/import.routes.js":
/*!*************************************!*\
  !*** ./app/import/import.routes.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./import.utils */ "./app/import/import.utils.js");

angular.module('lp.import', ['common.wizard', 'lp.import.entry', 'lp.import.calendar', 'lp.import.wizard.thirdpartyids', 'lp.import.wizard.latticefields', 'lp.import.wizard.jobstatus', 'lp.import.wizard.customfields', 'lp.import.wizard.accountids', 'lp.import.wizard.contactids', 'lp.import.wizard.transactionids', 'lp.import.wizard.productids', 'lp.import.wizard.producthierarchyids', 'lp.import.wizard.producthierarchy', 'lp.import.utils', 'mainApp.core.utilities.AuthorizationUtility']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.import', {
        url: '/import',
        onEnter: ['AuthorizationUtility', 'FeatureFlagService', function (AuthorizationUtility, FeatureFlagService) {
            var flags = FeatureFlagService.Flags();
            var featureFlagsConfig = {};
            featureFlagsConfig[flags.VDB_MIGRATION] = false;
            featureFlagsConfig[flags.ENABLE_FILE_IMPORT] = true;

            AuthorizationUtility.redirectIfNotAuthorized(AuthorizationUtility.excludeExternalUser, featureFlagsConfig, 'home');
        }],
        redirectTo: 'home.import.entry.accounts'
    }).state('home.import.calendar', {
        url: '/calendar',
        resolve: {
            FieldDocument: ["$q", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, ImportWizardService, ImportWizardStore) {
                return false;
                var deferred = $q.defer();
                ImportWizardService.GetFieldDocument(ImportWizardStore.getCsvFileName(), ImportWizardStore.getEntityType()).then(function (result) {
                    ImportWizardStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            Calendar: ["$q", "ImportWizardService", "ImportWizardStore", function Calendar($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardStore.getCalendar().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'main@': {
                controller: 'ImportWizardCalendar',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/calendar/calendar.component.html'
            }
        }
    }).state('home.import.entry', {
        url: '/entry',
        params: {
            action: null,
            type: null,
            data: null
        },
        views: {
            'main@': {
                templateUrl: 'app/import/entry/entry.component.html'
            }
        },
        redirectTo: 'home.import.entry.accounts'
    }).state('home.import.entry.accounts', {
        url: '/accounts',
        onEnter: ["ImportWizardStore", function onEnter(ImportWizardStore) {
            ImportWizardStore.fieldDocument = {};
        }],
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Data Processing & Analysis'
        },
        views: {
            'entry_content@home.import.entry': 'accountsContent'
        }
    }).state('home.import.entry.contacts', {
        url: '/contacts',
        onEnter: ["ImportWizardStore", function onEnter(ImportWizardStore) {
            ImportWizardStore.fieldDocument = {};
        }],
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Data Processing & Analysis'
        },
        views: {
            'entry_content@home.import.entry': 'contactsContent'
        }
    }).state('home.import.entry.productpurchases', {
        url: '/productpurchases',
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Data Processing & Analysis'
        },
        views: {
            'entry_content@home.import.entry': 'productPurchasesContent'
        }
    }).state('home.import.entry.productbundles', {
        url: '/productbundles',
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Data Processing & Analysis'
        },
        views: {
            'entry_content@home.import.entry': 'productBundlesContent'
        }
    }).state('home.import.entry.producthierarchy', {
        url: '/producthierarchy',
        params: {
            pageIcon: 'ico-analysis',
            pageTitle: 'Data Processing & Analysis'
        },
        views: {
            'entry_content@home.import.entry': 'productHierarchyContent'
        }
    }).state('home.import.data', {
        url: '/data',
        resolve: {
            WizardHeaderTitle: function WizardHeaderTitle() {
                return 'Import';
            },
            WizardContainerId: function WizardContainerId() {
                return 'data-import';
            }
        },
        views: {
            'main@': {
                controller: 'ImportWizard',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/wizard.component.html'
            }
        }
    }).state('home.import.data.accounts', {
        url: '/accounts',
        resolve: {
            WizardValidationStore: ["ImportWizardStore", function WizardValidationStore(ImportWizardStore) {
                return ImportWizardStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'import.data';
            },
            WizardProgressItems: ["$stateParams", "ImportWizardStore", function WizardProgressItems($stateParams, ImportWizardStore) {
                var entityType = ImportWizardStore.getEntityType(),
                    wizard_steps = $stateParams.wizard_steps || (entityType || '').toLowerCase();

                return ImportWizardStore.getWizardProgressItems(wizard_steps || 'account');
            }],
            WizardControlsOptions: function WizardControlsOptions() {
                return {
                    backState: 'home.import.entry.accounts',
                    nextState: 'home.importtemplates'
                };
            }
        },
        views: {
            'wizard_progress': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        }
    }).state('home.import.data.accounts.ids', {
        url: '/accountids',
        onEnter: ["$state", "ImportWizardStore", "FieldDocument", function onEnter($state, ImportWizardStore, FieldDocument) {
            ImportWizardStore.setSavedDocumentInState('home.import.data.accounts', FieldDocument.fieldMappings);
            ImportWizardStore.setSavedDocumentInState('home.import.data.accounts.ids', FieldDocument.fieldMappings);
        }],
        resolve: {
            FieldDocument: ["$q", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();
                ImportWizardService.GetFieldDocument(ImportWizardStore.getCsvFileName(), ImportWizardStore.getEntityType()).then(function (result) {
                    ImportWizardStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardService.GetSchemaToLatticeFields(null, ImportWizardStore.getEntityType()).then(function (result) {
                    deferred.resolve(result['Account']);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardAccountIDs',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/accountids/accountids.component.html'
            }
        }
    }).state('home.import.data.accounts.ids.thirdpartyids', {
        url: '/thirdpartyids',
        resolve: {
            Identifiers: function Identifiers() {
                return [{ name: 'CRM ID', value: '' }, { name: 'MAP ID', value: '' }];
            },
            FieldDocument: ["$q", "ImportWizardStore", function FieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.getFieldDocument();
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardThirdPartyIDs',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/thirdpartyids/thirdpartyids.component.html'
            }
        }
    }).state('home.import.data.accounts.ids.thirdpartyids.latticefields', {
        url: '/latticefields',
        onEnter: ["$state", "ImportWizardStore", "$transition$", function onEnter($state, ImportWizardStore, $transition$) {
            var from = $transition$._targetState._definition.parent.name;
            if (from.includes('thirdpartyids')) {
                // ImportWizardStore.removeFromState('home.import.data.accounts.ids.thirdpartyids.latticefields');
                var copy = ImportWizardStore.getSavedDocumentCopy('home.import.data.accounts.ids.thirdpartyids');
                ImportWizardStore.setSavedDocumentInState('home.import.data.accounts.ids.thirdpartyids.latticefields', copy);
            }
        }],
        resolve: {
            FieldDocument: ["$q", "ImportWizardStore", function FieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.getFieldDocument();
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                return ImportWizardStore.getUnmappedFields();
            }],
            Type: function Type() {
                return "Account";
            },
            MatchingFields: function MatchingFields() {
                return [{ name: 'Website' }, { name: 'DUNS', displayName: 'D-U-N-S' }, { name: 'CompanyName', displayName: 'Company Name' }, { name: 'PhoneNumber', displayName: 'Phone Number' }, { name: 'City' }, { name: 'Country' }, { name: 'State' }, { name: 'PostalCode', displayName: 'Postal Code' }];
            },
            AnalysisFields: function AnalysisFields() {
                return [{ name: 'Type' }, { name: 'Industry' }, { name: 'SpendAnalyticsSegment', displayName: 'Account Business Segment' }, { name: 'AnnualRevenue', displayName: 'Estimated Yearly Revenue' }, { name: 'Longitude' }, { name: 'AnnualRevenueCurrency', displayName: 'Estimated Yearly Revenue Currency' }, { name: 'Latitude'
                    //{ name: 'NumberOfEmployees', displayName: 'Number Of Employees' },
                }];
            }
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardLatticeFields',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/latticefields/latticefields.component.html'
            }
        }
    }).state('home.import.data.accounts.ids.thirdpartyids.latticefields.customfields', {
        url: '/customfields',
        onExit: ["$transition$", "ImportWizardStore", function onExit($transition$, ImportWizardStore) {
            ImportWizardStore.setIgnore([]);
            var to = $transition$._targetState._definition.name;
            if (to === 'home.import.data.accounts.ids.thirdpartyids.latticefields') {
                ImportWizardStore.removeFromState('home.import.data.accounts.ids.thirdpartyids.latticefields.customfields');
            }
        }],
        resolve: {
            FieldDocument: ["$q", "ImportWizardStore", function FieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.getFieldDocument();
            }],
            mergedFieldDocument: ["$q", "ImportWizardStore", function mergedFieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.mergeFieldDocument({ segment: true, save: false });
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardCustomFields',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/customfields/customfields.component.html'
            }
        }
    }).state('home.import.data.accounts.ids.thirdpartyids.latticefields.customfields.jobstatus', {
        url: '/jobstatus',
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardJobStatus',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/jobstatus/jobstatus.component.html'
            }
        }
    }).state('home.import.data.contacts', {
        url: '/contacts',
        resolve: {
            WizardValidationStore: ["ImportWizardStore", function WizardValidationStore(ImportWizardStore) {
                return ImportWizardStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'import.data';
            },
            WizardProgressItems: ["$stateParams", "ImportWizardStore", function WizardProgressItems($stateParams, ImportWizardStore) {
                var entityType = ImportWizardStore.getEntityType(),
                    wizard_steps = $stateParams.wizard_steps || entityType.toLowerCase();

                return ImportWizardStore.getWizardProgressItems(wizard_steps || 'contact');
            }],
            WizardControlsOptions: function WizardControlsOptions() {
                return {
                    backState: 'home.import.entry.contacts',
                    nextState: 'home.importtemplates'
                };
            }
        },
        views: {
            'wizard_progress': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        }
    }).state('home.import.data.contacts.ids', {
        url: '/contactids',
        onEnter: ["$state", "ImportWizardStore", "FieldDocument", function onEnter($state, ImportWizardStore, FieldDocument) {
            ImportWizardStore.setSavedDocumentInState('home.import.data.contacts', FieldDocument.fieldMappings);
            ImportWizardStore.setSavedDocumentInState('home.import.data.contacts.ids', FieldDocument.fieldMappings);
            // ImportWizardStore.removeFromState('home.import.data.contacts.ids');
        }],
        resolve: {
            FieldDocument: ["$q", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();
                ImportWizardService.GetFieldDocument(ImportWizardStore.getCsvFileName(), ImportWizardStore.getEntityType()).then(function (result) {
                    // console.log(result.Result);
                    ImportWizardStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardService.GetSchemaToLatticeFields(null, ImportWizardStore.getEntityType()).then(function (result) {
                    deferred.resolve(result['Account']);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardContactIDs',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/contactids/contactids.component.html'
            }
        }
    }).state('home.import.data.contacts.ids.thirdpartyids', {
        url: '/thirdpartyids',
        resolve: {
            Identifiers: function Identifiers() {
                return [{ name: 'CRM ID', value: '' }, { name: 'MAP ID', value: '' }];
            },
            FieldDocument: ["$q", "ImportWizardStore", function FieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.getFieldDocument();
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardThirdPartyIDs',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/thirdpartyids/thirdpartyids.component.html'
            }
        }
    }).state('home.import.data.contacts.ids.thirdpartyids.latticefields', {
        url: '/latticefields',
        onExit: ["$transition$", "ImportWizardStore", function onExit($transition$, ImportWizardStore) {
            ImportWizardStore.setIgnore([]);
            var to = $transition$._targetState._definition.name;
            if (to === 'home.import.data.contacts.ids') {
                ImportWizardStore.removeFromState('home.import.data.contacts.ids.latticefields');
            }
        }],
        resolve: {
            FieldDocument: ["$q", "ImportWizardStore", function FieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.getFieldDocument();
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                return ImportWizardStore.getUnmappedFields();
            }],
            mergedFieldDocument: ["$q", "ImportWizardStore", function mergedFieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.mergeFieldDocument({ segment: true, save: false });
            }],
            Type: function Type() {
                return "Contacts";
            },
            MatchingFields: function MatchingFields() {
                return [
                //{ name: 'ContactName', displayName: 'Contact Name' },
                { name: 'FirstName', displayName: 'First Name' }, { name: 'LastName', displayName: 'Last Name' }, { name: 'Title', displayName: '' }, { name: 'Email', displayName: ''
                    // { name: 'CompanyName', displayName: 'Company Name' },
                    // { name: 'City', displayName: '' },
                    // { name: 'State', displayName: '' },
                    // { name: 'Country', displayName: '' },
                    // { name: 'PostalCode', displayName: 'Postal Code' },
                    // { name: 'DUNS', displayName: 'D-U-N-S' },
                    // { name: 'Website', displayName: '' },
                }];
            },
            AnalysisFields: function AnalysisFields() {
                return [{ name: 'LeadStatus', displayName: 'Lead Status' }, { name: 'LeadSource', displayName: 'Lead Source' }, { name: 'LeadType', displayName: 'Lead Type' }, { name: 'CreatedDate', displayName: 'Created Date' }, { name: 'LastModifiedDate', displayName: 'Last Modified Date' }, { name: 'DoNotMail', displayName: 'Has Opted Out of Email' }, { name: 'DoNotCall', displayName: 'Has Opted Out of Phone Calls' }];
            }
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardLatticeFields',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/latticefields/latticefields.component.html'
            }
        }
    }).state('home.import.data.contacts.ids.thirdpartyids.latticefields.customfields', {
        url: '/customfields',
        onExit: ["$transition$", "ImportWizardStore", function onExit($transition$, ImportWizardStore) {
            ImportWizardStore.setIgnore([]);
            var to = $transition$._targetState._definition.name;
            if (to === 'home.import.data.contacts.ids.latticefields') {
                ImportWizardStore.removeFromState('home.import.data.contacts.ids.latticefields.customfields');
                // ImportWizardStore.saveDocumentFields('home.import.data.contacts.ids.latticefields');
            }
        }],
        resolve: {
            mergedFieldDocument: ["$q", "ImportWizardStore", function mergedFieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.mergeFieldDocument({ segment: true, save: false });
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardCustomFields',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/customfields/customfields.component.html'
            }
        }
    }).state('home.import.data.contacts.ids.thirdpartyids.latticefields.customfields.jobstatus', {
        url: '/jobstatus',
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardJobStatus',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/jobstatus/jobstatus.component.html'
            }
        }
    }).state('home.import.data.productpurchases', {
        url: '/productpurchases',
        resolve: {
            WizardValidationStore: ["ImportWizardStore", function WizardValidationStore(ImportWizardStore) {
                return ImportWizardStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'import.data';
            },
            WizardProgressItems: ["$stateParams", "ImportWizardStore", function WizardProgressItems($stateParams, ImportWizardStore) {
                var entityType = ImportWizardStore.getEntityType(),
                    wizard_steps = $stateParams.wizard_steps || entityType.toLowerCase();

                return ImportWizardStore.getWizardProgressItems(wizard_steps || 'transaction');
            }],
            WizardControlsOptions: function WizardControlsOptions() {
                return {
                    backState: 'home.import.entry.productpurchases',
                    nextState: 'home.importtemplates'
                };
            }
        },
        views: {
            'wizard_progress': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.import.data.productpurchases.ids'
    }).state('home.import.data.productpurchases.ids', {
        url: '/transactionids',
        resolve: {
            FieldDocument: ["$q", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();
                ImportWizardService.GetFieldDocument(ImportWizardStore.getCsvFileName(), ImportWizardStore.getEntityType()).then(function (result) {
                    ImportWizardStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardService.GetSchemaToLatticeFields(null, ImportWizardStore.getEntityType()).then(function (result) {
                    deferred.resolve(result['Account']);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardTransactionIDs',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/transactionids/transactionids.component.html'
            }
        }
    }).state('home.import.data.productpurchases.ids.latticefields', {
        url: '/latticefields',
        resolve: {
            FieldDocument: ["$q", "ImportWizardStore", function FieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.getFieldDocument();
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                return ImportWizardStore.getUnmappedFields();
            }],
            Type: function Type() {
                return "Transactions";
            },
            MatchingFields: function MatchingFields() {
                return [{ name: 'TransactionTime', displayName: 'Transaction Date', required: true }, { name: 'Amount', required: true }, { name: 'Quantity', required: true }, { name: 'Cost'
                    //{ name: 'TransactionType', displayName: 'Transaction Type' },
                }];
            },
            AnalysisFields: function AnalysisFields() {
                return [];
            }
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardLatticeFields',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/latticefields/latticefields.component.html'
            }
        }
    }).state('home.import.data.productpurchases.ids.latticefields.jobstatus', {
        url: '/jobstatus',
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardJobStatus',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/jobstatus/jobstatus.component.html'
            }
        }
    }).state('home.import.data.productbundles', {
        url: '/productbundles',
        resolve: {
            WizardValidationStore: ["ImportWizardStore", function WizardValidationStore(ImportWizardStore) {
                return ImportWizardStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'import.data';
            },
            WizardProgressItems: ["$stateParams", "ImportWizardStore", function WizardProgressItems($stateParams, ImportWizardStore) {
                var entityType = ImportWizardStore.getEntityType(),
                    wizard_steps = $stateParams.wizard_steps || entityType.toLowerCase();

                return ImportWizardStore.getWizardProgressItems(wizard_steps || 'product');
            }],
            WizardControlsOptions: function WizardControlsOptions() {
                return {
                    backState: 'home.import.entry.productbundles',
                    nextState: 'home.importtemplates'
                };
            }
        },
        views: {
            'wizard_progress': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.import.data.productbundles.ids'
    }).state('home.import.data.productbundles.ids', {
        url: '/transactionids',
        resolve: {
            FieldDocument: ["$q", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();
                ImportWizardService.GetFieldDocument(ImportWizardStore.getCsvFileName(), ImportWizardStore.getEntityType(), null, ImportWizardStore.getFeedType()).then(function (result) {
                    ImportWizardStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardService.GetSchemaToLatticeFields(null, ImportWizardStore.getEntityType(), ImportWizardStore.getFeedType()).then(function (result) {
                    deferred.resolve(result['Account']);
                });

                return deferred.promise;
            }],
            Calendar: ["$q", "ImportWizardService", "ImportWizardStore", function Calendar($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardStore.getCalendar().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardProductIDs',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/productids/productids.component.html'
            }
        }
    }).state('home.import.data.productbundles.ids.latticefields', {
        url: '/latticefields',
        resolve: {
            FieldDocument: ["$q", "ImportWizardStore", function FieldDocument($q, ImportWizardStore) {
                return ImportWizardStore.getFieldDocument();
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                return ImportWizardStore.getUnmappedFields();
            }],
            Type: function Type() {
                return "Products";
            },
            MatchingFields: function MatchingFields() {
                return [{ name: 'ProductBundle', displayName: 'Product Bundle Name' }, { name: 'Description', displayName: 'Product Description'
                    // { name: 'ProductName', displayName: 'Product Name' },
                    // { name: 'ProductFamily', displayName: 'Product Family' },
                }];
            },
            AnalysisFields: function AnalysisFields() {
                return [];
            }
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardLatticeFields',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/latticefields/latticefields.component.html'
            }
        }
    }).state('home.import.data.productbundles.ids.latticefields.jobstatus', {
        url: '/jobstatus',
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardJobStatus',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/jobstatus/jobstatus.component.html'
            }
        }
    }).state('home.import.data.producthierarchy', {
        url: '/producthierarchy',
        params: {
            wizard_steps: 'producthierarchy' // use this to override entity type as default for wizard step key
        },
        resolve: {
            WizardValidationStore: ["ImportWizardStore", function WizardValidationStore(ImportWizardStore) {
                return ImportWizardStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'import.data';
            },
            WizardProgressItems: ["$stateParams", "ImportWizardStore", function WizardProgressItems($stateParams, ImportWizardStore) {
                var entityType = ImportWizardStore.getEntityType(),
                    wizard_steps = $stateParams.wizard_steps || entityType.toLowerCase();

                return ImportWizardStore.getWizardProgressItems(wizard_steps || 'producthierarchy');
            }],
            WizardControlsOptions: function WizardControlsOptions() {
                return { backState: 'home.import.entry.producthierarchy', nextState: 'home.importtemplates' };
            }
        },
        views: {
            'wizard_progress': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.import.data.producthierarchy.ids'
    }).state('home.import.data.producthierarchy.ids', {
        url: '/producthierarchyids',
        resolve: {
            FieldDocument: ["$q", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();
                ImportWizardService.GetFieldDocument(ImportWizardStore.getCsvFileName(), ImportWizardStore.getEntityType(), null, ImportWizardStore.getFeedType()).then(function (result) {
                    ImportWizardStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardService.GetSchemaToLatticeFields(null, ImportWizardStore.getEntityType(), ImportWizardStore.getFeedType()).then(function (result) {
                    deferred.resolve(result['Account']);
                });

                return deferred.promise;
            }],
            Calendar: ["$q", "ImportWizardService", "ImportWizardStore", function Calendar($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardStore.getCalendar().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardProductHierarchyIDs',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/producthierarchyids/producthierarchyids.component.html'
            }
        }
    }).state('home.import.data.producthierarchy.ids.producthierarchy', {
        url: '/producthierarchy',
        resolve: {
            FieldDocument: ["$q", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();
                ImportWizardService.GetFieldDocument(ImportWizardStore.getCsvFileName(), ImportWizardStore.getEntityType(), null, ImportWizardStore.getFeedType()).then(function (result) {
                    ImportWizardStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardProductHierarchy',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/producthierarchy/producthierarchy.component.html'
            }
        }
    }).state('home.import.data.producthierarchy.ids.producthierarchy.jobstatus', {
        url: '/jobstatus',
        views: {
            'wizard_content@home.import.data': {
                controller: 'ImportWizardJobStatus',
                controllerAs: 'vm',
                templateUrl: 'app/import/content/jobstatus/jobstatus.component.html'
            }
        }
    });
}]);

/***/ }),

/***/ "./app/import/import.service.js":
/*!**************************************!*\
  !*** ./app/import/import.service.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('lp.import').service('ImportWizardStore', ["$q", "$state", "ImportWizardService", "ImportUtils", function ($q, $state, ImportWizardService, ImportUtils) {
    var ImportWizardStore = this;

    this.init = function () {
        this.csvFileName = null;
        this.fieldDocument = null;
        this.userFieldsType = {};
        this.unmappedFields = null;
        this.accountIdState = {
            accountDedupeField: null,
            dedupeType: 'custom',
            selectedField: null,
            fields: ['Id']
        };

        this.validation = {
            ids: false,
            thirdpartyids: true,
            latticefields: false,
            customfields: true,
            jobstatus: false,
            producthierarchy: false
        };

        this.saveObjects = {};
        this.fieldDocumentSaved = {};

        this.thirdpartyidFields = {
            fields: [],
            map: []
        };

        this.templateAction = 'create-template';
        this.displayType = null;
        this.entityType = null;
        this.feedType = null;

        this.nonCustomIds = [];

        this.calendar = null;

        this.postBody = null;
        this.autoImport = true;
        this.importOnly = false;
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.wizardProgressItems = {
        "account": [{
            label: 'Account IDs',
            state: 'accounts.ids',
            backState: 'home.importtemplates',
            nextLabel: 'Next, Add Other IDs',
            nextFn: function nextFn(nextState) {

                console.log(ImportWizardStore.getPostBody());

                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Other IDs',
            state: 'accounts.ids.thirdpartyids',
            nextLabel: 'Next, Map to Lattice Fields',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Lattice Fields',
            state: 'accounts.ids.thirdpartyids.latticefields',
            nextLabel: 'Next, Add Custom Fields',
            nextFn: function nextFn(nextState) {
                // ImportWizardStore.removeSavedDocumentFieldsFrom($state.current);
                this.userFieldsType = {};
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Custom Fields',
            state: 'accounts.ids.thirdpartyids.latticefields.customfields',
            nextLabel: 'Next, Import File',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping();
                ImportUtils.remapTypes(ImportWizardStore.fieldDocumentSaved[$state.current.name], ImportWizardStore.userFieldsType);
                ImportWizardStore.saveDocument(nextState, function () {
                    ImportWizardStore.setValidation('jobstatus', true);
                });
                // ImportWizardStore.nextSaveFieldDocuments(nextState, function() {
                //     ImportWizardStore.setValidation('jobstatus', true);                
                // });
            }
        }, {
            label: 'Save Template',
            state: 'accounts.ids.thirdpartyids.latticefields.customfields.jobstatus',
            nextLabel: 'Done',
            hideBack: true,
            nextFn: function nextFn(nextState) {
                var fileName = ImportWizardStore.getCsvFileName(),
                    importOnly = ImportWizardStore.getImportOnly(),
                    autoImportData = ImportWizardStore.getAutoImport(),
                    postBody = ImportWizardStore.getPostBody();

                ImportWizardService.templateDataIngestion(fileName, importOnly, autoImportData, postBody).then(function () {
                    $state.go(nextState);
                });
            }
        }],
        "contact": [{
            label: 'Contact IDs',
            state: 'contacts.ids',
            backState: 'home.importtemplates',
            nextLabel: 'Next, Provide CRM/MAP IDs',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Other IDs',
            state: 'contacts.ids.thirdpartyids',
            nextLabel: 'Next, Map to Lattice Fields',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Lattice Fields',
            state: 'contacts.ids.thirdpartyids.latticefields',
            nextLabel: 'Next, Add Custom Fields',
            nextFn: function nextFn(nextState) {
                this.userFieldsType = {};
                // ImportWizardStore.removeSavedDocumentFieldsFrom($state.current);
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Custom Fields',
            state: 'contacts.ids.thirdpartyids.latticefields.customfields',
            nextLabel: 'Next, Import File',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping();
                ImportUtils.remapTypes(ImportWizardStore.fieldDocumentSaved[$state.current.name], ImportWizardStore.userFieldsType);
                ImportWizardStore.saveDocument(nextState, function () {
                    ImportWizardStore.setValidation('jobstatus', true);
                });
                // ImportWizardStore.nextSaveFieldDocuments(nextState, function(){
                //     ImportWizardStore.setValidation('jobstatus', true);                
                // });
            }
        }, {
            label: 'Save Template',
            state: 'contacts.ids.thirdpartyids.latticefields.customfields.jobstatus',
            nextLabel: 'Done',
            hideBack: true,
            nextFn: function nextFn(nextState) {
                var fileName = ImportWizardStore.getCsvFileName(),
                    importOnly = ImportWizardStore.getImportOnly(),
                    autoImportData = ImportWizardStore.getAutoImport(),
                    postBody = ImportWizardStore.getPostBody();

                ImportWizardService.templateDataIngestion(fileName, importOnly, autoImportData, postBody).then(function () {
                    $state.go(nextState);
                });
            }
        }],
        "transaction": [{
            label: 'Transaction IDs',
            state: 'productpurchases.ids',
            backState: 'home.importtemplates',
            nextLabel: 'Next, Map to Lattice Fields',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Lattice Fields',
            state: 'productpurchases.ids.latticefields',
            nextLabel: 'Next, Import File',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
                ImportWizardStore.nextSaveFieldDocuments(nextState, function () {
                    ImportWizardStore.setValidation('jobstatus', true);
                });
            }
        }, {
            label: 'Save Template',
            state: 'productpurchases.ids.latticefields.jobstatus',
            nextLabel: 'Done',
            hideBack: true,
            nextFn: function nextFn(nextState) {
                var fileName = ImportWizardStore.getCsvFileName(),
                    importOnly = ImportWizardStore.getImportOnly(),
                    autoImportData = ImportWizardStore.getAutoImport(),
                    postBody = ImportWizardStore.getPostBody();

                ImportWizardService.templateDataIngestion(fileName, importOnly, autoImportData, postBody).then(function () {
                    $state.go(nextState);
                });
            }
        }],
        "product": [{
            label: 'Product ID',
            state: 'productbundles.ids',
            backState: 'home.importtemplates',
            nextLabel: 'Next, Map to Lattice Fields',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Lattice Fields',
            state: 'productbundles.ids.latticefields',
            nextLabel: 'Next, Import File',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveFieldDocuments(nextState, function () {
                    ImportWizardStore.setValidation('jobstatus', true);
                });
            }
        }, {
            label: 'Save Template',
            state: 'productbundles.ids.latticefields.jobstatus',
            nextLabel: 'Done',
            hideBack: true,
            nextFn: function nextFn(nextState) {
                var fileName = ImportWizardStore.getCsvFileName(),
                    importOnly = ImportWizardStore.getImportOnly(),
                    autoImportData = ImportWizardStore.getAutoImport(),
                    postBody = ImportWizardStore.getPostBody();

                ImportWizardService.templateDataIngestion(fileName, importOnly, autoImportData, postBody).then(function () {
                    $state.go(nextState);
                });
            }
        }],
        "producthierarchy": [{
            label: 'Product Hierarchy ID',
            state: 'producthierarchy.ids',
            nextLabel: 'Next',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
            }
        }, {
            label: 'Product Hierarchy',
            state: 'producthierarchy.ids.producthierarchy',
            nextLabel: 'Next, Import File',
            nextFn: function nextFn(nextState) {
                ImportWizardStore.nextSaveMapping(nextState);
                ImportWizardStore.nextSaveFieldDocuments(nextState, function () {
                    ImportWizardStore.setValidation('jobstatus', true);
                });
            }
        }, {
            label: 'Save Template',
            state: 'producthierarchy.ids.producthierarchy.jobstatus',
            nextLabel: 'Done',
            hideBack: true,
            nextFn: function nextFn(nextState) {
                var fileName = ImportWizardStore.getCsvFileName(),
                    importOnly = ImportWizardStore.getImportOnly(),
                    autoImportData = ImportWizardStore.getAutoImport(),
                    postBody = ImportWizardStore.getPostBody();

                ImportWizardService.templateDataIngestion(fileName, importOnly, autoImportData, postBody).then(function () {
                    $state.go(nextState);
                });
            }
        }]
    };

    this.getWizardProgressItems = function (step) {
        return this.wizardProgressItems[step || 'account'];
    };

    this.getValidation = function (type) {
        return this.validation[type];
    };

    this.setValidation = function (type, value) {
        this.validation[type] = value;
    };

    this.nextSaveGeneric = function (nextState) {
        $state.go(nextState);
    };

    this.nextSaveMapping = function (nextState) {
        this.saveDocumentFields($state.current.name);
        // this.saveDocumentFields(nextState);
        if (nextState) {
            var copyFormer = this.getSavedDocumentCopy($state.current.name);
            this.fieldDocumentSaved[nextState] = copyFormer;
            $state.go(nextState);
        }
    };

    /**
     * TO DO:
     * 
     */
    this.saveDocument = function (nextState, callback) {
        var callback = typeof callback === 'function' ? callback : function () {};
        ImportWizardStore.fieldDocument.fieldMappings = this.getSavedDocumentCopy($state.current.name);
        if (ImportWizardStore.fieldDocument.ignoredFields === null) {
            ImportWizardStore.fieldDocument.ignoredFields = [];
        }
        // var doc = this.getSavedDocumentCopy($state.current.name);
        ImportWizardService.SaveFieldDocuments(ImportWizardStore.getCsvFileName(), ImportWizardStore.getFieldDocument(), {
            feedType: ImportWizardStore.getFeedType(),
            entity: ImportWizardStore.getEntityType()
        }).then(callback);
        $state.go(nextState);
    };

    this.nextSaveFieldDocuments = function (nextState, callback) {
        var callback = typeof callback === 'function' ? callback : function () {};

        ImportWizardStore.mergeFieldDocument().then(function (fieldDocument) {
            ImportWizardService.SaveFieldDocuments(ImportWizardStore.getCsvFileName(), ImportWizardStore.getFieldDocument(), {
                feedType: ImportWizardStore.getFeedType(),
                entity: ImportWizardStore.getEntityType()
            }).then(callback);
            $state.go(nextState);
        });
    };

    this.mergeFieldDocument = function (opts) {
        var deferred = $q.defer(),
            append = [],
            tmpFieldMappings = angular.copy(ImportWizardStore.fieldDocument.fieldMappings),
            segmentedTmpFieldMappings = { main: [], appended: [] },
            opts = opts || {};

        opts.append = opts.append === false ? false : true;
        opts.save = opts.save === false ? false : true;
        opts.segment = opts.segment || false;

        for (var i in this.saveObjects) {
            var name = i,
                items = this.saveObjects[name];

            if (items) {
                items.forEach(function (item, key) {
                    var mappedItem = {},
                        _mappedItem = {},
                        newItem = {},
                        _newItem = {};

                    if (item.originalUserField) {
                        /**
                         * if it has an orginal user field, like in the ID step, find the original field mapping and unmap it and set up the new mapping to be appended
                         */
                        mappedItem = tmpFieldMappings.find(function (field) {
                            return field.userField === item.originalUserField && field.mappedField === item.mappedField;
                        });
                        _mappedItem = angular.copy(mappedItem);

                        if (item && mappedItem && (item.userField !== mappedItem.userField || item.mappedField !== mappedItem.mappedField)) {
                            mappedItem.mappedField = null; // if it's different, unmap it here
                            mappedItem.mappedToLatticeField = false;
                            if (item.append) {
                                // and set it up to be append to fieldMappings later
                                _mappedItem.userField = item.userField;
                                _mappedItem.mappedField = item.mappedField;
                                append.push(_mappedItem);
                            }
                        }
                    } else if (item.append) {
                        /**
                         * if it's new item, such as a third party id, append it
                         */
                        newItem = _.findWhere(tmpFieldMappings, { userField: item.userField });
                        _newItem = angular.copy(newItem);

                        var __newItem = angular.extend(_newItem, item);

                        append.push(__newItem);
                    } else {
                        /**
                         * here we update fields instead of appending them.
                         */
                        var unMappedItem = tmpFieldMappings.find(function (field) {
                            return field.mappedField === item.mappedField;
                        });
                        mappedItem = tmpFieldMappings.find(function (field) {
                            return field.userField === item.userField;
                        });
                        if (unMappedItem) {
                            unMappedItem.mappedField = null;
                            unMappedItem.mappedToLatticeField = false;
                        }
                        if (mappedItem) {
                            mappedItem.mappedField = item.mappedField;
                            mappedItem.mappedToLatticeField = true;
                        }
                    }
                });
            }
        }

        if (opts.segment) {
            segmentedTmpFieldMappings['main'] = tmpFieldMappings;
            segmentedTmpFieldMappings['appended'] = append;
        }

        if (opts.append) {
            tmpFieldMappings = tmpFieldMappings.concat(append); // append
        }

        if (opts.save) {
            ImportWizardStore.fieldDocument.fieldMappings = tmpFieldMappings;
        }

        if (opts.segment) {
            deferred.resolve(segmentedTmpFieldMappings);
        } else {
            deferred.resolve(tmpFieldMappings);
        }
        return deferred.promise;
    };

    this.getAccountIdState = function () {
        return this.accountIdState;
    };

    this.setAccountIdState = function (nextState) {
        for (var key in this.accountIdState) {
            this.accountIdState[key] = nextState[key];
        }
    };

    this.getCsvFileName = function () {
        return this.csvFileName;
    };
    this.setCsvFileName = function (fileName) {
        this.csvFileName = fileName;
    };

    this.setPostBody = function (postBody) {
        this.postBody = postBody;
    };
    this.getPostBody = function () {
        return this.postBody;
    };

    this.setImportOnly = function (importOnly) {
        this.importOnly = importOnly;
    };
    this.getImportOnly = function () {
        console.log(this.importOnly);
        return this.importOnly;
    };

    this.setFieldDocument = function (data) {
        this.fieldDocument = data;
    };
    this.getFieldDocument = function () {
        return angular.copy(this.fieldDocument);
    };
    this.getFieldDocumentAttr = function (name) {
        if (name == 'fieldMappings') {
            return this.fieldDocument.fieldMappings;
        } else if (name == 'ignoredFields') {
            return this.fieldDocument.ignoredFields;
        }
    };

    this.getUnmappedFields = function () {
        return this.unmappedFields;
    };
    this.setUnmappedFields = function (data) {
        this.unmappedFields = data;
    };

    this.setTemplateAction = function (templateAction) {
        this.templateAction = templateAction;
    };
    this.getTemplateAction = function () {
        return this.templateAction;
    };

    this.setDisplayType = function (displayType) {
        this.displayType = displayType;
    };
    this.getDisplayType = function () {
        return this.displayType;
    };

    this.setEntityType = function (type) {
        this.entityType = type;
    };
    this.getEntityType = function () {
        return this.entityType;
    };

    this.getFeedType = function () {
        return this.feedType;
    };
    this.setFeedType = function (type) {
        this.feedType = type;
    };

    this.getAutoImport = function () {
        return this.autoImport;
    };

    this.setAutoImport = function (importStatus) {
        this.autoImport = importStatus;
    };

    this.getCustomFields = function (type) {
        var data = [],
            total = 7,
            types = ['Text', 'Number', 'Boolean', 'Date'];
        for (var i = 0; i < total; i++) {
            var tmp = {
                CustomField: 'CustomField' + (i + 1),
                Type: types,
                Ignore: false
            };
            data.push(tmp);
        }
        return data;
    };

    this.setSaveObjects = function (object, key) {
        var key = key || $state.current.name || 'unknown';
        this.saveObjects[key] = object;
    };

    function getFormerState(state) {
        var period = state.lastIndexOf('.');
        var formerState = state.substring(0, period);
        return formerState;
    }
    this.saveDocumentFields = function (state) {
        if (this.saveObjects[state]) {
            var copy = this.getSavedDocumentCopy(getFormerState(state)); // this.getFieldDocument(true).fieldMappings;
            ImportUtils.updateDocumentMapping(ImportWizardStore.getEntityType(), this.saveObjects[state], copy);
            if (copy) {
                this.fieldDocumentSaved[state] = copy;
            }
        } else {
            var period = state.lastIndexOf('.');
            var formerState = state.substring(0, period);
            var copyDoc = this.getSavedDocumentCopy(formerState);
            if (copyDoc) {
                this.fieldDocumentSaved[state] = copyDoc;
            }
        }
    };

    this.getSavedDocumentCopy = function (state) {
        var copy = angular.copy(this.fieldDocumentSaved[state]);
        return copy;
    };

    this.setSavedDocumentInState = function (state, fieldDocumentSaved) {
        this.fieldDocumentSaved[state] = fieldDocumentSaved;
    };

    this.getSavedDocumentFields = function (state) {
        return this.fieldDocumentSaved[state];
    };

    this.removeSavedObjectFrom = function (state) {
        var keys = Object.keys(this.saveObjects);
        if (keys) {
            keys.forEach(function (key) {
                if (key.includes(state)) {
                    delete ImportWizardStore.saveObjects[key];
                }
            });
        }
    };

    this.removeSavedDocumentFields = function (state) {
        delete this.fieldDocumentSaved[state];
    };

    this.removeSavedDocumentFieldsFrom = function (state) {
        var keys = Object.keys(this.fieldDocumentSaved);
        if (keys) {
            keys.forEach(function (key) {
                if (key.includes(state)) {
                    delete ImportWizardStore.fieldDocumentSaved[key];
                }
            });
        }
    };

    this.removeFromState = function (state) {
        ImportWizardStore.removeSavedObjectFrom(state);
        ImportWizardStore.removeSavedDocumentFieldsFrom(state);
    };

    this.getSaveObjects = function (key) {
        if (key) {
            return this.saveObjects[key];
        }
        return this.saveObjects;
    };

    this.setThirdpartyidFields = function (fields, map) {
        this.thirdpartyidFields = {
            fields: fields,
            map: map
        };
    };

    this.getThirdpartyidFields = function () {
        return this.thirdpartyidFields;
    };

    var findIndexes = function findIndexes(object, property, value) {
        var indexes = [];
        object.forEach(function (item, index) {
            if (item[property] === value) {
                indexes.push(index);
            }
        });
        return indexes;
    };

    this.remapMap = function (userField, mappedField, cdlExternalSystemType, unmap) {
        var _mappedIndexes = findIndexes(this.fieldDocument.fieldMappings, 'mappedField', mappedField),
            userIndexes = findIndexes(this.fieldDocument.fieldMappings, 'userField', userField),
            unmappedIndexes = unmap ? findIndexes(this.fieldDocument.fieldMappings, 'mappedField', userField) : [],
            // find unmapped items
        mappedIndexes = _mappedIndexes.concat(unmappedIndexes); // add unmapped items so they get same unmapping as duplciates

        mappedIndexes.forEach(function (index) {
            // this unmaps previous fields, to remove duplicate mappings
            ImportWizardStore.fieldDocument.fieldMappings[index].mappedField = null;
            ImportWizardStore.fieldDocument.fieldMappings[index].mappedToLatticeField = false;
        });
        userIndexes.forEach(function (index) {
            // this maps the new fields
            ImportWizardStore.fieldDocument.fieldMappings[index].mappedField = mappedField;
            ImportWizardStore.fieldDocument.fieldMappings[index].cdlExternalSystemType = cdlExternalSystemType;
            ImportWizardStore.fieldDocument.fieldMappings[index].mappedToLatticeField = mappedField ? true : false; // allows for unmapping
        });
    };

    this.remapType = function (userField, type) {
        var userIndexes = findIndexes(this.fieldDocument.fieldMappings, 'userField', userField);

        userIndexes.forEach(function (index) {
            ImportWizardStore.fieldDocument.fieldMappings[index].fieldType = type;
        });
    };

    this.setIgnore = function (ignoredFields) {
        ImportWizardStore.fieldDocument.ignoredFields = ignoredFields;
    };

    this.addNonCustomIds = function (ids) {
        if ((typeof ids === 'undefined' ? 'undefined' : _typeof(ids)) === 'object') {
            for (var i in ids) {
                var id = ids[i];
                if (this.nonCustomIds.indexOf(id) === -1) {
                    this.nonCustomIds.push(id);
                }
            }
        } else if (typeof ids === 'string') {
            var id = ids;
            if (this.nonCustomIds.indexOf(id) === -1) {
                this.nonCustomIds.push(id);
            }
        }
    };

    this.getNonCustomIds = function () {
        return this.nonCustomIds;
    };

    this.getCalendar = function () {
        var deferred = $q.defer();

        if (this.calendar) {
            deferred.resolve(this.calendar);
        } else {
            ImportWizardService.getCalendar().then(function (result) {
                ImportWizardStore.setCalendar(result);
                deferred.resolve(result);
            });
        }

        return deferred.promise;
    };

    this.setCalendar = function (calendar) {
        this.calendar = calendar;
    };
}]).service('ImportWizardService', ["$q", "$http", "$state", "ResourceUtility", "ImportUtils", function ($q, $http, $state, ResourceUtility, ImportUtils) {

    this.GetSchemaToLatticeFields = function (csvFileName, entity, feedType) {
        var deferred = $q.defer();
        var params = {
            'entity': entity,
            'source': 'File',
            'feedType': feedType || entity + 'Schema'
        };
        if (!entity) {
            params = {};
        }

        $http({
            method: 'GET',
            url: '/pls/models/uploadfile/latticeschema',
            params: params,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {

            var result = response.data;

            if (result != null && result !== "" && result.Success == true) {
                //console.log("!!!!!!!!!!!!!!!!!!!", result);

                ImportUtils.setLatticeSchema(result.Result);
                deferred.resolve(result.Result);
            } else {

                var errors = result.Errors;
                var response = {
                    success: false,
                    errorMsg: errors[0]
                };

                console.log("????????????????????", response);
                deferred.resolve(response.errorMsg);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }
            job.status = 'Failed';

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetFieldDocument = function (FileName, entity, schema, feedType) {
        var deferred = $q.defer();
        var entity = entity;
        var params = {};
        if (entity) {
            params = {
                'entity': entity,
                'source': 'File',
                'feedType': feedType || entity + 'Schema'
            };
        } else {
            params = {
                'schema': schema
            };
        }

        $http({
            method: 'POST',
            url: '/pls/models/uploadfile/' + FileName + '/fieldmappings',
            params: params,
            headers: { 'Content-Type': 'application/json' },
            data: {}
        }).success(function (data, status, headers, config) {
            if (data == null || !data.Success) {
                if (data && data.Errors.length > 0) {
                    var errors = data.Errors.join('\n');
                }
                var result = {
                    Success: false,
                    ResultErrors: errors || ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                var result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.SaveFieldDocuments = function (FileName, FieldDocument, params, forModeling) {
        var deferred = $q.defer(),
            result,
            params = params || {};

        if (!forModeling) {
            params.displayName = params.displayName || FileName, params.source = params.source || 'File', params.entity = params.entity || 'Account', params.feedType = params.feedType || params.entity + 'Schema' || 'AccountSchema';
        } else {
            params.displayName = FileName;
            params.excludeCustomFileAttributes = params.excludeCustomFileAttributes;
        }

        $http({
            method: 'POST',
            url: '/pls/models/uploadfile/fieldmappings',
            headers: { 'Content-Type': 'application/json' },
            params: params,
            data: {
                'fieldMappings': FieldDocument.fieldMappings,
                'ignoredFields': FieldDocument.ignoredFields
            }
        }).then(function onSuccess(response) {

            var result = response.data;
            if (result != null && result !== "") {
                result = response.data;
                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                result = {};
                deferred.resolve(result);
                // deferred.resolve(result.errorMsg);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.templateDataIngestion = function (fileName, importOnly, autoImportData, postBody) {
        var deferred = $q.defer(),
            result,
            url = importOnly ? '/pls/cdl/s3/template/import' : '/pls/cdl/s3/template',
            params = {
            'templateFileName': fileName,
            'source': 'File',
            'importData': autoImportData
            // 'entity': entity,
            // 'feedType': feedType || entity + 'Schema'
        };

        // console.log(fileName, importOnly, autoImportData, postBody);
        var headers = { 'Content-Type': 'application/json' };
        if (autoImportData) {
            headers['ErrorDisplayOptions'] = '{"delay":5000}';
        }
        $http({
            method: 'POST',
            url: url,
            headers: headers,
            params: params,
            data: postBody
        }).then(function onSuccess(response) {
            var result = response.data;
            if (result != null && result !== "") {
                result = response.data;

                console.log(result);

                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                // deferred.resolve(result.errorMsg);
                result = {};
                deferred.resolve(result);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getCalendar = function () {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/datacollection/periods/calendar',
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = response.data;
            if (result != null && result !== "") {
                result = response.data;
                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                // deferred.resolve(result.errorMsg);
                result = {};
                deferred.resolve(result);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.validateCalendar = function (data) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/datacollection/periods/calendar/validate',
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = response.data;
            if (result != null && result !== "") {
                result = response.data;
                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                // deferred.resolve(result.errorMsg);
                result = {};
                deferred.resolve(result);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.saveCalendar = function (data) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/datacollection/periods/calendar',
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = response.data;
            if (result != null && result !== "") {
                result = response.data;
                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                // deferred.resolve(result.errorMsg);
                result = {};
                deferred.resolve(result);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
    this.deleteCalendar = function () {
        var deferred = $q.defer();
        $http({
            method: 'DELETE',
            url: '/pls/datacollection/periods/calendar'
        }).then(function onSuccess(response) {
            deferred.resolve(response);
        }, function onError(response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/import/import.utils.js":
/*!************************************!*\
  !*** ./app/import/import.utils.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Account:[
 *  {name: 'the_name', fieldType: 'TEXT', requiredIfNoField: boolean/null, requiredType:'Required'/'NotRequired'}
 * ]
 */
angular.module('lp.import.utils', []).service('ImportUtils', function () {
    var ImportUtils = this;
    ImportUtils.ACCOUNT_ENTITY = 'Account';
    var latticeSchema = {};

    function setFields(fieldObj, field) {
        Object.keys(field).forEach(function (key) {
            fieldObj[key] = field[key];
        });
    }

    function setFieldsInEntity(entityName, fields) {
        var entity = latticeSchema.entityName;
        if (!entity) {
            entity = { map: {}, list: [] };
            latticeSchema[entityName] = entity;
        }
        var keys = Object.keys(fields);
        keys.forEach(function (field) {
            var fieldName = fields[field].name;
            var fieldObj = {};
            entity.map[fieldName] = fieldObj;
            setFields(fieldObj, fields[field]);
            entity.list.push(fieldObj);
        });
    }

    function isFieldPartOfSchema(entity, fieldName) {
        var entityObj = latticeSchema[entity];
        var map = entityObj.map;
        if (map[fieldName]) {
            return true;
        } else {
            return false;
        }
    }

    function isFieldMapped(entity, fieldName, fieldsMapped) {
        var mapped = false;

        if (fieldsMapped) {
            var entityObj = latticeSchema[entity];
            var map = entityObj.map;
            fieldsMapped.forEach(function (element) {
                if (element.userField == fieldName && element.mappedField != null && map[element.mappedField]) {
                    mapped = true;
                    return mapped;
                }
            });
        }

        return mapped;
    }

    function cleanSchema() {
        latticeSchema = {};
    }
    /**
     * It sets the entities and all the fields associated with it
     */
    this.setLatticeSchema = function (apiResult) {
        cleanSchema();
        var entities = Object.keys(apiResult);
        entities.forEach(function (entity) {
            setFieldsInEntity(entity, apiResult[entity]);
        });
        // console.log('Schema ', latticeSchema);
    };

    this.isFieldInSchema = function (entity, fieldName, fieldsMapped) {
        var inschema = false;
        var entityObj = latticeSchema[entity];
        if (entityObj && entityObj.map[fieldName]) {
            inschema = true;
        } else {
            inschema = isFieldMapped(entity, fieldName, fieldsMapped);
        }
        return inschema;
    };

    this.remapTypes = function (fieldsMapped, newTypesObj) {
        var userFields = Object.keys(newTypesObj);
        userFields.forEach(function (userFieldName) {
            updateUserFieldType(fieldsMapped, userFieldName, newTypesObj[userFieldName]);
        });
    };

    function updateUserFieldType(fieldsMapped, userFieldName, newType) {
        fieldsMapped.forEach(function (fieldMapped) {
            if (fieldMapped.userField == userFieldName) {
                fieldMapped.fieldType = newType;
                return;
            }
        });
    }

    function setMapping(entity, savedObj, fieldsMapped) {
        var keysMapped = Object.keys(fieldsMapped);
        keysMapped.forEach(function (mapped) {
            if (savedObj.mappedField === fieldsMapped[mapped].mappedField && savedObj.userField !== fieldsMapped[mapped].userField) {
                fieldsMapped[mapped].mappedField = null;
                fieldsMapped[mapped].mappedToLatticeField = false;
            }
            if (savedObj.userField === fieldsMapped[mapped].userField) {
                fieldsMapped[mapped].mappedField = savedObj.mappedField;
                fieldsMapped[mapped].mappedToLatticeField = isFieldPartOfSchema(entity, savedObj.mappedField);
                if (savedObj.cdlExternalSystemType) {
                    fieldsMapped[mapped].cdlExternalSystemType = savedObj.cdlExternalSystemType;
                }
            }
        });
    }

    this.updateDocumentMapping = function (entity, savedObj, fieldsMapping) {
        if (savedObj && fieldsMapping) {
            var keysSaved = Object.keys(savedObj);

            keysSaved.forEach(function (keySaved) {
                setMapping(entity, savedObj[keySaved], fieldsMapping);
            });
        }

        // console.log(fieldsMapping);
    };
});

/***/ }),

/***/ "./app/import/react/components/About.js":
/*!**********************************************!*\
  !*** ./app/import/react/components/About.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _states = __webpack_require__(/*! ../states */ "./app/import/react/states.js");

var _routingTest = __webpack_require__(/*! ./routing-test */ "./app/import/react/components/routing-test.js");

var _leButton = __webpack_require__(/*! ../../../../../common/widgets/buttons/le-button */ "../common/widgets/buttons/le-button.js");

var _leButton2 = _interopRequireDefault(_leButton);

var _leToolbar = __webpack_require__(/*! ../../../../../common/widgets/toolbar/le-toolbar */ "../common/widgets/toolbar/le-toolbar.js");

__webpack_require__(/*! ./about.scss */ "./app/import/react/components/about.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var About = function (_Component) {
  _inherits(About, _Component);

  function About(props) {
    _classCallCheck(this, About);

    var _this = _possibleConstructorReturn(this, (About.__proto__ || Object.getPrototypeOf(About)).call(this, props));

    console.log("PROPS ", props);
    _this.myDataButtonConfig = {
      lable: "My Data",
      classNames: ["button", "orange-button"],
      image: "fa fa-arrow-left"
    };

    _this.nextButtonConfig = {
      lable: "Email Automation Credentials",
      classNames: ["button", "gray-button"]
    };
    return _this;
  }

  _createClass(About, [{
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "div",
        { className: "le-flex-v-panel test" },
        _reactVendor2.default.createElement(
          _leToolbar.LeToolBar,
          null,
          _reactVendor2.default.createElement(
            "div",
            { className: "right" },
            _reactVendor2.default.createElement(_leButton2.default, {
              config: this.nextButtonConfig,
              callback: function callback() {
                (0, _routingTest.getRouter)().stateService.go("hello");
              }
            })
          )
        ),
        _reactVendor2.default.createElement(_reactVendor.UIView, { name: "reactsub" })
      );
    }
  }]);

  return About;
}(_reactVendor.Component);

exports.default = About;

/***/ }),

/***/ "./app/import/react/components/Hello.js":
/*!**********************************************!*\
  !*** ./app/import/react/components/Hello.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Hello = function (_Component) {
  _inherits(Hello, _Component);

  function Hello() {
    _classCallCheck(this, Hello);

    var _this = _possibleConstructorReturn(this, (Hello.__proto__ || Object.getPrototypeOf(Hello)).call(this));

    _this.state = { greeting: 'hello' };
    _this.toggleGreeting = _this.toggleGreeting.bind(_this);
    return _this;
  }

  _createClass(Hello, [{
    key: 'toggleGreeting',
    value: function toggleGreeting() {
      this.setState({
        greeting: this.state.greeting === 'hello' ? 'what\'s up' : 'hello'
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _reactVendor2.default.createElement(
        'div',
        { className: this.props.className },
        _reactVendor2.default.createElement(
          'h3',
          null,
          this.state.greeting,
          ' solar system!'
        ),
        _reactVendor2.default.createElement(
          'button',
          { onClick: this.toggleGreeting },
          'toggle greeting'
        )
      );
    }
  }]);

  return Hello;
}(_reactVendor.Component);

exports.default = Hello;

/***/ }),

/***/ "./app/import/react/components/about.scss":
/*!************************************************!*\
  !*** ./app/import/react/components/about.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./app/import/react/components/routing-test.js":
/*!*****************************************************!*\
  !*** ./app/import/react/components/routing-test.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clean = exports.getRouter = undefined;

var _reactVendor = __webpack_require__(/*! ../../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _states = __webpack_require__(/*! ../states */ "./app/import/react/states.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var router;

var getRouter = exports.getRouter = function getRouter() {
  if (!router) {
    router = new _reactVendor.UIRouterReact();
    router.plugin(_reactVendor.servicesPlugin);
    router.plugin(_reactVendor.hashLocationPlugin);

    // Register each state
    var states = [_states.hello, _states.about, _states.templatelist];
    states.forEach(function (state) {
      return router.stateRegistry.register(state);
    });

    // Set initial and fallback states
    router.urlService.rules.initial({ state: "templatelist" });

    router.transitionService.onBefore(true, function (trans) {
      // console.log("Nav Start");
      // Do something before transition
    });

    router.transitionService.onSuccess(true, function (trans) {
      // console.log("Nav End");
      // Do something after transition
    });

    router.transitionService.onError(true, function (err) {
      // console.log("Nav Error", err);
      // Do something if transition errors
    });
  }
  // else {
  // console.log("ALREADY INIT");
  // }

  return router;
};
var clean = exports.clean = function clean() {
  router = null;
};

/***/ }),

/***/ "./app/import/react/states.js":
/*!************************************!*\
  !*** ./app/import/react/states.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.about = exports.hello = exports.templatelist = exports.getAngularState = exports.setAngularState = undefined;

var _About = __webpack_require__(/*! ./components/About */ "./app/import/react/components/About.js");

var _About2 = _interopRequireDefault(_About);

var _Hello = __webpack_require__(/*! ./components/Hello */ "./app/import/react/components/Hello.js");

var _Hello2 = _interopRequireDefault(_Hello);

var _templatesGridContainer = __webpack_require__(/*! ../templates/templates-grid-container */ "./app/import/templates/templates-grid-container.js");

var _templatesGridContainer2 = _interopRequireDefault(_templatesGridContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $state = void 0;
var setAngularState = exports.setAngularState = function setAngularState(state) {
  console.log('The state is set NOW', state);
  $state = state;
};

var getAngularState = exports.getAngularState = function getAngularState() {

  return $state;
};

var templatelist = exports.templatelist = {
  name: "templatelist",
  url: "/templatelist",
  views: {
    reactmain: _templatesGridContainer2.default
  }
};

var hello = exports.hello = {
  name: "hello",
  parent: 'about',
  url: "/hello",
  views: {
    reactsub: _Hello2.default
  }
};

var about = exports.about = {
  name: "about",
  url: "/about",
  views: {
    reactmain: _About2.default
  }
};

/***/ }),

/***/ "./app/import/templates/components/summary-box.js":
/*!********************************************************!*\
  !*** ./app/import/templates/components/summary-box.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

__webpack_require__(/*! ./summary-box.scss */ "./app/import/templates/components/summary-box.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SummaryBox = function (_Component) {
  _inherits(SummaryBox, _Component);

  function SummaryBox(props) {
    _classCallCheck(this, SummaryBox);

    return _possibleConstructorReturn(this, (SummaryBox.__proto__ || Object.getPrototypeOf(SummaryBox)).call(this, props));
  }

  _createClass(SummaryBox, [{
    key: "getCount",
    value: function getCount() {
      if (this.props.loading) {
        return _reactVendor2.default.createElement("i", { "class": "fa fa-spinner fa-spin fa-fw" });
      } else {
        return _reactVendor2.default.createElement(
          "p",
          null,
          this.props.count
        );
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "div",
        { className: "le-flex-h-panel flex-content" },
        _reactVendor2.default.createElement(
          "div",
          { className: "le-summary-box le-flex-v-panel" },
          _reactVendor2.default.createElement(
            "p",
            { className: "title" },
            this.props.name
          ),
          this.getCount()
        )
      );
    }
  }]);

  return SummaryBox;
}(_reactVendor.Component);

exports.default = SummaryBox;

/***/ }),

/***/ "./app/import/templates/components/summary-box.scss":
/*!**********************************************************!*\
  !*** ./app/import/templates/components/summary-box.scss ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./app/import/templates/components/summary.js":
/*!****************************************************!*\
  !*** ./app/import/templates/components/summary.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

__webpack_require__(/*! ./summary.scss */ "./app/import/templates/components/summary.scss");

var _Aux = __webpack_require__(/*! ../../../../../common/widgets/hoc/_Aux */ "../common/widgets/hoc/_Aux.js");

var _Aux2 = _interopRequireDefault(_Aux);

var _observer = __webpack_require__(/*! ../../../../../common/app/http/observer */ "../common/app/http/observer.js");

var _observer2 = _interopRequireDefault(_observer);

var _httpService = __webpack_require__(/*! ../../../../../common/app/http/http-service */ "../common/app/http/http-service.js");

var _httpService2 = _interopRequireDefault(_httpService);

var _summaryBox = __webpack_require__(/*! ./summary-box */ "./app/import/templates/components/summary-box.js");

var _summaryBox2 = _interopRequireDefault(_summaryBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SummaryContainer = function (_Component) {
  _inherits(SummaryContainer, _Component);

  function SummaryContainer(props) {
    _classCallCheck(this, SummaryContainer);

    var _this = _possibleConstructorReturn(this, (SummaryContainer.__proto__ || Object.getPrototypeOf(SummaryContainer)).call(this, props));

    _this.state = {
      loading: true,
      accountsCount: 0,
      contactsCount: 0,
      productPurchasesCount: 0,
      productsCount: 0
    };
    return _this;
  }

  _createClass(SummaryContainer, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _httpService2.default.unsubscribeObservable(this.observer);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.observer = new _observer2.default(function (response) {
        console.log(response);
        _this2.setState({
          loading: false,
          accountsCount: response.data.AccountCount,
          contactsCount: response.data.ContactCount,
          productPurchasesCount: response.data.TransactionCount,
          productsCount: response.data.ProductCount
        });
      });
      _httpService2.default.get("/pls/datacollection/status", this.observer);
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        _Aux2.default,
        null,
        _reactVendor2.default.createElement(
          "div",
          { className: "le-summary-container le-flex-v-panel" },
          _reactVendor2.default.createElement(
            "div",
            { className: "le-summary-header le-flex-v-panel" },
            _reactVendor2.default.createElement(
              "p",
              { className: "title" },
              "Import Templates"
            ),
            _reactVendor2.default.createElement(
              "p",
              { className: "description" },
              "Field mapping templates store your import configuration for each data object. These templates support all manual and automated data import jobs."
            )
          ),
          _reactVendor2.default.createElement(
            "div",
            { className: "le-flex-h-panel boxes-container" },
            _reactVendor2.default.createElement(_summaryBox2.default, {
              name: "Accounts",
              loading: this.state.loading,
              count: this.state.accountsCount
            }),
            _reactVendor2.default.createElement(_summaryBox2.default, {
              name: "Contacts",
              loading: this.state.loading,
              count: this.state.contactsCount
            }),
            _reactVendor2.default.createElement(_summaryBox2.default, {
              name: "Product Purchases",
              loading: this.state.loading,
              count: this.state.productPurchasesCount
            }),
            _reactVendor2.default.createElement(_summaryBox2.default, {
              name: "Products",
              loading: this.state.loading,
              count: this.state.productsCount
            })
          )
        )
      );
    }
  }]);

  return SummaryContainer;
}(_reactVendor.Component);

exports.default = SummaryContainer;


angular.module("le.summary", []).component("leSummaryComponent", (0, _reactVendor.react2angular)(SummaryContainer, [], []));

/***/ }),

/***/ "./app/import/templates/components/summary.scss":
/*!******************************************************!*\
  !*** ./app/import/templates/components/summary.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./app/import/templates/templates-grid-container.js":
/*!**********************************************************!*\
  !*** ./app/import/templates/templates-grid-container.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _states = __webpack_require__(/*! ../react/states */ "./app/import/react/states.js");

var _httpService = __webpack_require__(/*! ../../../../common/app/http/http-service */ "../common/app/http/http-service.js");

var _httpService2 = _interopRequireDefault(_httpService);

var _response = __webpack_require__(/*! ../../../../common/app/http/response */ "../common/app/http/response.js");

var _templatesRowActions = __webpack_require__(/*! ./templates-row-actions */ "./app/import/templates/templates-row-actions.js");

var _templatesRowActions2 = _interopRequireDefault(_templatesRowActions);

__webpack_require__(/*! ./templates.scss */ "./app/import/templates/templates.scss");

var _observer = __webpack_require__(/*! ../../../../common/app/http/observer */ "../common/app/http/observer.js");

var _observer2 = _interopRequireDefault(_observer);

var _editControls = __webpack_require__(/*! ../../../../common/widgets/table/controlls/edit-controls */ "../common/widgets/table/controlls/edit-controls.js");

var _editControls2 = _interopRequireDefault(_editControls);

var _copyControll = __webpack_require__(/*! ../../../../common/widgets/table/controlls/copy-controll */ "../common/widgets/table/controlls/copy-controll.js");

var _copyControll2 = _interopRequireDefault(_copyControll);

var _editorText = __webpack_require__(/*! ../../../../common/widgets/table/editors/editor-text */ "../common/widgets/table/editors/editor-text.js");

var _editorText2 = _interopRequireDefault(_editorText);

var _messagingService = __webpack_require__(/*! ../../../../common/app/utilities/messaging-service */ "../common/app/utilities/messaging-service.js");

var _messagingService2 = _interopRequireDefault(_messagingService);

var _message = __webpack_require__(/*! ../../../../common/app/utilities/message */ "../common/app/utilities/message.js");

var _message2 = _interopRequireDefault(_message);

var _table = __webpack_require__(/*! ../../../../common/widgets/table/table */ "../common/widgets/table/table.js");

var _table2 = _interopRequireDefault(_table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GridContainer = function (_Component) {
  _inherits(GridContainer, _Component);

  function GridContainer(props) {
    _classCallCheck(this, GridContainer);

    var _this = _possibleConstructorReturn(this, (GridContainer.__proto__ || Object.getPrototypeOf(GridContainer)).call(this, props));

    _this.actionCallbackHandler = _this.actionCallbackHandler.bind(_this);
    _this.saveTemplateNameHandler = _this.saveTemplateNameHandler.bind(_this);
    _this.state = {
      forceReload: false,
      showEmpty: false,
      showLoading: false,
      data: []
    };
    return _this;
  }

  _createClass(GridContainer, [{
    key: "createTemplate",
    value: function createTemplate(response) {
      var entity = "";
      switch (response.type) {
        case "Accounts":
          {
            entity = "accounts";
            break;
          }
        case "Contacts":
          {
            entity = "contacts";
            break;
          }
        case "Product Purchases":
          {
            entity = "productpurchases";
            break;
          }
        case "Product Bundles":
          {
            entity = "productbundles";
            break;
          }
        case "Product Hierarchy":
          {
            entity = "producthierarchy";
            break;
          }
      }
      var goTo = "home.import.entry." + entity;

      (0, _states.getAngularState)().go(goTo, response);
    }
  }, {
    key: "actionCallbackHandler",
    value: function actionCallbackHandler(response) {
      switch (response.action) {
        case _templatesRowActions.CREATE_TEMPLATE:
          this.createTemplate(response);
          break;
        case _templatesRowActions.EDIT_TEMPLATE:
          this.createTemplate(response);
          break;
        case _templatesRowActions.IMPORT_DATA:
          this.createTemplate(response);
          break;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _httpService2.default.unsubscribeObservable(this.observer);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.setState({
        forceReload: true,
        showEmpty: false,
        showLoading: true
      });
      this.observer = new _observer2.default(function (response) {
        if (response.status == _response.SUCCESS) {
          _this2.setState({
            forceReload: false,
            showEmpty: response.data && response.data.length == 0,
            showLoading: false,
            data: response.data
          });
        } else {
          _this2.setState({
            forceReload: false,
            showEmpty: true,
            showLoading: false,
            data: []
          });
        }
      }, function (error) {
        _this2.setState({
          forceReload: false,
          showEmpty: true,
          showLoading: false,
          data: []
        });
      });
      _httpService2.default.get("/pls/cdl/s3import/template", this.observer);
    }
  }, {
    key: "saveTemplateNameHandler",
    value: function saveTemplateNameHandler(cell, value) {
      var _this3 = this;

      if (value && value != "") {
        cell.setSavingState();
        var copy = Object.assign({}, this.state.data[cell.props.rowIndex]);
        copy[cell.props.colName] = value;
        _httpService2.default.put("/pls/cdl/s3/template/displayname", copy, new _observer2.default(function (response) {
          cell.toogleEdit();
          if (response.getStatus() === _response.SUCCESS) {
            var newState = [].concat(_toConsumableArray(_this3.state.data));
            newState[cell.props.rowIndex][cell.props.colName] = value;
            _this3.setState({ data: newState });
          }
        }, function (error) {
          cell.toogleEdit();
        }));
      }
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      var _this4 = this;

      var config = {
        name: "import-templates",
        header: [{
          name: "TemplateName",
          displayName: "Name",
          sortable: false
        }, {
          name: "Object",
          displayName: "Object",
          sortable: false
        }, {
          name: "Path",
          displayName: "Automated Import Location",
          sortable: false
        }, {
          name: "LastEditedDate",
          displayName: "Edited",
          sortable: false
        }, {
          name: "actions",
          sortable: false
        }],
        columns: [{
          colSpan: 2,
          template: function template(cell) {
            if (!cell.state.saving && !cell.state.editing) {
              if (cell.props.rowData.Exist) {
                return _reactVendor2.default.createElement(_editControls2.default, {
                  icon: "fa fa-pencil-square-o",
                  title: "Edit Name",
                  toogleEdit: cell.toogleEdit,
                  classes: "initially-hidden"
                });
              } else {
                return null;
              }
            }
            if (cell.state.editing && !cell.state.saving) {
              if (cell.props.rowData.Exist) {
                return _reactVendor2.default.createElement(_editorText2.default, {
                  initialValue: cell.props.rowData.TemplateName,
                  cell: cell,
                  applyChanges: _this4.saveTemplateNameHandler,
                  cancel: cell.cancelHandler
                });
              } else {
                return null;
              }
            }
          }
        }, {
          colSpan: 2
        }, {
          colSpan: 3,
          template: function template(cell) {
            if (cell.props.rowData.Exist) {
              return _reactVendor2.default.createElement(_copyControll2.default, {
                title: "Copy Link",
                data: cell.props.rowData[cell.props.colName],
                callback: function callback() {
                  _messagingService2.default.sendMessage(new _message2.default(null, _message.NOTIFICATION, "success", "", "Copied to Clipboard"));
                }
              });
            } else {
              return null;
            }
          }
        }, {
          colSpan: 2,
          mask: function mask(value) {
            var options = {
              year: "numeric",
              month: "2-digit",
              day: "2-digit",
              hour: "2-digit",
              minute: "2-digit"
            };
            var formatted = new Date(value);
            return formatted.toLocaleDateString("en-US", options);
          }
        }, {
          colSpan: 3,
          template: function template(cell) {
            return _reactVendor2.default.createElement(_templatesRowActions2.default, {
              rowData: cell.props.rowData,
              callback: _this4.actionCallbackHandler
            });
          }
        }]
      };

      return config;
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "div",
        null,
        _reactVendor2.default.createElement(_table2.default, {
          name: "import-templates",
          config: this.getConfig(),
          showLoading: this.state.showLoading,
          showEmpty: this.state.showEmpty,
          data: this.state.data
        }),
        _reactVendor2.default.createElement(
          "p",
          null,
          "*Atlas currently only supports one template for each object. "
        )
      );
    }
  }]);

  return GridContainer;
}(_reactVendor.Component);

exports.default = GridContainer;

/***/ }),

/***/ "./app/import/templates/templates-row-actions.js":
/*!*******************************************************!*\
  !*** ./app/import/templates/templates-row-actions.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.response = exports.IMPORT_DATA = exports.EDIT_TEMPLATE = exports.CREATE_TEMPLATE = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _leLink = __webpack_require__(/*! ../../../../common/widgets/link/le-link */ "../common/widgets/link/le-link.js");

var _leLink2 = _interopRequireDefault(_leLink);

var _Aux = __webpack_require__(/*! ../../../../common/widgets/hoc/_Aux */ "../common/widgets/hoc/_Aux.js");

var _Aux2 = _interopRequireDefault(_Aux);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CREATE_TEMPLATE = exports.CREATE_TEMPLATE = 'create-template';
var EDIT_TEMPLATE = exports.EDIT_TEMPLATE = 'edit-template';
var IMPORT_DATA = exports.IMPORT_DATA = 'import-data';

var response = exports.response = {
  action: '',
  type: ''
};

var TemplatesRowControlles = function (_Component) {
  _inherits(TemplatesRowControlles, _Component);

  function TemplatesRowControlles(props) {
    _classCallCheck(this, TemplatesRowControlles);

    return _possibleConstructorReturn(this, (TemplatesRowControlles.__proto__ || Object.getPrototypeOf(TemplatesRowControlles)).call(this, props));
  }

  _createClass(TemplatesRowControlles, [{
    key: "getCreateButton",
    value: function getCreateButton() {
      var _this2 = this;

      if (!this.props.rowData.Exist) {
        return _reactVendor2.default.createElement(_leLink2.default, {
          config: {
            label: "Create Template",
            classes: "borders-over le-blu-link",
            name: ""
          },
          callback: function callback() {
            _this2.props.callback({
              action: CREATE_TEMPLATE,
              type: _this2.props.rowData.Object,
              data: _this2.props.rowData
            });
          }
        });
      } else {
        return null;
      }
    }
  }, {
    key: "getEditButton",
    value: function getEditButton() {
      var _this3 = this;

      if (this.props.rowData.Exist) {
        return _reactVendor2.default.createElement(_leLink2.default, {
          config: {
            label: "Edit Template",
            classes: "borders-over le-blu-link edit-button",
            name: ""
          },
          callback: function callback() {
            _this3.props.callback({
              action: EDIT_TEMPLATE,
              type: _this3.props.rowData.Object,
              data: _this3.props.rowData
            });
          }
        });
      } else {
        return null;
      }
    }
  }, {
    key: "getImportButton",
    value: function getImportButton() {
      var _this4 = this;

      if (this.props.rowData.Exist) {
        return _reactVendor2.default.createElement(_leLink2.default, {
          config: {
            label: "Import Data",
            classes: "borders-over le-blu-link import-button",
            name: ""
          },
          callback: function callback() {
            _this4.props.callback({
              action: IMPORT_DATA,
              type: _this4.props.rowData.Object,
              data: _this4.props.rowData
            });
          }
        });
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        _Aux2.default,
        null,
        this.getCreateButton(),
        this.getEditButton(),
        this.getImportButton()
      );
    }
  }]);

  return TemplatesRowControlles;
}(_reactVendor.Component);

exports.default = TemplatesRowControlles;

/***/ }),

/***/ "./app/import/templates/templates.js":
/*!*******************************************!*\
  !*** ./app/import/templates/templates.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactVendor = __webpack_require__(/*! ../../../../common/react-vendor */ "../common/react-vendor.js");

var _reactVendor2 = _interopRequireDefault(_reactVendor);

var _leButton = __webpack_require__(/*! ../../../../common/widgets/buttons/le-button */ "../common/widgets/buttons/le-button.js");

var _leButton2 = _interopRequireDefault(_leButton);

var _leToolbar = __webpack_require__(/*! ../../../../common/widgets/toolbar/le-toolbar */ "../common/widgets/toolbar/le-toolbar.js");

__webpack_require__(/*! ./templates.scss */ "./app/import/templates/templates.scss");

var _routingTest = __webpack_require__(/*! ../react/components/routing-test */ "./app/import/react/components/routing-test.js");

var _summary = __webpack_require__(/*! ./components/summary */ "./app/import/templates/components/summary.js");

var _summary2 = _interopRequireDefault(_summary);

var _states = __webpack_require__(/*! ../react/states */ "./app/import/react/states.js");

var _httpService = __webpack_require__(/*! ../../../../common/app/http/http-service */ "../common/app/http/http-service.js");

var _httpService2 = _interopRequireDefault(_httpService);

var _observer = __webpack_require__(/*! ../../../../common/app/http/observer */ "../common/app/http/observer.js");

var _observer2 = _interopRequireDefault(_observer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TemplatesComponent = function (_Component) {
  _inherits(TemplatesComponent, _Component);

  function TemplatesComponent(props) {
    _classCallCheck(this, TemplatesComponent);

    var _this = _possibleConstructorReturn(this, (TemplatesComponent.__proto__ || Object.getPrototypeOf(TemplatesComponent)).call(this, props));

    _this.emailCredentialConfig = {
      lable: "Setup Automation",
      classNames: "gray-button"
    };
    (0, _states.setAngularState)(_this.props.$state);
    return _this;
  }

  _createClass(TemplatesComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var router = (0, _routingTest.getRouter)();
      router.stateService.go("templatelist");
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _routingTest.clean)();
    }
  }, {
    key: "render",
    value: function render() {
      return _reactVendor2.default.createElement(
        "div",
        { className: "le-flex-v-panel main-container center-h" },
        _reactVendor2.default.createElement(
          "div",
          { className: "le-flex-v-panel templates-main-container" },
          _reactVendor2.default.createElement(
            _leToolbar.LeToolBar,
            null,
            _reactVendor2.default.createElement(
              "div",
              { className: "right" },
              _reactVendor2.default.createElement(_leButton2.default, {
                config: this.emailCredentialConfig,
                callback: function callback() {
                  _httpService2.default.get("/pls/dropbox", new _observer2.default(function (response) {
                    // console.log("BACK HERE ", response);
                  }), {
                    ErrorDisplayMethod: "Banner",
                    ErrorDisplayOptions: '{"title": "Warning"}',
                    ErrorDisplayCallback: "TemplatesStore.checkIfRegenerate"
                  });
                }
              })
            )
          ),
          _reactVendor2.default.createElement(
            _reactVendor.UIRouter,
            { router: (0, _routingTest.getRouter)() },
            _reactVendor2.default.createElement(_reactVendor.UIView, { name: "reactmain" })
          )
        )
      );
    }
  }]);

  return TemplatesComponent;
}(_reactVendor.Component);

angular.module("le.import.templates", []).service("TemplatesStore", ["$http", "Modal", function ($http, Modal) {
  var TemplatesStore = this;

  this.checkIfRegenerate = function (data) {
    switch (data.action) {
      case "ok":
        TemplatesStore.regenerate();
        break;

      case "cancel":
        TemplatesStore.removeUIActionModal(data.name);
        break;
    }
  };

  this.regenerate = function () {
    $http({
      method: "PUT",
      url: "/pls/dropbox/key",
      headers: {
        ErrorDisplayMethod: "",
        ErrorDisplayOptions: '{"confirmtext": "Download","title": "S3 Credentials"}',
        ErrorDisplayCallback: "TemplatesStore.download"
      },
      data: { AccessMode: "LatticeUser" }
    }).then(function onSuccess(response) {
      Modal.data = response.data.UIAction.message;
    }, function onError(response) {
      console.log(response);
    });
  };

  this.download = function (response) {
    if (response && response.action != "closedForced") {
      var toDownload = Modal.data;
      var element = document.createElement("a");
      element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(toDownload));
      element.setAttribute("download", "atlas_credentials.html");
      element.style.display = "none";
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
      TemplatesStore.removeUIActionModal(response.name);
      // let modal = Modal.get(response.name);
      // Modal.modalRemoveFromDOM(modal, { name: response.name });
    }
  };

  this.removeUIActionModal = function (modalName) {
    var modal = Modal.get(modalName);
    Modal.modalRemoveFromDOM(modal, { name: modalName });
  };
}]).component("templatesComponent", (0, _reactVendor.react2angular)(TemplatesComponent, [], ["$state"]));

/***/ }),

/***/ "./app/import/templates/templates.router.js":
/*!**************************************************!*\
  !*** ./app/import/templates/templates.router.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./templates */ "./app/import/templates/templates.js");

angular.module('lp.importtemplates', ['le.import.templates', 'le.summary']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.importtemplates', {
        url: '/templates',
        onEnter: function onEnter() {
            console.log('ENTERED');
        },
        params: {
            tenantName: { dynamic: true, value: '' },
            pageIcon: 'ico-analysis',
            pageTitle: 'Data Processing & Analysis'
        },
        views: {
            'summary@': {
                component: 'leSummaryComponent'
            },
            'main@': {
                component: 'templatesComponent'
            }
        }
        // redirectTo: 'home.import.entry.accounts'
    });
}]);

/***/ }),

/***/ "./app/import/templates/templates.scss":
/*!*********************************************!*\
  !*** ./app/import/templates/templates.scss ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./app/jobs/JobsRoutes.js":
/*!********************************!*\
  !*** ./app/jobs/JobsRoutes.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs', ['lp.jobs.model', 'lp.jobs.import', 'lp.jobs.export']).config(["$stateProvider", "$routeProvider", "$httpProvider", function ($stateProvider, $routeProvider, $httpProvider) {
    $stateProvider.state('home.jobs', {
        url: '/jobs',
        onExit: ["FilterService", function onExit(FilterService) {
            FilterService.clear();
        }],
        views: {
            // "navigation@": {
            //     controller: 'SidebarRootController',
            //     templateUrl: 'app/navigation/sidebar/RootView.html'
            // },
            "summary@": {
                controller: 'JobsTabsController',
                controllerAs: 'vm',
                templateUrl: 'app/jobs/tabs/jobstabs.component.html'
            }
        },
        redirectTo: 'jobs.status'
    }).state('home.model.jobs', {
        url: '/jobs',
        params: {
            pageIcon: 'ico-scoring',
            pageTitle: 'Jobs',
            jobCreationSuccess: null
        },
        resolve: {
            ResourceString: ["Model", function ResourceString(Model) {
                var sourceSchemaInterpretation = Model.ModelDetails.SourceSchemaInterpretation;

                if (sourceSchemaInterpretation == 'SalesforceAccount') {
                    var modelType = 'MODEL_SCORING_ACCOUNTS_SUMMARY_HEADER';
                } else {
                    var modelType = 'MODEL_SCORING_LEADS_SUMMARY_HEADER';
                }

                return modelType;
            }],
            ModelConfig: ["$q", "$rootScope", "Model", "JobsStore", "IsPmml", function ModelConfig($q, $rootScope, Model, JobsStore, IsPmml) {
                var config = {};
                var ModelId = Model.ModelId ? Model.ModelId : Model.ModelDetails ? Model.ModelDetails.ModelID : undefined;
                IsPmml = IsPmml || false;
                config.ModelId = ModelId;
                config.IsPmml = IsPmml;
                return config;
            }],
            InitJobs: ["$q", "Model", "JobsStore", function InitJobs($q, Model, JobsStore) {
                var deferred = $q.defer();
                JobsStore.getJobs(false, Model.ModelId).then(function (res) {
                    deferred.resolve();
                });
                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: 'OneLineController',
                templateUrl: 'app/navigation/summary/OneLineView.html'
            },
            "main@": {
                controller: 'JobsListCtrl',
                templateUrl: 'app/jobs/views/ListView.html'
            }
        }
    }).state('home.jobs.status', {
        url: '/status',
        params: {
            pageIcon: 'ico-cog',
            pageTitle: 'Jobs',
            jobCreationSuccess: null
        },

        resolve: {
            ModelConfig: function ModelConfig() {
                return {};
            }
        },
        views: {
            "main@": {
                controller: 'JobsListCtrl',
                templateUrl: 'app/jobs/views/ListView.html'
            }
        }
    }).state('home.jobs.data', {
        url: '/status/data',
        params: {
            pageIcon: 'ico-cog',
            pageTitle: 'Jobs',
            jobCreationSuccess: null
        },
        resolve: {
            InitJobs: ["$q", "JobsStore", function InitJobs($q, JobsStore) {
                var deferred = $q.defer();
                // if(JobsStore.isJobsEverFetched() == false){                               
                JobsStore.getJobs(false).then(function (res) {
                    deferred.resolve();
                });
                // }else{
                // deferred.resolve();
                // }
                return deferred.promise;
            }]
        },
        views: {
            "main@": {
                controller: 'DataProcessingComponent',
                controllerAs: 'vm',
                templateUrl: 'app/jobs/processing/dataprocessing.component.html'
            }
        }
    }).state('home.jobs.export', {
        url: '/status/export',
        params: {
            pageIcon: 'ico-cog',
            pageTitle: 'Jobs',
            jobCreationSuccess: null
        },
        resolve: {
            InitJobs: ["$q", "JobsStore", function InitJobs($q, JobsStore) {
                var deferred = $q.defer();

                // if (JobsStore.isJobsEverFetched() == false) {
                JobsStore.getJobs(false).then(function (res) {
                    deferred.resolve();
                });
                // } else {
                // deferred.resolve();
                // }

                return deferred.promise;
            }]
        },
        views: {
            "main@": {
                controller: 'ExportJobsController',
                controllerAs: 'vm',
                templateUrl: 'app/jobs/export/export.component.html'
            }
        }
    }).state('home.jobs.summary', {
        url: '/:jobId/summary',
        params: {
            pageIcon: 'ico-cog',
            pageTitle: 'View Report'
        },
        resolve: {
            InitJob: ["$q", "$stateParams", "JobsStore", function InitJob($q, $stateParams, JobsStore) {
                var deferred = $q.defer();

                JobsStore.getJob($stateParams.jobId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "main@": {
                controller: 'JobsSummaryController',
                controllerAs: 'vm',
                templateUrl: 'app/jobs/report/jobreport/jobreport.component.html'
            }
        }
    })
    /*
    .state('home.jobs.status.ready', {
        url: '/ready/:jobId',
        params: {
            pageIcon: 'ico-cog',
            pageTitle: 'View Report'
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/table/TableView.html'
            },
            "main@": {
                templateUrl: 'app/jobs/import/ready/ReadyView.html'
            }
        }
    })
    */
    .state('home.jobs.status.csv', {
        url: '/csv/:jobId',
        params: {
            pageIcon: 'ico-cog',
            pageTitle: 'View Report'
        },
        resolve: {
            JobResult: ["$q", "$stateParams", "JobsStore", "ServiceErrorUtility", function JobResult($q, $stateParams, JobsStore, ServiceErrorUtility) {
                var deferred = $q.defer();
                JobsStore.getJob($stateParams.jobId).then(function (result) {
                    ServiceErrorUtility.check({ data: result, config: { headers: { ErrorDisplayMethod: 'banner' } } });
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            ResourceString: function ResourceString() {
                return 'SUMMARY_JOBS_IMPORT_CSV';
            }
        },
        views: {
            "summary@": {
                controller: 'OneLineController',
                templateUrl: 'app/navigation/summary/OneLineView.html'
            },
            "main@": {
                controller: 'CSVReportController',
                templateUrl: 'app/create/jobreport/JobReportView.html'
            }
        }
    });
}]);

/***/ }),

/***/ "./app/jobs/controllers/DataImportJobsController.js":
/*!**********************************************************!*\
  !*** ./app/jobs/controllers/DataImportJobsController.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.imp', []).controller('DataImportJobsCtrl', ["$scope", "$http", "JobsStore", "$filter", function ($scope, $http, JobsStore, $filter) {
    // filter:{jobType:'dataProcessingWorkflow'}
    $scope.jobs = JobsStore.data.jobs;
    $scope.jobs = $filter('filter')($scope.jobs, { jobType: 'dataProcessingWorkflow' }, true);
    $scope.loadingJobs = true;
    // JobsStore.getDataImportJobs().then(function(jobs) {
    //     $scope.loadingJobs = false;
    // });

    $scope.successMsg = null;
    $scope.errorMsg = null;
    $scope.queuedMsg = null;
    $scope.pagesize = 10;

    $scope.header = {
        filter: {
            label: 'Filter By',
            unfiltered: $scope.jobs,
            filtered: $scope.jobs,
            items: [{ label: "All", action: {} }, { label: "Completed", action: { status: 'Completed' } }, { label: "Pending", action: { status: 'Pending' } }, { label: "Running", action: { status: 'Running' } }, { label: "Failed", action: { status: "Failed" } }, { label: "Cancelled", action: { status: "Cancelled" } }]
        },
        maxperpage: {
            label: false,
            icon: 'fa fa-chevron-down',
            iconlabel: 'Page Size',
            iconclass: 'white-button',
            iconrotate: true,
            items: [{ label: '10 items', icon: 'numeric', click: function click() {
                    $scope.pagesize = 10;
                } }, { label: '25 items', icon: 'numeric', click: function click() {
                    $scope.pagesize = 25;
                } }, { label: '50 items', icon: 'numeric', click: function click() {
                    $scope.pagesize = 50;
                } }, { label: '100 items', icon: 'numeric', click: function click() {
                    $scope.pagesize = 100;
                } }]
        },
        sort: {
            label: 'Sort By',
            icon: 'numeric',
            order: '-',
            property: 'timestamp',
            items: [{ label: 'Timestamp', icon: 'numeric', property: 'timestamp' }, { label: 'File Name', icon: 'alpha', property: 'fileName' }, { label: 'Job Status', icon: 'alpha', property: 'status' }]
        }
    };

    $scope.clearMessages = function () {
        $scope.successMsg = null;
        $scope.errorMsg = null;
        $scope.queuedMsg = null;
    };
}]);

/***/ }),

/***/ "./app/jobs/controllers/ListController.js":
/*!************************************************!*\
  !*** ./app/jobs/controllers/ListController.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.model', ['lp.jobs.status', 'pd.navigation.pagination', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.services.HealthService', '720kb.tooltips']).controller('JobsListCtrl', ["$scope", "$state", "$stateParams", "$http", "$timeout", "$interval", "$filter", "JobsStore", "JobsService", "BrowserStorageUtility", "ScoreLeadEnrichmentModal", "HealthService", "ModelConfig", "FilterService", function ($scope, $state, $stateParams, $http, $timeout, $interval, $filter, JobsStore, JobsService, BrowserStorageUtility, ScoreLeadEnrichmentModal, HealthService, ModelConfig, FilterService) {
    $scope.expanded = {};
    $scope.statuses = {};
    $scope.cancelling = {};
    $scope.showEmptyJobsMessage = false;
    $scope.hideCreationMessage = true;
    $scope.state = $state.current.name == 'home.model.jobs' ? 'model' : 'all';
    $scope.jobs = JobsStore.data.jobs;
    $scope.isInternalAdmin = false;
    $scope.auth = BrowserStorageUtility.getTokenDocument();
    $scope.pagesize = 10;
    $scope.currentPage = 1;

    var clientSession = BrowserStorageUtility.getClientSession();
    $scope.TenantId = clientSession.Tenant.Identifier;

    $scope.init = function () {
        if (BrowserStorageUtility.getSessionDocument() != null && BrowserStorageUtility.getSessionDocument().User != null && BrowserStorageUtility.getSessionDocument().User.AccessLevel != null) {
            var accessLevel = BrowserStorageUtility.getSessionDocument().User.AccessLevel;
            if (accessLevel == "INTERNAL_ADMIN" || accessLevel == "SUPER_ADMIN") {
                $scope.isInternalAdmin = true;
            }
        }

        var modelId = ModelConfig.ModelId; //$scope.state == 'model' ? $stateParams.modelId : null;

        if (modelId && modelId !== '') {
            if (!JobsStore.data.models[modelId]) {
                JobsStore.data.models[modelId] = [];
            }

            $scope.jobs = JobsStore.data.models[modelId];
        } else {
            $scope.jobs = JobsStore.data.jobs; //$filter('filter')(JobsStore.data.jobs, { jobType: '!processAnalyzeWorkflow' }, true);//JobsStore.data.dataModelJobs;
            if (JobsStore.data.isModelState) {
                $scope.jobs = [];
            }
        }

        $scope.header = {
            filter: {
                label: 'Filter By',
                unfiltered: $scope.jobs,
                filtered: $scope.jobs,
                items: [{ label: "All", action: {} }, { label: "Completed", action: { jobStatus: 'Completed' } }, { label: "Pending", action: { jobStatus: 'Pending' } }, { label: "Running", action: { jobStatus: 'Running' } }, { label: "Failed", action: { jobStatus: "Failed" } }, { label: "Cancelled", action: { jobStatus: "Cancelled" } }]
            },
            maxperpage: {
                label: false, //'Page Size',
                //click: false,
                //class: 'white-button select-label',
                icon: 'fa fa-chevron-down',
                iconlabel: 'Page Size',
                iconclass: 'white-button',
                iconrotate: true,
                items: [{ label: '10 items', icon: 'numeric', click: function click() {
                        $scope.pagesize = 10;FilterService.setFilters('jobs.list.pagesize', { pagesize: $scope.pagesize });$scope.currentPage = 1;
                    } }, { label: '25 items', icon: 'numeric', click: function click() {
                        $scope.pagesize = 25;FilterService.setFilters('jobs.list.pagesize', { pagesize: $scope.pagesize });$scope.currentPage = 1;
                    } }, { label: '50 items', icon: 'numeric', click: function click() {
                        $scope.pagesize = 50;FilterService.setFilters('jobs.list.pagesize', { pagesize: $scope.pagesize });$scope.currentPage = 1;
                    } }, { label: '100 items', icon: 'numeric', click: function click() {
                        $scope.pagesize = 100;FilterService.setFilters('jobs.list.pagesize', { pagesize: $scope.pagesize });$scope.currentPage = 1;
                    } }]
            },
            sort: {
                label: 'Sort By',
                icon: 'numeric',
                order: '-',
                property: 'timestamp',
                items: [{ label: 'Timestamp', icon: 'numeric', property: 'timestamp' }, { label: 'Model Name', icon: 'alpha', property: 'modelName' }, { label: 'Job Type', icon: 'alpha', property: 'displayName' }, { label: 'Job Status', icon: 'alpha', property: 'status' }]
            },
            scoring: {
                label: 'Score List',
                sref: 'home.model.scoring',
                class: 'orange-button select-label',
                icon: 'fa fa-chevron-down',
                iconclass: 'orange-button select-more',
                iconrotate: true,
                items: [{
                    click: $scope.handleRescoreClick,
                    label: 'Score Training Set',
                    icon: 'fa fa fa-th-list'
                }, {
                    sref: 'home.model.scoring',
                    label: 'Score List',
                    icon: 'fa fa-file-excel-o'
                }]
            }
        };

        function getAllJobs(use_cache) {
            $scope.loadingJobs = true;
            JobsStore.getJobs(use_cache, modelId).then(function (result) {
                $scope.showEmptyJobsMessage = ($scope.jobs == null || $scope.jobs.length == 0) && !use_cache;
                $scope.loadingJobs = false;
            });
        }

        var BULK_SCORING_INTERVAL = 30 * 1000,
            BULK_SCORING_ID;

        // this stuff happens only on Model Bulk Scoring page
        // getAllJobs();Call done in the JobsRoutes.js
        getAllJobs();
        if (modelId) {
            BULK_SCORING_ID = $interval(function () {
                getAllJobs();
            }, BULK_SCORING_INTERVAL);
        }

        $scope.$on("JobCompleted", function (evt, data) {
            $scope.succeeded = true;
            if ($scope.state == 'model' || data.jobType.toUpperCase().indexOf('SCORE') > -1) {
                $scope.successMsg = 'Success! Scoring job has completed.';
            } else {
                $scope.successMsg = 'Success! Modeling job has completed.';
            }
        });

        $scope.$on("$destroy", function () {
            $interval.cancel(BULK_SCORING_ID);
            $scope.expanded = {};
            $scope.statuses = {};
            $timeout.cancel($scope.timeoutTask);
        });

        $scope.$on("SCORING_JOB_SUCCESS", function (event, data) {
            $scope.handleJobCreationSuccess(data);
        });

        $scope.handleJobCreationSuccess($stateParams.jobCreationSuccess);

        var filterStore = FilterService.getFilters('jobs.list.pagesize');
        if (filterStore) {
            $scope.pagesize = filterStore.pagesize;
        }
    };

    $scope.handleJobCreationSuccess = function (data) {
        if (data) {
            $scope.jobCreationSuccess = JSON.parse(data);
            $scope.hideCreationMessage = false;
            if ($scope.jobCreationSuccess) {
                if ($scope.state == "all") {
                    $scope.jobQueuedMessage = "Your model has been queued for creation.";
                } else if ($scope.jobCreationSuccess == true) {
                    $scope.jobQueuedMessage = "Your scoring job has been queued";
                }
            } else {
                if ($scope.state == "all") {
                    $scope.jobQueuedMessage = "Your model has failed to start running.";
                } else {
                    $scope.jobQueuedMessage = "Your scoring job has failed to start running";
                }
            }

            $scope.timeoutTask = $timeout($scope.closeJobCreationMessage, 30000);
        }
    };

    $scope.handleRescoreClick = function ($event) {
        if ($event) {
            $event.target.disabled = true;
        }
        ScoreLeadEnrichmentModal.showRescoreModal();
    };

    $scope.closeJobSuccessMessage = function () {
        $scope.succeeded = false;
    };

    $scope.closeJobCreationMessage = function () {
        $scope.jobCreationSuccess = null;
        $scope.hideCreationMessage = true;
        if ($scope.state == 'model') {
            $state.go('home.model.jobs', { 'jobCreationSuccess': null });
        } else {
            $state.go('home.jobs.status', { 'jobCreationSuccess': null });
        }
    };

    $scope.checkStatusBeforeScore = function () {
        HealthService.checkSystemStatus().then(function () {
            $state.go('home.model.scoring');
        });
    };

    $scope.init();
}]);

/***/ }),

/***/ "./app/jobs/controllers/RowController.js":
/*!***********************************************!*\
  !*** ./app/jobs/controllers/RowController.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.status', ['lp.jobs.modals.cancelmodal', 'lp.create.import.report', 'mainApp.models.services.ModelService']).directive('jobStatusRow', ["ModelStore", function (ModelStore) {
    return {
        restrict: 'EA',
        templateUrl: 'app/jobs/views/RowView.html',
        scope: {
            job: '=',
            state: '=',
            statuses: '=',
            expanded: '=',
            cancelling: '=',
            admin: '=',
            auth: '='
        },
        controller: ["$scope", "$state", "JobsStore", "JobsService", "CancelJobModal", "RatingsEngineStore", "BrowserStorageUtility", function controller($scope, $state, JobsStore, JobsService, CancelJobModal, RatingsEngineStore, BrowserStorageUtility) {
            var job = $scope.job;

            // console.log(job);

            $scope.showProgress = false;
            $scope.jobType = job.jobType ? job.jobType : 'placeholder';
            $scope.jobRunning = false;
            $scope.jobCompleted = false;
            $scope.jobRowExpanded = $scope.expanded[job.id] ? true : false;
            $scope.job.isDeleted = job.isDeleted;
            $scope.job.modelName = job.modelName;
            $scope.job.rating_id = job.inputs.RATING_ENGINE_ID;
            $scope.isRatingEngine = job.inputs.RATING_ENGINE_ID != undefined;
            $scope.isPMML = job.modelType === 'PmmlModel';

            if ($scope.job.rating_id && JobsStore.cancelledJobs[$scope.job.rating_id] != undefined) {
                $scope.cancelling[job.id] = true;
            }

            job.cancelling = $scope.cancelling[job.id] ? true : false;
            $scope.cancelClicked = $scope.cancelling[job.id] ? true : false;

            // if ($scope.isRatingEngine) {
            //     console.log(job, job.inputs.RATING_ENGINE_ID, ' -- ',job.inputs.RATING_MODEL_ID);
            //     RatingsEngineStore.getRatingModel(job.inputs.RATING_ENGINE_ID, job.inputs.RATING_MODEL_ID).then(function(model){                
            //         console.log('RET ', model);    
            //         var modelId = model.AI.modelSummary ? model.AI.modelSummary.Id : null,
            //             modelingJobId = model.AI.modelingJobId;

            //         $scope.job.modelId = modelId;
            //     });
            // }

            var clientSession = BrowserStorageUtility.getClientSession();
            $scope.TenantId = clientSession.Tenant.Identifier;

            switch ($scope.jobType.toLowerCase()) {
                case "scoreworkflow":
                    $scope.job.displayName = "Bulk Scoring";break;
                case "ratingenginescoreworkflow":
                    $scope.job.displayName = "Bulk Scoring";break;
                case "placeholder":
                    $scope.job.displayName = "Pending...";break;
                case "importmatchandscoreworkflow":
                    $scope.job.displayName = "Bulk Scoring";break;
                case "importandrtsbulkscoreworkflow":
                    $scope.job.displayName = "Bulk Scoring";break;
                case "rtsbulkscoreworkflow":
                    $scope.job.displayName = "Bulk Scoring";break;
                case "importmatchandmodelworkflow":
                    $scope.job.displayName = "Create Model (Training Set)";break;
                case "modelandemailworkflow":
                    $scope.job.displayName = "Create Model (Remodel)";break;
                case "pmmlmodelworkflow":
                    $scope.job.displayName = "Create Model (PMML File)";break;
                case "processanalyzeworkflow":
                    $scope.job.displayName = "Data Processing & Analysis";break;
                case "playlaunchworkflow":
                    $scope.job.displayName = "Campaign Launch";break;
                default:
                    $scope.job.displayName = "Create Model";
            }

            if ($scope.job.displayName === "Bulk Scoring") {
                $scope.isScoringJob = true;
            }
            $scope.jobFailed = $scope.job.status === 'Failed';
            $scope.stepsCompletedTimes;

            var periodicQueryId;
            var TIME_INTERVAL_BETWEEN_JOB_STATUS_CHECKS = 8 * 1000;

            $scope.cancelJobClick = function ($event) {
                if ($event != null) {
                    $event.stopPropagation();
                }
                CancelJobModal.show(job.id, { ratingId: $scope.job.rating_id });
            };

            $scope.$on("updateAsCancelledJob", function (event, args) {
                $scope.cancelClicked = true;
                if (job.id === args) {
                    job.cancelling = true;
                }
                $scope.cancelling[args] = true;
            });

            $scope.downloadErrorLogClick = function ($event) {
                JobsService.downloadErrorLog();
            };

            if (!$scope.jobRowExpanded || $scope.statuses[job.id] == null) {
                $scope.jobStepsRunningStates = {
                    load_data: false, match_data: false, generate_insights: false,
                    create_global_model: false, create_global_target_market: false,
                    score_training_set: false
                };
                $scope.jobStepsCompletedStates = {
                    load_data: false, match_data: false, generate_insights: false,
                    create_global_model: false, create_global_target_market: false,
                    score_training_set: false
                };
            } else {
                $scope.jobStepsRunningStates = $scope.statuses[job.id].running;
                $scope.jobStepsCompletedStates = $scope.statuses[job.id].completed;
                $scope.stepsCompletedTimes = $scope.statuses[job.id].completedTimes;
                $scope.stepFailed = $scope.statuses[job.id].stepFailed;
            }
            if ($scope.job.status === "Running") {
                $scope.jobRunning = true;
                periodicQueryJobStatus($scope.job.id);
            } else if ($scope.job.status === "Completed") {
                $scope.jobCompleted = true;
            } else if ($scope.stepFailed) {
                $scope.jobStepsRunningStates[$scope.stepFailed] = false;
                $scope.jobStepsCompletedStates[$scope.stepFailed] = false;
                if ($scope.stepsCompletedTimes[$scope.stepFailed]) {
                    delete $scope.stepsCompletedTimes[$scope.stepFailed];
                }
            }

            $scope.expandJobStatus = function () {
                $scope.jobRowExpanded = true;
                $scope.expanded[job.id] = true;

                if ($scope.job.id != null) {
                    JobsStore.getJob($scope.job.id).then(function (result) {
                        updateStatesBasedOnJobStatus(result);
                    });
                }
            };

            // Use this in JobStatusRow.html
            // <a href="javascript:void(0)" data-ng-click="rescoreFailedJob({jobId: job.id})" ng-show="job.status == 'Failed'"><i class="fa fa-refresh"></i>Restart</a>
            $scope.rescoreFailedJob = function () {
                JobsService.rescoreJob(job.id).then(function (response) {
                    var jobId = $scope.job.id;
                    JobsStore.getJob(jobId);
                });
            };

            $scope.clickGetScoringResults = function ($event) {

                $scope.showProgress = true;

                JobsService.getScoringResults($scope.job).then(function (result) {
                    var blob = new Blob([result], { type: "application/csv" }),
                        date = new Date(),
                        year = date.getFullYear(),
                        month = (1 + date.getMonth()).toString(),
                        month = month.length > 1 ? month : '0' + month,
                        day = date.getDate().toString(),
                        day = day.length > 1 ? day : '0' + day,
                        filename = 'score.' + $scope.job.id + '.' + year + month + day + '.csv';

                    saveAs(blob, filename);
                    $scope.showProgress = false;
                });
            };

            function isCompleted() {
                for (var step in $scope.jobStepsCompletedStates) {
                    if (!$scope.jobStepsCompletedStates[step]) {
                        return false;
                    }
                }
                return true;
            }
            // need this to get the status of job that is expanded after refresh
            if ($scope.jobRowExpanded) {
                $scope.expandJobStatus();
            }

            $scope.unexpandJobStatus = function () {
                $scope.jobRowExpanded = false;
                $scope.expanded[job.id] = false;
            };

            function cancelPeriodJobStatusQuery() {
                clearInterval(periodicQueryId);
                periodicQueryId = null;
            }

            $scope.showFileName = false;
            var JobReport = null;

            function updateStatesBasedOnJobStatus(jobStatus) {
                $scope.job.status = jobStatus.jobStatus;
                $scope.job.user = jobStatus.user;
                $scope.job.sourceFileExists = jobStatus.sourceFileExists;
                $scope.job.source = jobStatus.source;
                $scope.job.applicationId = jobStatus.applicationId;
                $scope.job.applicationLogUrl = jobStatus.applicationLogUrl;
                for (var i = 0; i < jobStatus.stepsCompleted.length; i++) {
                    $scope.jobStepsCompletedStates[jobStatus.stepsCompleted[i]] = true;
                    $scope.jobStepsRunningStates[jobStatus.stepsCompleted[i]] = false;
                }

                if (jobStatus.jobStatus === "Running") {
                    $scope.jobStepsRunningStates[jobStatus.stepRunning] = true;
                    $scope.jobStepsCompletedStates[jobStatus.stepRunning] = false;

                    if ($scope.jobStepsCompletedStates["score_training_set"]) {
                        $scope.jobStepsCompletedStates['generate_insights'] = true;
                        $scope.jobStepsCompletedStates['create_global_target_market'] = true;

                        $scope.jobStepsRunningStates['generate_insights'] = false;
                        $scope.jobStepsRunningStates['create_global_target_market'] = false;

                        $scope.jobStepsRunningStates['score_training_set'] = true;
                        $scope.jobStepsCompletedStates['score_training_set'] = false;
                    }
                }

                if ($scope.jobType.toLowerCase() === "importmatchandscoreworkflow" || $scope.jobType.toLowerCase() === "importandrtsbulkscoreworkflow" || $scope.jobType.toLowerCase() === "importmatchandmodelworkflow" || $scope.jobType.toLowerCase() === "customeventmodelingworkflow") {
                    if (jobStatus.applicationId != null && jobStatus.source != null) {
                        $scope.showFileName = true;
                    }
                }
                $scope.stepsCompletedTimes = jobStatus.completedTimes;

                var stepFailed = jobStatus.stepFailed;
                if ((stepFailed === "load_data" || stepFailed === "generate_insights" || stepFailed === "create_global_target_market") && $scope.jobStepsCompletedStates["score_training_set"]) {
                    stepFailed = "score_training_set";
                }

                if (stepFailed) {
                    $scope.jobStepsRunningStates[stepFailed] = false;
                    $scope.jobStepsCompletedStates[stepFailed] = false;
                    $scope.stepFailed = stepFailed;

                    if ($scope.stepsCompletedTimes[stepFailed]) {
                        delete $scope.stepsCompletedTimes[stepFailed];
                    }
                }

                saveJobStatusInParentScope();

                if (jobStatus.jobStatus === "Completed") {
                    $scope.jobRunning = false;
                    $scope.jobCompleted = true;
                } else if (jobStatus.jobStatus === "Failed" || jobStatus.jobStatus === "Cancelled") {
                    $scope.jobRunning = false;
                    for (var jobState in $scope.jobStepsRunningStates) {
                        $scope.jobStepsRunningStates[jobState] = false;
                    }
                }

                var reports = jobStatus.reports;
                if (reports != null) {
                    reports.forEach(function (item) {
                        if (item.purpose == "IMPORT_DATA_SUMMARY") {
                            var data;
                            $scope.data = data = JSON.parse(item.json.Payload);
                            JobReport = item;

                            JobReport.name = JobReport.name.substr(0, JobReport.name.indexOf('.csv') + 4);

                            $scope.report = JobReport;
                            $scope.data.total_records = data.imported_records + data.ignored_records;
                            $scope.errorlog = '/files/fileuploads/' + JobReport.name + '/import/errors';
                        }
                    });
                }
            }

            function saveJobStatusInParentScope() {
                if (!$scope.statuses[job.id]) {
                    $scope.statuses[job.id] = {};
                }
                $scope.statuses[job.id]["running"] = $scope.jobStepsRunningStates;
                $scope.statuses[job.id]["completed"] = $scope.jobStepsCompletedStates;
                $scope.statuses[job.id]["completedTimes"] = $scope.stepsCompletedTimes;
                $scope.statuses[job.id]["stepFailed"] = $scope.stepFailed;
            }

            function periodicQueryJobStatus(jobId) {
                periodicQueryId = setInterval(function () {
                    queryJobStatusAndSetStatesVariables(jobId);
                }, TIME_INTERVAL_BETWEEN_JOB_STATUS_CHECKS);
            }

            function queryJobStatusAndSetStatesVariables(jobId) {
                JobsStore.getJob(jobId).then(function (response) {
                    var jobStatus = response.jobStatus;
                    if (jobStatus === "Completed" || jobStatus === "Failed" || jobStatus === "Cancelled") {
                        cancelPeriodJobStatusQuery();
                    }
                    if (jobStatus === "Completed") {
                        $scope.$emit("JobCompleted", response);
                    }
                    updateStatesBasedOnJobStatus(response);
                });
            }

            $scope.$on("$destroy", function () {
                cancelPeriodJobStatusQuery();
            });
        }]
    };
}]);

/***/ }),

/***/ "./app/jobs/export/export.component.js":
/*!*********************************************!*\
  !*** ./app/jobs/export/export.component.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.export', []).controller('ExportJobsController', ["$q", "$scope", "$http", "JobsStore", "$filter", "SegmentService", "FilterService", function ($q, $scope, $http, JobsStore, $filter, SegmentService, FilterService) {
    var vm = this;
    vm.loading = false;
    vm.loadingJobs = JobsStore.data.loadingJobs;
    vm.pagesize = 10;
    vm.query = '';
    vm.currentPage = 1;
    vm.showDownloadMessage = false;
    vm.header = {
        maxperpage: {
            label: false,
            icon: 'fa fa-chevron-down',
            iconlabel: 'Page Size',
            iconclass: 'white-button',
            iconrotate: true,
            items: [{ label: '10 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 10;vm.currentPage = 1;FilterService.setFilters('jobs.export.pagesize', { pagesize: vm.pagesize });
                } }, { label: '25 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 25;vm.currentPage = 1;FilterService.setFilters('jobs.export.pagesize', { pagesize: vm.pagesize });
                } }, { label: '50 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 50;vm.currentPage = 1;FilterService.setFilters('jobs.export.pagesize', { pagesize: vm.pagesize });
                } }, { label: '100 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 100;vm.currentPage = 1;FilterService.setFilters('jobs.export.pagesize', { pagesize: vm.pagesize });
                } }]
        },
        sort: {
            label: 'Sort By',
            icon: 'numeric',
            order: '-',
            property: 'timestamp',
            items: [{ label: 'Time stamp', icon: 'numeric', property: 'startTimestamp' },
            // { label: 'Segment Name', icon: 'alpha', property: 'fileName' },
            { label: 'Job Status', icon: 'alpha', property: 'status' }]
        }
    };

    angular.extend(vm, {
        jobs: JobsStore.getList('export'),
        successMsg: null,
        errorMsg: null,
        queuedMsg: null
    });

    vm.init = function () {
        // vm.loading = true;
        // JobsStore.getJobs(false).then(function (result) {
        vm.jobs = JobsStore.getList('export');
        //     vm.loading = false;
        // });

        var filterStore = FilterService.getFilters('jobs.export.pagesize');
        if (filterStore) {
            vm.pagesize = filterStore.pagesize;
        }
    };

    this.init();

    vm.isExpired = function (job) {
        var currentTime = Date.now();
        return 'EXPIRE_BY_UTC_TIMESTAMP' in job.inputs ? currentTime > job.inputs['EXPIRE_BY_UTC_TIMESTAMP'] : false;
    };

    vm.downloadSegmentExport = function (jobId) {
        if (jobId && jobId !== null) {
            SegmentService.DownloadExportedSegment(jobId).then(function (result) {
                var contentDisposition = result.headers('Content-Disposition');
                var element = document.createElement("a");
                var fileName = contentDisposition.match(/filename="(.+)"/)[1];
                element.download = fileName;
                var file = new Blob([result.data], { type: 'application/octect-stream' });
                var fileURL = window.URL.createObjectURL(file);
                element.href = fileURL;
                document.body.appendChild(element);
                element.click();
                document.body.removeChild(element);
                vm.showDownloadMessage = true;
            });
        }
    };

    vm.getStatus = function (job) {
        switch (job.jobStatus) {
            case 'Failed':
                return 'Failed';
            case 'Pending':
            case 'Running':
                return 'In Progress';
            case 'Completed':
                if (vm.isExpired(job)) {
                    return 'Expired';
                }
        }
    };

    vm.hideDownloadMessage = function () {
        vm.showDownloadMessage = false;
    };

    vm.clearMessages = function () {
        vm.successMsg = null;
        vm.errorMsg = null;
        vm.queuedMsg = null;
    };
}]);

/***/ }),

/***/ "./app/jobs/jobs.index.js":
/*!********************************!*\
  !*** ./app/jobs/jobs.index.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./JobsRoutes */ "./app/jobs/JobsRoutes.js");

__webpack_require__(/*! ./controllers/ListController */ "./app/jobs/controllers/ListController.js");

__webpack_require__(/*! ./controllers/RowController */ "./app/jobs/controllers/RowController.js");

__webpack_require__(/*! ./controllers/DataImportJobsController */ "./app/jobs/controllers/DataImportJobsController.js");

__webpack_require__(/*! ./export/export.component */ "./app/jobs/export/export.component.js");

__webpack_require__(/*! ./modals/CancelJobModal */ "./app/jobs/modals/CancelJobModal.js");

__webpack_require__(/*! ./processing/processing.index */ "./app/jobs/processing/processing.index.js");

__webpack_require__(/*! ./report/report.index */ "./app/jobs/report/report.index.js");

__webpack_require__(/*! ./services/JobsService */ "./app/jobs/services/JobsService.js");

__webpack_require__(/*! ./services/JobsStore */ "./app/jobs/services/JobsStore.js");

__webpack_require__(/*! ./tabs/jobstabs.component */ "./app/jobs/tabs/jobstabs.component.js");

/***/ }),

/***/ "./app/jobs/modals/CancelJobModal.js":
/*!*******************************************!*\
  !*** ./app/jobs/modals/CancelJobModal.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.modals.cancelmodal', ['mainApp.appCommon.utilities.ResourceUtility']).service('CancelJobModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "JobsService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, JobsService) {
    var self = this;
    this.show = function (jobId, opts, callback) {
        $http.get('app/jobs/modals/CancelJobModalView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.jobId = jobId;
            scope.opts = opts || {};

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('CancelJobController', ["$scope", "$state", "$rootScope", "ResourceUtility", "JobsService", "ImportStore", "JobsStore", function ($scope, $state, $rootScope, ResourceUtility, JobsService, ImportStore, JobsStore) {

    $scope.ResourceUtility = ResourceUtility;

    $scope.cancelJobClickConfirm = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }
        $("#modalContainer").modal('hide');
        JobsService.cancelJob($scope.jobId).then(function (result) {
            JobsStore.cancelledJobs[$scope.opts.ratingId] = $scope.jobId;
            delete JobsStore.inProgressModelJobs[$scope.opts.ratingId];
            $rootScope.$broadcast("updateAsCancelledJob", $scope.jobId);
        });
    };

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };

    $scope.resetImport = function () {
        ImportStore.ResetAdvancedSettings();
        $state.go('home.models.import');
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/jobs/processing/chevron/chevron.component.js":
/*!**********************************************************!*\
  !*** ./app/jobs/processing/chevron/chevron.component.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.chevron', []).directive('chevron', [function () {
    var controller = ['$scope', function ($scope) {
        var vm = this;
        vm.failed = false;
        vm.chevronConfig = $scope.chevronconfig;

        function init() {}

        init();

        function isStepStatusMatching(stepName, status) {
            for (var i = 0; i < $scope.stepscompleted.length; i++) {
                if ($scope.stepscompleted[i].name == stepName && $scope.stepscompleted[i].stepStatus == status) {
                    return true;
                }
            }
            return false;
        }

        vm.isStepDone = function (index) {
            if (isStepStatusMatching(vm.chevronConfig[index].name, 'Completed') || $scope.jobstatus == 'Completed') {
                return true;
            } else {
                return false;
            }
        };

        vm.isStepRunning = function (index) {
            if ($scope.jobstatus === 'Running') {
                if (isStepStatusMatching(vm.chevronConfig[index].name, 'Running')) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        };

        vm.isStepFailed = function (index) {
            if ($scope.jobstatus === 'Failed') {
                if (isStepStatusMatching(vm.chevronConfig[index].name, 'Failed')) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        };

        /**
         * We expect the list in Ascending order
         * @param {*} listSteps 
         */
        function getLatestEndTime(listSteps) {
            var latest = '';
            if (listSteps.length > 0) {
                latest = listSteps[listSteps.length - 1].endTimestamp;
            }
            return latest;
        }

        vm.getEndTime = function (index) {
            var stepName = vm.chevronConfig[index].name;
            var listSteps = [];
            for (var i = 0; i < $scope.stepscompleted.length; i++) {
                if ($scope.stepscompleted[i].name == stepName && $scope.stepscompleted[i].endTimestamp && $scope.stepscompleted[i].endTimestamp != null) {
                    listSteps.push($scope.stepscompleted[i]);
                }
            }
            return getLatestEndTime(listSteps);
        };
    }];

    return {
        restrict: 'E',
        scope: {
            stepscompleted: '=', jobstatus: '=', chevronconfig: '='
        },
        controller: controller,
        controllerAs: 'vm',
        templateUrl: "app/jobs/processing/chevron/chevron.component.html"
    };
}]);

/***/ }),

/***/ "./app/jobs/processing/dataprocessing.component.js":
/*!*********************************************************!*\
  !*** ./app/jobs/processing/dataprocessing.component.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.import', ['lp.jobs.import.row', 'lp.jobs.row.subjobs', 'lp.jobs.chevron', 'common.modal', 'mainApp.core.utilities.BrowserStorageUtility']).service('Browser', ['$window', function ($window) {

    this.IEVersion = function () {
        var sAgent = $window.navigator.userAgent;
        var Idx = sAgent.indexOf("MSIE");

        // If IE, return version number.
        if (Idx > 0) return parseInt(sAgent.substring(Idx + 5, sAgent.indexOf(".", Idx)));

        // If IE 11 then look for Updated user agent string.
        else if (!!navigator.userAgent.match(/Trident\/7\./)) {
                return 11;
            } else {
                return 0; //It is not IE
            }
    };
}]).directive('onFinishRender', ['$timeout', 'Browser', function ($timeout, browser) {
    return {
        restrict: 'A',
        link: function link(scope, element, attr) {
            $timeout(function () {

                var tmp = browser.IEVersion();
                if (tmp > 0) {
                    var nodes = element.context.childNodes;
                    var j = 1;
                    for (var i = 0; i < nodes.length; i++) {
                        var className = nodes[i].className;
                        if (className && className.indexOf('le-row') >= 0) {
                            nodes[i].style['msGridRow'] = j;
                            j++;
                        }
                    }
                }
            });
        }
    };
}]).filter('jobEmpty', ['AuthorizationUtility', function (AuthorizationUtility) {
    var right = AuthorizationUtility.checkAccessLevel(['INTERNAL_ADMIN', 'SUPER_ADMIN']);
    return function (jobs) {
        var ret = jobs.filter(function (job) {
            if (job && job.id == 0 && job.subJobs.length == 0 && right || job.id != 0 || job.subJobs.length > 0) {
                return job;
            }
        });
        return ret;
    };
}]).controller('DataProcessingComponent', ["$q", "$scope", "$http", "JobsStore", "$filter", "Modal", "FilterService", function ($q, $scope, $http, JobsStore, $filter, Modal, FilterService) {
    var vm = this;
    vm.loading = false;
    vm.rowStatus = {};
    vm.loadingJobs = JobsStore.data.loadingJobs;
    vm.pagesize = 10;
    vm.query = '';
    vm.currentPage = 1;
    vm.header = {
        filter: {
            label: 'Filter By',
            unfiltered: JobsStore.getList('import'),
            filtered: JobsStore.getList('import'),
            items: [{ label: "All", action: {} }, { label: "Completed", action: { status: 'Completed' } }, { label: "Pending", action: { status: 'Pending' } }, { label: "Ready", action: { status: 'Ready' } }, { label: "Running", action: { status: 'Running' } }, { label: "Failed", action: { status: "Failed" } }]
        },
        maxperpage: {
            label: false,
            icon: 'fa fa-chevron-down',
            iconlabel: 'Page Size',
            iconclass: 'white-button',
            iconrotate: true,
            items: [{ label: '10 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 10;FilterService.setFilters('jobs.dataprocessing.pagesize', { pagesize: vm.pagesize });vm.currentPage = 1;
                } }, { label: '25 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 25;FilterService.setFilters('jobs.dataprocessing.pagesize', { pagesize: vm.pagesize });vm.currentPage = 1;
                } }, { label: '50 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 50;FilterService.setFilters('jobs.dataprocessing.pagesize', { pagesize: vm.pagesize });vm.currentPage = 1;
                } }, { label: '100 items', icon: 'numeric', click: function click() {
                    vm.pagesize = 100;FilterService.setFilters('jobs.dataprocessing.pagesize', { pagesize: vm.pagesize });vm.currentPage = 1;
                } }]
        },
        sort: {
            label: 'Sort By',
            icon: 'numeric',
            order: '-',
            property: 'timestamp',
            items: [{ label: 'Timestamp', icon: 'numeric', property: 'timestamp' }, { label: 'Job Status', icon: 'alpha', property: 'status' }]
        }
    };

    angular.extend(vm, {
        jobs: JobsStore.data.importJobs,
        successMsg: null,
        errorMsg: null,
        queuedMsg: null
    });

    vm.rowExpanded = function (row, state) {
        vm.rowStatus[row] = state;
    };
    vm.init = function () {
        vm.jobs = JobsStore.getList('import');

        var filterStore = FilterService.getFilters('jobs.dataprocessing.pagesize');
        if (filterStore) {
            vm.pagesize = filterStore.pagesize;
        }
    };

    this.init();

    function isLastOneFailed() {
        if (vm.jobs && vm.jobs.length > 1) {
            if (vm.jobs[vm.jobs.length - 2].jobStatus === 'Failed') {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    function isOneRunning() {
        var isOneRunning = false;
        vm.jobs.forEach(function (element) {
            if (element.jobStatus === 'Running' || element.jobStatus === 'Pending') {
                isOneRunning = true;
                return isOneRunning;
            }
        });
        return isOneRunning;
    }

    vm.isLastOneFailed = function () {
        return isLastOneFailed();
    };

    vm.canLastJobRun = function () {
        var canRun = false;
        var oneRunnig = isOneRunning();

        if (!oneRunnig) {
            canRun = true;
        }
        return canRun;
    };

    vm.clearMessages = function () {
        vm.successMsg = null;
        vm.errorMsg = null;
        vm.queuedMsg = null;
    };
}]);

/***/ }),

/***/ "./app/jobs/processing/job/import-jobs-row.component.js":
/*!**************************************************************!*\
  !*** ./app/jobs/processing/job/import-jobs-row.component.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.import.row', ['common.modal']).directive('importJobRow', [function () {
    var controller = ['$scope', '$q', '$timeout', 'JobsStore', 'Modal', 'AuthorizationUtility', 'Banner', function ($scope, $q, $timeout, JobsStore, Modal, AuthorizationUtility, Banner) {
        $scope.thejob = $scope.job;
        $scope.disableButton = false;
        $scope.maxRowsTooltip = 3;
        $scope.expanded = false;
        $scope.chevronConfig = {
            0: { name: 'Merging, De-duping & matching to Lattice Data Cloud', lable: 'Merging, De-duping & Matching' },
            1: { name: 'Analyzing', lable: 'Analyzing' },
            2: { name: 'Publishing', lable: 'Loading' },
            3: { name: 'Scoring', lable: 'Scoring' }
        };

        $scope.stepsConfig = {
            "Merging, De-duping & matching to Lattice Data Cloud": { position: 1, label: 'Merging, De-duping & Matching' },
            'Analyzing': { position: 2, label: 'Analyzing' },
            'Publishing': { position: 3, label: 'Loading' },
            'Scoring': { position: 4, label: 'Scoring' }
        };

        function callbackModalWindow(action) {
            var modal = Modal.get('processJob_Warning');

            if (action && action.action === 'ok') {
                if (modal) {
                    modal.waiting(true);
                }

                $scope.job.jobStatus = 'Waiting';
                $scope.disableButton = true;
                JobsStore.runJob($scope.job).then(function (result) {
                    if (modal) {
                        Modal.modalRemoveFromDOM(modal, { name: 'processJob_Warning' });
                    }
                    $scope.disableButton = true;
                    if (result.Success === true) {
                        $scope.job.jobStatus = 'Pending';
                    }
                    // else {
                    //     var errorMsg = result.errorMsg;

                    //     Banner.error({ message: errorMsg });
                    // }
                });
            } else if ("closedForced" == action.action) {
                $scope.disableButton = false;
                setTimeout(function () {
                    $scope.$apply(function () {});
                }, 0);
            } else {
                $scope.disableButton = false;
                if (modal) {
                    Modal.modalRemoveFromDOM(modal, { name: 'processJob_Warning' });
                }
                setTimeout(function () {
                    $scope.$apply(function () {});
                }, 0);
            }
        }

        function init() {

            if ($scope.vm.rowStatus[$scope.index] != undefined && $scope.vm.rowStatus[$scope.index] == true) {
                $scope.expanded = true;
            }
            $scope.loading = false;

            $scope.bundledSubjobs = $scope.bundleSubjobs($scope.job.subJobs);
        }

        function getRecordFound(subjob) {
            if (subjob.reports && subjob.reports.length > 0) {
                var json = subjob.reports[0].json.Payload;
                var obj = JSON.parse(json);
                return obj.total_rows;
            } else {
                return '-';
            }
        }

        function getRecordUploaded(subjob) {
            if (subjob.reports && subjob.reports.length > 0) {
                var json = subjob.reports[0].json.Payload;
                var obj = JSON.parse(json);
                return obj.imported_rows;
            } else {
                return '-';
            }
        }

        $scope.getSubJobsPartialSuccess = function () {
            var listPartialSuccess = [];
            for (var i = 0; i < $scope.job.subJobs.length; i++) {
                var found = getRecordFound($scope.job.subJobs[i]);
                var uploaded = getRecordUploaded($scope.job.subJobs[i]);
                if (found != uploaded && $scope.job.subJobs[i].inputs != undefined) {
                    listPartialSuccess.push($scope.job.subJobs[i]);
                }
            }
            return listPartialSuccess;
        };

        $scope.getSubjobActionName = function (index, subjob) {
            if (subjob.inputs != undefined) {
                return index + '. ' + subjob.inputs.SOURCE_DISPLAY_NAME;
            } else {
                return index + '. Unknown';
            }
        };

        $scope.isOneActionCompleted = function (job) {
            var subJobs = job.subJobs;
            var oneCompleted = false;
            if (subJobs && subJobs.length > 0) {
                subJobs.forEach(function (job) {
                    if (job.jobStatus === 'Completed') {
                        oneCompleted = true;
                        return oneCompleted;
                    }
                });
            } else {
                oneCompleted = true;
            }
            if (job.jobStatus === 'Ready' && oneCompleted === false) {
                job.jobStatus = 'Waiting';
            }
            return oneCompleted;
        };

        $scope.expandRow = function () {
            $scope.loading = false;
            $scope.expanded = !$scope.expanded || false;
            $scope.vm.rowStatus[$scope.index] = $scope.expanded;
        };

        $scope.run = function (job) {
            var show = $scope.showWarningRun(job);
            var msg = $scope.getWarningMessage(job);
            if (msg != null) {
                Modal.warning({
                    name: 'processJob_Warning',
                    title: "Run Job",
                    message: msg,
                    confirmtext: "Yes, Run"
                }, callbackModalWindow);
            } else {
                callbackModalWindow({ action: 'ok' });
            }
        };
        $scope.getWarningMessage = function (job) {
            var formerFailed = $scope.vm.isLastOneFailed();
            var someIncompleted = $scope.showWarningRun(job);
            var msg = null;
            if (formerFailed === true) {
                if (someIncompleted) {
                    msg = "<p>The data refresh in your previous job failed to succeed. </p><p>Re-import your previous data if you need them in your latest data refresh</p><br><br><p>Some actions are not completed yet. If you wish to run the Data Processing Job now, only the completed actions will be taken. </p><p>The actions are still running the validation will be queued to the next Processing Job.</p><p>You won't be able to run the next job until the current job is done.</p>";
                } else {
                    msg = "<p>The data refresh in your previous job failed to succeed. </p><p>Re-import your previous data if you need them in your latest data refresh</p>";
                }
            } else if (someIncompleted) {
                msg = "<p>Some actions are not completed yet. If you wish to run the Data Processing Job now, only the completed actions will be taken. </p><p>The actions are still running the validation will be queued to the next Processing Job.</p><p>You won't be able to run the next job until the current job is done.</p>";
            }
            return msg;
        };

        $scope.showWarningRun = function (job) {
            var subJobs = job.subJobs;

            var allCompleted = true;
            if (subJobs) {
                for (var i = 0; i < subJobs.length; i++) {
                    if (subJobs[i].jobStatus === 'Running') {
                        allCompleted = false;
                        break;
                    }
                }
            }
            return !allCompleted;
        };

        $scope.showScheduleTime = function (job) {
            if (!$scope.disableRunButton(job) && $scope.showRunButton(job)) {
                return true;
            } else {
                return false;
            }
        };

        $scope.mouseDownRun = function (job) {
            $scope.disableButton = true;
            $scope.run(job);
        };

        $scope.getJobStatus = function (job) {
            return job.jobStatus;
        };

        $scope.disableRunButton = function (job) {
            var oneCompleted = $scope.isOneActionCompleted(job);
            var canRun = $scope.vm.canLastJobRun();
            var disable = false;
            if ($scope.disableButton || !canRun || !oneCompleted) {
                disable = true;
            }
            return disable;
        };

        $scope.showRunButton = function (job) {
            switch (job.jobStatus) {
                case 'Failed':
                case 'Completed':
                case 'Pending':
                case 'Running':
                    {
                        return false;
                    }
                default:
                    {
                        return true;
                    }
            }
        };

        $scope.showReport = function (job) {
            if ($scope.showRunButton(job)) {
                return false;
            } else {
                switch (job.jobStatus) {
                    case 'Completed':
                        {
                            return true;
                        }

                    default:
                        {
                            return false;
                        }
                }
            }
        };

        $scope.showChevron = function (job) {
            switch (job.jobStatus) {
                case 'Waiting':
                case 'Pending':
                case 'Ready':
                    {
                        return false;
                    }
                default:
                    {
                        if ($scope.expanded === true) {
                            return true;
                        } else {
                            return false;
                        }
                    }
            }
        };

        $scope.isJonInState = function (job, status) {
            if (job.jobStatus === status) {
                return true;
            } else {
                return false;
            }
        };

        $scope.isJobReady = function (job) {
            if (job.jobStatus === 'Ready') {
                return true;
            } else {
                return false;
            }
        };

        $scope.isJobPending = function (job) {
            if (job.jobStatus === 'Pending') {
                return true;
            } else {
                return false;
            }
        };
        $scope.isJobCompleted = function (job) {
            if ('Completed' === job.jobStatus) {
                return true;
            } else {
                return true;
            }
        };

        $scope.isJobFailed = function (job) {
            if (job.jobStatus === 'Failed') {
                return true;
            } else {
                return false;
            }
        };

        $scope.isJobRunning = function (job) {
            if (job.jobStatus === 'Running' || job.jobStatus === 'Pending') {
                return true;
            } else {
                return false;
            }
        };

        $scope.getActionsCount = function () {
            if ($scope.job.subJobs) {
                // var idsString = $scope.job.inputs.ACTION_IDS;
                // var ids = JSON.parse(idsString);
                return $scope.job.subJobs.length; //ids.length;
            } else {
                return '-';
            }
        };

        $scope.bundleSubjobs = function (jobs) {
            var subjobs = angular.copy(jobs);
            var subjobsByUser = {};
            var result = [];
            subjobs.forEach(function (subjob) {
                if (isNonWorkflowJobType(subjob)) {
                    if (subjobsByUser[subjob.user] != undefined) {
                        var userJobs = subjobsByUser[subjob.user];
                        if (userJobs[subjob.jobType] != undefined) {
                            userJobs[subjob.jobType].push(subjob);
                        } else {
                            userJobs[subjob.jobType] = [subjob];
                        }
                    } else {
                        var jobType = subjob.jobType;
                        subjobsByUser[subjob.user] = {};
                        subjobsByUser[subjob.user][jobType] = [subjob];
                    }
                } else {
                    result.push(subjob);
                }
            });

            for (var user in subjobsByUser) {
                for (var subjobType in subjobsByUser[user]) {
                    var userJobs = subjobsByUser[user][subjobType];
                    var job = getLatestJob(userJobs);
                    var toAdd = angular.copy(job);
                    toAdd.name = userJobs.length > 1 ? userJobs.length + ' ' + toAdd.name : toAdd.name;
                    result.push(toAdd);
                }
            }
            return result;
        };

        function getLatestJob(subjobs) {
            var latestTimestamp = null;
            var latestJob = null;
            subjobs.forEach(function (job) {
                var currentTimestamp = new Date(job.startTimestamp);
                if (latestTimestamp == null || currentTimestamp > latestTimestamp) {
                    latestJob = job;
                    latestTimestamp = currentTimestamp;
                }
            });
            return latestJob;
        }

        function isNonWorkflowJobType(job) {
            return job.id == null && job.pid == null && JobsStore.nonWorkflowJobTypes.indexOf(job.jobType) >= 0;
        }

        $scope.hasRight = function () {
            return AuthorizationUtility.checkAccessLevel(['INTERNAL_ADMIN', 'SUPER_ADMIN']);
        };

        init();
    }];
    return {
        restrict: 'E',
        transclude: false,
        scope: {
            job: '=', vm: '=', index: '='
        },
        controller: controller,
        templateUrl: "app/jobs/processing/job/import-jobs-row.component.html"
    };
}]);

/***/ }),

/***/ "./app/jobs/processing/processing.index.js":
/*!*************************************************!*\
  !*** ./app/jobs/processing/processing.index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./chevron/chevron.component */ "./app/jobs/processing/chevron/chevron.component.js");

__webpack_require__(/*! ./dataprocessing.component */ "./app/jobs/processing/dataprocessing.component.js");

__webpack_require__(/*! ./job/import-jobs-row.component */ "./app/jobs/processing/job/import-jobs-row.component.js");

__webpack_require__(/*! ./subjobs/import-job-row-subjobs.component */ "./app/jobs/processing/subjobs/import-job-row-subjobs.component.js");

/***/ }),

/***/ "./app/jobs/processing/subjobs/import-job-row-subjobs.component.js":
/*!*************************************************************************!*\
  !*** ./app/jobs/processing/subjobs/import-job-row-subjobs.component.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs.row.subjobs', []).directive('importJobRowSubJobs', [function () {
    var controller = ['$scope', 'JobsStore', 'JobsService', 'BrowserStorageUtility', function ($scope, JobsStore, JobsService, BrowserStorageUtility) {
        function init() {
            // console.log('EXPANDED ======= ',$scope);
            $scope.emptyMessage = "No Actions Found";
        }
        $scope.getActionType = function (subjob) {

            var type = subjob.jobType;
            switch (type) {
                case 'cdlDataFeedImportWorkflow':
                    {
                        return 'Import: ';
                    };
                case 'cdlOperationWorkflow':
                    {
                        return 'Delete' + addEntityType(subjob) + ': ';
                    };
                default:
                    {
                        return subjob.name;
                    }
            }
        };

        function addEntityType(subjob) {
            if ($scope.canBeDownload(subjob) && subjob.outputs.IMPACTED_BUSINESS_ENTITIES) {
                return ' ' + JSON.parse(subjob.outputs.IMPACTED_BUSINESS_ENTITIES)[0] + '(s)';
            } else {
                return '';
            }
        }
        $scope.getActionName = function (subjob) {
            if (subjob.inputs && subjob.inputs != null) {
                var ret = subjob.inputs['SOURCE_DISPLAY_NAME'];
                return ret;
            }
        };

        $scope.getDownloadLink = function (subjob) {
            var path = '/files/datafiles/sourcefile?fileName=';
            var fileName = subjob.inputs != undefined ? subjob.inputs['SOURCE_FILE_NAME'] : '';
            var filePath = subjob.inputs != undefined ? subjob.inputs['SOURCE_FILE_PATH'] != undefined ? subjob.inputs['SOURCE_FILE_PATH'] : '' : '';
            var auth = BrowserStorageUtility.getTokenDocument();
            var clientSession = BrowserStorageUtility.getClientSession();
            var tenantId = clientSession.Tenant.Identifier;
            return path + fileName + '&filePath=' + filePath + '&Authorization=' + auth;
        };

        $scope.canBeDownload = function (subjob) {
            var fileName = subjob.inputs != undefined ? subjob.inputs['SOURCE_FILE_NAME'] : '';
            if (fileName != '') {
                var extPosition = fileName.lastIndexOf('.');
                var extention = fileName.substring(extPosition, fileName.length).toLowerCase();
                if (extention !== '.csv') {
                    return false;
                } else {
                    return true;
                }
            }
            return false;
        };

        $scope.getValidation = function (subjob) {
            if (subjob.jobStatus === 'Failed') {
                return 'Failed';
            }
            if (subjob.jobStatus === 'Running') {
                return 'In Progress';
            }

            if (getPayloadValue(subjob, 'total_rows') === '-' && getPayloadValue(subjob, 'imported_rows') === '-' && subjob.jobStatus !== 'Completed') {
                return 'In Progress';
            }
            if (!isNaN(getPayloadValue(subjob, 'total_failed_rows')) && !isNaN(getPayloadValue(subjob, 'total_rows')) && getPayloadValue(subjob, 'total_failed_rows') === getPayloadValue(subjob, 'total_rows')) {
                return 'Failed';
            }
            if (getPayloadValue(subjob, 'total_rows') === getPayloadValue(subjob, 'imported_rows') && subjob.jobStatus === 'Completed') {
                return 'Success';
            }
            if (getPayloadValue(subjob, 'imported_rows') < getPayloadValue(subjob, 'total_rows') && subjob.jobStatus === 'Completed') {
                return 'Partial Success';
            }
            return subjob.jobStatus;
        };

        function getPayloadValue(subjob, field) {
            if (subjob.reports && subjob.reports.length > 0) {
                var json = subjob.reports[0].json.Payload;
                var obj = JSON.parse(json);
                var ret = obj[field] != undefined ? obj[field] : '-';
                return ret;
            } else {
                return '-';
            }
        }

        $scope.getRecordFound = function (subjob) {
            if ($scope.hasImpactedEntity()) {
                return getPayloadValue(subjob, JSON.parse(subjob.outputs.IMPACTED_BUSINESS_ENTITIES)[0] + '_Deleted');
            } else {
                return getPayloadValue(subjob, 'total_rows');
            }
        };
        $scope.getRecordFailed = function (subjob) {
            return getPayloadValue(subjob, 'total_failed_rows');
        };
        $scope.getRecordUploaded = function (subjob) {
            return getPayloadValue(subjob, 'imported_rows');
        };
        $scope.getUser = function (subjob) {
            return subjob.user;
        };

        $scope.hasImpactedEntity = function (subjob) {
            return subjob && subjob.outputs && JSON.parse(subjob.outputs.IMPACTED_BUSINESS_ENTITIES)[0] != undefined;
        };

        $scope.getErrorsLink = function (subjob) {
            var path = '/files/datafiles/errorscsv?filePath=';
            var filePath = subjob.outputs.DATAFEEDTASK_IMPORT_ERROR_FILES ? JSON.parse(subjob.outputs.DATAFEEDTASK_IMPORT_ERROR_FILES)[0] : '';
            var auth = BrowserStorageUtility.getTokenDocument();
            return path + filePath + '&Authorization=' + auth;
        };

        $scope.hasErrors = function (subjob) {
            return subjob.jobType == 'cdlDataFeedImportWorkflow' && subjob.outputs && subjob.outputs.DATAFEEDTASK_IMPORT_ERROR_FILES;
        };

        init();
    }];

    return {
        restrict: 'E',
        replace: true,
        scope: {
            subjobs: '=',
            applicationId: '='
        },
        controller: controller,
        templateUrl: "app/jobs/processing/subjobs/import-job-row-subjobs.component.html"
    };
}]);

/***/ }),

/***/ "./app/jobs/report/jobreport/jobreport.component.js":
/*!**********************************************************!*\
  !*** ./app/jobs/report/jobreport/jobreport.component.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs').controller('JobsSummaryController', ["$scope", "$http", "$stateParams", "JobsStore", "$filter", "InitJob", "JobsService", function ($scope, $http, $stateParams, JobsStore, $filter, InitJob, JobsService) {
	var vm = this;

	angular.extend(vm, {
		jobId: $stateParams.jobId,
		job: InitJob,
		systemActions: [],
		curatedAttributeSubJobs: [],
		entities: ['Account', 'Contact', 'Product', 'Transaction', 'PurchaseHistory'],
		summaries: {
			'Account': {},
			'Contact': {},
			'Product': {},
			'Transaction': {},
			'PurchaseHistory': {}
		},
		counts: {
			'Account': 0,
			'Contact': 0,
			'Product': 0,
			'Transaction': 0,
			'PurchaseHistory': 0
		}
	});

	vm.init = function () {
		vm.actions = vm.job.subJobs;
		vm.reports = vm.job['reports'];
		vm.reports.forEach(function (report) {
			var payload = JSON.parse(report['json']['Payload']);
			if (report['purpose'] == 'PROCESS_ANALYZE_RECORDS_SUMMARY') {
				if (payload.EntitiesSummary) {
					vm.entities.forEach(function (entity) {
						vm.counts[entity] = payload.EntitiesSummary[entity] && payload.EntitiesSummary[entity].EntityStatsSummary ? payload.EntitiesSummary[entity].EntityStatsSummary['TOTAL'] : 0;
						vm.summaries[entity] = payload.EntitiesSummary[entity] ? payload.EntitiesSummary[entity].ConsolidateRecordsSummary : {};
						if (entity == 'Product') {
							vm.counts[entity] = payload.EntitiesSummary[entity].ConsolidateRecordsSummary['PRODUCT_ID'] || 0;
						}
					});
				}
				if (payload['SystemActions']) {
					vm.systemActionTimestamp = report.created;
					vm.systemActions = payload['SystemActions'];
				}
			}
		});
	};

	vm.downloadReport = function () {
		var data, filename, link;
		filename = 'report' + vm.job.id + '.csv';

		JobsService.generateJobsReport(vm.jobId).then(function (result) {
			var csv = result.Result;
			if (!csv.match(/^data:text\/csv/i)) {
				csv = 'data:text/csv;charset=utf-8,' + csv;
			}
			data = encodeURI(csv);

			link = document.createElement('a');
			link.setAttribute('href', data);
			link.setAttribute('download', filename);
			document.body.appendChild(link);
			link.click();
			document.body.removeChild(link);
		});
	};

	vm.init();
}]);

/***/ }),

/***/ "./app/jobs/report/jobreporttile/jobreporttile.component.js":
/*!******************************************************************!*\
  !*** ./app/jobs/report/jobreporttile/jobreporttile.component.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs').directive('jobsSummaryTile', ["ModelStore", function (ModelStore) {
    return {
        restrict: 'EA',
        templateUrl: 'app/jobs/report/jobreporttile/jobreporttile.component.html',
        scope: {
            report: '=',
            entity: '=',
            count: '=',
            actions: '='
        },
        controllerAs: 'vm',
        controller: ["$scope", "JobsStore", "JobsService", "CancelJobModal", "BrowserStorageUtility", function controller($scope, JobsStore, JobsService, CancelJobModal, BrowserStorageUtility) {
            var vm = this;

            angular.extend(vm, {
                report: $scope.report,
                entity: $scope.entity,
                count: $scope.count,
                actions: $scope.actions,
                filteredActions: [],
                total: 0,
                newRecords: 0,
                updatedRecords: 0,
                matchedRecords: 0,
                deletedRecords: 0,
                unmatchedRecords: 0,
                hasErrorMessage: false,
                showCuratedAttributesTable: $scope.entity == 'PurchaseHistory',
                showActionsTable: $scope.entity != 'PurchaseHistory'
            });

            vm.init = function () {
                if (vm.report) {
                    vm.newRecords = vm.report['NEW'] ? vm.report['NEW'] : 0;
                    vm.updatedRecords = vm.report['UPDATE'] ? vm.report['UPDATE'] : 0;
                    vm.deletedRecords = vm.report['DELETE'] ? vm.report['DELETE'] : 0;
                    vm.unmatchedRecords = vm.report['UNMATCH'] ? vm.report['UNMATCH'] : 0;
                    vm.updatedProductHierarchy = vm.report['PRODUCT_HIERARCHY'] ? vm.report['PRODUCT_HIERARCHY'] : 0;
                    vm.updatedProductBundle = vm.report['PRODUCT_BUNDLE'] ? vm.report['PRODUCT_BUNDLE'] : 0;
                    vm.hasErrorMessage = vm.report['ERROR_MESSAGE'] != undefined ? vm.report['ERROR_MESSAGE'] : false;
                    if (vm.entity == 'PurchaseHistory') {
                        vm.curatedAttributes = vm.report['ACTIONS'] ? vm.report['ACTIONS'] : {};
                    }
                }
                if (vm.showActionsTable) {
                    vm.setFilteredActions();
                }
                vm.config = vm.getConfig();
            };

            vm.format = function (entity) {
                if (entity != 'Transaction' && entity != 'PurchaseHistory') {
                    return entity.replace(/_/g, " ") + 's';
                } else if (entity == 'Transaction') {
                    return 'Product Purchases';
                } else if (entity == 'PurchaseHistory') {
                    return 'Curated Attributes';
                }
            };

            vm.entityIcon = function (entity) {
                var path = '/assets/images/';
                switch (vm.entity) {
                    case 'Account':
                        return path + 'ico-accounts-dark.png';
                    case 'Contact':
                        return path + 'ico-contacts-dark.png';
                    case 'Product':
                        return path + 'ico-product_hierarchy-dark.png';
                    case 'Transaction':
                        return path + 'ico-purchases-dark.png';
                    default:
                        return path + 'enrichments/subcategories/contactattributes.png';
                }

                return path + icon;
            };

            vm.setFilteredActions = function () {
                vm.filteredActions = [];
                vm.actions.forEach(function (action) {
                    if (action.reports && action.reports.length > 0 && vm.parsePayload(action, vm.entity) != undefined) {
                        vm.filteredActions.push(action);
                    }
                });
            };

            vm.parsePayload = function (action, key) {
                return JSON.parse(action.reports[0]['json']['Payload'])[key] || JSON.parse(action.reports[0]['json']['Payload'])[key + '_Deleted'];
            };

            vm.hasErrorMessage = function () {
                return vm.entity == 'Product' && vm.report['ERROR_MESSAGE'];
            };

            vm.getConfig = function () {
                switch (vm.entity) {
                    case 'Account':
                        return {
                            'new': true,
                            'updated': true,
                            'deleted': true,
                            'unmatched': vm.unmatchedRecords > 0
                        };
                    case 'Contact':
                        return {
                            'new': true,
                            'updated': true,
                            'deleted': true
                        };
                    case 'Product':
                        return {
                            'product_hierarchy': true,
                            'product_bundle': true
                        };
                    case 'Transaction':
                        return {
                            'new': true,
                            'deleted': true
                        };
                    case 'PurchaseHistory':
                        return {};
                }
            };

            vm.init();
        }]
    };
}]);

/***/ }),

/***/ "./app/jobs/report/report.index.js":
/*!*****************************************!*\
  !*** ./app/jobs/report/report.index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./jobreport/jobreport.component */ "./app/jobs/report/jobreport/jobreport.component.js");

__webpack_require__(/*! ./jobreporttile/jobreporttile.component */ "./app/jobs/report/jobreporttile/jobreporttile.component.js");

/***/ }),

/***/ "./app/jobs/services/JobsService.js":
/*!******************************************!*\
  !*** ./app/jobs/services/JobsService.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs').service('JobsService', ["$http", "$q", "_", "$stateParams", function ($http, $q, _, $stateParams) {
    var numStepsInGroup = {
        "load_data": 0,
        "match_data": 0,
        "generate_insights": 0,
        "create_global_model": 0,
        "create_global_target_market": 0,
        "score_training_set": 0
    };

    this.getErrorLog = function (JobReport) {
        var deferred = $q.defer();
        //jobType = jobType == 'importMatchAndModelWorkflow' ? 'models' : 'scores';

        $http({
            method: 'GET',
            url: '/pls/fileuploads/' + JobReport.name.replace('_Report', '') + '/import/errors',
            headers: {
                'Accept': 'application/csv;charset=utf-8',
                'ErrorDisplayMethod': 'modal'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            if (result != null && result !== "" && result.Success == true) {
                result = response.data;
                deferred.resolve(result);
            } else {
                var errors = result.Errors;
                var result = {
                    success: false,
                    errorMsg: errors[0]
                };
                deferred.resolve(result.errorMsg);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.generateJobsReport = function (jobId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/jobs/' + jobId + '/report/download'
        }).then(function onSuccess(response) {
            var result = response.data;
            if (result != null && result !== "") {
                result = response.data;
                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                // deferred.resolve(result.errorMsg);

                if (!response.data) {
                    response.data = {};
                }

                var errorCode = response.data.errorCode || 'Error';
                var errorMsg = response.data.errorMsg || 'unspecified error.';

                deferred.resolve(errorMsg);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getScoringResults = function (job) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/scores/jobs/' + job.id + '/results/score',
            headers: {
                'Accept': 'application/csv;charset=utf-8',
                'ErrorDisplayMethod': 'banner'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            if (result != null && result !== "") {
                result = response.data;
                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                // deferred.resolve(result.errorMsg);

                if (!response.data) {
                    response.data = {};
                }

                var errorCode = response.data.errorCode || 'Error';
                var errorMsg = response.data.errorMsg || 'unspecified error.';

                deferred.resolve(errorMsg);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getAllJobs = function (statusFilter) {
        var deferred = $q.defer();
        var result;
        var modelId = $stateParams.modelId;
        var url = modelId ? '/pls/scores/jobs/' + modelId : '/pls/jobs';

        var params = modelId || !statusFilter || statusFilter.length == 0 ? '' : '?includeEmptyPA=false&status=pending&status=running';

        $http({
            method: 'GET',
            url: url + params,
            headers: {
                'If-Modified-Since': 0,
                'ErrorDisplayMethod': 'banner'
            }
        }).then(function onSuccess(response) {

            if (response.data != null && response.data !== "") {

                result = {
                    success: true,
                    resultObj: null
                };

                var jobs = _.sortBy(response.data, 'startTimestamp');
                result.resultObj = _.map(jobs, function (job) {
                    clearNumSteps();
                    var stepRunning = getStepRunning(job);
                    var stepsCompleted = getStepsCompleted(job);
                    var stepFailed = getStepFailed(job);
                    var subJobs = getSubJobs(job);
                    var steps = getSteps(job);
                    // var actions = getActions(job);
                    // var actionsCount = getActionsCount(job)

                    return {
                        id: job.id,
                        applicationId: job.applicationId,
                        timestamp: job.startTimestamp,
                        note: job.note ? job.note : '',
                        errorCode: job.errorCode,
                        errorMsg: job.errorMsg,
                        jobType: job.jobType,
                        status: job.jobStatus,
                        inputs: job.inputs,
                        source: job.inputs ? job.inputs.SOURCE_DISPLAY_NAME : null,
                        subJobs: subJobs,
                        steps: steps,
                        user: job.user,
                        jobStatus: job.jobStatus,
                        modelName: job.inputs ? job.inputs.MODEL_DISPLAY_NAME : null,
                        modelId: job.inputs && job.inputs.MODEL_ID ? job.inputs.MODEL_ID : job.outputs && job.outputs.MODEL_ID ? job.outputs.MODEL_ID : null,
                        modelType: job.inputs ? job.inputs.MODEL_TYPE : null,
                        sourceFileExists: job.inputs ? job.inputs.SOURCE_FILE_EXISTS == "true" : null,
                        isDeleted: job.inputs ? job.inputs.MODEL_DELETED == "true" : null,
                        startTimestamp: job.startTimestamp,
                        applicationLogUrl: job.outputs ? job.outputs.YARN_LOG_LINK_PATH : null,
                        stepRunning: stepRunning,
                        stepsCompleted: stepsCompleted,
                        stepFailed: stepFailed,
                        completedTimes: getCompletedStepTimes(job, stepRunning, stepsCompleted),
                        reports: job.reports
                    };
                });

                deferred.resolve(result);
            } else {
                // var errors = result.Errors;
                // var result = {
                //         success: false,
                //         errorMsg: errors[0]
                //     };
                // deferred.resolve(result.errorMsg);

                if (!result.data) {
                    result.data = {};
                }

                var errorCode = result.data.errorCode || 'Error';
                var errorMsg = result.data.errorMsg || 'unspecified error.';

                deferred.resolve(errorMsg);
            }
        }, function onError(result) {
            if (!result.data) {
                result.data = {};
            }

            var errorMsg = result.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getJobStatus = function (jobId) {

        var deferred = $q.defer();
        var result;

        if (jobId === null) {
            return;
        }

        $http({
            method: 'GET',
            url: '/pls/jobs/' + jobId,
            headers: {
                'ErrorDisplayMethod': 'none',
                'If-Modified-Since': 0
            }
        }).then(function onSuccess(response) {
            clearNumSteps();
            var job = response.data;
            var stepRunning = getStepRunning(job);
            var stepsCompleted = getStepsCompleted(job);
            var stepFailed = getStepFailed(job);
            var subJobs = getSubJobs(job);
            var steps = getSteps(job);
            // var actions = getActions(job);
            // var actionsCount = getActionsCount(job)
            var source = null;
            if (job.inputs !== undefined) {
                source = job.inputs.SOURCE_DISPLAY_NAME;
            }

            if ((stepRunning === "generate_insights" || stepRunning === "create_global_target_market") && stepsCompleted.indexOf("score_training_set") > -1) {
                stepRunning = "score_training_set";
            } else if (stepRunning === "load_data" && stepsCompleted.indexOf("generate_insights") > -1) {
                stepRunning = 'generate_insights';
            }
            result = {
                success: true,
                resultObj: {
                    id: job.id,
                    user: job.user,
                    // actions: actions,
                    // actionsCount: actionsCount,
                    errorCode: job.errorCode,
                    errorMsg: job.errorMsg,
                    jobType: job.jobType,
                    jobStatus: job.jobStatus,
                    status: job.jobStatus,
                    startTimestamp: job.startTimestamp,
                    stepRunning: stepRunning,
                    stepsCompleted: stepsCompleted,
                    stepFailed: stepFailed,
                    subJobs: subJobs,
                    steps: steps,
                    completedTimes: getCompletedStepTimes(job, stepRunning, stepsCompleted),
                    reports: job.reports,
                    applicationId: job.applicationId,
                    inputs: job.inputs,
                    source: source,
                    modelName: job.inputs && job.inputs.MODEL_DISPLAY_NAME ? job.inputs.MODEL_DISPLAY_NAME : null,
                    modelId: job.inputs && job.inputs.MODEL_ID ? job.inputs.MODEL_ID : job.outputs && job.outputs.MODEL_ID ? job.outputs.MODEL_ID : null,
                    modelType: job.inputs ? job.inputs.MODEL_TYPE : null,
                    sourceFileExists: job.inputs ? job.inputs.SOURCE_FILE_EXISTS == "true" : null,
                    isDeleted: job.inputs ? job.inputs.MODEL_DELETED == "true" : null,
                    applicationLogUrl: job.outputs ? job.outputs.YARN_LOG_LINK_PATH : null
                }
            };

            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getJobStatusFromApplicationId = function (applicationId) {

        var deferred = $q.defer();
        var result;

        $http({
            method: 'GET',
            url: '/pls/jobs/yarnapps/' + applicationId,
            headers: {
                'ErrorDisplayMethod': 'banner',
                'If-Modified-Since': 0
            }
        }).then(function onSuccess(response) {
            clearNumSteps();
            var job = response.data;
            var stepRunning = getStepRunning(job);
            var stepsCompleted = getStepsCompleted(job);
            var stepFailed = getStepFailed(job);

            if ((stepRunning === "generate_insights" || stepRunning === "create_global_target_market") && stepsCompleted.indexOf("score_training_set") > -1) {
                stepRunning = "score_training_set";
            } else if (stepRunning === "load_data" && stepsCompleted.indexOf("generate_insights") > -1) {
                stepRunning = 'generate_insights';
            }
            result = {
                success: true,
                resultObj: {
                    id: job.id,
                    user: job.user,
                    errorCode: job.errorCode,
                    errorMsg: job.errorMsg,
                    jobType: job.jobType,
                    jobStatus: job.jobStatus,
                    startTimestamp: job.startTimestamp,
                    stepRunning: stepRunning,
                    stepsCompleted: stepsCompleted,
                    stepFailed: stepFailed,
                    completedTimes: getCompletedStepTimes(job, stepRunning, stepsCompleted),
                    reports: job.reports
                }
            };
            deferred.resolve(result);
        }, function onError(response) {
            var errors = result.Errors;
            var result = {
                success: false,
                errorMsg: errors[0]
            };
            deferred.resolve(result.errorMsg);
        });

        return deferred.promise;
    };

    this.rescoreTrainingData = function (performEnrichment) {
        var deferred = $q.defer();
        var result = {
            success: true
        };
        var modelId = $stateParams.modelId;

        $http({
            method: 'POST',
            url: '/pls/scores/' + modelId + '/training',
            params: {
                'performEnrichment': performEnrichment,
                'useRtsApi': performEnrichment
            },
            headers: {
                'ErrorDisplayMethod': 'modal'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.rescoreJob = function (jobId) {
        return $http({
            method: 'POST',
            url: '/pls/jobs/' + jobId + '/restart'
        });
    };

    function getCompletedStepTimes(job, runningStep, completedSteps) {
        var completedTimes = { "load_data": null, "match_data": null, "generate_insights": null, "create_global_model": null, "create_global_target_market": null, "score_training_set": null };
        var currStepIndex = 0;
        if (runningStep !== "load_data" && completedSteps.indexOf("load_data") > -1) {
            currStepIndex += numStepsInGroup.load_data;
            completedTimes.load_data = job.steps[currStepIndex - 1].endTimestamp;
        }
        if (runningStep !== "match_data" && completedSteps.indexOf("match_data") > -1) {
            currStepIndex += numStepsInGroup.match_data;
            completedTimes.match_data = job.steps[currStepIndex - 1].endTimestamp;
        }
        if (runningStep !== "generate_insights" && completedSteps.indexOf("generate_insights") > -1) {
            currStepIndex += numStepsInGroup.generate_insights;
            completedTimes.generate_insights = job.steps[currStepIndex - 1].endTimestamp;
        }
        if (runningStep !== "create_global_model" && completedSteps.indexOf("create_global_model") > -1) {
            currStepIndex += numStepsInGroup.create_global_model;
            completedTimes.create_global_model = job.steps[currStepIndex - 1].endTimestamp;
        }
        if (runningStep !== "create_global_target_market" && completedSteps.indexOf("create_global_target_market") > -1) {
            currStepIndex += numStepsInGroup.create_global_target_market;
            completedTimes.create_global_target_market = job.steps[currStepIndex - 1].endTimestamp;
        }
        if (runningStep !== "score_training_set" && completedSteps.indexOf("score_training_set") > -1) {
            currStepIndex += numStepsInGroup.score_training_set;
            completedTimes.score_training_set = job.steps[currStepIndex - 1].endTimestamp;
        }
        return completedTimes;
    }

    this.cancelJob = function (jobId) {
        return $http({
            method: 'POST',
            url: '/pls/jobs/' + jobId + '/cancel'
        });
    };

    /**
     * 
     * @param {*} job 
     */
    this.runJob = function (job) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/cdl/processanalyze'
        }).then(function onSuccess(response) {

            var result = response.data;

            if (result != null && result !== "" && result.Success == true) {
                deferred.resolve(result);
            } else {
                // job.status = 'Failed';
                var errors = result.Errors;
                var errorResponse = {
                    success: false,
                    errorMsg: errors[0]
                };

                deferred.resolve(errorResponse);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }
            job.status = 'Failed';

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    function getStepFailed(job) {
        if (job.steps) {
            for (var i = 0; i < job.steps.length; i++) {
                if (job.steps[i].stepStatus === "Failed" || job.steps[i].stepStatus === "Cancelled") {
                    return job.steps[i].name;
                }
            }
        }
        return null;
    }

    function getStepRunning(job) {
        if (job.jobStatus !== "Running") {
            //return null;
        }

        if (!job.steps) {
            return;
        }
        for (var i = 0; i < job.steps.length; i++) {
            if (job.steps[i].stepStatus === "Running") {
                return job.steps[i].name;
            }
        }
        return null;
    }

    function getStepsCompleted(job) {
        if (job.steps == null) {
            return [];
        }

        var stepsCompleted = [];
        for (var i = 0; i < job.steps.length; i++) {
            if (job.steps[i].stepStatus === "Completed") {
                var stepCompleted = job.steps[i].name;

                if ((stepCompleted === "generate_insights" || stepCompleted === "create_global_target_market") && stepsCompleted.indexOf("score_training_set") > -1) {
                    numStepsInGroup.score_training_set += 1;
                    continue;
                }

                if (stepCompleted) {
                    numStepsInGroup[stepCompleted] += 1;
                    stepsCompleted.push(stepCompleted);
                }
            }
        }

        return stepsCompleted;
    }

    // function getActions(job) {
    //     if(job.subJobs){
    //         return job.subJobs;
    //     }else {
    //         return [];
    //     }
    // }

    // function getActionsCount(job) {
    //     if(!job.inputs || !job.inputs.ACTION_IDS){
    //         return 0;
    //     }else {
    //         var actions = JSON.parse(job.inputs.ACTION_IDS);
    //         return actions.length;
    //     }
    // }
    function getSubJobs(job) {
        if (job.subJobs != undefined) {
            return job.subJobs;
        } else {
            return [];
        }
    }

    function getSteps(job) {
        if (job.steps != undefined && job.steps != null) {
            return job.steps;
        } else {
            return [];
        }
    }

    function clearNumSteps() {
        numStepsInGroup.load_data = 0;
        numStepsInGroup.match_data = 0;
        numStepsInGroup.generate_insights = 0;
        numStepsInGroup.create_global_model = 0;
        numStepsInGroup.create_global_target_market = 0;
        numStepsInGroup.score_training_set = 0;
    }
}]);

/***/ }),

/***/ "./app/jobs/services/JobsStore.js":
/*!****************************************!*\
  !*** ./app/jobs/services/JobsStore.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs').run(["$timeout", "$interval", "$stateParams", "$state", "JobsStore", function ($timeout, $interval, $stateParams, $state, JobsStore) {
    $timeout(function () {
        JobsStore.getJobs();
    }, 1000); // FIXME: we wont need this soon, this is for switching tenants fix hack

    var pending = false;

    $interval(function () {
        var modelId = $stateParams.modelId || '';

        if (!pending) {
            pending = true;

            if (JobsStore.isGetAllJobs()) {
                // console.log('get all jobs');
                JobsStore.getJobs(null, modelId).then(function (response) {
                    pending = false;
                });
            } else {
                // console.log('get all pending/running jobs');
                JobsStore.getJobs(null, modelId, ["pending", "running"]).then(function (response) {
                    pending = false;
                });
            }
        }
    }, 120 * 1000);
}]).service('JobsStore', ["$q", "$state", "$filter", "JobsService", function ($q, $state, $filter, JobsService) {
    var JobsStore = this;
    this.importJobsMap = {};
    this.exportJobsMap = {};
    this.subjobsRunnigMap = {};
    this.jobTypes = ['import', 'export'], this.data = {
        jobs: [],
        importJobs: [],
        exportJobs: [],
        subjobsRunning: [],
        loadingJobs: false,
        models: {},
        jobsMap: {},
        isModelState: false,
        allActiveJobs: []
    };
    this.inProgressModelJobs = {};
    this.cancelledJobs = {};
    this.nonWorkflowJobTypes = ['ratingEngineChange', 'segmentChange', 'attributeManagementActivation', 'attributeManagementDeactivation', 'metadataChange', 'purchaseMetricsChange'];

    this.isGetAllJobs = function () {
        return $state.current.name.includes("home.jobs");
    };

    function isModelJob(job) {
        // Based on implementation of addJob()
        switch (job.jobType) {
            case 'processAnalyzeWorkflow':
            case 'segmentExportWorkflow':
            case 'cdlDataFeedImportWorkflow':
            case 'cdlOperationWorkflow':
            case 'metadataChange':
            case 'playLaunchWorkflow':
                {
                    return false;
                }
            default:
                {
                    return true;
                }
        }
    }

    function isImportJob(job) {
        if (job.jobType === 'processAnalyzeWorkflow') {
            return true;
        } else {
            return false;
        }
    }

    function isExportJob(job) {
        return job.jobType === 'segmentExportWorkflow';
    }

    function isType(job, type) {
        switch (type) {
            case 'import':
                return isImportJob(job);
            case 'export':
                return isExportJob(job);
            case 'model':
                return isModelJob(job);
        }
    }

    this.isJobsEverFetched = function () {
        if (this.data.jobs.length === 0 && this.data.importJobs.length === 0 && this.data.exportJobs.length === 0) {
            return false;
        } else {
            return true;
        }
    };

    this.isNonWorkflowJobType = function (job) {
        return job.id == null && job.pid == null;
    };

    this.filterByStatus = function (job) {
        var ret = job.jobStatus == 'Pending' || job.jobStatus == 'Running';
        return ret;
    };

    this.filterOutType = function (jobsArray, toFilterObj) {
        var ret = jobsArray.filter(function (job) {
            if (!toFilterObj[job.jobType]) {
                return job;
            }
        });
        return ret;
    };

    this.getJob = function (jobId) {
        var deferred = $q.defer();

        JobsService.getJobStatus(jobId).then(function (response) {
            if (isImportJob(response.resultObj)) {
                JobsStore.addImportJob(response.resultObj);
            } else if (isExportJob(response.resultObj)) {
                JobsStore.addExportJob(response.resultObj);
            }
            deferred.resolve(response.resultObj);
        });

        return deferred.promise;
    };

    this.getJobFromApplicationId = function (jobApplicationId) {
        var deferred = $q.defer();

        JobsService.getJobStatusFromApplicationId(jobApplicationId).then(function (response) {
            if (response.success) {
                var resultObj = response.resultObj;
                deferred.resolve(resultObj);
            }
        });

        return deferred.promise;
    };

    this.getJobs = function (use_cache, modelId, statusFilter) {
        JobsStore.loadingJobs = true;
        var deferred = $q.defer(),
            isModelState = modelId ? true : false,
            jobs = modelId ? this.data.models[modelId] : this.data.jobs;

        if (use_cache) {
            if (jobs && jobs.length > 0) {
                deferred.resolve(jobs);
            } else {
                this.data.models[modelId] = [];
                deferred.resolve([]);
            }
        } else {
            JobsService.getAllJobs(statusFilter).then(function (response) {
                var res = response.resultObj;
                if (modelId) {
                    if (!JobsStore.data.models[modelId]) {
                        JobsStore.data.models[modelId] = [];
                    }

                    JobsStore.data.models[modelId].length = 0;

                    for (var i = 0; i < res.length; i++) {
                        var job = res[i];

                        JobsStore.addJobMap(job.id, job);
                        JobsStore.addJob(job, modelId);
                    }
                } else if (statusFilter) {
                    JobsStore.inProgressModelJobs = {};
                    JobsStore.data.allActiveJobs = res;

                    var activeModelJobs = $filter('filter')(res, JobsStore.findModelJobs, true);
                    activeModelJobs.forEach(function (job) {
                        JobsStore.processModelJob(job);
                    });
                } else {
                    JobsStore.data.jobs.length = 0;

                    var nullIdsMap = [];
                    JobsStore.data.allActiveJobs = [];
                    JobsStore.inProgressModelJobs = {};
                    JobsStore.jobTypes.forEach(function (type) {
                        nullIdsMap[type] = false;
                    });
                    if (res) {
                        var jobsByStatus = $filter('filter')(res, JobsStore.filterByStatus, true);
                        var jobsFiltered = JobsStore.filterOutType(jobsByStatus, { "playLaunchWorkflow": true });
                        JobsStore.data.allActiveJobs = jobsFiltered;
                        for (var i = 0; i < res.length; i++) {
                            var job = res[i];

                            if (job.startTimestamp != null) {
                                JobsStore.addJobMap(job.id, job);
                                JobsStore.addJob(job, modelId);
                                if (isImportJob(job) && job.id == null) {
                                    nullIdsMap['import'] = true;
                                } else if (isExportJob(job) && job.id == null) {
                                    nullIdsMap['export'] = true;
                                }
                            }
                        }
                        JobsStore.synchJobs(nullIdsMap, res);
                    }
                }
                deferred.resolve(JobsStore.data.jobs);
            });
        }

        return deferred.promise;
    };

    this.addJob = function (job, modelId) {

        if (modelId) {
            JobsStore.data.models[modelId].push(job);
        } else {
            switch (job.jobType) {
                case 'processAnalyzeWorkflow':
                    JobsStore.addImportJob(job);
                    break;
                case 'segmentExportWorkflow':
                    JobsStore.addExportJob(job);
                    break;
                case 'cdlDataFeedImportWorkflow':
                case 'cdlOperationWorkflow':
                case 'metadataChange':
                    {
                        JobsStore.manageSubjobsRunning(job);
                        break;
                    };
                case 'playLaunchWorkflow':
                    break;
                default:
                    JobsStore.addModelJob(job);
                    break;
            }
        }
    };

    this.getMap = function (type) {
        switch (type) {
            case 'import':
                return JobsStore.importJobsMap;
            case 'export':
                return JobsStore.exportJobsMap;
            default:
                return {};
        }
    };

    this.getList = function (type) {
        switch (type) {
            case 'import':
                return JobsStore.data.importJobs;
            case 'export':
                return JobsStore.data.exportJobs;
            default:
                return [];
        }
    };

    this.addJobMap = function (jobId, job) {
        this.data.jobsMap[jobId] = job;
    };

    this.removeJob = function (jobId) {
        delete this.data.jobsMap[jobId];
    };

    this.runJob = function (job) {
        var deferred = $q.defer();

        JobsService.runJob(job).then(function (resp) {
            deferred.resolve(resp);
        });

        return deferred.promise;
    };

    this.addModelJob = function (job) {
        JobsStore.processModelJob(job);
        JobsStore.data.jobs.push(job);
    };

    this.processModelJob = function (job) {
        var ratingEngineId = job.inputs.RATING_ENGINE_ID;
        if (job.jobStatus != 'Failed' && job.jobStatus != 'Completed' && job.jobStatus != 'Cancelled' && JobsStore.cancelledJobs[ratingEngineId] == undefined) {
            JobsStore.inProgressModelJobs[ratingEngineId] = job.id;
        } else if (job.jobStatus == 'Cancelled' && JobsStore.cancelledJobs[ratingEngineId] != undefined) {
            delete JobsStore.cancelledJobs[ratingEngineId];
        }
    };

    this.addImportJob = function (job) {
        job.displayName = "Data Processing & Analysis";
        var jobid = job.id;
        var inMap = JobsStore.importJobsMap[jobid];
        if (inMap === undefined) {
            JobsStore.data.importJobs.push(job);
            JobsStore.importJobsMap[jobid] = JobsStore.data.importJobs.length - 1;
        } else {
            JobsStore.data.importJobs[inMap].jobStatus = job.jobStatus;
            updateSubJobsImportJob(job);
            updateStepsCompleted(job);
        }
    };

    this.addExportJob = function (job) {
        job.displayName = "Segment Export";
        var jobId = job.id;
        var inMap = JobsStore.exportJobsMap[jobId];
        if (inMap === undefined) {
            JobsStore.data.exportJobs.push(job);
            JobsStore.exportJobsMap[jobId] = JobsStore.data.exportJobs.length - 1;
        } else {
            JobsStore.data.exportJobs[inMap].jobStatus = job.jobStatus;
        }
    };

    this.getDisplayName = function (type) {
        switch (type) {
            case 'import':
                return 'Data Processing & Analysis';
            case 'export':
                return 'Segment Export';
            default:
                console.log('job type not defined');
                return '';
        }
    };

    this.manageSubjobsRunning = function (job) {
        var applicationidJob = job.applicationId;
        var inMap = JobsStore.subjobsRunnigMap[applicationidJob];
        switch (job.jobStatus) {
            case 'Completed':
            case 'Failed':
                {
                    if (inMap !== undefined) {
                        JobsStore.data.subjobsRunning.splice(inMap, 1);
                        JobsStore.subjobsRunnigMap = {};
                        for (var i = 0; i < JobsStore.data.subjobsRunning.length; i++) {
                            var appId = JobsStore.data.subjobsRunning[i].applicationId;
                            JobsStore.subjobsRunnigMap[appId] = i;
                        }
                    }
                    break;
                }

            default:
                {
                    if (inMap === undefined) {
                        JobsStore.data.subjobsRunning.push(job);
                        JobsStore.subjobsRunnigMap[applicationidJob] = JobsStore.data.subjobsRunning.length - 1;
                    }
                    break;
                }
        }
    };

    this.synchJobs = function (nullIdsMap, retApi) {
        this.jobTypes.forEach(function (type) {
            var jobsMap = JobsStore.getMap(type);
            var jobsList = JobsStore.getList(type);
            if (nullIdsMap[type] == true && jobsMap[null] == undefined || (nullIdsMap[type] == false && jobsMap[null]) != undefined) {
                jobsList.splice(0, jobsList.length);
                jobsMap = {};
                for (var i = 0; i < retApi.length; i++) {
                    if (isType(retApi[i], type)) {
                        jobsList.push(retApi[i]);
                        jobsMap[retApi[i].id] = jobsList.length - 1;
                    }
                }
                JobsStore.setJobsByType(jobsMap, jobsList, type);
            }
        });
    };

    this.setJobsByType = function (map, list, type) {
        if (type == 'import') {
            JobsStore.importJobsMap = map;
            JobsStore.data.importJobs = list;
        } else if (type == 'export') {
            JobsStore.exportJobsMap = map;
            JobsStore.data.exportJobs = list;
        }
    };

    this.clearImportJobs = function () {
        JobsStore.data.importJobs = [];
        JobsStore.importJobsMap = {};
    };

    /**
     * Updates the fields in the job
     * The arrays should not be updated otherwise the view that relys on them will refresh and loose its state
     * @param {*} updatedJob 
     */
    function updateSubJobsImportJob(updatedJob) {
        // console.log(updatedJob);
        var jobid = updatedJob.id;
        var inMap = JobsStore.importJobsMap[jobid];
        if (inMap !== undefined) {
            var oldJob = JobsStore.data.importJobs[inMap];
            if (oldJob !== undefined) {
                oldJob.subJobs.splice(0, oldJob.subJobs.length);
                for (var i = 0; i < updatedJob.subJobs.length; i++) {
                    oldJob.subJobs.push(updatedJob.subJobs[i]);
                }
            }
        }
    }

    function updateStepsCompleted(updatedJob) {
        var jobid = updatedJob.id;
        var inMap = JobsStore.importJobsMap[jobid];
        if (inMap !== undefined) {
            var oldJob = JobsStore.data.importJobs[inMap];
            if (oldJob !== undefined) {
                oldJob.steps.splice(0, oldJob.steps.length);
                for (var i = 0; i < updatedJob.steps.length; i++) {
                    oldJob.steps.push(updatedJob.steps[i]);
                }
            }
        }
    }
}]);

/***/ }),

/***/ "./app/jobs/tabs/jobstabs.component.js":
/*!*********************************************!*\
  !*** ./app/jobs/tabs/jobstabs.component.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.jobs').filter('jobfilter', function () {
    return function (jobs, type) {
        var retJobs = [];
        var count = 0;
        jobs.forEach(function (job) {
            if (job.jobType === type) {
                retJobs.push(job);
            }
        });
        return retJobs;
    };
}).controller('JobsTabsController', ["$state", "$stateParams", "$scope", "FeatureFlagService", "JobsStore", function ($state, $stateParams, $scope, FeatureFlagService, JobsStore) {
    var vm = this,
        flags = FeatureFlagService.Flags();

    angular.extend(vm, {
        stateParams: $stateParams,
        cdlEnabled: FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL),
        JobsStore: JobsStore
    });

    vm.inJob = function () {
        return $state.params.jobId != undefined;
    };
}]);

/***/ }),

/***/ "./app/login/controllers/LoginController.js":
/*!**************************************************!*\
  !*** ./app/login/controllers/LoginController.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.login.controllers.LoginController', ['mainApp.appCommon.directives.ngEnterDirective', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.TimestampIntervalUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.login.services.LoginService', 'mainApp.core.services.HelpService', 'mainApp.core.services.FeatureFlagService', 'mainApp.login.modals.TenantSelectionModal', 'mainApp.core.services.ResourceStringsService', 'mainApp.config.services.ConfigService']).controller('LoginController', ["$scope", "$http", "$rootScope", "$compile", "ResourceUtility", "TimestampIntervalUtility", "NavUtility", "BrowserStorageUtility", "HelpService", "LoginService", "ResourceStringsService", "ConfigService", "TenantSelectionModal", "FeatureFlagService", function ($scope, $http, $rootScope, $compile, ResourceUtility, TimestampIntervalUtility, NavUtility, BrowserStorageUtility, HelpService, LoginService, ResourceStringsService, ConfigService, TenantSelectionModal, FeatureFlagService) {
    // Property bindings
    $scope.copyrightString = ResourceUtility.getString('LOGIN_COPYRIGHT', [new Date().getFullYear()]);
    $scope.ResourceUtility = ResourceUtility;

    $scope.username = "";
    $scope.password = "";
    $scope.loginMessage = null;
    $scope.loginErrorMessage = null;
    $scope.showLoginError = false;
    $scope.showSuccessMessage = false;
    $scope.successMessage = "";
    $scope.loginInProgess = false;
    $scope.showLoginForm = true;
    $scope.showForgotPassword = false;
    $scope.forgotPasswordUsername = "";
    $scope.forgotPasswordErrorMessage = "";

    // Controller methods
    $scope.loginClick = function () {
        $scope.showLoginError = false;
        $scope.loginMessage = ResourceUtility.getString("LOGIN_LOGGING_IN_MESSAGE");
        if ($scope.loginInProgess) {
            return;
        }

        $scope.usernameInvalid = $scope.username === "";
        $scope.passwordInvalid = $scope.password === "";
        if ($scope.usernameInvalid || $scope.passwordInvalid) {
            return;
        }

        $scope.loginInProgess = true;
        LoginService.Login($scope.username, $scope.password).then(function (result) {
            $scope.loginInProgess = false;
            $scope.loginMessage = null;
            if (result != null && result.Success === true) {
                //$rootScope.$broadcast("LoggedIn");

                $scope.isLoggedInWithTempPassword = result.Result.MustChangePassword;
                $scope.isPasswordOlderThanNinetyDays = TimestampIntervalUtility.isTimestampFartherThanNinetyDaysAgo(result.Result.PasswordLastModified);
                $scope.handleTenantSelection(result.Result.Tenants);
            } else {
                // Need to fail gracefully if we get no service response at all
                $scope.showLoginHeaderMessage(result.errorMessage);
            }
        });
    };

    $scope.handleTenantSelection = function (tenantList) {
        if (tenantList == null || tenantList.length === 0) {
            $scope.showLoginHeaderMessage(ResourceUtility.getString("NO_TENANT_MESSAGE"));
            return;
        }

        if (tenantList.length == 1) {
            $scope.getSessionDocument(tenantList[0]);
        } else {
            var tenantSelectionCallback = function tenantSelectionCallback(selectedTenant) {
                $scope.getSessionDocument(selectedTenant);
            };
            TenantSelectionModal.show(tenantList, tenantSelectionCallback);
        }
    };

    $scope.getSessionDocument = function (tenant) {
        LoginService.GetSessionDocument(tenant).then(function (data) {
            if (data != null && data.Success === true) {
                $scope.getLocaleSpecificResourceStrings(data.Result.User.Locale);
            } else {
                $scope.showLoginHeaderMessage(ResourceUtility.getString("LOGIN_UNKNOWN_ERROR"));
            }
        });
    };

    $scope.getLocaleSpecificResourceStrings = function (locale) {
        ResourceStringsService.GetInternalResourceStringsForLocale(locale).then(function (result) {
            $scope.getWidgetConfigDoc();
        });
    };

    $scope.getWidgetConfigDoc = function () {
        ConfigService.GetWidgetConfigDocument().then(function () {
            $("body").removeClass("login-body");
            $rootScope.$broadcast("ShowFooterEvent", true);
            getFeatureFlags();
        });
    };

    function getFeatureFlags() {
        FeatureFlagService.GetAllFlags().then(function () {
            constructMainView();
        });
    }

    function constructMainView() {
        $http.get('./app/core/views/MainView.html').success(function (html) {
            var scope = $rootScope.$new();
            scope.isLoggedInWithTempPassword = $scope.isLoggedInWithTempPassword;
            scope.isPasswordOlderThanNinetyDays = $scope.isPasswordOlderThanNinetyDays;
            $compile($("#mainView").html(html))(scope);
        });
    }

    $scope.showLoginHeaderMessage = function (message) {
        if (message == null) {
            return;
        }

        if (message.indexOf("Global Auth") > -1) {
            message = ResourceUtility.getString("LOGIN_GLOBAL_AUTH_ERROR");
        }

        $scope.loginErrorMessage = message;
        $scope.showLoginError = true;
    };

    $scope.forgotPasswordClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.showLoginForm = false;
        $scope.showForgotPassword = true;
    };

    $scope.cancelForgotPasswordClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }
        $scope.showLoginForm = true;
        $scope.showForgotPasswordError = false;
    };

    $scope.forgotPasswordOkClick = function () {
        $scope.resetPasswordSuccess = false;
        $scope.showForgotPasswordError = false;
        $scope.forgotPasswordUsernameInvalid = $scope.forgotPasswordUsername === "";
        if ($scope.forgotPasswordUsernameInvalid) {
            return;
        }
        LoginService.ResetPassword($scope.forgotPasswordUsername).then(function (result) {
            if (result == null) {
                return;
            }
            if (result.Success === true) {
                $scope.showForgotPassword = false;
                $scope.resetPasswordSuccess = true;
            } else {
                $scope.showForgotPasswordError = true;

                if (result.Error.errorCode == 'LEDP_18018') {
                    $scope.forgotPasswordUsernameInvalid = true;
                    $scope.forgotPasswordErrorMessage = ResourceUtility.getString('RESET_PASSWORD_USERNAME_INVALID');
                } else {
                    $scope.forgotPasswordUsernameInvalid = false;
                    $scope.forgotPasswordErrorMessage = ResourceUtility.getString('RESET_PASSWORD_FAIL');
                }
            }
        });
    };

    $scope.privacyPolicyClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }
        HelpService.OpenPrivacyPolicy();
    };
}]);

/***/ }),

/***/ "./app/login/controllers/UpdatePasswordController.js":
/*!***********************************************************!*\
  !*** ./app/login/controllers/UpdatePasswordController.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.login.controllers.UpdatePasswordController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.TimestampIntervalUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.core.utilities.PasswordUtility', 'mainApp.login.services.LoginService']).controller('UpdatePasswordController', ["$scope", "$rootScope", "ResourceUtility", "BrowserStorageUtility", "PasswordUtility", "StringUtility", "NavUtility", "LoginService", "TimestampIntervalUtility", function ($scope, $rootScope, ResourceUtility, BrowserStorageUtility, PasswordUtility, StringUtility, NavUtility, LoginService, TimestampIntervalUtility) {
    var loginDocument = BrowserStorageUtility.getLoginDocument();
    $scope.isLoggedInWithTempPassword = loginDocument.MustChangePassword;
    $scope.isPasswordOlderThanNinetyDays = TimestampIntervalUtility.isTimestampFartherThanNinetyDaysAgo(loginDocument.PasswordLastModified);

    $scope.ResourceUtility = ResourceUtility;
    $scope.oldPassword = null;
    $scope.newPassword = null;
    $scope.confirmPassword = null;

    $scope.oldPasswordInputError = "";
    $scope.newPasswordInputError = "";
    $scope.confirmPasswordInputError = "";
    $scope.showPasswordError = false;
    $scope.validateErrorMessage = ResourceUtility.getString("CHANGE_PASSWORD_HELP");

    $scope.saveInProgess = false;

    $("#validateAlertError, #changePasswordSuccessAlert").hide();

    if ($scope.isPasswordOlderThanNinetyDays) {
        $scope.showPasswordError = true;
        $scope.validateErrorMessage = ResourceUtility.getString("NINTY_DAY_OLD_PASSWORD");
    } else if ($scope.isLoggedInWithTempPassword) {
        $scope.showPasswordError = true;
        $scope.validateErrorMessage = ResourceUtility.getString("MUST_CHANGE_TEMP_PASSWORD");
    }

    function validatePassword() {
        $("#validateAlertError, #changePasswordSuccessAlert").fadeOut();
        $scope.oldPasswordInputError = StringUtility.IsEmptyString($scope.oldPassword) ? "error" : "";
        $scope.newPasswordInputError = StringUtility.IsEmptyString($scope.newPassword) ? "error" : "";
        $scope.confirmPasswordInputError = StringUtility.IsEmptyString($scope.confirmPassword) ? "error" : "";

        if ($scope.oldPassword === "") {
            $scope.validateErrorMessage = ResourceUtility.getString("LOGIN_PASSWORD_EMPTY_OLDPASSWORD");
            $scope.oldPasswordInputError = "error";
            return false;
        }

        if ($scope.oldPasswordInputError === "error" || $scope.newPasswordInputError === "error" || $scope.confirmPasswordInputError === "error") {
            return false;
        }

        if ($scope.newPassword == $scope.oldPassword) {
            $scope.validateErrorMessage = ResourceUtility.getString("LOGIN_PASSWORD_UPDATE_ERROR");
            $scope.newPasswordInputError = "error";
            $scope.confirmPasswordInputError = "error";
            return false;
        }

        if ($scope.newPassword !== $scope.confirmPassword) {
            $scope.validateErrorMessage = ResourceUtility.getString("LOGIN_PASSWORD_MATCH_ERROR");
            $scope.newPasswordInputError = "error";
            $scope.confirmPasswordInputError = "error";
            return false;
        }

        if (!PasswordUtility.validPassword($scope.newPassword).Valid) {
            $scope.newPasswordInputError = "error";
            $scope.validateErrorMessage = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return false;
        }

        return true;
    }

    $scope.cancelClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        if ($scope.isLoggedInWithTempPassword || $scope.isPasswordOlderThanNinetyDays) {
            clearChangePasswordField();
        } else {
            $rootScope.$broadcast(NavUtility.MODEL_LIST_NAV_EVENT);
        }
    };

    function clearChangePasswordField() {
        $scope.oldPassword = "";
        $scope.newPassword = "";
        $scope.confirmPassword = "";
    }

    $scope.closeErrorClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.showPasswordError = false;
    };

    $scope.updatePasswordClick = function () {
        if ($scope.saveInProgess) {
            return;
        }
        $scope.showPasswordError = false;
        var isValid = validatePassword();
        if (isValid) {
            $scope.saveInProgess = true;
            LoginService.ChangePassword($scope.oldPassword, $scope.newPassword, $scope.confirmPassword).then(function (result) {
                $scope.saveInProgess = false;
                if (result.Success) {
                    $("#changePasswordSuccessAlert").fadeIn();
                    $rootScope.$broadcast(NavUtility.UPDATE_PASSWORD_NAV_EVENT, { Success: true });
                } else {
                    if (result.Status == 401) {
                        $scope.validateErrorMessage = ResourceUtility.getString("CHANGE_PASSWORD_BAD_CREDS");
                    } else {
                        $scope.validateErrorMessage = ResourceUtility.getString("CHANGE_PASSWORD_ERROR");
                    }
                    $scope.showPasswordError = true;
                }
            });
        } else {
            $scope.showPasswordError = true;
        }
    };
}]).controller('UpdatePasswordSuccessController', ["$scope", "ResourceUtility", "LoginService", function ($scope, ResourceUtility, LoginService) {

    $scope.ResourceUtility = ResourceUtility;
    $scope.clickRelogin = function () {
        LoginService.Logout();
    };
}]);

/***/ }),

/***/ "./app/login/login.index.js":
/*!**********************************!*\
  !*** ./app/login/login.index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/LoginController */ "./app/login/controllers/LoginController.js");

__webpack_require__(/*! ./controllers/UpdatePasswordController */ "./app/login/controllers/UpdatePasswordController.js");

__webpack_require__(/*! ./modals/TenantSelectionModal */ "./app/login/modals/TenantSelectionModal.js");

/***/ }),

/***/ "./app/login/modals/TenantSelectionModal.js":
/*!**************************************************!*\
  !*** ./app/login/modals/TenantSelectionModal.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.login.modals.TenantSelectionModal', ['mainApp.appCommon.utilities.UnderscoreUtility']).service('TenantSelectionModal', ["$compile", "$templateCache", "$http", "$rootScope", "_", function ($compile, $templateCache, $http, $rootScope, _) {
    this.show = function (tenantList, successCallback) {
        $http.get('app/login/views/TenantSelectionView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.tenantList = _.sortBy(tenantList, 'Indentifier');
            scope.successCallback = successCallback;
            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('TenantSelectionController', ["$scope", "ResourceUtility", function ($scope, ResourceUtility) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.handleTenantSelected = function () {
        if (this.select_value != null) {
            var tenant = _.find($scope.tenantList, { 'Identifier': this.select_value });
            $scope.successCallback(tenant);
            $("#modalContainer").modal('hide');
        }
    };
}]);

/***/ }),

/***/ "./app/marketo/controllers/MarketoCredentialsController.js":
/*!*****************************************************************!*\
  !*** ./app/marketo/controllers/MarketoCredentialsController.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.marketo', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.marketo.modals.DeleteCredentialModal']).controller('MarketoCredentialSetupController', ['$scope', '$state', '$stateParams', 'BrowserStorageUtility', 'ResourceUtility', 'MarketoService', function ($scope, $state, $stateParams, BrowserStorageUtility, ResourceUtility, MarketoService) {

	var vm = this;

	angular.extend(vm, {
		credentialName: '',
		soapEndpoint: '',
		soapUserId: '',
		soapEncryptionKey: '',
		restEndpoint: '',
		restIdentityEndpoint: '',
		restClientId: '',
		restClientSecret: '',
		latticeSecretKey: '',
		state: 'create',
		saveInProgress: false,
		addCredentialErrorMessage: "",
		showAddCredentialError: false
	});

	vm.createCredentialClicked = function () {

		vm.saveInProgress = true;

		var credential = {
			credentialName: vm.credentialName,
			soapEndpoint: vm.soapEndpoint,
			soapUserId: vm.soapUserId,
			soapEncryptionKey: vm.soapEncryptionKey,
			restEndpoint: vm.restEndpoint,
			restIdentityEndpoint: vm.restIdentityEndpoint,
			restClientId: vm.restClientId,
			restClientSecret: vm.restClientSecret,
			latticeSecretKey: vm.latticeSecretKey
		};

		MarketoService.CreateMarketoCredential(credential).then(function (result) {

			if (result != null && result.success === true) {
				$state.go('home.marketosettings.apikey', {}, { reload: true });
			} else {
				vm.saveInProgress = false;
				vm.addCredentialErrorMessage = result;
				vm.showAddCredentialError = true;
			}
		});
	};

	vm.onBlur = function ($event) {

		var desiredCredentialName = vm.credentialName;

		// var id = arr.length + 1;
		// var found = arr.some(function (el) {
		// 	return el.username === name;
		// });
		// if (!found) { arr.push({ id: id, username: name }); }
		console.log(vm.credentials);

		_.each(vm.credentials, function (value, key) {

			vm.credential = value;

			if (value.value == desiredCredentialName) {
				return true;
			} else {
				return false;
			}
		});
	};

	vm.cancelCredentialCreate = function () {
		$state.go('home.marketosettings.apikey');
	};
}]).controller('MarketoCredentialsEditController', ['FeatureFlags', 'MarketoCredential', 'MarketoService', '$state', '$stateParams', function (FeatureFlags, MarketoCredential, MarketoService, $state, $stateParams) {

	var vm = this;
	angular.extend(vm, {
		credential: MarketoCredential,
		credentialId: $stateParams.id,
		credentialName: MarketoCredential.name,
		soapEndpoint: MarketoCredential.soap_endpoint,
		soapUserId: MarketoCredential.soap_user_id,
		soapEncryptionKey: MarketoCredential.soap_encryption_key,
		restEndpoint: MarketoCredential.rest_endpoint,
		restIdentityEndpoint: MarketoCredential.rest_identity_endpoint,
		restClientId: MarketoCredential.rest_client_id,
		restClientSecret: MarketoCredential.rest_client_secret,
		latticeSecretKey: MarketoCredential.lattice_secret_key,
		state: 'edit',
		saveInProgress: false,
		addUserErrorMessage: "",
		showAddUserError: false,
		showSecretKey: FeatureFlags.LatticeMarketoScoring && MarketoCredential.lattice_secret_key
	});

	vm.saveCredentialClicked = function () {

		vm.saveInProgress = true;

		var credential = {
			credentialName: vm.credentialName,
			soapEndpoint: vm.soapEndpoint,
			soapUserId: vm.soapUserId,
			soapEncryptionKey: vm.soapEncryptionKey,
			restEndpoint: vm.restEndpoint,
			restIdentityEndpoint: vm.restIdentityEndpoint,
			restClientId: vm.restClientId,
			restClientSecret: vm.restClientSecret,
			latticeSecretKey: vm.latticeSecretKey
		};

		MarketoService.UpdateMarketoCredential(vm.credentialId, credential).then(function (result) {

			var errorMsg = result.errorMsg;

			if (result.success) {
				$state.go('home.marketosettings.apikey');
			} else {
				vm.saveInProgress = false;
				vm.addCredentialErrorMessage = errorMsg;
				vm.showAddCredentialError = true;
			}
		});
	};

	vm.cancelCredentialCreate = function () {
		$state.go('home.marketosettings.apikey');
	};
}]).controller('MarketoCredentialsController', ['MarketoCredentials', 'MarketoService', 'DeleteCredentialModal', 'ResourceUtility', function (MarketoCredentials, MarketoService, DeleteCredentialModal, ResourceUtility) {
	var vm = this;

	angular.extend(vm, {
		ResourceUtility: ResourceUtility,
		credentials: MarketoCredentials
	});

	vm.deleteCredentialClicked = function (credentialId) {
		DeleteCredentialModal.show(credentialId);
	};
}]);

/***/ }),

/***/ "./app/marketo/controllers/MarketoEnrichmentController.js":
/*!****************************************************************!*\
  !*** ./app/marketo/controllers/MarketoEnrichmentController.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.marketo.enrichment', ['mainApp.core.utilities.BrowserStorageUtility']).controller('MarketoEnrichmentController', ["$scope", "$interval", "$timeout", "$state", "$stateParams", "$filter", "$q", "BrowserStorageUtility", "EnrichmentData", "MarketoCredential", "MarketoMatchFields", "MarketoService", function ($scope, $interval, $timeout, $state, $stateParams, $filter, $q, BrowserStorageUtility, EnrichmentData, MarketoCredential, MarketoMatchFields, MarketoService) {
    var vm = this;

    angular.extend(vm, {
        params: $stateParams,
        save_ready: false,
        saved: false,
        step: 1,
        marketo_fields: null,
        marketo_field: [],
        required_fields: [],
        selected_fields: {},
        match_fields: {},
        enrichments: EnrichmentData,
        marketoEnrichments: MarketoCredential.enrichment, // Match Fields, labels
        marketoMatchFields: MarketoMatchFields, // Marketo Fields, dropdowns
        pagesize: 5
    });

    vm.webhook_name = 'Lattice Lead Enrichment';
    vm.webhook_url = vm.marketoEnrichments.webhook_url + vm.marketoEnrichments.tenant_credential_guid;
    vm.webhook_request_type = 'POST';
    vm.webhook_request_token = 'JSON';
    vm.webhook_response_type = 'JSON';
    vm.custom_header_type = 'Content-Type';
    vm.custom_header_value = 'application/json';

    vm.match_fields = {
        Domain: {
            label: 'Email or Website',
            required: true,
            data: vm.marketoEnrichments.marketo_match_fields[0],
            options: vm.marketoMatchFields
        },
        Company: {
            label: 'Company',
            data: vm.marketoEnrichments.marketo_match_fields[1],
            options: vm.marketoMatchFields
        },
        State: {
            label: 'State',
            data: vm.marketoEnrichments.marketo_match_fields[2],
            options: vm.marketoMatchFields
        },
        Country: {
            label: 'Country',
            data: vm.marketoEnrichments.marketo_match_fields[3],
            options: vm.marketoMatchFields
        }, DUNS: {
            label: 'DUNS',
            data: vm.marketoEnrichments.marketo_match_fields[4],
            options: vm.marketoMatchFields
        }
    };

    vm.open = function (opts) {
        var opts = opts || {};
        if (opts.step) {
            vm.step = opts.step;
        } else if (opts.event) {
            var section = angular.element(opts.event.target).closest('section').first(),
                classes = section.attr('class').split(' '),
                step;

            _.each(classes, function (classname) {
                var classname = String(classname);
                if (classname.includes('step-')) {
                    step = classname.replace('step-', '');
                }
            });
            if (vm.saved) {
                vm.step = step;
            } else {
                step = 1;
            }
        }
    };

    vm.selected_options = {};
    vm.initial_options = {};
    vm.disabled_options = [];
    _.each(vm.match_fields, function (value, key) {
        if (value.data.marketoFieldName) {
            vm.selected_options[key] = value.data.marketoFieldName;
            vm.initial_options[key] = value.data.marketoFieldName;
            vm.disabled_options.push(value.data.marketoFieldName);
        }
    });
    vm.selectOption = function (type, option) {
        vm.selected_options[type] = option;
        vm.disabled_options = [];
        _.each(vm.selected_options, function (value, key) {
            if (!vm.disabled_options.includes(value)) {
                vm.disabled_options.push(value);
            }
        });
    };

    vm.changeField = function (type) {
        vm.saved = false;
        if (vm.marketo_field[type] === vm.initial_options[type]) {
            vm.saved = true;
        }
        for (var i in vm.marketo_field) {
            if (vm.marketo_field[i] && vm.marketo_field[i] !== vm.initial_options[i]) {
                vm.saved = false;
                break;
            } else if (vm.marketo_field[i] && vm.marketo_field[i] === vm.initial_options[i]) {
                vm.saved = true;
            }
        }
        var type = type || '',
            value = vm.marketo_field[type],
            required = vm.match_fields[type].required;

        if (required) {
            if (vm.marketo_field[type]) {
                var index = vm.required_fields.indexOf(type);
                vm.required_fields.splice(index, 1);
            } else {
                if (vm.required_fields.indexOf(type) == -1) {
                    vm.required_fields.push(type);
                }
            }
        }

        if (vm.required_fields.length && !vm.save_ready) {
            vm.save_ready = false;
        } else {
            vm.save_ready = true;
        }
    };

    var UpdateEnrichmentFields = function UpdateEnrichmentFields(credentialId, marketoMatchFields) {
        var deferred = $q.defer();

        MarketoService.UpdateEnrichmentFields(credentialId, marketoMatchFields).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    vm.save = function () {
        var saved_marketoMatchFields = [];
        console.log(vm.marketo_field);
        _.each(vm.match_fields, function (value, key) {
            vm.selected_fields[key] = addBrackets(vm.marketo_field[key]) || null;
            saved_marketoMatchFields.push({
                marketoFieldName: vm.marketo_field[key],
                marketo_match_field_name: value.data.marketo_match_field_name
            });
        });
        UpdateEnrichmentFields(vm.params.id, saved_marketoMatchFields);
        vm.saved = true;
        vm.open({ step: 2 });
    };

    vm.fieldType = function (fieldType) {
        var fieldType = fieldType.replace(/[0-9]+/g, '*');
        var fieldTypes = {
            'default': 'Text/String',
            'NVARCHAR(*)': 'Text/String',
            'FLOAT': 'Number/Float',
            'INT': 'Number/Int',
            'BOOLEAN': 'Boolean'
        };
        return fieldTypes[fieldType] || fieldTypes.default;
    };

    var setOptionsSelectedState = $interval(function () {
        var has_selected = false,
            are_selected = false;
        _.each(vm.marketoEnrichments.marketo_match_fields, function (value, key) {
            if (value.marketoFieldName) {
                has_selected = true;
            }
        });
        var selected = document.querySelectorAll('option[selected="selected"]');
        _.each(selected, function (value, key) {
            vm.marketo_field[value.parentNode.name] = value.value;
            //value.selected = true;
            are_selected = true;
            if (value.parentElement.attributes.required) {
                vm.save_ready = true;
            }
        });
        if (has_selected && are_selected) {
            $interval.cancel(setOptionsSelectedState);
        }
    }, 1000);

    var addBrackets = function addBrackets(string) {
        if (string) {
            return '{{' + string + '}}';
        }
        return null;
    };

    vm.init = function () {
        _.each(vm.match_fields, function (value, key) {
            if (value.required && vm.required_fields.indexOf(key) == -1) {
                vm.required_fields.push(key);
            }
            vm.selected_fields[key] = addBrackets(value.data.marketoFieldName) || null;
            if (value.data.marketoFieldName) {
                vm.saved = true;
            }
        });
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/marketo/controllers/MarketoModelController.js":
/*!***********************************************************!*\
  !*** ./app/marketo/controllers/MarketoModelController.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.marketo.models', []).component('marketoActiveModels', {
    templateUrl: 'app/marketo/views/MarketoActiveModelsView.html',
    controller: ["$q", "$state", "$stateParams", "$scope", "$timeout", "$filter", "BrowserStorageUtility", "MarketoStore", function controller($q, $state, $stateParams, $scope, $timeout, $filter, BrowserStorageUtility, MarketoStore) {
        var vm = this,
            resolve = $scope.$parent.$resolve,
            activeModels = resolve.ActiveModels,
            scoringRequestSummaries = resolve.ScoringRequestSummaries;

        angular.extend(vm, {
            showWebhookLink: {},
            credentialId: $stateParams.credentialId
        });

        vm.init = function () {
            console.log(activeModels);
            vm.activeModels = activeModels;
            MarketoStore.setActiveModels(vm.activeModels);
            vm.scoringRequestSummaryIds = new Set(scoringRequestSummaries.map(function (scoringRequest) {
                return scoringRequest.modelUuid;
            }));
        };

        vm.getConfigId = function (modelId) {
            var model = scoringRequestSummaries.find(function (scoringRequest) {
                return scoringRequest.modelUuid === modelId;
            });
            if (model) {
                return model.configId;
            } else {
                console.warn('Could not find scoring request with modelId: ' + modelId);
            }
        };

        vm.init();
    }]
}).component('marketoSetupModel', {
    templateUrl: 'app/marketo/views/MarketoModelSetupView.html',
    controller: ["$q", "$state", "$stateParams", "$scope", "$timeout", "$filter", "BrowserStorageUtility", "MarketoStore", "MarketoService", function controller($q, $state, $stateParams, $scope, $timeout, $filter, BrowserStorageUtility, MarketoStore, MarketoService) {
        var vm = this,
            resolve = $scope.$parent.$resolve;

        angular.extend(vm, {
            modelId: $stateParams.modelUuid,
            credentialId: $stateParams.credentialId,
            marketoFields: resolve.MarketoFields.data,
            primaryFields: resolve.PrimaryAttributeFields,
            scoringFields: resolve.ScoringFields,
            currentScoringRequest: resolve.ExistingScoringRequest,
            marketoDisplayFieldNames: [],
            fieldsMapping: {},
            requiredMatchFields: ['CompanyName', 'DUNS', 'Email'],
            defaultMapping: {
                FirstName: "Lead.First Name",
                LastName: "Lead.Last Name",
                Industry: "Company.Industry",
                Title: "Lead.Job Title"
            }
        });

        vm.init = function () {
            vm.marketoFieldsSet = new Set(vm.marketoFields.map(function (marketoField) {
                return marketoField.apiName;
            }));
            vm.checkEnableSave();
            vm.updateMarketoScoringMatchFields();
            vm.mapDefaultMatchFields();
        };

        vm.isRequiredField = function (field) {
            return vm.requiredMatchFields.indexOf(field.fieldName) >= 0;
        };

        vm.mapDefaultMatchFields = function () {
            var defaultFields = $filter('filter')(vm.scoringFields.fields, vm.isDefaultField, true);

            defaultFields.forEach(function (defaultField) {
                if (vm.marketoFieldsSet.has(vm.defaultMapping[defaultField.fieldName]) && vm.fieldsMapping[defaultField.fieldName] == undefined) {
                    vm.fieldsMapping[defaultField.fieldName] = vm.defaultMapping[defaultField.fieldName];
                }
            });
        };

        vm.isDefaultField = function (field) {
            return vm.defaultMapping[field.fieldName] != undefined;
        };

        vm.orderFieldNames = function (field) {
            return !vm.isDefaultField(field);
        };

        vm.updateMarketoScoringMatchFields = function () {
            if (vm.currentScoringRequest) {
                vm.currentScoringRequest.marketoScoringMatchFields.forEach(function (mapping) {
                    vm.fieldsMapping[mapping.modelFieldName] = mapping.marketoFieldName;
                });
            }
        };

        vm.checkEnableSave = function () {
            vm.enableSave = false;
            vm.requiredMatchFields.forEach(function (field) {
                if (vm.fieldsMapping[field] != undefined && vm.fieldsMapping[field] != '') {
                    vm.enableSave = true;
                    return;
                }
            });
        };

        vm.createOrUpdateScoringRequest = function () {
            var marketoScoringMatchFields = [];
            Object.keys(vm.fieldsMapping).forEach(function (key) {
                if (vm.fieldsMapping[key]) {
                    marketoScoringMatchFields.push({
                        modelFieldName: key,
                        marketoFieldName: vm.fieldsMapping[key]
                    });
                }
            });

            if (!vm.currentScoringRequest) {
                // CREATE
                var scoringRequest = {
                    modelUuid: vm.modelId,
                    marketoScoringMatchFields: marketoScoringMatchFields
                };

                MarketoService.CreateScoringRequest(vm.credentialId, scoringRequest).then(function (result) {
                    console.log(result);
                    MarketoStore.setScoringRequest(result);
                    $state.go('home.marketosettings.webhook', { "credentialId": $stateParams.credentialId, "configId": result.configId });
                });
            } else {
                // UPDATE
                var scoringRequest = {
                    configId: vm.currentScoringRequest.configId,
                    modelUuid: vm.modelId,
                    marketoScoringMatchFields: marketoScoringMatchFields
                };
                MarketoService.UpdateScoringRequest(vm.credentialId, scoringRequest).then(function (result) {
                    console.log(result);
                    MarketoStore.updateScoringRequestMatchFields(scoringRequest);
                    $state.go('home.marketosettings.webhook', { "credentialId": $stateParams.credentialId, "configId": vm.currentScoringRequest.configId });
                });
            }
        };

        vm.init();
    }]
}).component('marketoWebhookSummary', {
    templateUrl: 'app/marketo/views/MarketoWebhookSummaryView.html',
    controller: ["$q", "$state", "$stateParams", "$scope", "$timeout", "BrowserStorageUtility", function controller($q, $state, $stateParams, $scope, $timeout, BrowserStorageUtility) {
        var vm = this,
            resolve = $scope.$parent.$resolve,
            model = resolve.Model,
            scoringRequest = resolve.ScoringRequest,
            credential = resolve.MarketoCredentials;

        angular.extend(vm, {
            credentialId: $stateParams.credentialId,
            webhookName: model.ModelDetails.DisplayName,
            url: scoringRequest.webhookResource + $stateParams.configId,
            marketoScoringMatchFields: scoringRequest.marketoScoringMatchFields,
            secretKey: credential ? credential.lattice_secret_key : 'null',
            rule: "{{campaign.name}}",
            responseMappingText: "<Select matching Marketo field>"
        });

        vm.init = function () {
            vm.setJsonTemplate();
        };

        vm.setJsonTemplate = function () {
            vm.template = {};
            vm.marketoScoringMatchFields.forEach(function (mapping) {
                vm.template[mapping.modelFieldName] = '{{' + mapping.marketoFieldName + '}}';
            });
        };

        vm.init();
    }]
});

/***/ }),

/***/ "./app/marketo/marketo.index.js":
/*!**************************************!*\
  !*** ./app/marketo/marketo.index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/MarketoCredentialsController */ "./app/marketo/controllers/MarketoCredentialsController.js");

__webpack_require__(/*! ./controllers/MarketoEnrichmentController */ "./app/marketo/controllers/MarketoEnrichmentController.js");

__webpack_require__(/*! ./controllers/MarketoModelController */ "./app/marketo/controllers/MarketoModelController.js");

__webpack_require__(/*! ./modals/DeleteCredentialModal */ "./app/marketo/modals/DeleteCredentialModal.js");

__webpack_require__(/*! ./services/MarketoService */ "./app/marketo/services/MarketoService.js");

/***/ }),

/***/ "./app/marketo/modals/DeleteCredentialModal.js":
/*!*****************************************************!*\
  !*** ./app/marketo/modals/DeleteCredentialModal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.marketo.modals.DeleteCredentialModal', ['mainApp.appCommon.utilities.ResourceUtility', 'lp.marketo']).service('DeleteCredentialModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "MarketoService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, MarketoService) {
    var self = this;
    this.show = function (credentialId) {
        $http.get('app/marketo/views/DeleteCredentialModalView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.credentialId = credentialId;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteCredentialError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DeleteCredentialController', ["$scope", "$rootScope", "$state", "ResourceUtility", "MarketoService", function ($scope, $rootScope, $state, ResourceUtility, MarketoService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deleteCredentialClick = function () {
        $("#deleteModelError").hide();
        MarketoService.DeleteMarketoCredential($scope.credentialId).then(function (result) {
            if (result != null && result.success === true) {
                $("#modalContainer").modal('hide');
                $state.go('home.marketosettings.apikey', {}, { reload: true });
            } else {
                $scope.deleteCredentialErrorMessage = result.ResultErrors;
                $("#deleteModelError").fadeIn();
            }
        });
    };

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/marketo/services/MarketoService.js":
/*!************************************************!*\
  !*** ./app/marketo/services/MarketoService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.marketo').service('MarketoStore', ["$http", "$q", "$state", "MarketoService", function ($http, $q, $state, MarketoService) {
    var MarketoStore = this;
    this.init = function () {
        this.marketoCredentialId = null;
        this.marketoCredential = {};
        this.marketoMatchFields = {};
        this.activeModels = [];
        this.useMarketoLatticeIntegration = null;
        this.primaryAttributeFields = null;
        this.scoringRequestList = null;
        this.scoringRequest = null;
        this.configId = null;
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.setUseMarketoLatticeIntegration = function (bool) {
        this.useMarketoLatticeIntegration = bool;
    };

    this.getUseMarketoLatticeIntegration = function (bool) {
        return this.useMarketoLatticeIntegration != null && this.useMarketoLatticeIntegration == true;
    };

    this.setActiveModels = function (models) {
        this.activeModels = models;
    };

    this.getActiveModels = function () {
        return this.activeModels;
    };

    this.setMarketoCredential = function (credential) {
        this.marketoCredential = credential;
    };

    this.getMarketoCredential = function (credentialId) {
        var deferred = $q.defer();

        if (this.marketoCredential != null && this.marketoCredentialId == credentialId) {
            deferred.resolve(this.marketoCredential);
        } else {
            MarketoService.GetMarketoCredentials(credentialId).then(function (credential) {
                MarketoStore.marketoCredential = credential;
                MarketoStore.marketoCredentialId = credential.credential_id;
                deferred.resolve(credential);
            });
        }

        return deferred.promise;
    };

    this.setScoringRequestList = function (scoringRequestList) {
        this.scoringRequestList = scoringRequestList;
    };

    this.getScoringRequestList = function (credentialId, cacheOnly) {
        if (credentialId == this.marketoCredentialId && this.scoringRequestList && cacheOnly) {
            return this.scoringRequestList;
        } else {
            var deferred = $q.defer();

            MarketoService.GetMarketoScoringRequestSummaries(credentialId).then(function (result) {
                console.log(result);
                MarketoStore.setScoringRequestList(result);
                deferred.resolve(result);
            });

            return deferred.promise;
        }
    };

    this.setScoringRequest = function (scoringRequest) {
        this.scoringRequest = scoringRequest;
        this.configId = scoringRequest.configId ? scoringRequest.configId : null;
    };

    this.updateScoringRequestMatchFields = function (scoringRequest) {
        if (this.scoringRequest) {
            this.scoringRequest.marketoScoringMatchFields = scoringRequest.marketoScoringMatchFields;
        }
    };

    this.getScoringRequest = function (cacheOnly, credentialId, configId) {
        var deferred = $q.defer();

        if (credentialId == this.marketoCredentialId && configId == this.configId && this.scoringRequest && cacheOnly) {
            deferred.resolve(this.scoringRequest);
        } else {
            MarketoService.GetScoringRequest(credentialId, configId).then(function (result) {
                console.log(result);
                MarketoStore.setScoringRequest(result);
                deferred.resolve(result);
            });
        }

        return deferred.promise;
    };

    this.setPrimaryAttributeFields = function (fields) {
        this.primaryAttributeFields = fields;
    };

    this.getPrimaryAttributeFields = function () {
        var deferred = $q.defer();

        if (this.primaryAttributeFields != null) {
            deferred.resolve(this.primaryAttributeFields);
        } else {
            MarketoService.GetPrimaryAttributeFields().then(function (primaryFields) {
                MarketoStore.setPrimaryAttributeFields(primaryFields);
                deferred.resolve(primaryFields);
            });
        }

        return deferred.promise;
    };
}]).service('MarketoService', ["$http", "$q", "$state", function ($http, $q, $state) {
    this.GetMarketoCredentials = function (id) {
        var deferred = $q.defer();
        var result;
        var id = id || '';
        var url = '/pls/marketo/credentials/' + id;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetMarketoCredentialById = function (credentialId) {
        var deferred = $q.defer(),
            result,
            url = '/pls/marketo/credentials/' + credentialId;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.CreateMarketoCredential = function (credential) {
        var deferred = $q.defer(),
            data = {
            name: credential.credentialName,
            soap_endpoint: credential.soapEndpoint,
            soap_user_id: credential.soapUserId,
            soap_encryption_key: credential.soapEncryptionKey,
            rest_endpoint: credential.restEndpoint,
            rest_identity_endpoint: credential.restIdentityEndpoint,
            rest_client_id: credential.restClientId,
            rest_client_secret: credential.restClientSecret,
            lattice_secret_key: credential.latticeSecretKey || null
        };

        $http({
            method: 'POST',
            url: '/pls/marketo/credentials/',
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.DeleteMarketoCredential = function (credentialId) {
        var deferred = $q.defer(),
            result = {},
            url = '/pls/marketo/credentials/' + credentialId;

        $http({
            method: 'DELETE',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.UpdateMarketoCredential = function (credentialId, credential) {
        var deferred = $q.defer(),
            data = {
            name: credential.credentialName,
            soap_endpoint: credential.soapEndpoint,
            soap_user_id: credential.soapUserId,
            soap_encryption_key: credential.soapEncryptionKey,
            rest_endpoint: credential.restEndpoint,
            rest_identity_endpoint: credential.restIdentityEndpoint,
            rest_client_id: credential.restClientId,
            rest_client_secret: credential.restClientSecret,
            lattice_secret_key: credential.latticeSecretKey || null
        };

        $http({
            method: 'PUT',
            url: '/pls/marketo/credentials/' + credentialId,
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    // this.GetMarketoMatchFields = function(credential) {
    //     var deferred = $q.defer();
    //     var result;

    //     $http({
    //         method: 'GET',
    //         url: '/pls/marketo/credentials/matchfields',
    //         params: {
    //             marketoSoapEndpoint: credential.soap_endpoint,
    //             marketoSoapUserId: credential.soap_user_id,
    //             marketoSoapEncryptionKey: credential.soap_encryption_key
    //         },
    //         headers: {
    //             'Accept': 'application/json'
    //         }
    //     }).then(
    //         function onSuccess(response) {
    //             var result = response.data;
    //             deferred.resolve(result);
    //         }, function onError(response) {
    //             if (!response.data) {
    //                 response.data = {};
    //             }

    //             var errorMsg = response.data.errorMsg || 'unspecified error';
    //             deferred.resolve(errorMsg);
    //         }
    //     );

    //     return deferred.promise;
    // }

    this.GetActiveModels = function () {
        var deferred = $q.defer();
        var result;
        var url = '/pls/scoringapi-internal/models';

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetMarketoMatchFields = function (credential) {
        var deferred = $q.defer(),
            result = {},
            url = '/pls/marketo/credentials/matchfields';

        $http({
            method: 'GET',
            url: url,
            params: {
                'marketoSoapEndpoint': credential.soap_endpoint,
                'marketoSoapUserId': credential.soap_user_id,
                'marketoSoapEncryptionKey': credential.soap_encryption_key
            },
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.UpdateEnrichmentFields = function (credentialId, marketoMatchFields) {
        var deferred = $q.defer(),
            data = marketoMatchFields;

        $http({
            method: 'PUT',
            url: '/pls/marketo/credentials/' + credentialId + '/enrichment',
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetMarketoScoringRequestSummaries = function (credential) {
        var deferred = $q.defer(),
            url = '/pls/marketo/credentials/' + credential + '/scoring-requests';

        $http({
            method: 'GET',
            url: url
        }).then(function onSuccess(response) {
            console.log(response);
            deferred.resolve(response.data);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetPrimaryAttributeFields = function () {
        var deferred = $q.defer(),
            url = "/pls/primary-attributes/primaryfield-configuration";

        $http({
            method: 'GET',
            url: url
        }).then(function onSuccess(response) {
            console.log(response);
            deferred.resolve(response.data);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetScoringFields = function (modelId) {
        var deferred = $q.defer(),
            url = "/pls/scoringapi-internal/models/" + modelId + "/fields";

        $http({
            method: 'GET',
            url: url
        }).then(function onSuccess(response) {
            deferred.resolve(response.data);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.CreateScoringRequest = function (credentialId, scoringRequest) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/marketo/credentials/' + credentialId + '/scoring-requests',
            data: scoringRequest,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            deferred.resolve(response.data);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.UpdateScoringRequest = function (credentialId, scoringRequest) {
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: '/pls/marketo/credentials/' + credentialId + '/scoring-requests/' + scoringRequest.configId,
            data: scoringRequest
        }).then(function onSuccess(response) {
            deferred.resolve(response.data);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetScoringRequest = function (credentialId, configId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/marketo/credentials/' + credentialId + '/scoring-requests/' + configId
        }).then(function onSuccess(response) {
            deferred.resolve(response.data);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }
            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/models/controllers/ActivateModelController.js":
/*!***********************************************************!*\
  !*** ./app/models/controllers/ActivateModelController.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.controllers.ActivateModelController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.models.services.ModelService', 'mainApp.models.modals.AddSegmentModal']).controller('ActivateModelController', ["$scope", "BrowserStorageUtility", "ResourceUtility", "ModelService", "AddSegmentModal", function ($scope, BrowserStorageUtility, ResourceUtility, ModelService, AddSegmentModal) {
    $scope.ResourceUtility = ResourceUtility;
    if (BrowserStorageUtility.getClientSession() == null) {
        return;
    }

    $scope.loading = true;
    $scope.segments = [];
    $scope.showError = false;
    $scope.errorMessage = "";
    $scope.saving = false;
    // Can't Add or Delete segments. Leaving this in case we want to reactivate it in the future.
    $scope.allowAddAndDelete = false;

    $scope.closeErrorClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.showError = false;
    };

    $scope.models = [{
        Id: "FAKE_MODEL",
        DisplayName: "Select"
    }];

    function sortByPriority(a, b) {
        if (a.Priority < b.Priority) {
            return -1;
        }
        if (a.Priority > b.Priority) {
            return 1;
        }
        // a must be equal to b
        return 0;
    }

    ModelService.GetAllModels(true).then(function (result) {
        // Get model list, but it may be empty
        if (result != null && result.success === true) {
            $scope.models = $scope.models.concat(result.resultObj);
        }

        loadSegments();
    });

    function loadSegments() {
        ModelService.GetAllSegments($scope.models).then(function (result) {
            $scope.loading = false;
            $scope.saving = false;
            if (result != null && result.success === true) {
                for (var i = 0; i < result.resultObj.length; i++) {
                    //Need this to verify changes against the model in the list
                    result.resultObj[i].NewModelId = result.resultObj[i].ModelId;
                }
                $scope.segments = result.resultObj.sort(sortByPriority);
            } else {
                $scope.showError = true;
                $scope.errorMessage = ResourceUtility.getString("ACTIVATE_MODEL_GET_SEGMENTS_ERROR");
            }
        });
    }

    $scope.saveSegmentsClicked = function () {
        if ($scope.saving) {
            return;
        }
        $scope.saving = true;
        ModelService.UpdateSegments($scope.segments).then(function (result) {
            if (result != null && result.success === true) {
                // pass
            } else if (result.success === false) {
                $scope.showError = true;
                $scope.errorMessage = result.resultErrors;
            } else {
                $scope.showError = true;
                $scope.errorMessage = ResourceUtility.getString("ACTIVATE_MODEL_UPDATE_SEGMENTS_ERROR");
            }
            loadSegments();
        });
    };

    $scope.addNewSegmentClicked = function () {
        AddSegmentModal.show($scope.segments, $scope.models, function (segment) {
            if (segment != null) {
                if (segment.ModelId == null) {
                    segment.ModelId = "FAKE_MODEL";
                }
                segment.NewModelId = segment.ModelId;
                $scope.segments.push(segment);
            }
        });
    };

    $scope.deleteSegmentClicked = function (segment) {
        if (segment == null) {
            return;
        }
        ModelService.DeleteSegment(segment.Name).then(function (result) {
            if (result != null && result.success === true) {
                for (var i = 0; i < $scope.segments.length; i++) {
                    if (segment.Name == $scope.segments[i].Name) {
                        $scope.segments.splice(i, 1);
                        break;
                    }
                }
            } else {
                $scope.showError = true;
                $scope.errorMessage = ResourceUtility.getString("ACTIVATE_MODEL_DELETE_SEGMENT_ERROR", [segment.Name]);
            }
        });
    };

    function updateSegment(segment, successCallback, failCallback) {
        if (successCallback) {
            successCallback();
        }
    }

    $scope.modelChanged = function (segment) {
        if (segment.ModelId == segment.NewModelId) {
            return;
        }

        var model = null;
        for (var i = 0; i < $scope.models.length; i++) {
            if (segment.NewModelId == $scope.models[i].Id) {
                model = $scope.models[i];
                break;
            }
        }

        if (model == null) {
            return;
        }

        var backupSegment = $.extend(true, {}, segment);
        var secondSegment = null;
        var backupSecondSegment = null;
        if (segment.NewModelId == "FAKE_MODEL") {
            segment.ModelId = null;
            segment.ModelName = null;
        } else {
            segment.ModelId = model.Id;
            segment.ModelName = model.DisplayName;

            // 20150603 BKN - Model to Segment is 1:1. Do not allow model assignment to multiple segments.
            // now we need to figure out if that model was associated to another segment and remove it
            for (var x = 0; x < $scope.segments.length; x++) {
                if (segment.Name != $scope.segments[x].Name && $scope.segments[x].ModelId == model.Id) {
                    secondSegment = $scope.segments[x];
                    break;
                }
            }

            if (secondSegment != null) {
                backupSecondSegment = $.extend(true, {}, secondSegment);
                secondSegment.ModelId = null;
                secondSegment.ModelName = null;
                secondSegment.NewModelId = "FAKE_MODEL";
            }
        }

        // Save updated segments here
        if (secondSegment) {
            updateSegment(secondSegment, function () {
                updateSegment(segment, null, function () {
                    // Undo changes if a failure occurs
                    $.extend(true, segment, backupSegment);
                });
            }, function () {
                // Undo changes if a failure occurs
                $.extend(true, secondSegment, backupSecondSegment);
                $.extend(true, segment, backupSegment);
            });
        } else {
            updateSegment(segment, null, function () {
                // Undo changes if a failure occurs
                $.extend(true, segment, backupSegment);
            });
        }
    };

    $scope.showDecreasePriority = function (segment) {
        if (segment == null) {
            return false;
        }

        if (segment.Name == 'LATTICE_DEFAULT_SEGMENT') {
            return false;
        }

        if (segment.Priority >= $scope.segments.length - 1) {
            return false;
        }

        for (var i = 0; i < $scope.segments.length; i++) {
            var toCheck = $scope.segments[i];
            if (segment.Name != toCheck.Name && segment.Priority < toCheck.Priority) {
                return true;
            }
        }
        return false;
    };

    $scope.showIncreasePriority = function (segment) {
        if (segment == null) {
            return false;
        }

        if (segment.Name == 'LATTICE_DEFAULT_SEGMENT') {
            return false;
        }

        for (var i = 0; i < $scope.segments.length; i++) {
            var toCheck = $scope.segments[i];
            if (segment.Name != toCheck.Name && segment.Priority > toCheck.Priority) {
                return true;
            }
        }
        return false;
    };

    $scope.decreasePriorityClicked = function ($event, segment) {
        if ($event != null) {
            $event.preventDefault();
        }

        if (segment == null) {
            return;
        }

        var nextLowest = null;
        for (var i = 0; i < $scope.segments.length; i++) {
            if (segment.Name == $scope.segments[i].Name) {
                var next = i + 1;
                nextLowest = $scope.segments[next];
                break;
            }
        }

        var currentPriority = segment.Priority;
        if (nextLowest) {
            segment.Priority = nextLowest.Priority;
            nextLowest.Priority = currentPriority;
            $scope.segments = $scope.segments.sort(sortByPriority);
            updateSegment(segment, function () {
                updateSegment(nextLowest, function () {
                    $scope.segments = $scope.segments.sort(sortByPriority);
                }, function () {
                    // Undo changes if a failure occurs
                    segment.Priority = currentPriority;
                    $scope.segments = $scope.segments.sort(sortByPriority);
                });
            }, function () {
                // Undo changes if a failure occurs
                nextLowest.Priority = segment.Priority;
                segment.Priority = currentPriority;
                $scope.segments = $scope.segments.sort(sortByPriority);
            });
        }
    };

    $scope.increasePriorityClicked = function ($event, segment) {
        if ($event != null) {
            $event.preventDefault();
        }

        if (segment == null) {
            return;
        }

        var nextHighest = null;
        for (var i = 0; i < $scope.segments.length; i++) {
            if (segment.Name == $scope.segments[i].Name) {
                var previous = i - 1;
                nextHighest = $scope.segments[previous];
                break;
            }
        }

        var currentPriority = segment.Priority;
        if (nextHighest) {
            segment.Priority = nextHighest.Priority;
            nextHighest.Priority = currentPriority;
            $scope.segments = $scope.segments.sort(sortByPriority);
            updateSegment(segment, function () {
                updateSegment(nextHighest, function () {
                    $scope.segments = $scope.segments.sort(sortByPriority);
                }, function () {
                    // Undo changes if a failure occurs
                    segment.Priority = currentPriority;
                    $scope.segments = $scope.segments.sort(sortByPriority);
                });
            }, function () {
                // Undo changes if a failure occurs
                nextHighest.Priority = segment.Priority;
                segment.Priority = currentPriority;
                $scope.segments = $scope.segments.sort(sortByPriority);
            });
        }
    };
}]);

/***/ }),

/***/ "./app/models/controllers/AdminInfoController.js":
/*!*******************************************************!*\
  !*** ./app/models/controllers/AdminInfoController.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.controllers.AdminInfoController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.services.TopPredictorService', 'mainApp.core.utilities.NavUtility', 'mainApp.models.services.ModelService', 'mainApp.core.services.FeatureFlagService']).controller('AdminInfoController', ["$scope", "$rootScope", "$http", "ResourceUtility", "NavUtility", "ModelService", "FeatureFlagService", "ModelStore", function ($scope, $rootScope, $http, ResourceUtility, NavUtility, ModelService, FeatureFlagService, ModelStore) {
    $scope.ResourceUtility = ResourceUtility;

    var data = ModelStore.data;
    $scope.ModelId = data.ModelId;
    $scope.TenantId = data.TenantId;
    $scope.ModelHealthScore = data.ModelDetails.RocScore;
    $scope.TemplateVersion = data.ModelDetails.TemplateVersion;
    $scope.modelUploaded = data.ModelDetails.Uploaded;
    $scope.displayName = data.ModelDetails.DisplayName;

    $scope.onBackClicked = function () {
        var model = {
            Id: data.ModelId,
            DisplayName: data.ModelDetails.DisplayName,
            CreatedDate: data.ModelDetails.ConstructionTime,
            Status: data.ModelDetails.Status
        };
        $rootScope.$broadcast(NavUtility.MODEL_DETAIL_NAV_EVENT, model);
    };

    var flags = FeatureFlagService.Flags();
    var showAlertsTab = FeatureFlagService.FlagIsEnabled(flags.ADMIN_ALERTS_TAB);

    if (showAlertsTab) {
        $scope.loading = true;
    }
}]);

/***/ }),

/***/ "./app/models/controllers/ModelCreationHistoryController.js":
/*!******************************************************************!*\
  !*** ./app/models/controllers/ModelCreationHistoryController.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.controllers.ModelCreationHistoryController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.models.services.ModelService', 'mainApp.models.modals.ImportModelModal']).controller('ModelCreationHistoryController', ["$scope", "$rootScope", "$compile", "BrowserStorageUtility", "ResourceUtility", "RightsUtility", "ModelService", function ($scope, $rootScope, $compile, BrowserStorageUtility, ResourceUtility, RightsUtility, ModelService) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.loading = true;

    var clientSession = BrowserStorageUtility.getClientSession();
    if (clientSession == null) {
        return;
    }

    $scope.showNoModels = false;
    ModelService.GetAllModels(false).then(function (result) {
        $scope.loading = false;
        if (result != null && result.success === true) {
            var modelList = result.resultObj;
            var contentContainer = $('#modelCreationHistoryContainer');

            var scope = $rootScope.$new();
            scope.data = modelList;
            scope.parentData = modelList;
            scope.metadata = null;

            $compile(contentContainer.html('<div data-model-list-creation-history-widget></div>'))(scope);
        } else if (result.resultErrors === "NO TENANT FOUND") {
            $scope.showNoModels = true;
        }
    });
}]);

/***/ }),

/***/ "./app/models/controllers/ModelDetailController.js":
/*!*********************************************************!*\
  !*** ./app/models/controllers/ModelDetailController.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.controllers.ModelDetailController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.appCommon.widgets.ModelDetailsWidget', 'mainApp.models.services.ModelService', 'mainApp.appCommon.services.TopPredictorService', 'mainApp.appCommon.services.ThresholdExplorerService', 'mainApp.create.csvBulkUpload', 'mainApp.models.remodel', 'mainApp.models.review', 'lp.navigation.review']).controller('ModelDetailController', ["$compile", "$stateParams", "$scope", "$rootScope", "_", "ResourceUtility", "RightsUtility", "BrowserStorageUtility", "NavUtility", "ModelService", "ModelStore", "TopPredictorService", "ThresholdExplorerService", "Model", "IsPmml", "RatingEngine", function ($compile, $stateParams, $scope, $rootScope, _, ResourceUtility, RightsUtility, BrowserStorageUtility, NavUtility, ModelService, ModelStore, TopPredictorService, ThresholdExplorerService, Model, IsPmml, RatingEngine) {
    $scope.ResourceUtility = ResourceUtility;
    if (Model !== null) {

        var modelId = $stateParams.modelId;
        var model = Model;

        model.IsPmml = IsPmml;
        model.ModelId = modelId;
        model.ChartData = TopPredictorService.FormatDataForTopPredictorChart(model);
        if (model.ChartData) {
            model.InternalAttributes = TopPredictorService.GetNumberOfAttributesByCategory(model.ChartData.children, false, model);
            model.ExternalAttributes = TopPredictorService.GetNumberOfAttributesByCategory(model.ChartData.children, true, model);
            combineInternalAndExternalAttributesDups(model.InternalAttributes, model.ExternalAttributes);
            model.TotalPredictors = model.InternalAttributes.totalAttributeValues + model.ExternalAttributes.totalAttributeValues;
        }

        // UI BAND-AID for DP-2854 here

        model.TopSample = ModelService.FormatLeadSampleData(model.TopSample);
        var bottomLeads = ModelService.FormatLeadSampleData(model.BottomSample);
        model.BottomSample = filterHighScoresInBottomLeads(bottomLeads);

        var thresholdData = ThresholdExplorerService.PrepareData(model);
        model.ThresholdChartData = thresholdData.ChartData;
        model.ThresholdDecileData = thresholdData.DecileData;
        model.ThresholdLiftData = thresholdData.LiftData;

        model.SuppressedCategories = TopPredictorService.GetSuppressedCategories(model);

        angular.extend(ModelStore, {
            metadata: null,
            data: model,
            parentData: model
        });
    } else {
        $scope.RatingEngine = RatingEngine;
    }

    $compile($('#ModelDetailsArea').html('<div data-model-details-widget></div>'))($scope);

    /**
    ATTENTION: this function is due to we have issues where certain predictor categories show up on both left and right side
    of the donut chart on the model details page. This is caused by the 'Tag' attribute is set to internal where it should
    be external (DP-2854). This is an UI BAND-AID until the back end change is in page.
    */
    function combineInternalAndExternalAttributesDups(internalAttr, externalAttr) {
        var internalCategories = internalAttr.categories;
        var externalCategories = externalAttr.categories;

        for (var j = 0; j < externalCategories.length; j++) {
            for (var i = 0; i < internalCategories.length; i++) {
                if (externalCategories[j].name == internalCategories[i].name) {
                    externalAttr.total += internalCategories[i].count;
                    internalAttr.total -= internalCategories[i].count;

                    externalCategories[j].count += internalCategories[i].count;

                    internalCategories.splice(i, 1);
                }
            }
        }
    }

    function filterHighScoresInBottomLeads(bottomLeads) {
        if (bottomLeads === null) {
            return bottomLeads;
        }
        var toReturn = _.reject(bottomLeads, function (bottomLead) {
            return bottomLead.Score > 10;
        });
        return toReturn;
    }
}]);

/***/ }),

/***/ "./app/models/controllers/ModelListController.js":
/*!*******************************************************!*\
  !*** ./app/models/controllers/ModelListController.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.models.list', ['mainApp.core.services.FeatureFlagService', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.widgets.ModelListTileWidget', 'mainApp.appCommon.services.HealthService', 'mainApp.models.modals.CopyModelFromTenantModal']).controller('ModelListController', ["$state", "$filter", "ResourceUtility", "ModelList", "ModelStore", "ModelService", "CopyModelFromTenantModal", "ImportModelModal", "FeatureFlagService", "ServiceErrorUtility", "HealthService", function ($state, $filter, ResourceUtility, ModelList, ModelStore, ModelService, CopyModelFromTenantModal, ImportModelModal, FeatureFlagService, ServiceErrorUtility, HealthService) {
    var vm = this;

    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        models: ModelList || [],
        filteredItems: [],
        query: '',
        currentPage: 1,
        header: {
            sort: {
                label: 'Sort By',
                icon: 'numeric',
                order: '-',
                property: 'TimeStamp',
                items: [{ label: 'Creation Date', icon: 'numeric', property: 'TimeStamp' }, { label: 'Model Name', icon: 'alpha', property: 'DisplayName' }, { label: 'Active Status', icon: 'amount', property: 'Status' }, { label: 'Model Type', icon: 'alpha', property: 'ModelType' }]
            },
            filter: {
                label: 'Filter By',
                unfiltered: ModelList,
                filtered: ModelList,
                items: [{ label: "All", action: {}, total: 278 }, { label: "Active", action: { Status: 'Active' }, total: 23 }, { label: "Inactive", action: { Status: 'Inactive' }, total: 153 }, { label: "PMML", action: { ModelFileType: "PmmlModel" }, total: 36 }]
            },
            create: {
                label: 'Create Model',
                //labelIcon: 'fa-plus',
                sref: 'home.models.import',
                class: 'orange-button select-label',
                icon: 'fa fa-chevron-down',
                iconclass: 'orange-button select-more',
                iconrotate: true,
                click: checkStatusBeforeCreate.bind(null, 'home.models.import')
            }
        }
    }, {
        init: function init() {

            this.header.create.items = [{
                sref: 'home.models.import',
                label: 'From Training Set',
                icon: 'fa fa-file-excel-o',
                click: checkStatusBeforeCreate.bind(null, 'home.models.import')
            }, {
                sref: 'home.models.pmml',
                label: 'From PMML File',
                icon: 'fa fa-file-code-o',
                click: checkStatusBeforeCreate.bind(null, 'home.models.pmml')
            }, {
                if: 0,
                click: vm.showCopyModelFromTenant,
                label: 'From Another Tenant',
                icon: 'ico ico-lattice-dots' /*,{
                                                if: vm.showUploadSummaryJson,
                                                click: vm.importJSON,
                                                label: 'Import JSON File',
                                                icon: 'fa fa-file-text-o'
                                             }*/
            }];

            FeatureFlagService.GetAllFlags().then(function (result) {
                var flags = FeatureFlagService.Flags();
                vm.showModelCreationHistory = FeatureFlagService.FlagIsEnabled(flags.MODEL_HISTORY_PAGE);
            });

            /*
            FeatureFlagService.GetAllFlags().then(function(result) {
                var flags = FeatureFlagService.Flags();
                  // disable Import JSON button for now
                vm.showUploadSummaryJson = false; //FeatureFlagService.FlagIsEnabled(flags.UPLOAD_JSON);
            });
            */

            vm.processModels(vm.models);

            ModelStore.getModels().then(vm.processModels);

            ModelService.GetAllModels(false).then(function (result) {
                if (result != null && result.success === true) {
                    vm.modelsIncludingDeletedLength = result.resultObj.length;
                }
            });
        },

        showCopyModelFromTenant: function showCopyModelFromTenant() {
            CopyModelFromTenantModal.show();
        },

        importJSON: function importJSON() {
            ImportModelModal.show();
        },

        processModels: function processModels(models) {
            vm.models = models;
            vm.totalLength = models.length;

            for (var i = 0; i < models.length; i++) {
                models[i].TimeStamp = Date.parse(models[i].CreatedDate);
            }

            var active = models.filter(function (item) {
                return item.Status == 'Active';
            });

            var pmml = models.filter(function (item) {
                return item.ModelFileType == 'PmmlModel';
            });

            vm.activeLength = active.length;
            vm.pmmlLength = pmml.length;
        }
    });

    vm.count = function (type) {
        return $filter('filter')(vm.models, { Status: type }, true).length;
    };

    function checkStatusBeforeCreate(sref, $event) {
        $event.preventDefault();

        HealthService.checkSystemStatus().then(function () {
            $state.go(sref);
        });
    }

    vm.init();
}]);

/***/ }),

/***/ "./app/models/controllers/ModelRatingsController.js":
/*!**********************************************************!*\
  !*** ./app/models/controllers/ModelRatingsController.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

angular.module('lp.models.ratings', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.widgets.ModelDetailsWidget', 'mainApp.models.services.ModelService']).directive('refresher', function () {
    return {
        transclude: true,
        controller: ["$scope", "$transclude", "$attrs", "$element", function controller($scope, $transclude, $attrs, $element) {
            var childScope;

            $scope.$watch($attrs.condition, function (value) {
                $element.empty();
                if (childScope) {
                    childScope.$destroy();
                    childScope = null;
                }

                $transclude(function (clone, newScope) {
                    childScope = newScope;
                    $element.append(clone);
                });
            });
        }]
    };
}).controller('ModelRatingsController', ["$scope", "$rootScope", "$state", "$stateParams", "$timeout", "ResourceUtility", "Model", "Notice", "ModelStore", "ModelRatingsService", "CurrentConfiguration", "RatingsSummary", "RatingsEngineStore", function ($scope, $rootScope, $state, $stateParams, $timeout, ResourceUtility, Model, Notice, ModelStore, ModelRatingsService, CurrentConfiguration, RatingsSummary, RatingsEngineStore) {
    var vm = this;

    angular.extend(vm, {
        stateParams: $stateParams,
        modelId: $stateParams.modelId,
        tenantName: $stateParams.tenantName,
        model: Model,
        saveInProgress: false,
        showSaveBucketsError: false,
        updateContent: false,
        ResourceUtility: ResourceUtility,
        currentConfiguration: CurrentConfiguration,
        workingBuckets: CurrentConfiguration,
        ratingsSummary: RatingsSummary,
        bucketNames: ['A', 'B', 'C', 'D', 'E', 'F'],
        section: $state.params && $state.params.section ? $state.params.section : ''
    });

    vm.init = function () {
        // Atlas uses dashboard.ratings for vm.section
        if (vm.section === 'dashboard.ratings') {
            vm.currentRating = RatingsEngineStore.currentRating;
            vm.activeModel = vm.currentRating.activeModel;
            vm.predictionType = vm.activeModel.AI.predictionType;

            // Get dashboard data for list of iterations
            vm.dashboard = ModelStore.getDashboardData();
            var dashboardIterations = vm.dashboard.iterations;

            // Show 'No Ratings Available' message if dashboard bucketMetadata isn't present for the selected iteration
            vm.hasRatingsAvailable = vm.dashboard.summary.bucketMetadata ? true : false;

            // use only iterations that have active modelSummaryId by creating new array
            vm.activeIterations = [];
            angular.forEach(dashboardIterations, function (iteration) {
                if (iteration.modelSummaryId && iteration.modelingJobStatus == "Completed") {
                    vm.activeIterations.push(iteration);
                }
            });

            vm.currentConfiguration = angular.copy(vm.dashboard.summary.bucketMetadata);

            // Set active iteration (default value for iteration select menu) 
            // and working buckets (vm.workingBuckets is what drives the chart data)
            if ($stateParams.toggleRatings) {

                vm.activeIteration = vm.activeIterations.filter(function (iteration) {
                    return iteration.modelSummaryId === $stateParams.modelId;
                })[0];

                // if (vm.dashboard.summary.publishedIterationId && vm.dashboard.summary.status == 'ACTIVE'){

                //     console.log("here");
                //     console.log(vm.dashboard.summary.bucketMetadata);

                //     vm.workingBuckets = vm.dashboard.summary.bucketMetadata ? vm.dashboard.summary.bucketMetadata : [];
                // }

                var id = vm.activeIteration.modelSummaryId;
                ModelRatingsService.MostRecentConfiguration(id).then(function (result) {
                    vm.workingBuckets = result;
                });
                ModelRatingsService.GetBucketedScoresSummary(id).then(function (result) {
                    vm.ratingsSummary = result;
                });
            } else {

                // If the model has been published previously and is Active
                if (vm.dashboard.summary.publishedIterationId && vm.dashboard.summary.status == 'ACTIVE') {

                    // Set active iteration and working buckets (determines what is displayed in the chart)
                    vm.activeIteration = vm.activeIterations.filter(function (iteration) {
                        return iteration.id === vm.dashboard.summary.publishedIterationId;
                    })[0];
                    vm.workingBuckets = vm.dashboard.summary.bucketMetadata ? vm.dashboard.summary.bucketMetadata : [];

                    var id = vm.activeIteration.modelSummaryId;
                    ModelRatingsService.GetBucketedScoresSummary(id).then(function (result) {
                        // Helps with chart data and display
                        vm.ratingsSummary = result;
                    });
                } else {

                    // If the model has not been published or is inactive, 
                    // select the most recent iteration in the select menu
                    vm.activeIteration = vm.activeIterations[vm.activeIterations.length - 1];
                }
            }

            vm.ratingModelId = vm.activeIteration.id;
        }

        if (vm.model.EventTableProvenance.SourceSchemaInterpretation === "SalesforceLead") {
            vm.modelType = "Leads";
        } else {
            vm.modelType = "Accounts";
        };

        vm.Math = window.Math;
        vm.chartNotUpdated = vm.section === 'dashboard.scoring' || vm.section === 'dashboard.ratings' ? false : true;

        // Give the above code time to catch up before rendering the chart
        $timeout(function () {
            renderChart();
        }, 500);
    };

    vm.init();

    vm.changeIterationData = function () {
        $state.go('home.model.ratings', {
            modelId: vm.activeIteration.modelSummaryId,
            rating_id: $stateParams.rating_id,
            viewingIteration: false,
            toggleRatings: true
        }, { reload: true });
    };

    function renderChart() {

        vm.slidersContainer = document.getElementById("sliders");
        vm.barColors = document.getElementById("barColors");
        var verticalAxis = document.getElementById("verticalAxis");

        // Get tallest bar in set
        vm.largestLiftInSet = Math.max.apply(null, vm.ratingsSummary.bar_lifts);

        // Set height of chart components based off tallest bar
        vm.relativeHeightOfTallest = Math.round(12 * vm.largestLiftInSet + 10);
        if (vm.relativeHeightOfTallest < 150) {
            vm.chartContainerHeight = Math.round(25 * vm.largestLiftInSet + 10);
            vm.barMultiplier = 25;
        } else {
            vm.chartContainerHeight = Math.round(15 * vm.largestLiftInSet + 10);
            vm.barMultiplier = 15;
        }

        // Define height of dugout
        vm.dugoutHeight = vm.chartContainerHeight - 8;

        // Create vertical axis based on maxLift
        vm.yAxisNumber = Math.round(vm.largestLiftInSet);
        if (vm.yAxisNumber >= 3 && vm.yAxisNumber <= 10) {
            verticalAxis.classList.add('reduceSmall');
        } else if (vm.yAxisNumber > 10) {
            verticalAxis.classList.add('reduceBig');
        }

        vm.getNumber = function (num) {
            if (!Number.isNaN(num)) {
                return new Array(num);
            }
        };
        vm.axisItemHeight = vm.chartContainerHeight / vm.yAxisNumber;
        refreshChartData();
    }

    function refreshChartData() {
        vm.buckets = vm.workingBuckets;
        vm.bucketsLength = vm.buckets.length;
        vm.updateContent = false;

        if (vm.buckets.length === 6) {
            vm.bucketNames = ['A', 'B', 'C', 'D', 'E', 'F'];
            vm.canAddBucket = false;
        } else if (vm.buckets.length < 6) {
            vm.bucketNames = ['A', 'B', 'C', 'D', 'E'];
            vm.canAddBucket = true;
        }

        if (vm.predictionType === 'EXPECTED_VALUE') {
            var array1 = vm.ratingsSummary.bucketed_scores.filter(function (item) {
                return item != null && item.avg_expected_revenue != null;
            });
            vm.avgRevenueTotal = array1.reduce(function (prev, cur) {
                return prev + cur.avg_expected_revenue;
            }, 0);
        }

        // loop through buckets in object and set their values
        for (var i = 0, len = vm.bucketsLength; i < len; i++) {
            var bucket = vm.buckets[i];
            var previousBucket = vm.buckets[i - 1];

            if (previousBucket != null) {
                vm.previousRightBoundScore = previousBucket["right_bound_score"];
            }

            // set each buckets left_bound_score to the previous buckets right_bound_score minus one
            bucket.left_bound_score = vm.previousRightBoundScore - 1;
            vm.buckets[0].left_bound_score = 99;

            if (bucket.right_bound_score === 0) {
                bucket.right_bound_score = 5;
            }

            vm.rightScore = bucket.right_bound_score - 1;
            vm.rightLeads = vm.ratingsSummary.bucketed_scores[vm.rightScore].left_num_leads;
            vm.rightConverted = vm.ratingsSummary.bucketed_scores[vm.rightScore].left_num_converted;
            vm.leftScore = bucket.left_bound_score;
            vm.leftLeads = vm.ratingsSummary.bucketed_scores[vm.leftScore].left_num_leads;
            vm.leftConverted = vm.ratingsSummary.bucketed_scores[vm.leftScore].left_num_converted;

            vm.totalLeads = vm.rightLeads - vm.leftLeads;
            vm.totalConverted = vm.rightConverted - vm.leftConverted;

            var bucketLeads = 0;
            var bucketRevenue = 0;
            var bucketConverted = 0;

            var score = null;

            for (var index = vm.leftScore; index > vm.rightScore; index--) {
                score = vm.ratingsSummary.bucketed_scores[index];

                bucketLeads += score.num_leads;
                bucketRevenue += score.expected_revenue;
                bucketConverted += score.num_converted * score.num_leads;
            }

            bucket.conversionRate = bucketConverted / (bucketLeads * bucketLeads) * 100;
            bucket.bucketAvgRevenue = bucketRevenue / bucketLeads;
            bucket.num_leads = vm.rightLeads - vm.leftLeads;

            // bucket.lift = ( bucketAvgRevenue / total average expected revenue across all buckets);

            if (vm.predictionType === 'EXPECTED_VALUE') {

                bucket.lift = bucket.bucketAvgRevenue / vm.avgRevenueTotal > 0.1 ? bucket.bucketAvgRevenue / vm.avgRevenueTotal : 0.1010101;
            } else {

                if (vm.totalLeads === 0 || vm.ratingsSummary.total_num_converted === 0 || vm.ratingsSummary.total_num_leads === 0) {
                    bucket.lift = 0;
                } else {
                    bucket.lift = vm.totalConverted / vm.totalLeads / (vm.ratingsSummary.total_num_converted / vm.ratingsSummary.total_num_leads);
                }
            }

            bucket.bucket_name = vm.bucketNames[i];
        }
    }

    vm.addBucket = function (ev) {
        if (vm.workingBuckets.length < 6 && vm.canAddBucket) {
            vm.containerBox = vm.slidersContainer.getBoundingClientRect();
            vm.relativeSliderChartPosition = (ev.clientX - vm.containerBox.left) / vm.containerBox.width;

            var addSlider = {
                creation_timestamp: 0,
                left_bound_score: 0,
                lift: 0,
                bucket_name: "",
                num_leads: 0,
                right_bound_score: 100 - Math.round(vm.relativeSliderChartPosition * 100)
            };

            vm.workingBuckets.push(addSlider);
            vm.workingBuckets.sort(function (a, b) {
                return b.right_bound_score - a.right_bound_score;
            });

            vm.chartNotUpdated = false;
            vm.canAddBucket = true;

            refreshChartData();
        } else {
            vm.canAddBucket = false;
        }
    };

    vm.eleMouseDown = function (ev, bucket, index) {
        ev.preventDefault();
        ev.stopPropagation();

        vm.slider = ev.currentTarget;
        vm.containerBox = vm.slidersContainer.getBoundingClientRect();
        vm.bucket = bucket;
        vm.index = index;

        vm.bucket.isMoving = true;
        vm.canAddBucket = false;
        vm.showRemoveBucketText = false;
        vm.startingPosition = ev.clientX;
        vm.updateContent = false;
        vm.right = bucket.right_bound_score;

        document.addEventListener('mousemove', eleMouseMove, false);
        document.addEventListener('mouseup', eleMouseUp, false);
    };

    function eleMouseMove(ev) {
        ev.preventDefault();
        ev.stopPropagation();

        vm.firstBucket = vm.workingBuckets[Object.keys(vm.workingBuckets)[0]];
        vm.relativeSliderChartPosition = (ev.clientX - vm.containerBox.left) / vm.containerBox.width;

        if (vm.index === 0) {
            vm.sliderBoundaryLeft = 98;
            vm.sliderBoundaryRight = vm.workingBuckets[Object.keys(vm.workingBuckets)[vm.index + 1]].right_bound_score + 2;
        } else {
            vm.sliderBoundaryRight = vm.workingBuckets[Object.keys(vm.workingBuckets)[vm.index + 1]].right_bound_score + 2;
            vm.sliderBoundaryLeft = vm.workingBuckets[Object.keys(vm.workingBuckets)[vm.index - 1]].right_bound_score - 2;
        }

        var right = 100 - Math.round(vm.relativeSliderChartPosition * 100);
        var leftCheck = right <= vm.sliderBoundaryLeft;
        var rightCheck = right >= vm.sliderBoundaryRight;

        if (leftCheck && rightCheck) {
            this.right = right;
            vm.slider.style.right = right + '%';
            vm.right = right;
        } else if (!leftCheck && rightCheck) {
            vm.right = 98;
        } else if (leftCheck && !rightCheck) {
            if (vm.index == vm.workingBuckets.length - 1) {
                vm.right = 5;
            } else {
                vm.right = vm.sliderBoundaryRight;
            }
        } else {
            vm.slider.style.right = (leftCheck ? vm.sliderBoundaryRight : vm.sliderBoundaryLeft) + '%';
        }

        if (vm.workingBuckets.length > 2 && ev.clientY > vm.containerBox.bottom + 10) {
            vm.showRemoveBucketText = true;
            vm.slider.style.opacity = .25;

            if (vm.showRemoveBucketText) {
                $scope.$apply();
            }
        } else {
            vm.showRemoveBucketText = false;
            vm.slider.style.opacity = 1;

            if (!vm.showRemoveBucketText) {
                $scope.$apply();
            }
        }
    }

    function eleMouseUp(ev, index) {
        ev.preventDefault();
        ev.stopPropagation();

        vm.bucket.isMoving = false;

        if (vm.startingPosition != ev.clientX) {
            vm.bucket.right_bound_score = this.right;
            vm.chartNotUpdated = false;
        }

        vm.slider.style.opacity = 1;
        vm.canAddBucket = false;

        vm.workingBuckets.sort(function (a, b) {
            return b.right_bound_score - a.right_bound_score;
        });

        if (vm.workingBuckets.length > 2 && ev.clientY > vm.containerBox.bottom + 10) {
            vm.chartNotUpdated = false;
            vm.showRemoveBucketText = false;

            vm.workingBuckets.splice(vm.index, 1);

            var buckets = vm.workingBuckets;

            for (var i = 0, len = buckets.length; i < len; i++) {
                var previousBucket = buckets[i - 1];

                for (var bucket in previousBucket) {
                    vm.previousRightBoundScore = previousBucket["right_bound_score"];
                }

                buckets[i].left_bound_score = vm.previousRightBoundScore - 1;
                buckets[0].left_bound_score = 99;
            }

            $scope.$apply();
        }

        delete vm.slider;

        document.removeEventListener('mousemove', eleMouseMove, false);
        document.removeEventListener('mouseup', eleMouseUp, false);

        $timeout(function () {
            refreshChartData();
        }, 1);
    }

    vm.publishConfiguration = function () {
        vm.chartNotUpdated = false;
        vm.savingConfiguration = true;

        var rating_id = $stateParams.rating_id;

        if (vm.section === 'dashboard.scoring' || vm.section === 'dashboard.ratings') {
            var aiModelId = vm.ratingModelId;

            ModelRatingsService.CreateABCDBucketsRatingEngine(rating_id, aiModelId, vm.workingBuckets).then(function (result) {
                if (result != null && result.success === true) {

                    RatingsEngineStore.saveRatingStatus(rating_id, 'ACTIVE', 'false').then(function (result) {
                        vm.chartNotUpdated = true;
                        vm.updateContent = true;
                        vm.savingConfiguration = false;

                        Notice.success({
                            delay: 4000,
                            title: 'Publish Configuration',
                            message: 'Your new ratings configuration has been published.'
                        });

                        $rootScope.$broadcast('statusChange', {
                            activeStatus: 'ACTIVE',
                            activeIteration: vm.activeIteration.iteration
                        });
                        $timeout(function () {
                            vm.updateContent = false;
                        }, 300);
                    });
                } else {
                    vm.savingConfiguration = false;
                    vm.createBucketsErrorMessage = result;
                    vm.showSaveBucketsError = true;
                }
            });
        } else {

            ModelRatingsService.CreateABCDBuckets(vm.modelId, vm.workingBuckets).then(function (result) {
                if (result != null && result.success === true) {
                    vm.chartNotUpdated = true;
                    vm.updateContent = true;
                    Notice.success({
                        delay: 4000,
                        title: 'Publish Configuration',
                        message: 'Your new ratings configuration has been published.'
                    });
                    $timeout(function () {
                        vm.updateContent = false;
                    }, 200);
                } else {
                    vm.savingConfiguration = false;
                    vm.createBucketsErrorMessage = result;
                    vm.showSaveBucketsError = true;
                }
            });
        }
    };
}]).controller('ModelRatingsHistoryController', ["$scope", "$rootScope", "$state", "$stateParams", "$window", "ResourceUtility", "Model", "ModelStore", "ModelRatingsService", "ScoringHistory", "FeatureFlags", function ($scope, $rootScope, $state, $stateParams, $window, ResourceUtility, Model, ModelStore, ModelRatingsService, ScoringHistory, FeatureFlags) {

    var vm = this;
    angular.extend(vm, {
        model: Model,
        rating_id: $stateParams.rating_id,
        modelId: $stateParams.modelId,
        tenantName: $stateParams.tenantName,
        data: ModelStore,
        bucketNames: ['A', 'B', 'C', 'D', 'E', 'F'],
        ResourceUtility: ResourceUtility,
        cdlIsEnabled: FeatureFlags.EnableCdl,
        scoringHistory: ScoringHistory,
        math: window.Math,
        currentPage: 1,
        pageSize: 4,
        header: {
            sort: {
                label: 'Sort By',
                icon: 'numeric',
                order: '-',
                property: 'publishedTimestamp',
                items: [{ label: 'Publish Date', icon: 'numeric', property: 'publishedTimestamp' }, { label: 'Publisher', icon: 'alpha', property: 'publishedBy' }]
            },
            filter: {
                label: 'Filter By',
                value: {},
                items: [{ label: "All Iterations", action: {}, total: vm.totalLength }]
            }
        }
    });

    vm.init = function () {

        if (vm.cdlIsEnabled) {
            vm.header.filter.unfiltered = vm.scoringHistory;
            vm.header.filter.filtered = vm.scoringHistory;

            var uniqueIterations = [].concat(_toConsumableArray(new Set(vm.scoringHistory.map(function (item) {
                return item.iteration;
            }).sort())));
            uniqueIterations.sort(function (a, b) {
                return b - a;
            });

            angular.forEach(uniqueIterations, function (iterationOption) {
                var iterationFilter = { label: 'Iteration ' + iterationOption, action: { iteration: iterationOption } };
                vm.header.filter.items.push(iterationFilter);
            });
        } else {

            if (vm.model.EventTableProvenance.SourceSchemaInterpretation === "SalesforceLead") {
                vm.modelType = "Leads";
            } else {
                vm.modelType = "Accounts";
            }
        }

        // vm.getModelJobNumber = vm.model.ModelDetails.ModelSummaryProvenanceProperties[5].ModelSummaryProvenanceProperty.value;

        // Set value for total leads in set
        // This will need to get changed when we're saving configurations
        // vm.historyTotalLeads = pluckDeepKey("num_leads", vm.publishedHistory);

        // Add values for a specific key in object  
        // function pluckDeepKey(key, obj) {
        //     if (_.has(obj, key)) {
        //         return obj[key];
        //     }
        //     return _.reduce(_.flatten(_.map(obj, function(v) {
        //         return _.isObject(v) ? pluckDeepKey(key, v) : [];
        //     }), false), function(a,b) { return a + b });
        // }
    };

    vm.init();
}]).directive('modelRatingsChart', function () {
    return {
        restrict: 'EA',
        templateUrl: 'app/models/views/ModelRatingsChartView.html',
        scope: {
            workingBuckets: '=?',
            ratingsSummary: '=?'

            // chartContainerHeight: '=?',
            // showRemoveBucketText: '=?',
            // showSuccess: '=?',
            // dugoutHeight: '=?',
            // addBucket: '=?', // function
            // canAddBucket: '=?',
            // workingBuckets: '=?',
            // eleMouseDown: '=?',
            // right: '=?',
            // getNumber: '=?', // function
            // yAxisNumber: '=?',
            // axisItemHeight: '=?',
            // Math: '=?',
            // barMultiplier: '=?',
            // bucketHover: '=?', // function
            // modelType: '=?'
        },
        controller: ['$scope', '$rootScope', '$state', '$stateParams', '$timeout', 'ResourceUtility', 'Model', 'ModelStore', 'ModelRatingsService', 'CurrentConfiguration', 'RatingsSummary', function ($scope, $rootScope, $state, $stateParams, $timeout, ResourceUtility, Model, ModelStore, ModelRatingsService, CurrentConfiguration, RatingsSummary) {
            var vm = $scope;
            angular.extend(vm, {
                workingBuckets: $scope.workingBuckets,
                ratingsSummary: $scope.ratingsSummary
            });
        }]
    };
});

/***/ }),

/***/ "./app/models/controllers/ModelReviewController.js":
/*!*********************************************************!*\
  !*** ./app/models/controllers/ModelReviewController.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.review', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.models.services.ModelService', 'mainApp.setup.services.MetadataService', 'lp.models.review']).controller('ModelReviewRowController', ["$scope", "$stateParams", "_", "$rootScope", "ResourceUtility", "ModelService", "ModelReviewStore", "ReviewData", "Model", function ($scope, $stateParams, _, $rootScope, ResourceUtility, ModelService, ModelReviewStore, ReviewData, Model) {
    var vm = this,
        ruleNameToDataRules = {},
        modelId = $stateParams.modelId;

    for (var i in ReviewData.dataRules) {
        ruleNameToDataRules[ReviewData.dataRules[i].name] = ReviewData.dataRules[i];
    }

    angular.extend(vm, {
        ruleNameToDataRules: ruleNameToDataRules,
        rowWarnings: _.values(ReviewData.ruleNameToRowRuleResults),
        totalRecords: Model.ModelDetails.TotalLeads,
        rowsExcluded: 0
    });

    var storedDataRules = ModelReviewStore.GetDataRules(modelId);
    if (storedDataRules != null) {
        storedDataRules.forEach(function (storeDataRule) {
            vm.ruleNameToDataRules[storeDataRule.name] = storeDataRule;
        });
    }

    vm.warningExcludeToggled = function ($event, warning) {
        if ($event == null) {
            $event.preventDefault();
        }

        var beforeState = vm.ruleNameToDataRules[warning.dataRuleName].enabled;
        vm.ruleNameToDataRules[warning.dataRuleName].enabled = !beforeState;
        ModelReviewStore.SetReviewData(modelId, ReviewData);
        ModelReviewStore.AddDataRule(modelId, vm.ruleNameToDataRules[warning.dataRuleName]);
        if (beforeState == true) {
            vm.rowsExcluded -= warning.flaggedItemCount;
        } else {
            vm.rowsExcluded += warning.flaggedItemCount;
        }

        $rootScope.$broadcast('RowWarningToggled', warning, vm.ruleNameToDataRules[warning.dataRuleName]);
    };

    vm.rowWarnings.forEach(function (rowWarning) {
        if (vm.ruleNameToDataRules[rowWarning.dataRuleName].enabled) {
            vm.rowsExcluded += rowWarning.flaggedItemCount;
        }
    });
}]).controller('ModelReviewColumnController', ["$scope", "_", "$stateParams", "ModelService", "MetadataService", "ModelReviewStore", "ReviewData", function ($scope, _, $stateParams, ModelService, MetadataService, ModelReviewStore, ReviewData) {
    var vm = this,
        ruleNameToDataRules = {},
        modelId = $stateParams.modelId;

    for (var i in ReviewData.dataRules) {
        ruleNameToDataRules[ReviewData.dataRules[i].name] = ReviewData.dataRules[i];
    }

    angular.extend(vm, {
        ruleNameToDataRules: ruleNameToDataRules,
        allColumnWarnings: _.values(ReviewData.ruleNameToColumnRuleResults),
        showAll: false,
        showLatticeAttr: false,
        showCustomAttr: true,
        totalWarnedColumnCount: 0,
        totalLatticeColumnCount: 0,
        totalCustomColumnCount: 0,
        interface: {
            totalExcludedColumnCount: 0,
            show: 'custom'
        },
        columnWarningsToDisplay: [],
        columnNameToIsLatticeAttr: {},
        columnNameToColumnDisplayName: {}
    });

    MetadataService.GetMetadataForModel(modelId).then(function (modelMetadata) {
        vm.modelMetadata = modelMetadata.ResultObj;
        vm.allColumnWarnings.forEach(function (columnWarning) {
            vm.totalWarnedColumnCount += columnWarning.flaggedItemCount;

            columnWarning.flaggedColumnNames.forEach(function (columnName) {
                var column = vm.findMetadataItemByColumnName(columnName);
                vm.columnNameToIsLatticeAttr[columnName] = vm.isLatticeAttribute(column);
                vm.columnNameToIsLatticeAttr[columnName] ? vm.totalLatticeColumnCount++ : vm.totalCustomColumnCount++;
                vm.columnNameToColumnDisplayName[columnName] = column.DisplayName;
            });
            ReviewData.dataRules.forEach(function (dataRule) {
                for (var i in dataRule.columnsToRemediate) {
                    if (dataRule.name in ReviewData.ruleNameToColumnRuleResults && !dataRule.columnsToRemediate[i] in ReviewData.ruleNameToColumnRuleResults[dataRule.name].flaggedColumnNames) {
                        console.log('column: ' + dataRule.columnsToRemediate[i] + ' removed for rule: ' + dataRule.name);
                        dataRule.columnsToRemediate.splice(i, 1);
                    }
                }
                ModelReviewStore.AddDataRule(modelId, dataRule);
            });
            if (ruleNameToDataRules[columnWarning.dataRuleName].enabled) {
                vm.interface.totalExcludedColumnCount += vm.ruleNameToDataRules[columnWarning.dataRuleName].columnsToRemediate.length;
            }
        });
        vm.displayNonLatticeWarningsClicked();
    });

    vm.displayLatticeWarningsClicked = function () {
        vm.showAll = false;
        vm.showCustomAttr = false, vm.showLatticeAttr = true;
        vm.columnWarningsToDisplay = [];

        ModelReviewStore.GetReviewData(modelId).then(function (reviewData) {
            for (var i in reviewData.dataRules) {
                ruleNameToDataRules[ReviewData.dataRules[i].name] = reviewData.dataRules[i];
            }
            vm.allColumnWarnings.forEach(function (columnWarning) {
                if (isLatticeColumnWarning(columnWarning)) {
                    vm.columnWarningsToDisplay.push(columnWarning);
                }
            });
        });
        vm.interface.show = 'lattice';
    };

    vm.displayNonLatticeWarningsClicked = function () {
        vm.showAll = false, vm.showLatticeAttr = false, vm.showCustomAttr = true;
        vm.columnWarningsToDisplay = [];

        ModelReviewStore.GetReviewData(modelId).then(function (reviewData) {
            for (var i in reviewData.dataRules) {
                ruleNameToDataRules[ReviewData.dataRules[i].name] = reviewData.dataRules[i];
            }
            vm.allColumnWarnings.forEach(function (columnWarning) {
                if (isNonLatticeColumnWarning(columnWarning)) {
                    vm.columnWarningsToDisplay.push(columnWarning);
                }
            });
        });
        vm.interface.show = 'custom';
    };

    vm.displayAllWarningsClicked = function () {
        vm.showAll = true, vm.showLatticeAttr = false, vm.showCustomAttr = false;
        vm.columnWarningsToDisplay = [];

        ModelReviewStore.GetReviewData(modelId).then(function (reviewData) {
            for (var i in reviewData.dataRules) {
                ruleNameToDataRules[ReviewData.dataRules[i].name] = reviewData.dataRules[i];
            }
            vm.allColumnWarnings.forEach(function (columnWarning) {
                vm.columnWarningsToDisplay.push(columnWarning);
            });
        });
        vm.interface.show = 'all';
    };

    vm.isLatticeAttribute = function (column) {
        if (column == null) {
            return false;
        }
        return MetadataService.IsLatticeAttribute(column);
    };

    vm.findMetadataItemByColumnName = function (columnName) {
        for (var i in vm.modelMetadata) {
            if (vm.modelMetadata[i]['ColumnName'].toLowerCase() == columnName.toLowerCase()) {
                return vm.modelMetadata[i];
            }
        }
    };

    function isLatticeColumnWarning(columnWarning) {
        if (columnWarning.flaggedColumnNames != null) {
            for (var i in columnWarning.flaggedColumnNames) {
                var flaggedColumn = vm.findMetadataItemByColumnName(columnWarning.flaggedColumnNames[i]);
                if (flaggedColumn != null && vm.isLatticeAttribute(flaggedColumn)) {
                    return true;
                }
            }
        }
        return false;
    }

    function isNonLatticeColumnWarning(columnWarning) {
        if (columnWarning.flaggedColumnNames != null) {
            for (var i in columnWarning.flaggedColumnNames) {
                var flaggedColumn = vm.findMetadataItemByColumnName(columnWarning.flaggedColumnNames[i]);
                if (flaggedColumn != null && !vm.isLatticeAttribute(flaggedColumn)) {
                    return true;
                }
            }
        }
        return false;
    }
}]).directive('modelReviewColumnWarning', function () {
    return {
        restrict: 'EA',
        templateUrl: 'app/models/views/ColumnWarningRow.html',
        scope: {
            column: '=',
            rules: '=',
            data: '=',
            interface: '='
        },
        controller: ['$scope', '$stateParams', 'ModelService', 'ModelReviewStore', function ($scope, $stateParams, ModelService, ModelReviewStore) {

            $scope.modelId = $stateParams.modelId;
            $scope.columnWarning = $scope.column;
            $scope.ruleNameToDataRules = $scope.rules;
            $scope.columnWarningExpanded = false;
            $scope.dataRule = $scope.ruleNameToDataRules[$scope.columnWarning.dataRuleName];
            $scope.columnsToRemediate = $scope.dataRule.columnsToRemediate;
            $scope.ReviewData = $scope.data;
            $scope.columnTotal = $scope.columnWarning.flaggedItemCount;
            $scope.latticeWarningTotal = 0;
            $scope.customWarningTotal = 0;
            $scope.columnNameToColumnDisplayName = $scope.$parent.vm.columnNameToColumnDisplayName;

            $scope.columnWarning.flaggedColumnNames.forEach(function (columnName) {
                if ($scope.$parent.vm.columnNameToIsLatticeAttr[columnName]) {
                    $scope.latticeWarningTotal++;
                } else if (!$scope.$parent.vm.columnNameToIsLatticeAttr[columnName]) {
                    $scope.customWarningTotal++;
                }
            });

            $scope.warningExcludeToggled = function ($event, warning) {
                if ($event == null) {
                    $event.preventDefault();
                }

                var ruleEnabledBefore = $scope.dataRule.enabled;
                if (ruleEnabledBefore && $scope.columnsToRemediate.length < $scope.columnWarning.flaggedItemCount) {
                    // warning was partially enabled
                    $scope.interface.totalExcludedColumnCount -= $scope.columnsToRemediate.length;
                    $scope.interface.totalExcludedColumnCount += warning.flaggedColumnNames.length;
                    $scope.columnsToRemediate = $scope.columnWarning.flaggedColumnNames.slice(0);
                    $('#' + warning.dataRuleName).trigger('click');
                } else if (ruleEnabledBefore) {
                    // warning was all enabled
                    $scope.interface.totalExcludedColumnCount -= $scope.columnsToRemediate.length;
                    $scope.columnsToRemediate = [];
                    $scope.dataRule.enabled = false;
                } else {
                    $scope.columnsToRemediate = $scope.columnWarning.flaggedColumnNames.slice(0);
                    $scope.interface.totalExcludedColumnCount += warning.flaggedColumnNames.length;
                    $scope.dataRule.enabled = true;
                }
                $scope.dataRule.columnsToRemediate = $scope.columnsToRemediate;
                ModelReviewStore.AddDataRule($scope.modelId, $scope.dataRule);
            };

            $scope.columnExcludeToggled = function ($event, columnName) {
                if ($scope.columnRemediated(columnName)) {
                    $scope.interface.totalExcludedColumnCount--;
                    $scope.columnsToRemediate.splice($scope.columnsToRemediate.indexOf(columnName), 1);
                    if ($scope.columnsToRemediate.length == 0) {
                        $scope.dataRule.enabled = false;
                    }
                } else {
                    $scope.interface.totalExcludedColumnCount++;
                    $scope.columnsToRemediate.push(columnName);
                    if ($scope.columnsToRemediate.length == 1) {
                        $scope.dataRule.enabled = true;
                    }
                }
                $scope.dataRule.columnsToRemediate = $scope.columnsToRemediate;
                ModelReviewStore.AddDataRule($scope.modelId, $scope.dataRule);
            };

            $scope.columnRemediated = function (columnName) {
                return $scope.columnsToRemediate.indexOf(columnName) > -1;
            };

            $scope.expandColumnWarningClicked = function () {
                $scope.columnWarningExpanded = !$scope.columnWarningExpanded;
            };

            $scope.shouldDisplayColumn = function (columnName) {
                return $scope.$parent.vm.showCustomAttr && !$scope.$parent.vm.columnNameToIsLatticeAttr[columnName] || $scope.$parent.vm.showLatticeAttr && $scope.$parent.vm.columnNameToIsLatticeAttr[columnName] || $scope.$parent.vm.showAll;
            };

            $scope.shouldBeDisabled = function () {
                return $scope.columnWarning.flaggedItemCount == 0;
            };
        }]
    };
});

/***/ }),

/***/ "./app/models/controllers/RemodelController.js":
/*!*****************************************************!*\
  !*** ./app/models/controllers/RemodelController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.remodel', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.models.modals.BasicConfirmation', 'mainApp.models.modals.RemodelingModal', 'mainApp.setup.services.MetadataService', 'mainApp.appCommon.utilities.StringUtility', 'lp.models.remodel', 'lp.jobs']).controller('RemodelController', ["$scope", "$filter", "$state", "$timeout", "$anchorScroll", "MetadataService", "RemodelTooltipService", "RemodelStore", "Model", "DataRules", "Attributes", "BasicConfirmationModal", "RemodelingModal", "ResourceUtility", "StringUtility", "HealthService", function ($scope, $filter, $state, $timeout, $anchorScroll, MetadataService, RemodelTooltipService, RemodelStore, Model, DataRules, Attributes, BasicConfirmationModal, RemodelingModal, ResourceUtility, StringUtility, HealthService) {

    if (Model.ModelType === 'PmmlModel' || Model.ModelDetails.Uploaded === true) {
        backToModel();
        return;
    }

    var vm = this;
    angular.extend(vm, {
        messageTitle: null,
        message: null,
        successs: null,
        error: null,
        disableRemodelOnError: false,
        dataRulesMap: {},
        attributes: [],
        newModelName: Model.ModelDetails.DisplayName.replace(/\s+/g, '_') + $filter('date')(new Date().getTime(), '_yyyyMMdd') + '_Remodel',
        notesContent: '',
        isDirty: false,
        remodeling: false,
        sortBy: 'name',
        sortAsc: true
    });

    vm.init = function ($q) {};
    vm.init();

    vm.toggle = function (attribute) {
        if (vm.remodeling) {
            return;
        }

        vm.isDirty = true;

        if (attribute.attribute.ApprovedUsage === 'None') {
            attribute.attribute.ApprovedUsage = 'ModelAndAllInsights';
            attribute.value = true;
        } else {
            attribute.attribute.ApprovedUsage = 'None';
            attribute.value = false;
        }
    };

    for (var i = 0; i < DataRules.length; i++) {
        var dataRule = DataRules[i];
        vm.dataRulesMap[dataRule.name] = dataRule;
    }

    if (typeof Attributes === "string") {
        vm.attributes = [];
        vm.disableRemodelOnError = true;
    } else {
        vm.attributes = Attributes.map(function (attribute) {
            var attributeObj = {
                name: attribute.DisplayName,
                value: attribute.ApprovedUsage !== 'None',
                recommendations: [],
                disabled: false,
                warning: null,
                attribute: angular.copy(attribute)
            };

            if (attribute.IsCoveredByMandatoryRule) {
                attributeObj.disabled = true;
                attributeObj.warning = 'mandatory';
            } else if (attribute.IsCoveredByOptionalRule) {
                attributeObj.disabled = false;
                attributeObj.warning = 'optional';
            }

            if (attribute.AssociatedRules) {
                for (var i = 0; i < attribute.AssociatedRules.length; i++) {
                    var associatedRule = attribute.AssociatedRules[i];

                    var dataRuleList = vm.dataRulesMap[associatedRule];
                    if (dataRuleList) {
                        attributeObj.recommendations.push(dataRuleList);
                    }
                }
            }

            return attributeObj;
        });
    }

    vm.sort = function (sortBy) {
        if (vm.sortBy === sortBy) {
            vm.sortAsc = !vm.sortAsc;
        } else {
            vm.sortBy = sortBy;
        }
    };

    vm.checkStatusBeforeRemodel = function () {
        HealthService.checkSystemStatus().then(function () {
            vm.remodel();
        }).catch(function () {
            $anchorScroll();
        });
    };

    vm.remodel = function () {
        var modelNameFormatted = StringUtility.SubstituteAllSpecialCharsWithDashes(vm.newModelName);

        var copy_text = " (copy)",
            oneLeadPerDomain = Model.EventTableProvenance.Is_One_Lead_Per_Domain == null ? false : Model.EventTableProvenance.Is_One_Lead_Per_Domain == "true",
            dedupType = oneLeadPerDomain ? 'ONELEADPERDOMAIN' : 'MULTIPLELEADSPERDOMAIN',
            includePersonalEmailDomains = Model.EventTableProvenance.Exclude_Public_Domains == null ? true : Model.EventTableProvenance.Exclude_Public_Domains == "false",
            useLatticeAttributes = Model.EventTableProvenance.Exclude_Propdata_Columns == null ? true : Model.EventTableProvenance.Exclude_Propdata_Columns == "false",
            enableTransformations = Model.EventTableProvenance.Transformation_Group_Name == "none" || Model.ModelDetails.TransformationGroupName === "none" ? false : true,
            modelName = modelNameFormatted,
            modelDisplayName = vm.newModelName,
            notesContent = vm.notesContent,
            originalModelSummaryId = Model.ModelDetails.ModelID,
            fields = vm.attributes.map(function (attribute) {
            return attribute.attribute;
        });

        vm.remodeling = true;
        RemodelingModal.show();

        MetadataService.UpdateAndCloneFields(dedupType, includePersonalEmailDomains, useLatticeAttributes, enableTransformations, modelName, modelDisplayName, notesContent, originalModelSummaryId, fields, null).then(function (result) {

            if (result.Success === true) {
                vm.success = true;
                vm.messageTitle = ResourceUtility.getString('MODEL_REMODEL_REMODELING_TITLE');
                vm.message = ResourceUtility.getString('MODEL_REMODEL_REMODELING_MESSAGE') + ' Now redirecting to jobs page...';

                vm.isDirty = false;
            } else {
                vm.error = true;
                vm.messageTitle = 'Error';
                vm.message = result.ResultErrors;
            }
        }).finally(function () {
            RemodelingModal.hide();
            vm.remodeling = false;
            if (vm.success) {
                $state.go('home.jobs.status', { 'jobCreationSuccess': true });
            }
        });
    };

    function backToModel() {
        $state.go('home.model.attributes', { modelId: Model.ModelDetails.ModelID });
    }

    vm.cancel = function () {
        if (vm.isDirty) {
            var title = ResourceUtility.getString('SETUP_CANCEL_CONFIRM_TITLE');
            var text = ResourceUtility.getString('MODEL_REMODEL_CANCEL_MESSAGE');
            var confirmButtonLabel = ResourceUtility.getString('BUTTON_DISCARD_CHANGES_LABEL');

            BasicConfirmationModal.show(title, text, confirmButtonLabel, null, backToModel, null);
        } else {
            backToModel();
        }
    };

    vm.closeMessage = function () {
        vm.message = null;
        vm.messageTitle = null;
        vm.successs = null;
        vm.error = null;
    };

    var timeout = null;
    var tooltipEl = angular.element('#remodel-tooltip');
    tooltipEl.mouseenter(function () {
        $timeout.cancel(timeout);
    });
    tooltipEl.mouseleave(function () {
        vm.hideTooltip(true);
    });

    vm.showTooltip = function ($event, attribute) {
        $timeout.cancel(timeout);
        RemodelTooltipService.show(tooltipEl, $event, attribute);
    };

    vm.hideTooltip = function (immediate) {
        if (immediate === true) {
            RemodelTooltipService.hide(tooltipEl);
        } else {
            timeout = $timeout(function () {
                RemodelTooltipService.hide(tooltipEl);
            }, 300, false);
        }
    };
}]).service('RemodelTooltipService', function () {
    var RemodelTooltipService = this;

    this.show = function (el, $event, attribute) {
        var template = RemodelTooltipService.template(attribute);

        var left = $event.target.offsetParent.offsetLeft - el.outerWidth(),
            top = $event.target.offsetParent.offsetTop;

        el.html(template);
        el.css({ top: top, left: left });
        el.removeClass(function (index, css) {
            return (css.match(/(^|\s)warn-\S+/g) || []).join(' ');
        });
        el.addClass('warn-' + attribute.warning);
        el.addClass('active');
    };

    this.hide = function (el) {
        el.removeClass('active');
    };

    this.template = function (attribute) {
        var template = attribute.recommendations.reduce(function (tmpl, rec, i) {
            var header = '<div class="remodel-tooltip-title">' + rec.displayName + '</div>';
            var sub = '<div>Recommendation: <span class="remodel-tooltip-rec">Exclude</span></div>';
            var body = '<p>' + rec.description + '</p>';

            return tmpl + (i > 0 ? '<hr>' : '') + '<div>' + header + sub + body + '</div>';
        }, '');

        return '<div class="remodel-tooltip-inner">' + template + '</div>';
    };
});

/***/ }),

/***/ "./app/models/controllers/controllers.index.js":
/*!*****************************************************!*\
  !*** ./app/models/controllers/controllers.index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./ActivateModelController */ "./app/models/controllers/ActivateModelController.js");

__webpack_require__(/*! ./AdminInfoController */ "./app/models/controllers/AdminInfoController.js");

__webpack_require__(/*! ./ModelCreationHistoryController */ "./app/models/controllers/ModelCreationHistoryController.js");

__webpack_require__(/*! ./ModelDetailController */ "./app/models/controllers/ModelDetailController.js");

__webpack_require__(/*! ./ModelListController */ "./app/models/controllers/ModelListController.js");

__webpack_require__(/*! ./ModelRatingsController */ "./app/models/controllers/ModelRatingsController.js");

__webpack_require__(/*! ./ModelReviewController */ "./app/models/controllers/ModelReviewController.js");

__webpack_require__(/*! ./RemodelController */ "./app/models/controllers/RemodelController.js");

/***/ }),

/***/ "./app/models/modals/BasicConfirmationModal.js":
/*!*****************************************************!*\
  !*** ./app/models/modals/BasicConfirmationModal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.BasicConfirmation', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility']).service('BasicConfirmationModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", function ($compile, $templateCache, $rootScope, $http, ResourceUtility) {
    var self = this;
    this.show = function (title, text, confirmLabel, cancelLabel, confirmationCb, cancelCb) {
        $http.get('app/models/views/BasicConfirmationView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.title = title;
            scope.text = text;
            scope.confirmLabel = confirmLabel || ResourceUtility.getString('BUTTON_OK_LABEL');
            scope.cancelLabel = cancelLabel || ResourceUtility.getString('BUTTON_CANCEL_LABEL');
            scope.confirmationCb = confirmationCb || Function.prototype;
            scope.cancelCb = cancelCb || Function.prototype;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('BasicConfirmationController', ["$scope", "ResourceUtility", function ($scope, ResourceUtility) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.confirmClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.confirmationCb();
        $("#modalContainer").modal('hide');
    };

    $scope.cancelClick = function () {
        $scope.cancelCb();
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/models/modals/CopyModelFromTenantModal.js":
/*!*******************************************************!*\
  !*** ./app/models/modals/CopyModelFromTenantModal.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.CopyModelFromTenantModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService', 'mainApp.core.utilities.NavUtility']).service('CopyModelFromTenantModal', ["$compile", "$templateCache", "$rootScope", "$http", "NavUtility", function ($compile, $templateCache, $rootScope, $http, NavUtility) {
    this.show = function () {
        $http.get('app/models/views/CopyModelFromTenantModalView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('CopyModelFromTenantModalController', ["$scope", "$rootScope", "ResourceUtility", "NavUtility", "ModelService", function ($scope, $rootScope, ResourceUtility, NavUtility, ModelService) {
    var vm = this;
    //angular.extend(vm, {});
    $scope.vm = vm;

    vm.ResourceUtility = ResourceUtility;

    vm.tenants = $.jStorage.get('GriotLoginDocument').Tenants || {};
    vm.current_tenant = {};
    vm.models = [];
    vm.current_model = {};
    vm.model_copied = false;
    vm.model_selected = false;

    vm.selectTenant = function ($event, tenant) {
        var target = angular.element($event.currentTarget);

        deselectAll(target);

        target.addClass('selected');

        vm.current_tenant = tenant;
        vm.gettingModels = true;
        vm.models = [];
        ModelService.GetAllModels(false, tenant.Identifier).then(function (result) {
            $scope.loading = false;
            if (result != null && result.success === true) {
                vm.models = result.resultObj;
            } else if (result.resultErrors === "NO TENANT FOUND") {
                vm.showNoModels = true;
            }
        });
    };

    var deselectAll = function deselectAll(target) {
        var target_type = target[0].tagName,
            targets = target.parent().find(target_type);
        vm.model_selected = false;
        vm.current_model = {};
        targets.removeClass('selected');
    };

    vm.selectModel = function ($event, model) {
        var target = angular.element($event.currentTarget);
        if (model) {
            deselectAll(target);
            target.addClass('selected');
            vm.current_model = model;
            vm.model_selected = true;
        }
    };
    vm.copyModel = function () {
        if (vm.current_model && vm.current_tenant) {
            var modelName = vm.current_model.Name,
                tenantId = vm.current_tenant.Identifier;

            /* move to ModelService.js
            $http.get('/pls/models/copymodel/' + modelName, {params: {targetTenantId: tenantId}}).success(function (data) {
                console.log(data);
            });
            */
            vm.model_copied = true;
        }
    };
}]);

/***/ }),

/***/ "./app/models/modals/CopyModelToTenantModal.js":
/*!*****************************************************!*\
  !*** ./app/models/modals/CopyModelToTenantModal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.CopyModelToTenantModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService', 'mainApp.core.utilities.NavUtility']).service('CopyModelToTenantModal', ["$compile", "$templateCache", "$rootScope", "$http", "NavUtility", function ($compile, $templateCache, $rootScope, $http, NavUtility) {
    this.show = function (model) {
        $http.get('app/models/views/CopyModelToTenantModalView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();

            scope.model = model;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('CopyModelToTenantModalController', ["$scope", "$rootScope", "$stateParams", "ResourceUtility", "NavUtility", "ModelService", "CopyModelToTenantModal", "BrowserStorageUtility", function ($scope, $rootScope, $stateParams, ResourceUtility, NavUtility, ModelService, CopyModelToTenantModal, BrowserStorageUtility) {
    var vm = this;
    //angular.extend(vm, {});
    $scope.vm = vm;

    vm.ResourceUtility = ResourceUtility;
    vm.asTenantName = $stateParams.tenantName || BrowserStorageUtility.getClientSession().Tenant.DisplayName;
    vm.current_tenant = {};
    vm.current_model = $scope.model;
    vm.copying = false;
    vm.modal_state = {
        choosing: true,
        copying: false,
        copied: false,
        error: false
    };

    var _tenants = $.jStorage.get('GriotLoginDocument').Tenants || {};
    vm.tenants = _tenants.filter(function (o) {
        return o.DisplayName !== vm.asTenantName;
    });

    vm.modal_change_state = function (key) {
        vm.copying = false;
        _.each(vm.modal_state, function (_value, _key) {
            vm.modal_state[_key] = false;
        });
        vm.modal_state[key] = true;
    };

    vm.selectTenant = function ($event, tenant) {
        var target = angular.element($event.currentTarget);
        deselectAll(target);
        target.addClass('selected');
        vm.current_tenant = tenant;
        vm.tenant_selected = true;
    };

    var deselectAll = function deselectAll(target) {
        var target_type = target[0].tagName,
            targets = target.parent().find(target_type);
        vm.tenant_selected = false;
        vm.current_tenant = {};
        targets.removeClass('selected');
    };

    vm.copyingModel = function () {
        if (vm.current_model && vm.current_tenant) {
            vm.modal_change_state('copying');
            var modelName = vm.current_model.Name,
                tenantId = vm.current_tenant.Identifier;
        }
    };

    vm.copyModel = function () {
        if (vm.current_model && vm.current_tenant) {
            var modelName = vm.current_model.Id,
                tenantId = vm.current_tenant.Identifier;
            vm.copying = true;
            ModelService.CopyModel(modelName, tenantId).then(function (result) {
                if (result != null && result.success === true) {
                    vm.modal_change_state('copied');
                } else {
                    vm.modal_change_state('error');
                    vm.copying_error = "There was a problem copying your model. This wasn't your fault. Please contact Lattice if this problem persists.";
                }
            });
        }
    };
}]);

/***/ }),

/***/ "./app/models/modals/DeactivateModelModal.js":
/*!***************************************************!*\
  !*** ./app/models/modals/DeactivateModelModal.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.DeactivateModelModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService', 'mainApp.core.utilities.NavUtility']).service('DeactivateModelModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "ModelService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, ModelService) {
    var self = this;
    this.show = function (modelId) {
        $http.get('app/models/views/DeactivateModelConfirmView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.modelId = modelId;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deactivateModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });

            var close_button = angular.element('[data-ng-controller="DeactivateModelController"] .modal-header button.close');
            close_button.click(function () {
                $rootScope.$broadcast('deactivate:modal:cancel');
            });
        });
    };
}]).controller('DeactivateModelController', ["$scope", "$rootScope", "$state", "ResourceUtility", "NavUtility", "ModelService", function ($scope, $rootScope, $state, ResourceUtility, NavUtility, ModelService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deactivateModelClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }
        updateAsInactiveModel($scope.modelId);
    };

    function updateAsInactiveModel(modelId) {
        $("#deactivateModelError").hide();
        ModelService.updateAsInactiveModel(modelId).then(function (result) {
            if (result != null && result.success === true) {
                $("#modalContainer").modal('hide');
                $state.go('home.models', {}, { reload: true });
            } else {
                console.log("errors");
            }
        });
    }

    $scope.cancelClick = function () {
        $rootScope.$broadcast('deactivate:modal:cancel');
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/models/modals/DeleteModelModal.js":
/*!***********************************************!*\
  !*** ./app/models/modals/DeleteModelModal.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.DeleteModelModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService', 'mainApp.core.utilities.NavUtility']).service('DeleteModelModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "ModelService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, ModelService) {
    var self = this;
    this.show = function (modelId) {
        $http.get('app/models/views/DeleteModelConfirmView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.modelId = modelId;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DeleteModelController', ["$scope", "$rootScope", "$state", "ResourceUtility", "NavUtility", "ModelStore", "ModelService", function ($scope, $rootScope, $state, ResourceUtility, NavUtility, ModelStore, ModelService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deleteModelClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        ModelStore.removeModel($scope.modelId);
        updateAsDeletedModel($scope.modelId);
    };

    function updateAsDeletedModel(modelId) {
        $("#deleteModelError").hide();
        ModelService.updateAsDeletedModel(modelId).then(function (result) {
            if (result != null && result.success === true) {
                $("#modalContainer").modal('hide');
                $state.go('home.models', {}, { reload: true });
            } else {
                $scope.deleteModelErrorMessage = result.ResultErrors;
                $("#deleteModelError").fadeIn();
            }
        });
    }

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/models/modals/ImportModelModal.js":
/*!***********************************************!*\
  !*** ./app/models/modals/ImportModelModal.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.ImportModelModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService', 'mainApp.core.utilities.NavUtility']).directive('jsonUploader', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function link(scope, element, attrs) {
            var model = $parse(attrs.jsonUploader);
            var modelSetter = model.assign;

            element.bind('change', function () {
                scope.$apply(function () {
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]).controller('jsonUploaderCtrl', ['$scope', '$rootScope', 'ModelService', 'ResourceUtility', function ($scope, $rootScope, ModelService, ResourceUtility) {
    $scope.showImportError = false;
    $scope.importErrorMsg = "";
    $scope.importing = false;
    $scope.showImportSuccess = false;
    $scope.ResourceUtility = ResourceUtility;

    // define reader
    var reader = new FileReader();

    // A handler for the load event (just defining it, not executing it right now)
    reader.onload = function () {
        $scope.$apply(function () {
            ModelService.uploadRawModelJSON(reader.result).then(function (result) {
                if (result.Success) {
                    $scope.showImportSuccess = true;
                } else {
                    $scope.showImportError = true;
                    $scope.importErrorMsg = ResourceUtility.getString('VALIDATION_ERROR_GENERAL');
                    console.error(result.ResultErrors);
                }
                $scope.importing = false;
            });
        });
    };

    $scope.uploadFile = function () {
        if ($scope.jsonFile) {
            $scope.showImportError = false;
            $scope.importErrorMsg = "";
            $scope.importing = true;
            reader.readAsText($scope.jsonFile);
        }
    };

    $scope.okClicked = function () {
        $("#modalContainer").modal('hide');
        $rootScope.$broadcast("ModelCreationHistoryNavEvent");
    };
}]).service('ImportModelModal', ["$compile", "$templateCache", "$rootScope", "$http", "NavUtility", function ($compile, $templateCache, $rootScope, $http, NavUtility) {
    this.show = function () {
        $http.get('app/models/views/ImportModelModalView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('ImportModelModalController', ["$scope", "$rootScope", "ResourceUtility", "NavUtility", "ModelService", function ($scope, $rootScope, ResourceUtility, NavUtility, ModelService) {
    $scope.ResourceUtility = ResourceUtility;
}]);

/***/ }),

/***/ "./app/models/modals/RefineModelThresholdModal.js":
/*!********************************************************!*\
  !*** ./app/models/modals/RefineModelThresholdModal.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.RefineModelThresholdModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService']).service('RefineModelThresholdModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "StringUtility", "ModelService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, StringUtility, ModelService) {
    var self = this;
    this.show = function (totalRows, successEvents, conversionRate) {
        $http.get('app/models/views/RefineModelThresholdModal.html', { cache: $templateCache }).success(function (html) {
            var scope = $rootScope.$new();
            scope.ResourceUtility = ResourceUtility;
            scope.totalRows = totalRows;
            scope.totalRowsDisplay = StringUtility.AddCommas(totalRows);
            scope.successEvents = successEvents;
            scope.successEventsDisplay = StringUtility.AddCommas(successEvents);
            scope.conversionRate = conversionRate;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('RefineModelThresholdController', ["$scope", "$rootScope", "ResourceUtility", function ($scope, $rootScope, ResourceUtility) {
    $scope.createModelClicked = function () {
        $rootScope.$broadcast('ShowCreateModelPopup');
    };

    $scope.cancelClicked = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/models/modals/RemodelingModal.js":
/*!**********************************************!*\
  !*** ./app/models/modals/RemodelingModal.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.RemodelingModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility']).service('RemodelingModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", function ($compile, $templateCache, $rootScope, $http, ResourceUtility) {
    var self = this;
    this.show = function () {
        $http.get('app/models/views/RemodelingView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };

    this.hide = function () {
        $("#modalContainer").modal('hide');
    };
}]).controller('RemodelingController', ["$scope", "ResourceUtility", function ($scope, ResourceUtility) {
    $scope.ResourceUtility = ResourceUtility;
}]);

/***/ }),

/***/ "./app/models/modals/ScoreLeadEnrichmentModal.js":
/*!*******************************************************!*\
  !*** ./app/models/modals/ScoreLeadEnrichmentModal.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.leadenrichment', ['mainApp.appCommon.utilities.ResourceUtility']).service('ScoreLeadEnrichmentModal', ["$compile", "$templateCache", "$rootScope", "$http", function ($compile, $templateCache, $rootScope, $http) {
    var self = this;
    this.showRescoreModal = function () {
        $http.get('app/models/views/ScoreLeadEnrichmentView.html', { cache: $templateCache }).success(function (html) {
            var scope = $rootScope.$new();
            scope.rescore = true;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };

    this.showFileScoreModal = function (modelId, fileName, state) {
        $http.get('app/models/views/ScoreLeadEnrichmentView.html', { cache: $templateCache }).success(function (html) {
            var scope = $rootScope.$new();
            scope.rescore = false;
            scope.modelId = modelId;
            scope.fileName = fileName;
            scope.state = state;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('ScoreLeadEnrichmentController', ["$scope", "$rootScope", "$state", "$stateParams", "$timeout", "ResourceUtility", "JobsService", "ImportService", "DataCloudStore", function ($scope, $rootScope, $state, $stateParams, $timeout, ResourceUtility, JobsService, ImportService, DataCloudStore) {
    var vm = this;
    $scope.ResourceUtility = ResourceUtility;
    $scope.saveInProgress = false;
    $scope.scoringFailed = false;
    $scope.noEnrichmentsSelected = false;

    angular.extend(vm, {
        rescore: $scope.rescore,
        state: $scope.state,
        enableLeadEnrichment: false
    });

    $scope.disableLeadEnrichmentClicked = function () {
        vm.enableLeadEnrichment = false;
    };

    $scope.enableLeadEnrichmentClicked = function () {
        vm.enableLeadEnrichment = true;
    };

    $scope.scoreClicked = function ($event) {
        if (vm.rescore) {
            $scope.saveInProgress = true;
            JobsService.rescoreTrainingData(vm.enableLeadEnrichment).then(function (jobResponse) {
                $scope.saveInProgress = false;
                if (jobResponse.success) {
                    $("#modalContainer").modal('hide');
                    $rootScope.$broadcast("SCORING_JOB_SUCCESS", jobResponse.success);
                } else {
                    $scope.scoringFailed = true;
                }
            });
        } else {
            $scope.saveInProgress = true;
            ImportService.StartTestingSet($scope.modelId, $scope.fileName, vm.enableLeadEnrichment).then(function (result) {
                $scope.saveInProgress = false;
                if (result.Success) {
                    $("#modalContainer").modal('hide');
                    $state.go('home.model.jobs', { 'jobCreationSuccess': result.Success });
                } else {
                    $scope.scoringFailed = true;
                }
            });
        }
    };

    $scope.cancelClicked = function (ignoreCancelState) {
        $("#modalContainer").modal('hide');

        if (vm.state && !ignoreCancelState) {
            $timeout(function () {
                $state.go(vm.state);
            }, 1);
        }
    };

    vm.init = function () {
        DataCloudStore.getSelectedCount().then(function (response) {
            if (response.data === 0) {
                $scope.noEnrichmentsSelected = true;
            }
        });
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/models/modals/StaleModelModal.js":
/*!**********************************************!*\
  !*** ./app/models/modals/StaleModelModal.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.models.modals.StaleModelModal', ['mainApp.appCommon.utilities.ResourceUtility']).service('StaleModelModal', ["$compile", "$templateCache", "$rootScope", "$http", function ($compile, $templateCache, $rootScope, $http) {
    var self = this;
    this.show = function (modelId) {
        $http.get('app/models/views/StaleModelConfirmView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.modelId = modelId;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('StaleModelController', ["$scope", "ResourceUtility", function ($scope, ResourceUtility) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.confirmClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/models/modals/modals.index.js":
/*!*******************************************!*\
  !*** ./app/models/modals/modals.index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./BasicConfirmationModal */ "./app/models/modals/BasicConfirmationModal.js");

__webpack_require__(/*! ./CopyModelFromTenantModal */ "./app/models/modals/CopyModelFromTenantModal.js");

__webpack_require__(/*! ./CopyModelToTenantModal */ "./app/models/modals/CopyModelToTenantModal.js");

__webpack_require__(/*! ./DeactivateModelModal */ "./app/models/modals/DeactivateModelModal.js");

__webpack_require__(/*! ./DeleteModelModal */ "./app/models/modals/DeleteModelModal.js");

__webpack_require__(/*! ./ImportModelModal */ "./app/models/modals/ImportModelModal.js");

__webpack_require__(/*! ./RefineModelThresholdModal */ "./app/models/modals/RefineModelThresholdModal.js");

__webpack_require__(/*! ./RemodelingModal */ "./app/models/modals/RemodelingModal.js");

__webpack_require__(/*! ./ScoreLeadEnrichmentModal */ "./app/models/modals/ScoreLeadEnrichmentModal.js");

__webpack_require__(/*! ./StaleModelModal */ "./app/models/modals/StaleModelModal.js");

/***/ }),

/***/ "./app/models/models.index.js":
/*!************************************!*\
  !*** ./app/models/models.index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/controllers.index */ "./app/models/controllers/controllers.index.js");

__webpack_require__(/*! ./modals/modals.index */ "./app/models/modals/modals.index.js");

__webpack_require__(/*! ./services/services.index */ "./app/models/services/services.index.js");

/***/ }),

/***/ "./app/models/services/ModelRatingsService.js":
/*!****************************************************!*\
  !*** ./app/models/services/ModelRatingsService.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.models.ratings').service('ModelRatingsService', ["$http", "$q", "$state", function ($http, $q, $state) {

    this.MostRecentConfiguration = function (id) {
        var deferred = $q.defer(),
            result,
            id = id || '',
            url = '/pls/bucketedscore/abcdbuckets/uptodate/' + id;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.MostRecentConfigurationRatingEngine = function (id) {
        var deferred = $q.defer(),
            result,
            id = id || '',
            url = '/pls/bucketedscore/abcdbuckets/uptodate/ratingengine/' + id;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.ScoringHistory = function (engineId) {
        var deferred = $q.defer(),
            engineId = engineId || '',
            url = '/pls/ratingengines/' + engineId + '/publishedhistory';

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.HistoricalABCDBuckets = function (id) {
        var deferred = $q.defer(),
            result,
            id = id || '',
            url = '/pls/bucketedscore/abcdbuckets/' + id;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.HistoricalABCDBucketsRatingEngine = function (id) {
        var deferred = $q.defer(),
            result,
            id = id || '',
            url = '/pls/bucketedscore/abcdbuckets/ratingengine/' + id;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetBucketedScoresSummary = function (id) {
        var deferred = $q.defer();
        var result;
        var id = id || '';
        var url = '/pls/bucketedscore/summary/' + id;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.GetBucketedScoresSummaryRatingEngine = function (ratingId, modelId) {
        var deferred = $q.defer();
        var result;
        var id = id || '';
        var url = '/pls/bucketedscore/summary/ratingengine/' + ratingId + '/model/' + modelId;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.CreateABCDBuckets = function (id, buckets) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/bucketedscore/abcdbuckets/' + id,
            data: buckets,
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
    this.CreateABCDBucketsRatingEngine = function (ratingId, modelId, buckets) {
        var deferred = $q.defer();
        var url = '/pls/ratingengines/' + ratingId + '/ratingmodels/' + modelId + '/setScoringIteration';
        $http({
            method: 'POST',
            url: url,
            data: buckets,
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
    // this.CreateABCDBucketsRatingEngine = function(ratingId, modelId, buckets) {
    //     var deferred = $q.defer();

    //     $http({
    //         method: 'POST',
    //         url: '/pls/bucketedscore/abcdbuckets/ratingengine/' + ratingId + '/model/' + modelId,
    //         data: buckets,
    //         headers: {
    //             'Content-Type': 'application/json'
    //         }
    //     }).then(
    //         function onSuccess(response) {
    //             var result = {
    //                 data: response.data,
    //                 success: true
    //             };

    //             deferred.resolve(result);

    //         }, function onError(response) {
    //             if (!response.data) {
    //                 response.data = {};
    //             }

    //             var errorMsg = response.data.errorMsg || 'unspecified error';
    //             deferred.resolve(errorMsg);
    //         }
    //     );

    //     return deferred.promise;
    // }
}]);

/***/ }),

/***/ "./app/models/services/ModelReviewService.js":
/*!***************************************************!*\
  !*** ./app/models/services/ModelReviewService.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('lp.models.review', ['mainApp.appCommon.utilities.ResourceUtility']).service('ModelReviewStore', ["$q", "ModelReviewService", function ($q, ModelReviewService) {
    var ModelReviewStore = this;
    this.reviewDataMap = {};

    this.AddDataRule = function (modelId, dataRule) {
        var reviewData = this.reviewDataMap[modelId];
        for (var i in reviewData.dataRules) {
            if (dataRule.name == reviewData.dataRules[i].name) {
                ModelReviewStore.RemoveDataRule(modelId, dataRule.name);
            }
        }
        reviewData.dataRules.push(dataRule);
    };

    this.GetDataRules = function (modelId) {
        return this.reviewDataMap[modelId].dataRules;
    };

    this.RemoveDataRule = function (modelId, name) {
        var reviewData = this.reviewDataMap[modelId];
        for (var i in reviewData.dataRules) {
            if (reviewData.dataRules[i].name == name) {
                reviewData.dataRules.splice(i, 1);
            }
        }
    };

    this.SetReviewData = function (modelId, reviewData) {
        this.reviewDataMap[modelId] = reviewData;
    };

    this.GetReviewData = function (modelId, eventTableName) {
        var deferred = $q.defer(),
            reviewData = this.reviewDataMap[modelId];

        if ((typeof reviewData === 'undefined' ? 'undefined' : _typeof(reviewData)) == 'object') {
            deferred.resolve(reviewData);
        } else {
            ModelReviewService.GetModelReviewData(modelId, eventTableName).then(function (result) {
                if (result.Success === true) {
                    var modelReviewData = result.Result;
                    ModelReviewStore.SetReviewData(modelId, modelReviewData);
                    for (var ruleName in modelReviewData.ruleNameToColumnRuleResults) {
                        var foundRule = false;
                        modelReviewData.dataRules.forEach(function (dataRule) {
                            if (dataRule.name == ruleName) {
                                foundRule = true;
                            }
                        });
                        if (!foundRule || ruleName == "OverlyPredictiveDS") {
                            delete modelReviewData.ruleNameToColumnRuleResults[ruleName];
                            console.log("rule in the column results is not valid, removing column result: " + ruleName);
                        }
                    }
                    deferred.resolve(result.Result);
                }
            });
        }
        return deferred.promise;
    };

    this.ResetReviewData = function () {
        this.reviewDataMap = {};
    };
}]).service('ModelReviewService', ["$q", "$http", "ResourceUtility", "ServiceErrorUtility", function ($q, $http, ResourceUtility, ServiceErrorUtility) {
    this.GetModelReviewData = function (modelId, eventTableName) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/models/reviewmodel/' + modelId + '/' + eventTableName,
            headers: { 'Content-Type': 'application/json' }
        }).success(function (data, status, headers, config) {
            if (data == null || !data.Success) {
                if (data && data.Errors.length > 0) {
                    var errors = data.Errors.join('\n');
                }
                result = {
                    Success: false,
                    ResultErrors: errors || ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetUserUploadedAttributes = function (modelId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/modelsummaries/trainingdata/' + modelId,
            headers: { 'Content-Type': 'application/json' }
        }).success(function (data, status, headers, config) {
            if (data == null || !data.Success) {
                if (data && data.Errors.length > 0) {
                    var errors = data.Errors.join('\n');
                }
                result = {
                    Success: false,
                    ResultErrors: errors || ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/models/services/ModelService.js":
/*!*********************************************!*\
  !*** ./app/models/services/ModelService.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('mainApp.models.services.ModelService', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.DateTimeFormatUtility', 'mainApp.core.services.SessionService', 'mainApp.appCommon.services.ModelSummaryValidationService', 'common.exceptions']).service('ModelStore', ["$q", "ModelService", "$timeout", "ServiceErrorUtility", function ($q, ModelService, $timeout, ServiceErrorUtility) {
    var ModelStore = this;

    this.models = [];
    this.modelsMap = {};
    this.stale = true;
    this.dashboard = {};

    this.widgetConfig = {
        "ScoreProperty": "RocScore",
        "NameProperty": "DisplayName",
        "StatusProperty": "Status",
        "TypeProperty": "SourceSchemaInterpretation",
        "ExternalAttributesProperty": "ExternalAttributes",
        "InternalAttributesProperty": "InternalAttributes",
        "CreatedDateProperty": "ConstructionTime",
        "TotalLeadsProperty": "TotalLeads",
        "TestSetProperty": "TestingLeads",
        "TrainingSetProperty": "TrainingLeads",
        "TotalSuccessEventsProperty": "TotalConversions",
        "ConversionRateProperty": "ConversionRate",
        "LeadSourceProperty": "LeadSource",
        "OpportunityProperty": "Opportunity"
    };

    // checks if items matching args exists, performs XHR to fetch if they don't
    this.getModel = function (modelId) {
        var deferred = $q.defer(),
            model = this.modelsMap[modelId];

        if ((typeof model === 'undefined' ? 'undefined' : _typeof(model)) == 'object') {
            deferred.resolve(model);
        } else {
            ModelService.GetModelById(modelId).then(function (result) {
                if (result != null && result.success === true) {
                    ModelStore.addModel(modelId, result.resultObj);
                    deferred.resolve(result.resultObj);
                } else {
                    deferred.reject(result.resultObj);
                }
            });
        }

        return deferred.promise;
    };

    this.getModels = function (use_cache) {
        var deferred = $q.defer();

        if (use_cache && ModelStore.models.length > 0) {
            deferred.resolve(ModelStore.models);
        } else if (this.stale) {
            ModelService.GetAllModels().then(function (response) {
                var models = response.resultObj;

                if (!models) {
                    ServiceErrorUtility.process(response);
                    return;
                }

                ModelStore.models.length = 0;

                models.forEach(function (model, index) {
                    ModelStore.models.push(model);
                });

                ModelStore.stale = false;

                $timeout(function () {
                    ModelStore.stale = true;
                }, 500);

                deferred.resolve(models);
            });
        } else {
            deferred.resolve(ModelStore.models);
        }

        return deferred.promise;
    };

    this.addModel = function (modelId, model) {
        this.modelsMap[modelId] = model;
    };

    this.removeModel = function (modelId) {
        delete this.modelsMap[modelId];
    };

    this.setDashboardData = function (dashboardData) {
        this.dashboard = dashboardData;
    };

    this.getDashboardData = function () {
        return this.dashboard;
    };
}]).service('ModelService', ["$http", "$q", "_", "ResourceUtility", "StringUtility", "DateTimeFormatUtility", "SessionService", "ModelSummaryValidationService", "ModelServiceUtility", function ($http, $q, _, ResourceUtility, StringUtility, DateTimeFormatUtility, SessionService, ModelSummaryValidationService, ModelServiceUtility) {

    this.GetAllModels = function (isValidOnly) {
        var deferred = $q.defer();
        var result;
        var request;
        request = {
            method: 'GET',
            url: '/pls/modelsummaries/',
            headers: {
                "Content-Type": "application/json"
            }
        };
        if (isValidOnly === false) {
            request.url += '?selection=all';
        }
        $http(request).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: true,
                    resultObj: null,
                    resultErrors: null
                };

                data = _.sortBy(data, 'ConstructionTime').reverse();
                // sync with front-end json structure
                result.resultObj = _.map(data, function (rawObj) {

                    return {
                        Id: rawObj.Id,
                        DisplayName: rawObj.DisplayName == null || rawObj.DisplayName == "" ? rawObj.Name : rawObj.DisplayName,
                        CreatedDate: DateTimeFormatUtility.FormatShortDate(rawObj.ConstructionTime),
                        ModelFileType: rawObj.ModelType,
                        Status: rawObj.Status,
                        Incomplete: rawObj.Incomplete,
                        ModelType: rawObj.SourceSchemaInterpretation,
                        HasBucketMetadata: rawObj.HasBucketMetadata,
                        Uploaded: rawObj.Uploaded,
                        ConflictWithOptionalRules: ModelServiceUtility.getModelSummaryProvenanceProperties(rawObj.ModelSummaryProvenanceProperties, 'ConflictWithOptionalRules')
                    };
                });
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            if (status == 403) {
                // Users without the privilege of reading models see empty list instead of an error
                result = {
                    success: true,
                    resultObj: null,
                    resultErrors: null
                };
                //} else if (data.errorMsg.indexOf("No tenant found")) {
                //    result = {
                //        success: false,
                //        resultObj: null,
                //        resultErrors: "NO TENANT FOUND"
                //    };
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
            }
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetAllModelsForTenant = function (tenantId) {
        var deferred = $q.defer();
        var result;
        $http({
            method: 'GET',
            url: '/pls/modelsummaries/tenant/' + tenantId,
            headers: {
                "Content-Type": "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data === true || data === 'true') {
                result = {
                    success: true,
                    resultObj: {},
                    resultErrors: null
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.updateAsDeletedModel = function (modelId) {
        var deferred = $q.defer();
        var result;
        $http({
            method: 'PUT',
            url: '/pls/modelsummaries/' + modelId,
            headers: {
                "Content-Type": "application/json"
            },
            data: angular.toJson({ Status: "UpdateAsDeleted" })
        }).success(function (data, status, headers, config) {
            if (data === true || data === 'true') {
                result = {
                    success: true,
                    resultObj: {},
                    resultErrors: null
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('MODEL_DELETE_SERVICE_ERROR')
            };
            if (data.errorCode == 'LEDP_18003') result.ResultErrors = ResourceUtility.getString('MODEL_DELETE_ACCESS_DENIED');
            if (data.errorCode == 'LEDP_18021') result.ResultErrors = ResourceUtility.getString('MODEL_DELETE_ACTIVE_MODEL_ERROR');
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.updateAsActiveModel = function (modelId) {
        var deferred = $q.defer();
        var result;
        $http({
            method: 'PUT',
            url: '/pls/modelsummaries/' + modelId,
            headers: {
                "Content-Type": "application/json"
            },
            data: angular.toJson({ Status: "UpdateAsActive" })
        }).success(function (data, status, headers, config) {
            if (data === true || data === 'true') {
                result = {
                    success: true,
                    resultObj: {},
                    resultErrors: null
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('MODEL_DELETE_SERVICE_ERROR')
            };
            if (data.errorCode == 'LEDP_18003') result.ResultErrors = ResourceUtility.getString('MODEL_DELETE_ACCESS_DENIED');
            if (data.errorCode == 'LEDP_18021') result.ResultErrors = ResourceUtility.getString('MODEL_DELETE_ACTIVE_MODEL_ERROR');
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.updateAsInactiveModel = function (modelId) {
        var deferred = $q.defer();
        var result;
        $http({
            method: 'PUT',
            url: '/pls/modelsummaries/' + modelId,
            headers: {
                "Content-Type": "application/json"
            },
            data: angular.toJson({ Status: "UpdateAsInactive" })
        }).success(function (data, status, headers, config) {
            if (data === true || data === 'true') {
                result = {
                    success: true,
                    resultObj: {},
                    resultErrors: null
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('MODEL_DELETE_SERVICE_ERROR')
            };
            if (data.errorCode == 'LEDP_18003') result.ResultErrors = ResourceUtility.getString('MODEL_DELETE_ACCESS_DENIED');
            if (data.errorCode == 'LEDP_18021') result.ResultErrors = ResourceUtility.getString('MODEL_DELETE_ACTIVE_MODEL_ERROR');
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.undoDeletedModel = function (modelId) {
        var deferred = $q.defer();
        var result;
        $http({
            method: 'PUT',
            url: '/pls/modelsummaries/' + modelId,
            headers: {
                "Content-Type": "application/json"
            },
            data: angular.toJson({ Status: "UpdateAsInactive" })
        }).success(function (data, status, headers, config) {
            if (data === true || data === 'true') {
                result = {
                    success: true,
                    resultObj: {},
                    resultErrors: null
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('MODEL_LIST_UNDO_DELETE_SERVICE_ERROR')
            };
            if (data.errorCode == 'LEDP_18003') result.ResultErrors = ResourceUtility.getString('MODEL_LIST_UNTO_DELETE_ACCESS_DENIED');
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetModelById = function (modelId) {
        var deferred = $q.defer();
        var result;

        $http({
            method: 'GET',
            url: '/pls/modelsummaries/' + modelId,
            headers: {
                "Content-Type": "application/json",
                'ErrorDisplayMethod': 'modal'
            }
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: true,
                    resultObj: {},
                    resultErrors: null
                };

                var modelSummary = "";
                if (!StringUtility.IsEmptyString(data.Details.Payload)) {
                    modelSummary = JSON.parse(data.Details.Payload);
                }

                modelSummary.ModelDetails.AverageRevenue = data.AverageRevenue;
                modelSummary.ModelDetails.Status = data.Status;
                modelSummary.ModelDetails.DisplayName = data.DisplayName;
                modelSummary.ModelDetails.Uploaded = data.Uploaded;
                modelSummary.ModelDetails.PivotArtifactPath = data.PivotArtifactPath;
                modelSummary.ModelDetails.SourceSchemaInterpretation = data.SourceSchemaInterpretation;
                modelSummary.ModelDetails.TrainingFileExist = data.TrainingFileExist;
                modelSummary.ModelDetails.ModelSummaryProvenanceProperties = data.ModelSummaryProvenanceProperties;
                modelSummary.ModelDetails.ConflictWithOptionalRules = ModelServiceUtility.getModelSummaryProvenanceProperties(data.ModelSummaryProvenanceProperties, 'ConflictWithOptionalRules');

                // sync with front-end json structure
                result.resultObj = modelSummary;
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.ChangeModelDisplayName = function (modelId, displayName) {
        var deferred = $q.defer();
        var result;

        $http({
            method: 'PUT',
            url: '/pls/modelsummaries/' + modelId,
            data: { DisplayName: displayName },
            headers: {
                "Content-Type": "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    Success: false,
                    ResultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    Success: true,
                    ResultErrors: null
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('MODEL_TILE_EDIT_SERVICE_ERROR')
            };
            if (data.errorCode == 'LEDP_18003') result.ResultErrors = ResourceUtility.getString('CHANGE_MODEL_NAME_ACCESS_DENIED');
            if (data.errorCode == 'LEDP_18014') result.ResultErrors = ResourceUtility.getString('CHANGE_MODEL_NAME_CONFLICT');
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    // This will take sample lead data from the server and transform it for display purposes
    this.FormatLeadSampleData = function (sampleLeads) {
        if (sampleLeads == null) {
            return null;
        }
        var toReturn = [];
        for (var i = 0; i < sampleLeads.length; i++) {
            var lead = sampleLeads[i];

            var leadToDisplay = {
                Company: lead.Company,
                Contact: lead.Contact || lead.FirstName + " " + lead.LastName,
                Website: lead.Website,
                Converted: lead.Converted,
                Score: lead.Score
            };
            toReturn.push(leadToDisplay);
        }

        return toReturn;
    };

    this.validateModelName = function (name) {
        var result = {
            valid: false,
            errMsg: null
        };
        if (name.replace(/ /g, '') === "") {
            result.errMsg = ResourceUtility.getString('MODEL_TILE_EDIT_TITLE_EMPTY_ERROR');
            return result;
        }
        if (name.length > 50) {
            result.errMsg = ResourceUtility.getString('MODEL_TILE_EDIT_TITLE_LONG_ERROR');
            return result;
        }
        result.valid = true;
        return result;
    };

    this.uploadRawModelJSON = function (json) {
        var deferred = $q.defer();

        var data = {
            Tenant: {
                Identifier: "FAKE_TENANT",
                DisplayName: "Fake Tenant"
            },
            RawFile: json
        };

        var result = {
            Success: false,
            ResultErrors: ''
        };

        var errors = ModelSummaryValidationService.ValidateModelSummary(JSON.parse(json));
        if (errors.length > 0) {
            result.ResultErrors = ResourceUtility.getString('MODEL_IMPORT_ERROR_TITLE') + " " + errors.join(", ") + ".";
            deferred.resolve(result);
            return deferred.promise;
        }

        $http({
            method: 'POST',
            url: '/pls/modelsummaries?raw=true',
            data: data,
            headers: {
                "Content-Type": "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    Success: false,
                    ResultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
            } else {
                result = {
                    Success: true,
                    ResultErrors: null
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('MODEL_IMPORT_GENERAL_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetAllSegments = function (modelList) {
        var deferred = $q.defer();
        var result;

        $http({
            method: 'GET',
            url: '/pls/segments/',
            headers: {
                "Content-Type": "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: true,
                    resultObj: {},
                    resultErrors: null
                };

                var modelDict = {};
                if (modelList != null && modelList.length > 0) {
                    for (var i = 0; i < modelList.length; i++) {
                        modelDict[modelList[i].Id] = modelList[i].DisplayName;
                    }
                }

                var segmentList = data;
                if (segmentList != null && segmentList.length > 0 && Object.keys(modelDict).length > 0) {
                    for (var x = 0; x < segmentList.length; x++) {
                        var segment = segmentList[x];
                        if (!StringUtility.IsEmptyString(segment.ModelId)) {
                            segment.ModelName = modelDict[segment.ModelId];
                        } else {
                            segment.ModelId = "FAKE_MODEL";
                        }
                    }
                }

                result.resultObj = segmentList;
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.AddSegment = function (segment) {
        var deferred = $q.defer();
        var result;
        if (segment == null || StringUtility.IsEmptyString(segment.Name)) {
            return null;
        }

        if (segment.ModelId == "FAKE_MODEL") {
            segment.ModelId = null;
        }

        $http({
            method: 'POST',
            url: '/pls/segments/',
            headers: {
                "Content-Type": "application/json"
            },

            data: segment
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: data.Success,
                    resultObj: {},
                    resultErrors: null
                };
                if (result.success === false) {
                    result.resultErrors = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
                }
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.DeleteSegment = function (segmentName) {
        var deferred = $q.defer();
        var result;
        if (StringUtility.IsEmptyString(segmentName)) {
            deferred.resolve(result);
            return deferred.promise;
        }

        $http({
            method: 'DELETE',
            url: '/pls/segments/' + segmentName,
            headers: {
                "Content-Type": "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: data.Success,
                    resultObj: {},
                    resultErrors: null
                };
                if (result.success === false) {
                    result.resultErrors = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
                }
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.UpdateSegments = function (segments) {
        var deferred = $q.defer();
        var result;
        if (segments == null) {
            deferred.resolve(result);
            return deferred.promise;
        }

        for (var i = 0; i < segments.length; i++) {
            if (segments[i].ModelId == "FAKE_MODEL") {
                segments[i].ModelId = "";
            }
        }

        $http({
            method: 'POST',
            url: '/pls/segments/list',
            headers: {
                "Content-Type": "application/json"
            },
            data: segments
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: data.Success,
                    resultObj: {},
                    resultErrors: null
                };
                if (result.success === false) {
                    result.resultErrors = data.Errors[0];
                }
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.UpdateSegment = function (segment) {
        var deferred = $q.defer();
        var result;
        if (segment == null) {
            deferred.resolve(result);
            return deferred.promise;
        }

        if (segment.ModelId == "FAKE_MODEL") {
            segment.ModelId = null;
        }

        $http({
            method: 'PUT',
            url: '/pls/segments/' + segment.Name,
            headers: {
                "Content-Type": "application/json"
            },
            data: segment
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: data.Success,
                    resultObj: {},
                    resultErrors: null
                };
                if (result.success === false) {
                    result.resultErrors = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
                }
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetModelAlertsByModelId = function (modelId) {
        var deferred = $q.defer();
        var result;

        $http({
            method: 'GET',
            url: '/pls/modelsummaries/alerts/' + modelId,
            headers: {
                "Content-Type": "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };
    this.CopyModel = function (modelName, tenantId) {
        var deferred = $q.defer();
        var result;

        $http({
            method: 'POST',
            url: '/pls/models/copymodel/' + modelName,
            params: {
                targetTenantId: tenantId
            },
            headers: {
                "Content-Type": "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data == null) {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
                };
                deferred.resolve(result);
            } else {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            }

            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                success: false,
                resultObj: null,
                resultErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };

            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]).service('ModelServiceUtility', function () {
    this.getModelSummaryProvenanceProperties = function (properties, target) {
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i].ModelSummaryProvenanceProperty;
            if (prop.option === target) {
                switch (prop.value) {
                    case "true":
                        return true;
                    case "false":
                        return false;
                    default:
                        return prop.value;
                }
            }
        }

        return null;
    };
});

/***/ }),

/***/ "./app/models/services/RemodelService.js":
/*!***********************************************!*\
  !*** ./app/models/services/RemodelService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('lp.models.remodel', ['mainApp.appCommon.utilities.ResourceUtility']).service('RemodelStore', ["$q", "RemodelService", function ($q, RemodelService) {
    var RemodelStore = this;
    this.remodelAttributesMap = {};
    this.remodelDataRulesMap = {};

    this.GetModelReviewAttributes = function (modelId) {
        var deferred = $q.defer(),
            attributes = this.remodelAttributesMap[modelId];

        if ((typeof attributes === 'undefined' ? 'undefined' : _typeof(attributes)) === 'object') {
            deferred.resolve(attributes);
        } else {
            RemodelService.GetModelReviewAttributes(modelId).then(function (result) {
                if (result.Success === true) {
                    RemodelStore.remodelAttributesMap[modelId] = result.Result;
                    deferred.resolve(result.Result);
                } else {
                    deferred.resolve(result.ResultErrors);
                }
            });
        }

        return deferred.promise;
    };

    this.GetModelReviewDataRules = function (modelId) {
        var deferred = $q.defer(),
            dataRules = this.remodelDataRulesMap[modelId];

        if ((typeof dataRules === 'undefined' ? 'undefined' : _typeof(dataRules)) === 'object') {
            deferred.resolve(dataRules);
        } else {
            RemodelService.GetModelReviewDataRules(modelId).then(function (result) {
                if (result.Success === true) {
                    RemodelStore.remodelDataRulesMap[modelId] = result.Result;
                    deferred.resolve(result.Result);
                } else {
                    deferred.reject(result.ResultErrors);
                }
            });
        }

        return deferred.promise;
    };

    this.ResetRemodelData = function () {
        this.remodelAttributesMap = {};
        this.remodelDataRulesMap = {};
    };
}]).service('RemodelService', ["$q", "$http", "ResourceUtility", "ServiceErrorUtility", function ($q, $http, ResourceUtility, ServiceErrorUtility) {

    this.GetModelReviewDataRules = function (modelId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/models/modelreview/' + modelId,
            headers: { 'Content-Type': 'application/json' }
        }).success(function (data, status, headers, config) {
            var result;
            if (data == null || !data.Success) {
                if (data && data.Errors.length > 0) {
                    var errors = data.Errors.join('\n');
                }
                result = {
                    Success: false,
                    ResultErrors: errors || ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetModelReviewAttributes = function (modelId) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/models/modelreview/attributes/' + modelId,
            headers: { 'Content-Type': 'application/json' }
        }).success(function (data, status, headers, config) {
            var result;
            if (data == null || !data.Success) {
                if (data && data.Errors.length > 0) {
                    var errors = data.Errors.join('\n');
                }
                result = {
                    Success: false,
                    ResultErrors: errors || ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR'),
                    Result: null
                };
            } else {
                result = {
                    Success: true,
                    ResultErrors: data.Errors,
                    Result: data.Result
                };
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultErrors: data.errorMsg
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/models/services/services.index.js":
/*!***********************************************!*\
  !*** ./app/models/services/services.index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./ModelRatingsService */ "./app/models/services/ModelRatingsService.js");

__webpack_require__(/*! ./ModelReviewService */ "./app/models/services/ModelReviewService.js");

__webpack_require__(/*! ./ModelService */ "./app/models/services/ModelService.js");

__webpack_require__(/*! ./RemodelService */ "./app/models/services/RemodelService.js");

/***/ }),

/***/ "./app/navigation/NavigationController.js":
/*!************************************************!*\
  !*** ./app/navigation/NavigationController.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation', ['pd.navigation.header', 'pd.navigation.pagination', 'pd.navigation.table', 'pd.navigation.oneline', 'pd.navigation.sidebar'
//'pd.navigation.message',
//'pd.navigation.links',
//'pd.navigation.navdash',
//'pd.navigation.subnav'
]);

/***/ }),

/***/ "./app/navigation/header/back/back.component.js":
/*!******************************************************!*\
  !*** ./app/navigation/header/back/back.component.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('common.navigation.back', []).service('BackStore', function () {
    this.backState = '';
    this.backParams = null;
    this.backLabel = '';
    this.hide = false;

    this.setBackState = function (state) {
        this.backState = state;
    };

    this.getBackState = function () {
        return this.backState;
    };

    this.setBackParams = function (params) {
        this.backParams = params;
    };

    this.getBackParams = function () {
        return this.backParams;
    };

    this.setBackLabel = function (label) {
        this.backLabel = label;
    };

    this.getBackLabel = function () {
        return this.backLabel;
    };

    this.setHidden = function (hide) {
        this.hide = hide;
    };

    this.isHidden = function () {
        return this.hide;
    };
}).component('backNav', {
    templateUrl: 'app/navigation/header/back/back.component.html',
    controller: ["BackStore", function controller(BackStore) {
        var vm = this;
        vm.headerBack = '';
        vm.backName = '';
        vm.hide = false;
        this.$onInit = function () {
            vm.headerBack = BackStore.getBackLabel();
            vm.backName = BackStore.getBackState();
            vm.backParams = BackStore.getBackParams();
            vm.hide = BackStore.isHidden();
        };

        vm.getBackLabel = function () {
            return BackStore.getBackLabel();
        };

        vm.getBackState = function () {
            return BackStore.getBackState();
        };

        vm.getBackParams = function () {
            return BackStore.getBackParams();
        };

        vm.isHidden = function () {
            return BackStore.isHidden();
        };
    }]
});

/***/ }),

/***/ "./app/navigation/header/controllers/MainHeaderController.js":
/*!*******************************************************************!*\
  !*** ./app/navigation/header/controllers/MainHeaderController.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation.header', ['mainApp.core.utilities.NavUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'common.exceptions', 'mainApp.core.services.ResourceStringsService', 'mainApp.core.services.FeatureFlagService', 'mainApp.login.services.LoginService', 'mainApp.login.controllers.UpdatePasswordController', 'mainApp.models.controllers.ModelCreationHistoryController', 'mainApp.models.controllers.ModelDetailController', 'mainApp.appCommon.utilities.TimestampIntervalUtility', 'mainApp.config.services.ConfigService', 'common.utilities.SessionTimeout', 'common.navigation.back']).controller('HeaderController', ["$scope", "$rootScope", "$state", "$transitions", "ResourceUtility", "NavUtility", "BrowserStorageUtility", "FeatureFlagService", "LoginService", "JobsStore", "ApiHost", function ($scope, $rootScope, $state, $transitions, ResourceUtility, NavUtility, BrowserStorageUtility, FeatureFlagService, LoginService, JobsStore, ApiHost) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.jobs = JobsStore.data.jobs;
    $scope.importJobs = JobsStore.data.importJobs;
    $scope.exportJobs = JobsStore.data.exportJobs;

    $transitions.onStart({}, function (trans) {
        var to = trans.$to(),
            params = trans.params('to'),
            from = trans.$from();

        if (params.pageIcon) {
            setPageTitle(params);
        }
    });

    /**
     * It returns the state to go to for the jobs
     * If CDL the firts tab is going to be P&A jobs
     */
    $scope.getJobSRef = function () {
        var state = '';
        var flags = FeatureFlagService.Flags();
        var cdl = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);

        if (cdl === true) {
            state = 'home.jobs.data';
        } else {
            state = 'home.jobs.status';
        }

        return state;
    };

    $scope.getActiveJobs = function () {
        return JobsStore.data.allActiveJobs;
    };

    $scope.statusFilter = function (item) {
        return item.jobStatus === 'Running' || item.jobStatus === 'Pending';
    };

    $scope.statusImportFilter = function (item) {
        return item.jobStatus === 'Running' || item.jobStatus === 'Pending';
    };

    $scope.getRunningSubJobsDataCount = function () {
        return JobsStore.data.subjobsRunning.length;
    };

    FeatureFlagService.GetAllFlags().then(function (result) {
        var flags = FeatureFlagService.Flags();
        $scope.showUserManagement = FeatureFlagService.FlagIsEnabled(flags.USER_MGMT_PAGE);
        $scope.showJobsPage = FeatureFlagService.FlagIsEnabled(flags.JOBS_PAGE);
    });

    var ClientSession = BrowserStorageUtility.getClientSession();

    if (ClientSession != null) {
        var LoginDocument = BrowserStorageUtility.getLoginDocument();
        var Tenants = LoginDocument ? LoginDocument.Tenants : {};
        var Tenant = ClientSession ? ClientSession.Tenant : {};

        $scope.userDisplayName = ClientSession.DisplayName;
        $scope.tenantName = window.escape(Tenant.DisplayName);
        $scope.tenants = Tenants;
    }

    $scope.showProfileNav = false;

    var loginDocument = BrowserStorageUtility.getLoginDocument(),
        authenticationRoute = loginDocument.AuthenticationRoute || null,
        clientSession = BrowserStorageUtility.getClientSession() || {},
        accessLevel = clientSession.AccessLevel || null;

    $scope.mayChangePassword = authenticationRoute !== 'SSO';

    $scope.mayViewSSOConfig = typeof BrowserStorageUtility.getClientSession().AvailableRights.PLS_SSO_Config != 'undefined' && BrowserStorageUtility.getClientSession().AvailableRights.PLS_SSO_Config.MayView === true;

    $('body.not-initialized').removeClass('not-initialized').addClass('initialized');

    function setPageTitle(params) {
        $scope.pageDisplayIcon = params.pageIcon ? params.pageIcon : null;
        $scope.pageDisplayName = params.pageTitle ? params.pageTitle : null;
    }

    setPageTitle($state.params);

    checkBrowserWidth();
    var _checkBrowserWidth = _.debounce(checkBrowserWidth, 250);

    angular.element(window).resize(_checkBrowserWidth);

    $scope.handleSidebarToggle = function ($event) {
        angular.element("body").toggleClass("open-nav");
        angular.element("body").addClass("controlled-nav"); // indicate the user toggled the nav
    };

    $(document.body).click(function () {
        if ($scope.showProfileNav) {
            $scope.showProfileNav = false;
            $scope.$apply();
        }
    });

    $scope.headerClicked = function ($event) {
        $scope.showProfileNav = !$scope.showProfileNav;
        $event.stopPropagation();
    };

    function checkBrowserWidth() {
        // if the user has closed the nav, leave it closed when increasing size
        if (window.matchMedia("(min-width: 1200px)").matches && !angular.element("body").hasClass("controlled-nav")) {
            if (typeof sessionStorage !== 'undefined') {
                if (sessionStorage.getItem('open-nav') === 'true') {
                    angular.element("body").addClass('open-nav');
                } else {
                    angular.element("body").removeClass('open-nav');
                }
            }
        } else {
            if (angular.element("body").hasClass("open-nav")) {
                // if the nav is open when scaling down close it but allow it to re-open by removing our user controlled class indicator
                angular.element("body").removeClass("controlled-nav");
            }
            angular.element("body").removeClass("open-nav");
        }
    }

    // Handle when the Update Password link is clicked
    $scope.$on(NavUtility.UPDATE_PASSWORD_NAV_EVENT, function (event, data) {
        if (data !== null && data.Success) {
            createUpdatePasswordSuccessView();
        } else {
            $state.go('home.updatepassword');
        }
    });

    function createUpdatePasswordSuccessView() {
        $('#mainHeaderView').hide();
        //LoginService.Logout();
        $state.go('passwordsuccess');
    }
}]);

/***/ }),

/***/ "./app/navigation/header/header.index.js":
/*!***********************************************!*\
  !*** ./app/navigation/header/header.index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./back/back.component */ "./app/navigation/header/back/back.component.js");

__webpack_require__(/*! ./controllers/MainHeaderController */ "./app/navigation/header/controllers/MainHeaderController.js");

/***/ }),

/***/ "./app/navigation/navigation.index.js":
/*!********************************************!*\
  !*** ./app/navigation/navigation.index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./NavigationController */ "./app/navigation/NavigationController.js");

__webpack_require__(/*! ./header/header.index */ "./app/navigation/header/header.index.js");

__webpack_require__(/*! ./sidebar/sidebar.index */ "./app/navigation/sidebar/sidebar.index.js");

__webpack_require__(/*! ./summary/summary.index */ "./app/navigation/summary/summary.index.js");

__webpack_require__(/*! ./table/table.index */ "./app/navigation/table/table.index.js");

/***/ }),

/***/ "./app/navigation/sidebar/model/model.component.js":
/*!*********************************************************!*\
  !*** ./app/navigation/sidebar/model/model.component.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation.sidebar.model', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.services.FeatureFlagService', 'lp.ratingsengine']).controller('SidebarModelController', ["$rootScope", "$state", "$stateParams", "FeatureFlagService", "ResourceUtility", "RatingsEngineStore", "AtlasRemodelStore", "StateHistory", "Model", "IsPmml", "IsRatingEngine", "RatingEngine", "HasRatingsAvailable", function ($rootScope, $state, $stateParams, FeatureFlagService, ResourceUtility, RatingsEngineStore, AtlasRemodelStore, StateHistory, Model, IsPmml, IsRatingEngine, RatingEngine, HasRatingsAvailable) {
    var vm = this;

    angular.extend(vm, {
        state: $state,
        ResourceUtility: ResourceUtility,
        stateParams: $stateParams,
        StateHistory: StateHistory,
        model: Model,
        ratingEngine: RatingEngine
    });

    vm.init = function () {

        vm.IsPmml = IsPmml, vm.IsRatingEngine = IsRatingEngine, vm.sourceType = Model.ModelDetails.SourceSchemaInterpretation;
        vm.Uploaded = Model.ModelDetails.Uploaded;
        vm.HasRatingsAvailable = HasRatingsAvailable;
        vm.isDashboardRatings = $stateParams.section == 'dashboard.ratings' ? true : false;

        if (vm.IsRatingEngine) {
            vm.viewingIteration = $stateParams.viewingIteration ? true : false;
        }

        if (JSON.stringify(vm.HasRatingsAvailable) != "{}") {
            vm.HasRatingsAvailable = true;
        } else {
            vm.HasRatingsAvailable = false;
        }

        FeatureFlagService.GetAllFlags().then(function (result) {
            var flags = FeatureFlagService.Flags();

            vm.showAnalysisPage = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
            vm.showSegmentationPage = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
            vm.showCdlEnabledPage = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
            vm.canRemodel = FeatureFlagService.FlagIsEnabled(flags.VIEW_REMODEL) && !vm.IsPmml && !vm.Uploaded;
            vm.showModelSummary = FeatureFlagService.FlagIsEnabled(flags.ADMIN_PAGE) || FeatureFlagService.UserIs('EXTERNAL_ADMIN');
            vm.showAlerts = 0; // disable for all (PLS-1670) FeatureFlagService.FlagIsEnabled(flags.ADMIN_ALERTS_TAB);
            vm.showRefineAndClone = FeatureFlagService.FlagIsEnabled(flags.VIEW_REFINE_CLONE);
            vm.showReviewModel = FeatureFlagService.FlagIsEnabled(flags.REVIEW_MODEL);
            vm.showSampleLeads = FeatureFlagService.FlagIsEnabled(flags.VIEW_SAMPLE_LEADS);
        });
    };

    vm.goToRatingEngineRoute = function () {
        $state.go('home.ratingsengine.dashboard', { "rating_id": vm.stateParams.rating_id, "modelId": vm.stateParams.modelId, viewingIteration: false });
    };

    vm.remodelIteration = function () {
        var engineId = vm.ratingEngine.id,
            modelId = vm.model.ModelDetails.Name;

        RatingsEngineStore.getRatingModel(engineId, modelId).then(function (result) {
            AtlasRemodelStore.setRemodelIteration(result);
            RatingsEngineStore.setRatingEngine(vm.ratingEngine);
            $state.go('home.ratingsengine.remodel', { engineId: engineId, modelId: modelId });
        });
    };

    vm.checkToState = function (toState) {
        return StateHistory.lastTo().name == toState;
    };

    vm.isStateName = function (state_names) {
        return (state_names || []).indexOf($state.current.name) !== -1;
    };

    vm.isTransitingFrom = function (state_names) {
        return (state_names || []).indexOf(StateHistory.lastFrom().name) !== -1 && (state_names || []).indexOf(StateHistory.lastTo().name) !== -1;
    };

    vm.isTransitingTo = function (state_names) {
        return (state_names || []).indexOf(StateHistory.lastTo().name) !== -1 && (state_names || []).indexOf($state.current.name) === -1;
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/navigation/sidebar/root/root.component.js":
/*!*******************************************************!*\
  !*** ./app/navigation/sidebar/root/root.component.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation.sidebar.root', []).controller('SidebarRootController', ["SidebarStore", "ResourceUtility", function (SidebarStore, ResourceUtility) {
    var vm = this;
    vm.items = SidebarStore.get();
    vm.back = SidebarStore.back;
    vm.ResourceUtility = ResourceUtility;
}]);

/***/ }),

/***/ "./app/navigation/sidebar/sidebar.component.js":
/*!*****************************************************!*\
  !*** ./app/navigation/sidebar/sidebar.component.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation.sidebar', ['pd.navigation.sidebar.root', 'pd.navigation.sidebar.model', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.services.FeatureFlagService', 'common.datacloud']).controller('SidebarController', ["$rootScope", "$stateParams", "$transitions", function ($rootScope, $stateParams, $transitions) {
    var vm = this;

    angular.extend(vm, {
        disableNavigation: false
    });

    $transitions.onBefore({}, function (trans) {
        vm.disableNavigation = true;
    });
    $transitions.onError({}, function (trans) {
        vm.disableNavigation = false;
    });
    $transitions.onSuccess({}, function (trans) {
        vm.disableNavigation = false;
    });

    vm.init = function () {
        if (typeof sessionStorage !== 'undefined') {
            if (sessionStorage.getItem('open-nav') === 'true' || !sessionStorage.getItem('open-nav')) {
                $("body").addClass('open-nav');
            } else {
                $("body").removeClass('open-nav');
            }
        }
    };

    vm.handleSidebarToggle = function ($event) {
        var target = angular.element($event.target),
            collapsable_click = !target.parents('.no-collapse-children').length;

        if (collapsable_click) {
            $('body').toggleClass('open-nav');
            $('body').addClass('controlled-nav'); // indicate the user toggled the nav

            if (typeof sessionStorage !== 'undefined') {
                sessionStorage.setItem('open-nav', $('body').hasClass('open-nav'));
            }

            $rootScope.$broadcast('sidebar:toggle');
        }
    };

    vm.init();
}]).service('SidebarStore', ["$state", "$stateParams", "StateHistory", "ResourceUtility", "$q", "SegmentStore", "FeatureFlagService", "DataCloudStore", "QueryStore", "QueryService", "$transitions", function ($state, $stateParams, StateHistory, ResourceUtility, $q, SegmentStore, FeatureFlagService, DataCloudStore, QueryStore, QueryService, $transitions) {
    var store = this;

    this.initialized = false;
    this.isDataAvailable = true;
    this.state = $state;
    this.stateParams = $stateParams;
    this.StateHistory = StateHistory;

    this.MyDataStates = ['home.nodata', 'home.attributes.activate', 'home.attributes.enable', 'home.attributes.edit', 'home.segment.explorer.attributes', 'home.segment.explorer.enumpicker', 'home.segment.explorer.builder', 'home.segment.accounts', 'home.segment.contacts'];

    this.root = [];
    this.items = [];

    this.getRoot = function () {
        var deferred = $q.defer();

        FeatureFlagService.GetAllFlags().then(function (result) {
            var segment = (StateHistory.lastToParams() || {}).segment;
            var flags = FeatureFlagService.Flags();
            var MyDataState = store.getMyDataState();
            var MyDataParams = '';

            if (MyDataState != 'home.nodata') {
                //if (segment && segment != 'segment.name') {
                //    MyDataParams = "({ segment: '" + segment + "', category: '', subcategory: '' })";
                //} else {
                MyDataParams = "({ segment: 'Create', category: '', subcategory: '' })";
                //}
            }

            store.showUserManagement = FeatureFlagService.FlagIsEnabled(flags.USER_MGMT_PAGE);
            store.showModelCreationHistory = FeatureFlagService.FlagIsEnabled(flags.MODEL_HISTORY_PAGE);
            store.showApiConsole = FeatureFlagService.FlagIsEnabled(flags.API_CONSOLE_PAGE);
            store.showMarketoSettings = FeatureFlagService.FlagIsEnabled(flags.USE_MARKETO_SETTINGS);
            store.showEloquaSettings = FeatureFlagService.FlagIsEnabled(flags.USE_ELOQUA_SETTINGS);
            store.showSalesforceSettings = FeatureFlagService.FlagIsEnabled(flags.USE_SALESFORCE_SETTINGS);
            store.showCampaignsPage = FeatureFlagService.FlagIsEnabled(flags.CAMPAIGNS_PAGE);
            store.showAnalysisPage = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
            store.showPlayBook = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL) && FeatureFlagService.FlagIsEnabled(flags.PLAYBOOK_MODULE);
            store.showRatingsEngine = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
            store.showSegmentationPage = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
            store.showCdlEnabledPage = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
            store.showLatticeInsightsPage = FeatureFlagService.FlagIsEnabled(flags.LATTICE_INSIGHTS);
            store.showContactUs = false;

            store.isDataAvailable = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL) && QueryStore.collectionStatus != null ? QueryStore.collectionStatus.AccountCount > 0 || QueryStore.collectionStatus.ContactCount > 0 : store.isDataAvailable;

            store.root = [{
                if: store.showAnalysisPage,
                active: store.checkMyDataActiveState,
                srefactive: MyDataState + "({ segment: 'Create', category: '', subcategory: '' })",
                sref: MyDataState + MyDataParams,
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_MYDATA"),
                icon: "ico-analysis ico-light-gray"
            }, {
                if: store.showSegmentationPage,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: store.checkSegmentationActiveState,
                sref: "home.segments",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_SEGMENTATION"),
                icon: "ico-segments ico-light-gray"
            }, {
                if: store.showRatingsEngine,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.ratingsengine') && !store.isTransitingFrom(['home.ratingsengine', 'home.ratingsengine.list', 'home.ratingsengine.list.ratings']);
                },
                transitioning: function transitioning() {
                    return store.isTransitingTo(['home.ratingsengine', 'home.ratingsengine.list', 'home.ratingsengine.list.ratings']);
                },
                sref: "home.ratingsengine",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_RATING_ENGINE")
            }, {
                if: store.showPlayBook,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.playbook') && !store.isTransitingFrom(['home.playbook']);
                },
                transitioning: function transitioning() {
                    return store.isTransitingTo(['home.playbook']);
                },
                sref: "home.playbook",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_PLAY_BOOK"),
                icon: "ico-playbook"
            }, {
                if: !store.showCdlEnabledPage,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.models') || store.state.includes('home.models.history') && !store.isTransitingFrom(['home.models', 'home.models.history']);
                },
                transitioning: function transitioning() {
                    return store.isTransitingTo(['home.models', 'home.models.history']);
                },
                sref: "home.models",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_MODEL_LIST")
            }, {
                if: store.showCampaignsPage,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.campaigns') && !store.isTransitingFrom(['home.campaigns']);
                },
                transitioning: function transitioning() {
                    return store.isTransitingTo(['home.campaigns']);
                },
                sref: "home.campaigns",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_CAMPAIGNS"),
                icon: "ico-campaign ico-light-gray"
            }, {
                if: !store.showCdlEnabledPage,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.datacloud.explorer') || store.state.includes('home.datacloud.lookup') && !store.isTransitingFrom(['home.datacloud.explorer', 'home.datacloud.explorer']);
                },
                transitioning: function transitioning() {
                    return store.isTransitingTo(['home.datacloud.lookup', 'home.datacloud.explorer']);
                },
                sref: "home.datacloud.explorer({section:'edit',category:'',subcategory:''})",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_DATA_CLOUD"),
                icon: "ico-enrichment ico-light-gray"
            }, {
                if: store.showMarketoSettings && !store.showCdlEnabledPage,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.marketosettings') && !store.isTransitingFrom(['home.marketosettings']);
                },
                transitioning: function transitioning() {
                    return store.isTransitingTo(['home.marketosettings']);
                },
                sref: "home.marketosettings.apikey",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_MARKETO"),
                icon: "ico-marketo ico-light-gray"
            }, {
                if: store.showEloquaSettings && !store.showCdlEnabledPage,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.eloquasettings') && !store.isTransitingFrom(['home.eloquasettings']);
                },
                transitioning: function transitioning() {
                    return store.isTransitingTo(['home.eloquasettings']);
                },
                sref: "home.eloquasettings.apikey",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_ELOQUA"),
                icon: "ico-eloqua ico-light-gray"
            }, {
                if: store.showSalesforceSettings,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                active: function active() {
                    return store.state.includes('home.sfdcsettings') && !store.isTransitingFrom(['home.sfdcsettings']);
                },
                sref: "home.sfdcsettings",
                label: !store.showCdlEnabledPage ? ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_SFDC") : "Application Settings",
                icon: "ico-salesforce ico-light-gray"
            }, {
                if: store.showApiConsole && !store.showCdlEnabledPage,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                sref: "home.apiconsole",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_API_CONSOLE"),
                icon: "ico-api-console ico-light-gray"
            }, {
                if: store.showContactUs,
                disabled: !store.isDataAvailable && store.showCdlEnabledPage,
                href: "https://docs.google.com/forms/d/e/1FAIpQLSdxVGLgkna6zA_m2z6TF4eVH5OtF_qHPtyq80Oiy53vu9Of3A/viewform",
                target: "_contact_us",
                label: ResourceUtility.getString("NAVIGATION_SIDEBAR_LP_CONTACT_US"),
                icon: "ico-contact-us ico-light-gray"
            }];

            deferred.resolve(store.root);
        });

        return deferred.promise;
    };

    this.set = function (source) {
        //console.log(source, back);
        if (!source) {
            this.getRoot().then(function (source) {
                store.setDefaults(source);
            });
        } else {
            this.back = StateHistory.lastFrom().name || "home";
            this.setDefaults(source);
        }
    };

    this.get = function () {
        return this.items;
    };

    this.setDefaults = function (source) {
        var template = {
            if: true,
            disabled: false,
            active: function active() {},
            transitioning: function transitioning() {},
            sref: '',
            href: null,
            target: null,
            icon: "ico-model ico-light-gray"
        },
            properties = Object.keys(template);

        source.forEach(function (item) {
            properties.forEach(function (property) {
                if (!item.hasOwnProperty(property)) {
                    item[property] = template[property];
                }
            });
        });

        //console.log('set', source);
        this.setItems(source);
    };

    store.setItems = function (items) {
        store.items.length = 0;
        items.forEach(function (item) {
            store.items.push(item);
        });
    };

    store.getMyDataState = function () {
        return store.isDataAvailable ? "home.segment.explorer.attributes" : "home.nodata";
    };

    store.checkMyDataActiveState = function () {
        var segment = (StateHistory.lastToParams() || {}).segment;
        return store.isStateName(store.MyDataStates) && (!segment || segment == 'Create');
    };

    store.checkSegmentationActiveState = function () {
        return store.isStateName(store.MyDataStates) && store.stateParams.segment && store.stateParams.segment != 'Create' || store.state.current.name == 'home.segments';
    };

    store.checkToState = function (toState) {
        return StateHistory.lastTo().name == toState;
    };

    store.isStateName = function (state_names) {
        return (state_names || []).indexOf($state.current.name) !== -1;
    };

    store.isTransitingFrom = function (state_names) {
        return false;
        return (state_names || []).indexOf(StateHistory.lastFrom().name) !== -1 && (state_names || []).indexOf(StateHistory.lastTo().name) !== -1;
    };

    store.isTransitingTo = function (state_names) {
        return false;
        return (state_names || []).indexOf(StateHistory.lastTo().name) !== -1 && (state_names || []).indexOf($state.current.name) === -1;
    };

    store.isTransitingToMyData = function (state_names) {
        return false;
        return (state_names || []).indexOf($state.current.name) === -1 && store.isTransitingTo(state_names) && (!StateHistory.lastToParams().segment || StateHistory.lastToParams().segment == 'Create');
    };

    store.isTransitingToSegmentation = function (state_names) {
        return false;
        return store.isTransitingTo(state_names) && StateHistory.lastToParams().segment && StateHistory.lastToParams().segment != 'Create' || 'home.segments' !== $state.current.name && StateHistory.lastTo().name === 'home.segments';
    };
}]);

/***/ }),

/***/ "./app/navigation/sidebar/sidebar.index.js":
/*!*************************************************!*\
  !*** ./app/navigation/sidebar/sidebar.index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./sidebar.component */ "./app/navigation/sidebar/sidebar.component.js");

__webpack_require__(/*! ./model/model.component */ "./app/navigation/sidebar/model/model.component.js");

__webpack_require__(/*! ./root/root.component */ "./app/navigation/sidebar/root/root.component.js");

/***/ }),

/***/ "./app/navigation/summary/OneLineController.js":
/*!*****************************************************!*\
  !*** ./app/navigation/summary/OneLineController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation.oneline', []).controller('OneLineController', ["$scope", "ResourceUtility", "ResourceString", function ($scope, ResourceUtility, ResourceString) {
    $scope.summaryTitle = ResourceUtility.getString(ResourceString);
}]);

/***/ }),

/***/ "./app/navigation/summary/RefineModelSummaryController.js":
/*!****************************************************************!*\
  !*** ./app/navigation/summary/RefineModelSummaryController.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.navigation.review', ['mainApp.appCommon.utilities.StringUtility', 'lp.models.review', 'mainApp.setup.modals.UpdateFieldsModal', 'mainApp.models.modals.RefineModelThresholdModal']).controller('RefineModelSummaryController', ["$scope", "$stateParams", "StringUtility", "Model", "ReviewData", "ModelReviewService", "ModelReviewStore", "UpdateFieldsModal", "RefineModelThresholdModal", function ($scope, $stateParams, StringUtility, Model, ReviewData, ModelReviewService, ModelReviewStore, UpdateFieldsModal, RefineModelThresholdModal) {
    var vm = this;

    angular.extend(vm, {
        modelId: $stateParams.modelId,
        totalRecords: StringUtility.AddCommas(Model.ModelDetails.TotalLeads),
        totalRecordsAfter: Model.ModelDetails.TotalLeads,
        totalRecordsAfterDisplay: StringUtility.AddCommas(Model.ModelDetails.TotalLeads),
        successEvents: StringUtility.AddCommas(Model.ModelDetails.TotalConversions),
        successEventsAfter: Model.ModelDetails.TotalConversions,
        successEventsAfterDisplay: StringUtility.AddCommas(Model.ModelDetails.TotalConversions),
        conversionRate: getConversionRate(Model.ModelDetails.TotalConversions, Model.ModelDetails.TotalLeads),
        conversionRateAfter: getConversionRate(Model.ModelDetails.TotalConversions, Model.ModelDetails.TotalLeads),
        eventTableName: Model.EventTableProvenance.EventTableName,
        schemaInterpretation: Model.ModelDetails.SourceSchemaInterpretation,
        oneLeadPerDomain: Model.EventTableProvenance.Is_One_Lead_Per_Domain == "true",
        includePersonalEmailDomains: Model.EventTableProvenance.Exclude_Public_Domains == "false",
        useLatticeAttributes: Model.EventTableProvenance.Exclude_Propdata_Columns == "false",
        enableTransformations: Model.EventTableProvenance.Transformation_Group_Name || Model.ModelDetails.TransformationGroupName == "none" ? false : true
    });

    vm.createModelClicked = function () {
        if (vm.totalRecordsAfter < 7000 || vm.successEventsAfter < 150 || vm.conversionRateAfter > 10) {
            RefineModelThresholdModal.show(vm.totalRecordsAfter, vm.successEventsAfter, vm.conversionRateAfter);
        } else {
            UpdateFieldsModal.show(vm.oneLeadPerDomain, vm.includePersonalEmailDomains, vm.useLatticeAttributes, vm.enableTransformations, vm.modelId, null, Model.ModelDetails.DisplayName, ModelReviewStore.GetDataRules(vm.modelId));
        }
    };

    ModelReviewService.GetModelReviewData(vm.modelId, vm.eventTableName).then(function (result) {
        var oldReviewData = result.Result;
        oldReviewData.dataRules.forEach(function (dataRule) {
            var storedDataRules = ModelReviewStore.GetDataRules(vm.modelId);
            storedDataRules.forEach(function (storedDataRule) {
                if (storedDataRule.name == dataRule.name && dataRule.name in ReviewData.ruleNameToRowRuleResults && dataRule.enabled != storedDataRule.enabled) {
                    updateDisplay(ReviewData.ruleNameToRowRuleResults[storedDataRule.name], storedDataRule);
                }
            });
        });
    });

    $scope.$on('RowWarningToggled', function (event, warning, dataRule) {
        updateDisplay(warning, dataRule);
    });
    $scope.$on('ShowCreateModelPopup', function (event) {
        UpdateFieldsModal.show(vm.oneLeadPerDomain, vm.includePersonalEmailDomains, vm.useLatticeAttributes, vm.modelId, null, Model.ModelDetails.DisplayName, ModelReviewStore.GetDataRules(vm.modelId));
    });

    function updateDisplay(warning, dataRule) {
        if (dataRule.enabled) {
            vm.totalRecordsAfter -= warning.flaggedItemCount;
            vm.successEventsAfter -= warning.numPositiveEvents;
        } else {
            vm.totalRecordsAfter += warning.flaggedItemCount;
            vm.successEventsAfter += warning.numPositiveEvents;
        }
        vm.totalRecordsAfterDisplay = StringUtility.AddCommas(vm.totalRecordsAfter);
        vm.successEventsAfterDisplay = StringUtility.AddCommas(vm.successEventsAfter);
        vm.conversionRateAfter = getConversionRate(vm.successEventsAfter, vm.totalRecordsAfter);
    }

    function getConversionRate(successEvents, totalRecords) {
        return (successEvents / totalRecords * 100).toFixed(1);
    }
}]);

/***/ }),

/***/ "./app/navigation/summary/summary.index.js":
/*!*************************************************!*\
  !*** ./app/navigation/summary/summary.index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./OneLineController */ "./app/navigation/summary/OneLineController.js");

__webpack_require__(/*! ./RefineModelSummaryController */ "./app/navigation/summary/RefineModelSummaryController.js");

/***/ }),

/***/ "./app/navigation/table/TableController.js":
/*!*************************************************!*\
  !*** ./app/navigation/table/TableController.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('pd.navigation.table', []).controller('TableCtrl', ["$scope", "$rootScope", function ($scope, $rootScope) {
    $scope.tables = [{
        "name": "TOTAL JOBS",
        "items": {
            "Salesforce Imports": "11",
            "SF Import Frequency": "Daily",
            "Load File Imports": "3",
            "Model Creation": "17"
        }
    }, {
        "name": "TOTAL ACCOUNTS",
        "items": {
            "Accounts": "234,567",
            "Matched": "180,123 (77)",
            "1+ Contact": "53,219 (23)",
            "Unique Accounts": "197,765"
        }
    }, {
        "name": "TOTAL OPPORTUNITIES",
        "items": {
            "Opportunities": "17,890",
            "Closed-Won": "1,234",
            "Closed": "1,234"
        }
    }, {
        "name": "OTHER INFO",
        "items": {
            "Contacts": "167,890",
            "Leads": "456,789",
            "Data Range": "10/2013 - 10/2015"
        }
    }];
}]);

/***/ }),

/***/ "./app/navigation/table/table.index.js":
/*!*********************************************!*\
  !*** ./app/navigation/table/table.index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./TableController */ "./app/navigation/table/TableController.js");

/***/ }),

/***/ "./app/notes/DeleteNoteModal.js":
/*!**************************************!*\
  !*** ./app/notes/DeleteNoteModal.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.notes.DeleteNoteModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.utilities.NavUtility']).service('DeleteNoteModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "NotesService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, NotesService) {
    var self = this;
    this.show = function (id, noteId) {
        $http.get('app/notes/DeleteNoteConfirmView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.noteId = noteId;
            scope.id = id;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            scope.hasDeleteError = false;

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DeleteNoteController', ["$scope", "$rootScope", "$state", "$stateParams", "ResourceUtility", "NavUtility", "NotesService", function ($scope, $rootScope, $state, $stateParams, ResourceUtility, NavUtility, NotesService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deleteNoteClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        deleteNote($scope.id, $scope.noteId);
    };

    function deleteNote(id, noteId) {
        $scope.hasDeleteError = false;

        NotesService.DeleteNote(id, noteId).then(function (result) {
            if (result != null && result.success === true) {
                $("#modalContainer").modal('hide');

                if ($stateParams.rating_id) {
                    $state.go('home.ratingsengine.dashboard.notes', {}, { reload: true });
                } else {
                    $state.go('home.model.notes', {}, { reload: true });
                }
            } else {
                $scope.deleteNoteErrorMessage = result.ResultErrors;
                $scope.hasDeleteError = true;
            }
        });
    }

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/notes/NotesController.js":
/*!**************************************!*\
  !*** ./app/notes/NotesController.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.notes', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.notes.DeleteNoteModal', 'mainApp.models.services.ModelService']).controller('NotesController', ["$scope", "$state", "$stateParams", "$timeout", "BrowserStorageUtility", "ResourceUtility", "Notes", "NotesService", "DeleteNoteModal", "Model", "ModelService", function ($scope, $state, $stateParams, $timeout, BrowserStorageUtility, ResourceUtility, Notes, NotesService, DeleteNoteModal, Model, ModelService) {

    var vm = this,
        ClientSession = BrowserStorageUtility.getClientSession();

    angular.extend(vm, {
        isRating: $stateParams.rating_id,
        id: '',
        userName: ClientSession.EmailAddress,
        ResourceUtility: ResourceUtility,
        notes: Notes.data,
        referModelName: '',
        editingNote: false,
        showAddNoteError: false,
        saveInProgress: false
    });

    vm.init = function ($q) {

        // console.log(vm.notes);

        angular.forEach(vm.notes, function (note) {
            note.editContents = angular.copy(note.NotesContents);
        });

        vm.id = vm.isRating ? $stateParams.rating_id : $stateParams.modelId;
        vm.referModelName = vm.isRating ? '' : Model.ModelDetails.Name.slice(0, -7);
    };
    vm.init();

    vm.refreshEditingContents = function (note) {
        note.editContents = angular.copy(note.NotesContents);
    };

    vm.addNote = function (note) {

        var newNote = {
            Origin: 'NOTE',
            CreatedByUser: vm.userName,
            NotesContents: note
        };

        NotesService.CreateNote(vm.id, newNote).then(function (result) {
            if (result != null && result.success === true) {

                if (vm.isRating) {
                    $state.go('home.ratingsengine.dashboard.notes', {}, { reload: true });
                } else {
                    $state.go('home.model.notes', {}, { reload: true });
                }
            } else {
                vm.saveInProgress = false;
                vm.addNoteErrorMessage = result;
                vm.showAddNoteError = true;
            }
        });
    };

    vm.updateNote = function (note) {

        note.NotesContents = note.editContents;

        NotesService.UpdateNote(vm.id, vm.userName, note).then(function (result) {
            if (result != null && result.success === true) {

                if (vm.isRating) {
                    $state.go('home.ratingsengine.dashboard.notes', {}, { reload: true });
                } else {
                    $state.go('home.model.notes', {}, { reload: true });
                }
            } else {
                vm.saveInProgress = false;
                vm.addNoteErrorMessage = result;
                vm.showAddNoteError = true;
            }
        });
    };

    vm.deleteNote = function ($event, noteId) {
        // console.log(vm.id, noteId);
        DeleteNoteModal.show(vm.id, noteId);
    };
}]);

/***/ }),

/***/ "./app/notes/NotesService.js":
/*!***********************************!*\
  !*** ./app/notes/NotesService.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.notes').service('NotesService', ["$http", "$q", "$state", "$stateParams", "FeatureFlagService", function ($http, $q, $state, $stateParams, FeatureFlagService) {

    function isCDL() {
        var flags = FeatureFlagService.Flags();
        var isCDL = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
        return isCDL;
    }

    this.GetNotes = function (id) {

        var deferred = $q.defer(),
            result;
        var idObj = id || '';
        var isRating = isCDL(); //$stateParams.rating_id,
        var url = isRating ? '/pls/ratingengines/' + idObj + '/notes' : '/pls/modelnotes/' + idObj;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.CreateNote = function (id, newNote) {
        var deferred = $q.defer(),
            id = id || '';
        var isRating = isCDL(); // $stateParams.rating_id,

        var url = isRating ? '/pls/ratingengines/' + id + '/notes' : '/pls/modelnotes/' + id,
            data = {
            origin: newNote.Origin,
            user_name: newNote.CreatedByUser,
            content: newNote.NotesContents
        };

        $http({
            method: 'POST',
            url: url,
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.UpdateNote = function (id, userName, note) {
        var deferred = $q.defer(),
            id = id || '',
            noteId = note.Id || '',
            userName = userName || '',
            isRating = isCDL(),
            //$stateParams.rating_id,
        url = isRating ? '/pls/ratingengines/' + id + '/notes/' + noteId : '/pls/modelnotes/' + id + '/' + noteId,
            data = {
            origin: note.Origin,
            user_name: userName,
            content: note.NotesContents
        };

        $http({
            method: 'POST',
            url: url,
            data: data,
            headers: { 'Content-Type': 'application/json' }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.DeleteNote = function (id, noteId) {

        var deferred = $q.defer(),
            result = {},
            id = id || '',
            noteId = noteId || '',
            isRating = isCDL(),
            //$stateParams.rating_id,
        url = isRating ? '/pls/ratingengines/' + id + '/notes/' + noteId : '/pls/modelnotes/' + id + '/' + noteId;

        $http({
            method: 'DELETE',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/notes/notes.index.js":
/*!**********************************!*\
  !*** ./app/notes/notes.index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./DeleteNoteModal */ "./app/notes/DeleteNoteModal.js");

__webpack_require__(/*! ./NotesController */ "./app/notes/NotesController.js");

__webpack_require__(/*! ./NotesService */ "./app/notes/NotesService.js");

/***/ }),

/***/ "./app/playbook/content/crmselection/crmselection.component.js":
/*!*********************************************************************!*\
  !*** ./app/playbook/content/crmselection/crmselection.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.crmselection', []).component('crmSelection', {
    templateUrl: 'app/playbook/content/crmselection/crmselection.component.html',
    bindings: {
        play: '<',
        featureflags: '<',
        orgs: '<'
    },
    controller: ["$scope", "$state", "$timeout", "$stateParams", "ResourceUtility", "BrowserStorageUtility", "PlaybookWizardStore", "PlaybookWizardService", "SfdcService", "QueryStore", function controller($scope, $state, $timeout, $stateParams, ResourceUtility, BrowserStorageUtility, PlaybookWizardStore, PlaybookWizardService, SfdcService, QueryStore) {
        var vm = this;
        vm.showMAPSystems = vm.featureflags.EnableCdl;

        angular.extend(vm, {
            status: $stateParams.status
        });

        vm.$onInit = function () {
            vm.nullCount = null;
            vm.loadingCoverageCounts = false;
            $scope.excludeItemsWithoutSalesforceId = false;
            vm.setExcludeItems(false);

            PlaybookWizardStore.setValidation('crmselection', false);
            if (vm.orgs) {
                vm.stored = PlaybookWizardStore.crmselection_form;
                vm.ratingEngine = PlaybookWizardStore.getSavedRating();
                if ($stateParams.play_name) {
                    var play = PlaybookWizardStore.getCurrentPlay(),
                        crmselection = play && play.launchHistory && play.launchHistory.mostRecentLaunch && play.launchHistory.mostRecentLaunch.destinationOrgId ? vm.orgs.find(function (org) {
                        return org.orgId === play.launchHistory.mostRecentLaunch.destinationOrgId;
                    }) : '';

                    vm.savedSegment = crmselection;
                    vm.stored.crm_selection = crmselection;

                    PlaybookWizardStore.setDestinationOrgId(vm.stored.crm_selection.orgId);
                    PlaybookWizardStore.setDestinationSysType(vm.stored.crm_selection.externalSystemType);
                    PlaybookWizardStore.setDestinationAccountId(vm.stored.crm_selection.accountId);

                    if (crmselection) {
                        PlaybookWizardStore.setValidation('crmselection', true);
                    }
                }
            }
        };

        vm.setExcludeItems = function (excludeItemsWithoutSalesforceId) {
            PlaybookWizardStore.setExcludeItems(excludeItemsWithoutSalesforceId);
        };

        vm.checkValidDelay = function (form, accountId, orgId, isRegistered) {
            $timeout(function () {
                if (vm.stored.crm_selection.orgId === orgId) {
                    vm.checkValid(form, accountId, orgId, isRegistered);
                }
            }, 1);
        };

        vm.checkValid = function (form, accountId, orgId, isRegistered) {
            vm.orgIsRegistered = isRegistered;
            vm.nullCount = null;
            vm.totalCount = null;

            $scope.excludeItemsWithoutSalesforceId = false;
            vm.setExcludeItems(false);
            PlaybookWizardStore.setValidation('crmselection', false);

            if (vm.stored.crm_selection) {
                PlaybookWizardStore.setDestinationOrgId(vm.stored.crm_selection.orgId);
                PlaybookWizardStore.setDestinationSysType(vm.stored.crm_selection.externalSystemType);
                PlaybookWizardStore.setDestinationAccountId(vm.stored.crm_selection.accountId);
            }

            var accountId = accountId;
            if (accountId && isRegistered) {

                vm.nullCount = null;
                vm.loadingCoverageCounts = true;

                var allCountsQuery = {
                    freeFormTextSearch: vm.search || '',
                    entityType: 'Account',
                    selectedBuckets: PlaybookWizardStore.getBucketsToLaunch()
                },
                    engineId = vm.ratingEngine.id;

                var segmentName = PlaybookWizardStore.getCurrentPlay().targetSegment.name;
                PlaybookWizardService.getRatingSegmentCounts(segmentName, [engineId]).then(function (result) {
                    vm.totalCount = result.ratingModelsCoverageMap[Object.keys(result.ratingModelsCoverageMap)[0]].accountCount; // small
                    PlaybookWizardService.getRatingSegmentCounts(segmentName, [engineId], {
                        lookupId: accountId,
                        restrictNullLookupId: true
                    }).then(function (result) {
                        PlaybookWizardStore.setValidation('crmselection', form.$valid);

                        vm.loadingCoverageCounts = false;
                        vm.nonNullCount = result.ratingModelsCoverageMap[Object.keys(result.ratingModelsCoverageMap)[0]].accountCount; // big
                        vm.nullCount = vm.totalCount - vm.nonNullCount;
                    });
                });

                // PlaybookWizardService.getTargetCount(engineId, allCountsQuery).then(function(result) {
                //     vm.totalCount = result;

                //     var accountIdCountQuery = { 
                //         freeFormTextSearch: vm.search || '',
                //         restrictNotNullSalesforceId: true,
                //         entityType: 'Account',
                //         selectedBuckets: PlaybookWizardStore.getBucketsToLaunch(),
                //         lookupIdColumn: accountId
                //     };
                //     PlaybookWizardService.getTargetCount(engineId, accountIdCountQuery).then(function(result){
                //         PlaybookWizardStore.setValidation('crmselection', form.$valid);

                //         vm.loadingCoverageCounts = false;
                //         vm.nonNullCount = result;
                //         vm.nullCount = (vm.totalCount - vm.nonNullCount);
                //     });
                // });
            } else {
                PlaybookWizardStore.setValidation('crmselection', form.$valid);
            }
        };
    }]
});

/***/ }),

/***/ "./app/playbook/content/dashboard/dashboard.component.js":
/*!***************************************************************!*\
  !*** ./app/playbook/content/dashboard/dashboard.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.dashboard', ['ngAnimate', 'mainApp.appCommon.utilities.TimestampIntervalUtility']).controller('PlaybookDashboard', ["$q", "$scope", "$stateParams", "$state", "$interval", "$timeout", "$rootScope", "PlaybookWizardStore", "TimestampIntervalUtility", "NumberUtility", "QueryStore", "BackStore", "CampaignTypes", function ($q, $scope, $stateParams, $state, $interval, $timeout, $rootScope, PlaybookWizardStore, TimestampIntervalUtility, NumberUtility, QueryStore, BackStore, CampaignTypes) {

    var vm = this,
        play_name = $stateParams.play_name,
        onpage = true,
        launchButtonStates = {
        initial: {
            label: 'Launch',
            state: ''
        },
        Launching: {
            label: 'Launching'
        },
        Launched: {
            label: 'Relaunch'
        }
    };

    angular.extend(vm, {
        TimestampIntervalUtility: TimestampIntervalUtility,
        NumberUtility: NumberUtility,
        launchHistory: [],
        invalid: [],
        editable: true,
        play: null,
        launchButton: angular.copy(launchButtonStates.initial),
        showLaunchSpinner: false,
        editing: {},
        barChartConfig: PlaybookWizardStore.barChartConfig,
        barChartLiftConfig: PlaybookWizardStore.barChartLiftConfig,
        campaignTypes: CampaignTypes
    });

    // $q.when($stateParams.play_name, function() {
    //     if(play_name) {
    //         PlaybookWizardStore.getPlayLaunches(play_name, 'Launched').then(function(results){
    //             vm.launchHistory = results;
    //         });
    //     }
    // });

    /**
     * contenteditable elements convert to html entities, so I removed it but want to keep this 
     * function because it could be useful if I figure out a way around this issue
     */
    vm.keydown = function ($event, max, debug) {
        var element = angular.element($event.currentTarget),
            html = element.html();
        length = html.length, max = max || 50, allowedKeys = [8, 35, 36, 37, 38, 39, 40, 46]; // up, down, home, end, delete, backspace, things like that go in here

        if (debug) {
            console.log('pressed', $event.keyCode, 'length', length, 'html', html);
        }

        if (length > max - 1 && allowedKeys.indexOf($event.keyCode) === -1) {
            $event.preventDefault();
        }
    };

    vm.hasLiftChart = function (play) {
        return play.ratingEngine.type === 'CROSS_SELL' || play.ratingEngine.type === 'CUSTOM_EVENT';
    };

    vm.removeSegment = function (play) {
        PlaybookWizardStore.removeSegment(play);
    };

    vm.launchPlay = function () {
        if (!vm.showLaunchSpinner) {
            vm.showLaunchSpinner = true;

            var opts = vm.play.launchHistory.mostRecentLaunch;

            PlaybookWizardStore.launchPlay(vm.play, opts).then(function (data) {
                vm.launchHistory.push(data);
                vm.showLaunchSpinner = false;
                if (onpage) {
                    $state.go('home.playbook.dashboard.launch_job', { play_name: vm.play.name, applicationId: data.applicationId });
                }
            });
        }
    };

    var findByPath = function findByPath(path, obj) {
        function index(obj, i) {
            return obj[i];
        }
        return path.split('.').reduce(index, obj);
    };

    // var makeSimpleGraph = function(buckets, path) {
    //     console.log(buckets);
    //     var total =  0;
    //     function index(obj,i) {
    //         return obj[i]
    //     }
    //     for (var i in buckets) {
    //         var bucket = buckets[i];
    //         console.log(path.split('.').reduce(index, bucket));
    //         total += (path ? path.split('.').reduce(index, bucket) : buckets[i]);
    //     }

    //     return {
    //         total: total,
    //         buckets: buckets
    //     }
    // };

    // PLS-8472 Using play.ratingEngine.bucketMetadata instead of play.ratings to generate play ratings graph
    // Delete this method when play.ratings becomes more reliable
    var makeSimpleGraph = function makeSimpleGraph(buckets, path) {
        var total = 0;
        function index(obj, i) {
            return obj[i];
        }
        for (var i in buckets) {
            var bucket = buckets[i];
            total += path ? path.split('.').reduce(index, bucket) : buckets[i];
        }

        buckets.forEach(function (bkt) {
            if (!bkt.height) {
                bkt.height = bkt.count / total * 100;
            }
        });

        return {
            total: total,
            buckets: buckets
        };
    };

    var makeLaunchGraph = function makeLaunchGraph(launchHistory) {
        if (!launchHistory || !launchHistory.lastCompletedLaunch) {
            return false;
        }
        var total_contacts = launchHistory.lastCompletedLaunch.contactsLaunched + launchHistory.newContactsNum,
            total_accounts = launchHistory.lastCompletedLaunch.accountsLaunched + launchHistory.newAccountsNum,
            total = total_contacts + total_accounts;

        return {
            buckets: {
                contacts: {
                    new: launchHistory.newContactsNum,
                    current: launchHistory.lastCompletedLaunch.contactsLaunched,
                    total: total_contacts
                },
                accounts: {
                    new: launchHistory.newAccountsNum,
                    current: launchHistory.lastCompletedLaunch.accountsLaunched,
                    total: total_accounts
                }
            },
            total: total
        };
    };

    vm.autofocus = function ($event) {
        var element = angular.element($event.currentTarget),
            target = element.find('[autofocus]');

        target.focus();
        // set focus and put cursor at begining
        setTimeout(function () {
            target.focus(); // because textareas
            target[0].setSelectionRange(0, 0);
        }, 10);
    };

    vm.edited = function (property) {
        if (vm.editing[property] === null) {
            return false;
        }

        var content = vm.editing[property],
            newPlay = angular.copy(vm.play),
            save = false;

        newPlay[property] = content;

        if (vm.play[property] != newPlay[property]) {
            save = true;
            // if(property === 'displayName' && !content) {
            //     save = false;
            //     $element.text(vm.play[property]);
            // }
        }

        if (save) {
            vm.editable = false; // block rapid edits
            var savePlay = {
                name: vm.play.name,
                createdBy: vm.play.createdBy,
                displayName: newPlay.displayName,
                description: newPlay.description
            };
            PlaybookWizardStore.savePlay(savePlay).then(function (play) {
                vm.play.name = play.name;
                vm.play.displayName = play.displayName;
                vm.play.description = play.description;
                vm.editable = true;

                BackStore.setBackLabel(vm.play.displayName);
            });
        }
    };

    vm.launchValidate = function (play) {
        var properties = ['displayName', 'ratingEngine'];

        properties.forEach(function (property) {
            if (!findByPath(property, play) && vm.invalid.indexOf(property) == -1) {
                vm.invalid.push(property);
            }
        });
        return vm.invalid.length ? false : true;
    };

    var checkLaunchState;
    vm.getPlay = function () {
        PlaybookWizardStore.getPlay(play_name, true).then(function (play) {
            vm.play = play;

            vm.launchButton = PlaybookWizardStore.launchButton(play);
            vm.launchedState = vm.launchButton.state; //(vm.play.launchHistory && vm.play.launchHistory.mostRecentLaunch && vm.play.launchHistory.mostRecentLaunch.launchState ? vm.play.launchHistory.mostRecentLaunch.launchState : null);

            // vm.ratingsGraph = makeSimpleGraph(play.ratings && play.ratings, 'count');

            // PLS-8472 Using play.ratingEngine.bucketMetadata instead of play.ratings to generate play ratings graph once ratings object is more stable
            var buckets = reformatBucketMetadata(play.ratingEngine.bucketMetadata);
            vm.ratingsGraph = makeSimpleGraph(buckets, 'count');

            if (play.ratingEngine.type === 'CROSS_SELL' && play.ratingEngine.advancedRatingConfig) {
                play.ratingEngine.tileClass = play.ratingEngine.advancedRatingConfig.cross_sell.modelingStrategy;
            } else {
                play.ratingEngine.tileClass = play.ratingEngine.type;
            }

            if (play.ratingEngine.type === 'CROSS_SELL' || play.ratingEngine.type === 'CUSTOM_EVENT') {
                play.ratingEngine.chartConfig = vm.barChartLiftConfig;
            } else {
                play.ratingEngine.chartConfig = vm.barChartConfig;
            }

            var newBucketMetadata = [];

            if (play.ratingEngine.bucketMetadata && play.ratingEngine.bucketMetadata.length > 0) {
                angular.forEach(play.ratingEngine.bucketMetadata, function (rating, key) {
                    rating.lift = (Math.round(rating.lift * 10) / 10).toString();
                    newBucketMetadata.push(rating);
                });
            }
            play.ratingEngine.newBucketMetadata = newBucketMetadata;

            vm.launchGraph = makeLaunchGraph(play.launchHistory);

            if (vm.launchedState === 'Launching') {
                // if it's in a launching state check every 10 seconds so we can update the button, then stop checking
                vm.showLaunchSpinner = true;

                checkLaunchState = $interval(function () {
                    PlaybookWizardStore.getPlayLaunches(play_name).then(function (results) {
                        var result = results[0];
                        vm.launchHistory = results;
                        vm.launchedState = result && result.launchState ? result.launchState : null;

                        vm.launchButton = PlaybookWizardStore.launchButton(play, vm.launchedState);
                        if (vm.launchedState === 'Launched' || vm.launchedState === 'Failed') {
                            $interval.cancel(checkLaunchState);
                            vm.showLaunchSpinner = false;
                        }
                    });
                }, 10 * 1000);
            }
        });
    };

    vm.changeCampaignType = function (_type) {
        var type = vm.campaignTypes.find(function (type) {
            return type.id === vm.campaignType;
        }),
            opts = {
            name: vm.play.name,
            playType: type
            //typeId: vm.campaignType
        };
        vm.loadingCampaignType = true;
        PlaybookWizardStore.savePlay(opts).then(function (play) {
            vm.loadingCampaignType = false;
            vm.loadedCampaignType = true;

            $timeout(function () {
                vm.loadedCampaignType = false;
            }, 1000);

            vm.campaignType = play.playType.id;
        });
    };

    function reformatBucketMetadata(bucketMetadata) {
        var buckets = [];
        bucketMetadata.forEach(function (bkt) {
            buckets.push({
                bucket: bkt.bucket_name,
                count: bkt.num_leads
            });
        });
        return buckets;
    }

    $scope.$on('$destroy', function () {
        onpage = false;
        $interval.cancel(checkLaunchState);
        checkLaunchState = null;
    });

    PlaybookWizardStore.clear();
    if (play_name) {
        vm.getPlay();
    }
}]);

/***/ }),

/***/ "./app/playbook/content/dashboard/dashboard.index.js":
/*!***********************************************************!*\
  !*** ./app/playbook/content/dashboard/dashboard.index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./dashboard.component */ "./app/playbook/content/dashboard/dashboard.component.js");

__webpack_require__(/*! ./sidebar/sidebar.component */ "./app/playbook/content/dashboard/sidebar/sidebar.component.js");

/***/ }),

/***/ "./app/playbook/content/dashboard/sidebar/sidebar.component.js":
/*!*********************************************************************!*\
  !*** ./app/playbook/content/dashboard/sidebar/sidebar.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.dashboard.sidebar', ['mainApp.appCommon.utilities.ResourceUtility']).controller('SidebarPlaybookController', ["$rootScope", "$state", "$stateParams", "StateHistory", "ResourceUtility", "PlaybookWizardStore", "Play", function ($rootScope, $state, $stateParams, StateHistory, ResourceUtility, PlaybookWizardStore, Play) {
    var vm = this;

    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        state: $state,
        stateParams: $stateParams,
        StateHistory: StateHistory,
        play: Play
    });

    vm.init = function () {
        vm.play_name = $stateParams.play_name || '';

        var launchedStatus = PlaybookWizardStore.getLaunchedStatus(vm.play);

        vm.launchHistoryDisabled = !launchedStatus.hasLaunchHistory;

        vm.segment = vm.play.segment;
        vm.targetsDisabled = vm.play.ratingEngine ? false : true;

        if ($state.current.name === 'home.playbook.dashboard.launch_job') {
            vm.menuDisabled = true;
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/insights/insights.component.js":
/*!*************************************************************!*\
  !*** ./app/playbook/content/insights/insights.component.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.insights', []).controller('PlaybookWizardInsights', ["$scope", "$state", "$stateParams", "$document", "$rootScope", "$timeout", "PlaybookWizardStore", "CgTalkingPointStore", "TalkingPointPreviewResources", "TalkingPointAttributes", "Entities", "TalkingPoints", "BrowserStorageUtility", function ($scope, $state, $stateParams, $document, $rootScope, $timeout, PlaybookWizardStore, CgTalkingPointStore, TalkingPointPreviewResources, TalkingPointAttributes, Entities, TalkingPoints, BrowserStorageUtility) {
    var vm = this;

    angular.extend(vm, {
        previewResources: TalkingPointPreviewResources,
        attributes: TalkingPointAttributes,
        entities: Entities,
        talkingPoints: TalkingPoints,
        saveOnBlur: CgTalkingPointStore.saveOnBlur,
        stateParams: $stateParams,
        revertClicked: false,
        saving: false,
        saved: false,
        currentPlay: PlaybookWizardStore.getCurrentPlay()
    });

    vm.init = function () {
        if ($stateParams.play_name) {
            PlaybookWizardStore.getPlay($stateParams.play_name);
        }
    };

    vm.init();

    $rootScope.$on('talkingPoints:sync', function (e) {
        CgTalkingPointStore.getTalkingPoints($stateParams.play_name, true).then(function (talkingPoints) {
            var _tp = [];
            talkingPoints.forEach(function (talkingPoint, index) {
                delete talkingPoint.title;
                delete talkingPoint.content;
                if (vm.talkingPoints && vm.talkingPoints[index]) {
                    delete vm.talkingPoints[index].pid;
                    delete vm.talkingPoints[index].name;
                    delete vm.talkingPoints[index].IsNew;
                }
                _tp.push(angular.extend({}, talkingPoint, vm.talkingPoints[index]));
            });
            vm.talkingPoints = _tp;

            //vm.talkingPoints = talkingPoints;

            $rootScope.$broadcast('talkingPoints:sync:complete');
        });
    });

    var savedTimeout;
    $rootScope.$on('talkingPoints:saving', function (e) {
        vm.saving = true;
        vm.saved = false;
        $timeout.cancel(savedTimeout);
    });
    $rootScope.$on('talkingPoints:saved', function (e) {
        vm.saving = false;
        vm.saved = true;
        $timeout.cancel(savedTimeout);
        savedTimeout = $timeout(function () {
            vm.saving = false;
            vm.saved = false;
        }, 5 * 1000);
    });

    CgTalkingPointStore.getTalkingPoints($stateParams.play_name, true).then(function (talkingPoints) {
        vm.talkingPoints = talkingPoints;
    });

    var cachedTalkingPoints = angular.copy(TalkingPoints);

    var newTalkingPoint = function newTalkingPoint() {
        var talkingPoint = CgTalkingPointStore.generateTalkingPoint({
            timestamp: new Date().getTime(),
            customerID: BrowserStorageUtility.getClientSession().Tenant.Identifier,
            playExternalID: $stateParams.play_name,
            title: null,
            content: null,
            offset: vm.talkingPoints.length
        });
        talkingPoint.IsNew = true;
        vm.talkingPoints.push(talkingPoint);
        CgTalkingPointStore.saveTalkingPoints(vm.talkingPoints).then(function (results) {
            vm.talkingPoints = results;
            CgTalkingPointStore.setEditedTalkingPoint(results.slice(-1)[0]);
        });
    };

    vm.addTalkingPoint = function () {
        newTalkingPoint();
    };

    vm.saveTalkingPoints = function () {
        CgTalkingPointStore.saveTalkingPoints(vm.talkingPoints).then(function (results) {
            CgTalkingPointStore.getTalkingPoints($stateParams.play_name, true).then(function (talkingPoints) {
                $state.go('home.playbook.dashboard.insights.preview', { play_name: $stateParams.play_name });
            });
        });
    };

    vm.onDelete = function (talkingPoint, pos) {
        if (!talkingPoint.IsNew) {
            CgTalkingPointStore.deleteTalkingPoint(talkingPoint.name);
        }
        vm.talkingPoints.splice(pos, 1);
        for (var i = pos; i < vm.talkingPoints.length; i++) {
            vm.talkingPoints[i].Offset--;
        }
        validateTalkingPoints();
    };

    var reorderTalkingPoints = function reorderTalkingPoints(from, to) {
        var min = Math.min(from, to),
            talkingPoints = sortBy('offset', vm.talkingPoints),
            ret = [],
            top = talkingPoints.slice(0, min + 1),
            bottom = talkingPoints.slice(min + 1, talkingPoints.length),
            topOffset = top[top.length - 1].offset,
            bottomOffset = bottom[0].offset;

        top[top.length - 1].offset = bottomOffset;
        bottom[0].offset = topOffset;
        ret = sortBy('offset', top.concat(bottom));

        return ret;
    };

    var sortBy = function sortBy(property, obj) {
        var arr = obj.slice(0);
        arr.sort(function (a, b) {
            return a[property] - b[property];
        });
        return arr;
    };

    vm.reorder = function (from, to) {
        vm.talkingPoints = reorderTalkingPoints(from, to);

        if (CgTalkingPointStore.saveOnBlur) {
            CgTalkingPointStore.saveTalkingPoints(vm.talkingPoints).then(function (results) {
                CgTalkingPointStore.getTalkingPoints($stateParams.play_name, true);
            });
        }
    };

    vm.revertTalkingPoints = function () {
        CgTalkingPointStore.revertTalkingPoints($stateParams.play_name).then(function (response) {
            CgTalkingPointStore.getTalkingPoints($stateParams.play_name, true).then(function (talkingPoints) {
                vm.talkingPoints = talkingPoints;
            });
        });
    };

    function validateTalkingPoints() {
        var valid = false,
            errors = 0;
        if (vm.talkingPoints.length) {
            for (var i = 0; i < vm.talkingPoints.length; i++) {
                vm.talkingPoints[i].uiError = null;
                if (!vm.talkingPoints[i].content || !vm.talkingPoints[i].title) {
                    vm.talkingPoints[i].uiError = {};
                    if (!vm.talkingPoints[i].title) {
                        vm.talkingPoints[i].uiError.title = 'Please provide a title.';
                    }
                    if (!vm.talkingPoints[i].content) {
                        vm.talkingPoints[i].uiError.content = 'Please provide content.';
                    }
                    errors++;
                }
            }
            if (errors) {
                //PlaybookWizardStore.setValidation('insights', false);
                valid = false;
            } else {
                valid = true;
            }
        } else {
            valid = false;
        }
        vm.valid = valid;
        if (valid) {
            PlaybookWizardStore.setTalkingPoints(vm.talkingPoints);
        }
        PlaybookWizardStore.setValidation('insights', true);
        return true;
    };

    vm.revertClick = function ($event, val) {
        $event.stopPropagation();

        vm.revertClicked = val;
        if (val) {
            $document.on('click', handleDocumentClick);
        } else {
            $document.off('click', handleDocumentClick);
        }
    };

    vm.allowAddTalkingPoint = function (talkingPoints, valid) {
        if (!talkingPoints.length) {
            return true;
        }
        if (valid) {
            return true;
        }
        return false;
    };

    function handleDocumentClick(evt) {
        if (vm.revertClicked) {
            vm.revertClicked = false;
            $document.off('click', handleDocumentClick);
            $scope.$digest();
        }
    }

    $scope.$on('$destroy', function () {
        $document.off('click', handleDocumentClick);
    });

    $scope.$watch(validateTalkingPoints);
}]);

/***/ }),

/***/ "./app/playbook/content/launch/launch.component.js":
/*!*********************************************************!*\
  !*** ./app/playbook/content/launch/launch.component.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.launch', []).controller('PlaybookWizardLaunch', ["$state", "$stateParams", "ResourceUtility", function ($state, $stateParams, ResourceUtility) {
    var vm = this;

    angular.extend(vm, {});

    vm.init = function () {};

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/launchhistory/launchhistory.component.js":
/*!***********************************************************************!*\
  !*** ./app/playbook/content/launchhistory/launchhistory.component.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.dashboard.launchhistory', []).controller('PlaybookDashboardLaunchHistory', ["$scope", "$state", "$stateParams", "$q", "$filter", "$timeout", "$interval", "ResourceUtility", "PlaybookWizardStore", "LaunchHistoryData", "LaunchHistoryCount", "FilterData", function ($scope, $state, $stateParams, $q, $filter, $timeout, $interval, ResourceUtility, PlaybookWizardStore, LaunchHistoryData, LaunchHistoryCount, FilterData) {
    var vm = this;

    angular.extend(vm, {
        stored: PlaybookWizardStore.settings_form,
        current: PlaybookWizardStore.current,
        currentPlay: PlaybookWizardStore.currentPlay,
        launches: LaunchHistoryData,
        launchesCount: LaunchHistoryCount,
        summaryData: {},
        stateParams: $stateParams,
        launching: false,
        currentPage: 1,
        pagesize: 10,
        showPagination: false,
        orgId: '',
        externalSystemType: '',
        playName: '',
        allPlaysHistory: false,
        sortBy: 'created',
        sortDesc: true,
        header: {
            filter: {
                label: 'Filter By',
                value: {},
                items: FilterData
            }
        },
        systemNameMap: {}
    });

    vm.init = function () {
        vm.allPlaysHistory = $state.current.name === 'home.playbook.plays.launchhistory' ? true : false;

        vm.noData = vm.launchesCount === 0 && vm.orgId === '' && vm.externalSystemType === '' && vm.playName === '' ? true : false;
        vm.offset = (vm.currentPage - 1) * vm.pagesize;

        vm.defaultPlayLaunchList = angular.copy(vm.launches.uniquePlaysWithLaunches);

        vm.updateLaunchData();

        makeSystemNameMap(LaunchHistoryData.uniqueLookupIdMapping);
    };

    var makeSystemNameMap = function makeSystemNameMap(uniqueLookupIdMapping) {
        var uniqueLookupIdMapping = uniqueLookupIdMapping || {};

        for (var i in uniqueLookupIdMapping) {
            for (var j in uniqueLookupIdMapping[i]) {
                vm.systemNameMap[uniqueLookupIdMapping[i][j].orgId] = uniqueLookupIdMapping[i][j].orgName;
            }
        }
    };

    // Set sort
    vm.sort = function (header) {

        console.log("sort");

        vm.sortBy = header;

        vm.currentPage = 1;
        vm.offset = 0;
        vm.updateLaunchData();
    };

    // Set play name
    vm.playSelectChange = function (play) {

        console.log("play change");

        if (play === undefined || play.length == 0) {
            vm.playName = null;
        } else {
            vm.playName = play[0].name;
        }

        vm.currentPage = 1;
        vm.offset = 0;
        vm.updateLaunchData();
    };

    // Get data
    vm.updateLaunchData = function () {

        var params = {
            playName: vm.playName || $stateParams.play_name,
            sortby: vm.sortBy,
            descending: vm.sortDesc,
            offset: vm.offset,
            max: 10,
            orgId: vm.orgId,
            launchStates: 'Launching,Launched,Failed',
            externalSysType: vm.externalSystemType
        },
            countParams = {
            playName: vm.playName || $stateParams.play_name,
            launchStates: 'Launching,Launched,Failed',
            offset: 0,
            startTimestamp: 0,
            orgId: vm.orgId,
            externalSysType: vm.externalSystemType
        };

        PlaybookWizardStore.getPlayLaunches(params).then(function (result) {
            vm.launches = result;
            vm.parseLaunchData();
        });
        PlaybookWizardStore.getPlayLaunchCount(countParams).then(function (result) {
            vm.launchesCount = result;
        });
    };

    vm.parseLaunchData = function () {

        vm.noFilteredData = vm.launchesCount === 0 && (vm.orgId !== '' || vm.externalSystemType !== '' || vm.playName !== '') ? true : false;

        vm.header.filter.filtered = vm.defaultPlayLaunchList;
        vm.header.filter.unfiltered = vm.defaultPlayLaunchList;

        var launchSummaries = vm.launches.launchSummaries;
        if (launchSummaries && launchSummaries.length) {
            for (var i = 0; i < launchSummaries.length; i++) {
                if (launchSummaries[i].launchState == 'Launching') {
                    vm.launching = true;
                    break;
                }
            }
        }

        // Display correct cumulative stats in summary area
        var stats = vm.launches.cumulativeStats;
        vm.summaryData = {
            selectedTargets: stats.selectedTargets,
            suppressed: stats.suppressed,
            errors: stats.errors,
            recommendationsLaunched: stats.recommendationsLaunched,
            contactsWithinRecommendations: stats.contactsWithinRecommendations
        };
    };

    // Watch for change in pagination
    $scope.$watch('vm.currentPage', function (newValue, oldValue) {
        vm.loading = true;
        if (newValue != oldValue) {

            console.log("watch");
            vm.offset = (vm.currentPage - 1) * vm.pagesize, vm.updateLaunchData();
        }
    });

    vm.filterChange = function (org) {
        var orgData = org[1];

        vm.orgId = orgData.destinationOrgId;
        vm.externalSystemType = orgData.externalSystemType;

        vm.currentPage = 1;
        vm.offset = 0;
        vm.updateLaunchData();
    };

    vm.relaunchPlay = function () {
        vm.launching = true;

        var play = vm.currentPlay,
            opts = {
            bucketsToLaunch: play.launchHistory.mostRecentLaunch.bucketsToLaunch,
            topNCount: play.launchHistory.mostRecentLaunch.topNCount,
            destinationOrgId: play.launchHistory.mostRecentLaunch.destinationOrgId,
            destinationSysType: play.launchHistory.mostRecentLaunch.destinationSysType,
            destinationAccountId: play.launchHistory.mostRecentLaunch.destinationAccountId,
            excludeItems: play.launchHistory.mostRecentLaunch.excludeItems
        };

        PlaybookWizardStore.nextSaveLaunch(null, { play: play, launchObj: opts });

        // PlaybookWizardStore.launchPlay(play, opts).then(function(result){
        //     $state.reload();
        // });
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        PlaybookWizardStore.setValidation('settings', form.$valid);
        if (vm.stored.play_display_name) {
            PlaybookWizardStore.setSettings({
                displayName: vm.stored.play_display_name,
                description: vm.stored.play_description
            });
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/name/name.component.js":
/*!*****************************************************!*\
  !*** ./app/playbook/content/name/name.component.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.name', []).component('name', {
    templateUrl: 'app/playbook/content/name/name.component.html',
    bindings: {
        types: '<'
    },
    controller: ["$scope", "$state", "$stateParams", "$timeout", "ResourceUtility", "BrowserStorageUtility", "PlaybookWizardStore", "PlaybookWizardService", function controller($scope, $state, $stateParams, $timeout, ResourceUtility, BrowserStorageUtility, PlaybookWizardStore, PlaybookWizardService) {
        var vm = this;
        angular.extend(vm, {
            currentPlay: PlaybookWizardStore.getCurrentPlay(),
            updatedPlay: {}
        });

        var getTypeObj = function getTypeObj(id) {
            var typeObj = {};
            if (id) {
                typeObj = vm.types.filter(function (value) {
                    return value.id === id;
                });
            }
            return typeObj[0];
        };

        var getTypeByName = function getTypeByName(type) {
            var ret = vm.types.filter(function (value) {
                return value.displayName === type;
            });
            return ret[0];
        };

        vm.change = function (form) {
            if (vm.updatedPlay.typeId) {
                vm.updatedPlay.playType = getTypeObj(vm.updatedPlay.typeId); // add the type object to the update play (needed to save)
            }
            PlaybookWizardStore.setSettings(vm.updatedPlay);
            vm.checkValid(form);
        };

        vm.$onInit = function () {
            vm.updatedPlay.typeId = getTypeByName('List').id;
            if (vm.currentPlay) {
                if (vm.currentPlay.displayName) {
                    vm.updatedPlay.displayName = vm.currentPlay.displayName;
                }
                if (vm.currentPlay.description) {
                    vm.updatedPlay.description = vm.currentPlay.description;
                }
                if (vm.currentPlay.typeId) {
                    vm.updatedPlay.typeId = vm.currentPlay.typeId;
                }
            }
        };

        vm.checkFieldsDelay = function (form) {
            var mapped = [];
            $timeout(function () {
                vm.checkValid(form);
            }, 1);
        };

        vm.checkValid = function (form) {
            if (form) {
                PlaybookWizardStore.setValidation('name', form.$valid);
            }
        };
    }] });

/***/ }),

/***/ "./app/playbook/content/newlaunch/newlaunch.component.js":
/*!***************************************************************!*\
  !*** ./app/playbook/content/newlaunch/newlaunch.component.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.newlaunch', []).component('newlaunch', {
    templateUrl: 'app/playbook/content/newlaunch/newlaunch.component.html',
    controller: ["$scope", "$state", "$stateParams", "ResourceUtility", "BrowserStorageUtility", "PlaybookWizardStore", "PlaybookWizardService", function controller($scope, $state, $stateParams, ResourceUtility, BrowserStorageUtility, PlaybookWizardStore, PlaybookWizardService) {
        var vm = this;

        angular.extend(vm, {
            recommendationCounts: PlaybookWizardStore.getRecommendationCounts(),
            status: $stateParams.status,
            launching: false
        });

        vm.$onInit = function () {};

        vm.nextSaveLaunch = function () {
            vm.launching = true;
            vm.status = "Launching...";
            PlaybookWizardStore.nextSaveLaunch(null, { lastIncompleteLaunch: PlaybookWizardStore.currentPlay.launchHistory.lastIncompleteLaunch });
        };
    }] });

/***/ }),

/***/ "./app/playbook/content/playlist/modals/deletePlayModal.js":
/*!*****************************************************************!*\
  !*** ./app/playbook/content/playlist/modals/deletePlayModal.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.playbook.content.playlist.modals.deletePlayModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.utilities.NavUtility']).service('DeletePlayModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "PlaybookWizardService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, PlaybookWizardService) {
    var self = this;
    this.show = function (play) {
        $http.get('app/playbook/content/playlist/modals/deleteplaymodal.component.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.playName = play.name;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DeletePlayController', ["$scope", "$rootScope", "$timeout", "$state", "ResourceUtility", "NavUtility", "PlaybookWizardStore", "PlaybookWizardService", function ($scope, $rootScope, $timeout, $state, ResourceUtility, NavUtility, PlaybookWizardStore, PlaybookWizardService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deletePlayClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }
        deletePlay($scope.playName);
    };

    function deletePlay(playName) {
        $("#deletePlayError").hide();

        PlaybookWizardStore.deletePlay(playName).then(function (result) {
            $("#modalContainer").modal('hide');
        });
    }

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/playbook/content/playlist/playlist.component.js":
/*!*************************************************************!*\
  !*** ./app/playbook/content/playlist/playlist.component.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.plays', ['mainApp.playbook.content.playlist.modals.deletePlayModal', 'mainApp.appCommon.services.FilterService']).controller('PlayListController', ["$scope", "$timeout", "$element", "$state", "$stateParams", "$interval", "PlaybookWizardService", "PlaybookWizardStore", "TimestampIntervalUtility", "NumberUtility", "DeletePlayModal", "QueryStore", "FilterService", function ($scope, $timeout, $element, $state, $stateParams, $interval, PlaybookWizardService, PlaybookWizardStore, TimestampIntervalUtility, NumberUtility, DeletePlayModal, QueryStore, FilterService) {

    var vm = this,
        onpage = true,
        checkLaunchState;

    angular.extend(vm, {
        current: PlaybookWizardStore.current,
        inEditing: {},
        TimestampIntervalUtility: TimestampIntervalUtility,
        NumberUtility: NumberUtility,
        lockLaunching: false,
        ceil: window.Math.ceil,
        query: '',
        currentPage: 1,
        header: {
            sort: {
                label: 'Sort By',
                icon: 'numeric',
                order: '-',
                property: 'updated',
                items: [{ label: 'Modified Date', icon: 'numeric', property: 'updated' }, { label: 'Creation Date', icon: 'numeric', property: 'created' }, { label: 'Campaign Name', icon: 'alpha', property: 'displayName' }]
            },
            filter: {
                label: 'Filter By',
                value: {},
                items: [{
                    label: "All",
                    action: {}
                }, {
                    label: "Launched",
                    action: {
                        launchHistory: { mostRecentLaunch: [] }
                    }
                }, {
                    label: "Unlaunched",
                    action: {
                        launchHistory: { mostRecentLaunch: null }
                    }
                }]
            }
        },
        barChartConfig: PlaybookWizardStore.barChartConfig,
        barChartLiftConfig: PlaybookWizardStore.barChartLiftConfig
    });

    vm.sumValuesOfObject = function (object) {
        var sum = 0;
        for (var i = 0; i < Object.values(object).length; i++) {
            sum += Object.values(object)[i];
        }
        return sum;
    };

    vm.customMenuClick = function ($event, play) {

        if ($event != null) {
            $event.stopPropagation();
        }

        var tileState = vm.current.tileStates[play.name];
        tileState.showCustomMenu = !tileState.showCustomMenu;

        if (tileState.showCustomMenu) {
            $(document).bind('click', function (event) {
                var isClickedElementChildOfPopup = $element.find(event.target).length > 0;

                if (isClickedElementChildOfPopup) return;

                $scope.$apply(function () {
                    tileState.showCustomMenu = false;
                    $(document).unbind(event);
                });
            });
        }
    };

    vm.tileClick = function ($event, play) {
        $event.preventDefault();

        var $clickedEl = angular.element($event.target),
            $click = angular.element($event.target).attr('ng-click'),
            $clickFunction = $click ? $click.split('(')[0] : '',
            $sref = angular.element($event.target).attr('ui-sref');

        var launchedStatus = PlaybookWizardStore.getLaunchedStatus(play);
        PlaybookWizardStore.setPlay(play);

        if ($clickFunction !== 'vm.tileClick' && ($click || $sref)) {
            return false;
        }

        $state.go('home.playbook.dashboard', { play_name: play.name });
    };

    var oldPlayDisplayName = '';
    vm.editPlayClick = function ($event, play) {
        $event.stopPropagation();
        vm.inEditing = angular.copy(play);
        var tileState = vm.current.tileStates[play.name];
        tileState.showCustomMenu = !tileState.showCustomMenu;
        tileState.editPlay = !tileState.editPlay;
    };

    vm.nameChanged = function (play) {
        var tileState = vm.current.tileStates[play.name];
        if (play.displayName.length > 0) {
            tileState.saveEnabled = true;
        } else {
            tileState.saveEnabled = false;
        }
    };

    vm.cancelEditPlayClicked = function ($event, play) {
        $event.stopPropagation();

        var tileState = vm.current.tileStates[play.name];
        tileState.editPlay = !tileState.editPlay;
        play.displayName = vm.inEditing.displayName || play.displayName;
        vm.inEditing = {};
    };

    vm.savePlayClicked = function ($event, play) {

        var updatedPlayName = play.displayName;
        var updatedPlay = {
            name: play.name,
            displayName: updatedPlayName //save updated rating name
        };

        vm.saveInProgress = true;
        updatePlay(updatedPlay);
    };

    vm.launchPlay = function ($event, play) {
        vm.lockLaunching = false;
        $event.stopPropagation();

        var tileState = vm.current.tileStates[play.name];
        tileState.launching = !tileState.launching;

        var opts = play.launchHistory.mostRecentLaunch;
        PlaybookWizardStore.launchPlay(play, opts).then(function (data) {
            vm.lockLaunching = false;
        });
    };

    vm.showDeletePlayModalClick = function ($event, play) {

        $event.preventDefault();
        $event.stopPropagation();

        DeletePlayModal.show(play);
    };

    function updatePlay(updatedPlay) {
        PlaybookWizardService.savePlay(updatedPlay).then(function (result) {
            vm.saveInProgress = false;
            vm.current.tileStates[updatedPlay.name].editPlay = false;
            vm.inEditing = {};
        });

        // PlaybookWizardService.savePlay(updatedPlay).then(function(result) {
        //     vm.saveInProgress = true;
        //     $timeout( function(){
        //         $state.go('home.playbook.plays', {}, { reload: true} );
        //     }, 100 );
        // });
    }

    function getLaunchedPlays(plays, unlaunched) {
        var ret = [];

        ret = plays.filter(function (value) {
            if (value.launchHistory) {
                if (unlaunched) {
                    return value.launchHistory.mostRecentLaunch === null;
                } else {
                    return value.launchHistory.mostRecentLaunch !== null;
                }
            }
        });
        return ret;
    }

    vm.getLaunchedPlays = getLaunchedPlays;

    vm.launchButtonLabel = function (play) {
        var label = 'Launch';
        if (vm.current.tileStates[play.name].launching === true) {
            label = 'Launching...';
        }
        if (play.lastTalkingPointPublishTime) {
            label = 'ReLaunch';
        }
        return label;
    };

    vm.init = function ($q) {
        PlaybookWizardStore.clear();

        $scope.$watch('vm.current.plays', function () {
            var filterStore = FilterService.getFilters('playlist.filter');

            vm.header.filter.filtered = filterStore ? filterStore.filtered : vm.current.plays;
            vm.header.filter.unfiltered = vm.current.plays;

            angular.forEach(vm.current.plays, function (play, key) {
                if (!play.ratingEngine) {
                    return false; // there was a terrible failure, do not proceed
                }

                if (play.ratingEngine.type === 'CROSS_SELL' && play.ratingEngine.advancedRatingConfig) {
                    play.ratingEngine.tileClass = play.ratingEngine.advancedRatingConfig.cross_sell.modelingStrategy;
                } else {
                    play.ratingEngine.tileClass = play.ratingEngine.type;
                }

                if (play.ratingEngine.type === 'CROSS_SELL' || play.ratingEngine.type === 'CUSTOM_EVENT') {
                    play.ratingEngine.chartConfig = vm.barChartLiftConfig;
                } else {
                    play.ratingEngine.chartConfig = vm.barChartConfig;
                }

                var newBucketMetadata = [];

                if (play.ratingEngine.bucketMetadata && play.ratingEngine.bucketMetadata.length > 0) {
                    angular.forEach(play.ratingEngine.bucketMetadata, function (rating, key) {
                        rating.lift = (Math.round(rating.lift * 10) / 10).toString();
                        newBucketMetadata.push(rating);
                    });
                }
                play.ratingEngine.newBucketMetadata = newBucketMetadata;
            });
        });
    };

    vm.init();

    $scope.$on('$destroy', function () {
        onpage = false;
        PlaybookWizardStore.cancelCheckLunch();
    });
}]);

/***/ }),

/***/ "./app/playbook/content/playlist/playlist.index.js":
/*!*********************************************************!*\
  !*** ./app/playbook/content/playlist/playlist.index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./modals/deletePlayModal */ "./app/playbook/content/playlist/modals/deletePlayModal.js");

__webpack_require__(/*! ./playlist.component */ "./app/playbook/content/playlist/playlist.component.js");

__webpack_require__(/*! ./tabs/playlisttabs.component */ "./app/playbook/content/playlist/tabs/playlisttabs.component.js");

/***/ }),

/***/ "./app/playbook/content/playlist/tabs/playlisttabs.component.js":
/*!**********************************************************************!*\
  !*** ./app/playbook/content/playlist/tabs/playlisttabs.component.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.playlisttabs', ['mainApp.appCommon.utilities.ResourceUtility']).controller('PlayListTabsController', ["$state", "$filter", "ResourceUtility", "PlaybookWizardStore", function ($state, $filter, ResourceUtility, PlaybookWizardStore) {
    var vm = this;

    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        current: PlaybookWizardStore.current
    });

    vm.count = function (type, current) {
        var filter = current ? { launchHistory: { playLaunch: { launchState: type } } } : { launchHistory: { mostRecentLaunch: { launchState: type } } };

        return ($filter('filter')(vm.current.plays, filter, true) || []).length;
    };

    vm.historyTabIsDisabled = vm.count('Launching') + vm.count('Launched') + vm.count('Failed') === 0;

    // console.log(vm.historyTabIsDisabled);

    vm.clickLaunchHistoryTab = function ($event) {
        $state.go('home.playbook.plays.launchhistory', { reload: true });
    };
}]);

/***/ }),

/***/ "./app/playbook/content/preview/preview.component.js":
/*!***********************************************************!*\
  !*** ./app/playbook/content/preview/preview.component.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.preview', []).controller('PlaybookWizardPreview', ["$state", "$stateParams", "ResourceUtility", "Play", "TalkingPointPreviewResources", "CgTalkingPointStore", function ($state, $stateParams, ResourceUtility, Play, TalkingPointPreviewResources, CgTalkingPointStore) {
    var vm = this;

    angular.extend(vm, {
        play: Play,
        stateParams: $stateParams,
        published: null,
        showPublishingSpinner: false
    });

    vm.init = function () {};

    vm.publish = function () {
        vm.showPublishingSpinner = true;
        CgTalkingPointStore.publishTalkingPoints(vm.play.name).then(function (results) {
            vm.published = results;
            vm.showPublishingSpinner = false;
            $state.go('home.playbook.dashboard', { play_name: vm.play.name });
        });
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/rating/rating.component.js":
/*!*********************************************************!*\
  !*** ./app/playbook/content/rating/rating.component.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.rating', []).controller('PlaybookWizardRating', ["$state", "$stateParams", "$scope", "$filter", "ResourceUtility", "Ratings", "PlaybookWizardStore", "PlaybookWizardService", function ($state, $stateParams, $scope, $filter, ResourceUtility, Ratings, PlaybookWizardStore, PlaybookWizardService) {
    var vm = this;

    angular.extend(vm, {
        stored: PlaybookWizardStore.rating_form,
        ratings: Ratings,
        ratingsCounts: null,
        currentPage: 1,
        pageSize: 10,
        block_user: true,
        scoredAccountsKeys: [],
        scoredAccounts: {}
    });

    $scope.$watch('vm.search', function (newValue, oldValue) {
        if (vm.search || oldValue) {
            vm.currentPage = 1;
            vm.makeScores();
        }
    });

    $scope.$watch('vm.currentPage', function (newValue, oldValue) {
        vm.makeScores();
    });

    if ($stateParams.rating_id) {
        var rating = $filter('filter')(Ratings, { id: $stateParams.rating_id })[0];
        vm.stored.rating_selection = $stateParams.rating_id;
        PlaybookWizardStore.setRating(rating);
        PlaybookWizardStore.setSettings({
            ratingEngine: {
                id: $stateParams.rating_id
            }
        });
    }

    vm.init = function () {
        PlaybookWizardStore.setValidation('rating', false);
        if (vm.stored.rating_selection) {
            PlaybookWizardStore.setValidation('rating', true);
        }
        if ($stateParams.play_name) {
            PlaybookWizardStore.getPlay($stateParams.play_name).then(function (play) {
                vm.block_user = false;
                if (play.ratingEngine) {
                    vm.stored.rating_selection = play.ratingEngine.id;
                    PlaybookWizardStore.setRating(play.ratingEngine);
                    PlaybookWizardStore.setValidation('rating', true);
                }
            });
        } else {
            vm.block_user = false;
        }
    };

    vm.makeScores = _.debounce(makeScores, 250);

    function makeScores() {
        var filteredList = vm.filteredList.slice(vm.pageSize * (vm.currentPage - 1), vm.pageSize * vm.currentPage),
            engines = [];

        filteredList.forEach(function (engine) {
            if (vm.scoredAccountsKeys.indexOf(engine.id) === -1) {
                engines.push(engine.id);
            }
        });
        if (engines.length) {
            var segmentName = PlaybookWizardStore.savedRating && PlaybookWizardStore.savedRating.targetSegment ? PlaybookWizardStore.savedRating.targetSegment.name : '';
            if (!segmentName) {
                segmentName = PlaybookWizardStore.settings && PlaybookWizardStore.settings.targetSegment ? PlaybookWizardStore.settings.targetSegment.name : '';
            }
            if (segmentName) {
                PlaybookWizardService.getRatingSegmentCounts(segmentName, engines, {
                    loadContactsCount: true,
                    loadContactsCountByBucket: true
                }).then(function (result) {
                    for (var i in result.ratingModelsCoverageMap) {
                        var item = result.ratingModelsCoverageMap[i];
                        vm.scoredAccounts[i] = {
                            scoredAccountCount: item.accountCount,
                            unscoredAccountCount: item.unscoredAccountCount
                        };
                        vm.scoredAccountsKeys.push(i);
                    }
                });
            }
        }
    }

    vm.getAccountCount = function (rating) {
        var count = 0;
        if (rating && rating.bucketMetadata) {
            rating.bucketMetadata.forEach(function (bucket) {
                if (bucket.num_leads) {
                    count = count + bucket.num_leads;
                }
            });
        } else {
            return rating.accountsInSegment;
        }
        return count;
    };

    vm.saveRating = function (rating) {
        var _rating = angular.merge({}, PlaybookWizardStore.savedRating, rating);
        PlaybookWizardStore.setRating(_rating);
    };

    vm.searchFields = function (rating) {
        if (vm.search) {
            if (rating.displayName && textSearch(rating.displayName, vm.search)) {
                return true;
            } else {
                return false;
            }
        }

        return true;
    };

    vm.hasAccountCount = function (rating) {
        if (vm.getAccountCount(rating)) {
            return true;
        }
        return false;
    };

    var textSearch = function textSearch(haystack, needle, case_insensitive) {
        var case_insensitive = case_insensitive === false ? false : true;

        if (case_insensitive) {
            var haystack = haystack.toLowerCase(),
                needle = needle.toLowerCase();
        }

        // .indexOf is faster and more supported than .includes
        return haystack.indexOf(needle) >= 0;
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        PlaybookWizardStore.setValidation('rating', form.$valid);
        if (vm.stored.rating_selection) {
            PlaybookWizardStore.setSettings({
                ratingEngine: {
                    id: vm.stored.rating_selection
                }
            });
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/segment/segment.component.js":
/*!***********************************************************!*\
  !*** ./app/playbook/content/segment/segment.component.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.segment', ['mainApp.appCommon.utilities.SegmentsUtility']).controller('PlaybookWizardSegment', ["$scope", "$state", "$stateParams", "ResourceUtility", "PlaybookWizardStore", "SegmentsUtility", "Segments", function ($scope, $state, $stateParams, ResourceUtility, PlaybookWizardStore, SegmentsUtility, Segments) {
    var vm = this;

    angular.extend(vm, {
        stored: PlaybookWizardStore.segment_form,
        SegmentsUtility: SegmentsUtility,
        segments: Segments,
        stateParams: $stateParams,
        currentPage: 1,
        pageSize: 20
    });

    $scope.$watch('vm.search', function (newValue, oldValue) {
        if (vm.search || oldValue) {
            vm.currentPage = 1;
        }
    });

    vm.init = function () {
        PlaybookWizardStore.setValidation('segment', false);
        if ($stateParams.play_name) {
            PlaybookWizardStore.setValidation('settings', true);
            PlaybookWizardStore.getPlay($stateParams.play_name).then(function (play) {
                vm.savedSegment = play.segment;
                vm.stored.segment_selection = play.segment;
                if (play.segment) {
                    PlaybookWizardStore.setValidation('segment', true);
                }
            });
        }
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        PlaybookWizardStore.setValidation('segment', form.$valid);
        if (vm.stored.segment_selection) {
            PlaybookWizardStore.setSettings({
                segment: vm.stored.segment_selection
            });
        }
    };

    vm.saveSegment = function (segment) {
        PlaybookWizardStore.setSegment(segment);
    };

    vm.savePlay = function () {
        var segment = PlaybookWizardStore.getSavedSegment().name,
            play_name = $stateParams.play_name,
            play = PlaybookWizardStore.getCurrentPlay();

        play.segment = segment;
        PlaybookWizardStore.savePlay(play).then(function (result) {
            $state.go('home.playbook.dashboard', { play_name: play.name });
        });
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/segment_create/segment_create.component.js":
/*!*************************************************************************!*\
  !*** ./app/playbook/content/segment_create/segment_create.component.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.segmentcreate', []).controller('PlaybookWizardSegmentCreate', ["$state", "$stateParams", "$scope", "$filter", "ResourceUtility", "Segments", "PlaybookWizardStore", function ($state, $stateParams, $scope, $filter, ResourceUtility, Segments, PlaybookWizardStore) {
    var vm = this;

    angular.extend(vm, {
        stored: PlaybookWizardStore.segment_form,
        segments: Segments,
        currentPage: 1,
        pageSize: 10,
        block_user: true
    });

    $scope.$watch('vm.search', function (newValue, oldValue) {
        if (vm.search || oldValue) {
            vm.currentPage = 1;
        }
    });

    vm.init = function () {
        PlaybookWizardStore.setValidation('segment', false);
        if (vm.stored.segment_selection) {
            PlaybookWizardStore.setValidation('segment', true);
        }

        if ($stateParams.play_name) {
            PlaybookWizardStore.getPlay($stateParams.play_name).then(function (play) {
                vm.block_user = false;
                if (play.ratingEngine) {
                    vm.stored.segment_selection = play.ratingEngine.segmentName;
                    PlaybookWizardStore.setRating(play.ratingEngine);
                    PlaybookWizardStore.setValidation('segment', true);
                }
            });
        } else {
            vm.block_user = false;
        }
    };

    vm.saveSegment = function (segment) {
        PlaybookWizardStore.setRating({
            targetSegment: {
                name: segment.name
            }
        });
    };

    if ($stateParams.segment_name) {
        vm.stored.segment_selection = $stateParams.segment_name;
        PlaybookWizardStore.setRating({
            targetSegment: {
                name: $stateParams.segment_name
            }
        });
        PlaybookWizardStore.setSettings({
            targetSegment: {
                name: $stateParams.segment_name
            }
        });
    }

    function findSegmentByName(segment_name) {
        var segment = Segments.find(function (segment) {
            return segment.name === segment_name;
        });
        return segment;
    }

    vm.searchFields = function (segment) {
        if (vm.search) {
            if (segment.display_name && textSearch(segment.display_name, vm.search)) {
                return true;
            } else {
                return false;
            }
        }

        return true;
    };

    vm.hasAccountCount = function (rating) {
        if (vm.getAccountCount(rating)) {
            return true;
        }
        return false;
    };

    var textSearch = function textSearch(haystack, needle, case_insensitive) {
        var case_insensitive = case_insensitive === false ? false : true;

        if (case_insensitive) {
            var haystack = haystack.toLowerCase(),
                needle = needle.toLowerCase();
        }

        // .indexOf is faster and more supported than .includes
        return haystack.indexOf(needle) >= 0;
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        PlaybookWizardStore.setValidation('segment', form.$valid);
        if (vm.stored.segment_selection) {
            PlaybookWizardStore.setSettings({
                targetSegment: {
                    name: vm.stored.segment_selection
                }
            });
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/settings/settings.component.js":
/*!*************************************************************!*\
  !*** ./app/playbook/content/settings/settings.component.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.settings', []).controller('PlaybookWizardSettings', ["$state", "$stateParams", "$timeout", "ResourceUtility", "PlaybookWizardStore", function ($state, $stateParams, $timeout, ResourceUtility, PlaybookWizardStore) {
    var vm = this;

    angular.extend(vm, {
        stored: PlaybookWizardStore.settings_form
    });

    vm.init = function () {
        if ($stateParams.play_name) {
            PlaybookWizardStore.getPlay($stateParams.play_name).then(function (play) {
                vm.stored.play_name = play.name;
                vm.stored.play_display_name = play.displayName;
                vm.stored.play_description = play.description;
                if (vm.stored.play_name) {
                    PlaybookWizardStore.setValidation('settings', true);
                }
            });
        }
    };

    vm.play_name_required = function () {
        return !vm.stored.play_display_name;
    };

    vm.checkValidDelay = function (form) {
        $timeout(function () {
            vm.checkValid(form);
        }, 1);
    };

    vm.checkValid = function (form) {
        PlaybookWizardStore.setValidation('settings', form.$valid);
        if (vm.stored.play_display_name) {
            PlaybookWizardStore.setSettings({
                displayName: vm.stored.play_display_name,
                description: vm.stored.play_description
            });
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/content/targets/targets.component.js":
/*!***********************************************************!*\
  !*** ./app/playbook/content/targets/targets.component.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook.wizard.targets', []).controller('PlaybookWizardTargets', ["$state", "$stateParams", "ResourceUtility", "PlaybookWizardStore", function ($state, $stateParams, ResourceUtility, PlaybookWizardStore) {
    var vm = this;

    angular.extend(vm, {});

    vm.init = function () {};

    vm.init();
}]);

/***/ }),

/***/ "./app/playbook/playbook.index.js":
/*!****************************************!*\
  !*** ./app/playbook/playbook.index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./content/name/name.component */ "./app/playbook/content/name/name.component.js");

__webpack_require__(/*! ./content/crmselection/crmselection.component */ "./app/playbook/content/crmselection/crmselection.component.js");

__webpack_require__(/*! ./content/dashboard/dashboard.index */ "./app/playbook/content/dashboard/dashboard.index.js");

__webpack_require__(/*! ./content/insights/insights.component */ "./app/playbook/content/insights/insights.component.js");

__webpack_require__(/*! ./content/launch/launch.component */ "./app/playbook/content/launch/launch.component.js");

__webpack_require__(/*! ./content/launchhistory/launchhistory.component */ "./app/playbook/content/launchhistory/launchhistory.component.js");

__webpack_require__(/*! ./content/playlist/playlist.index */ "./app/playbook/content/playlist/playlist.index.js");

__webpack_require__(/*! ./content/preview/preview.component */ "./app/playbook/content/preview/preview.component.js");

__webpack_require__(/*! ./content/rating/rating.component */ "./app/playbook/content/rating/rating.component.js");

__webpack_require__(/*! ./content/segment_create/segment_create.component */ "./app/playbook/content/segment_create/segment_create.component.js");

__webpack_require__(/*! ./content/segment/segment.component */ "./app/playbook/content/segment/segment.component.js");

__webpack_require__(/*! ./content/settings/settings.component */ "./app/playbook/content/settings/settings.component.js");

__webpack_require__(/*! ./content/targets/targets.component */ "./app/playbook/content/targets/targets.component.js");

__webpack_require__(/*! ./content/newlaunch/newlaunch.component */ "./app/playbook/content/newlaunch/newlaunch.component.js");

__webpack_require__(/*! ./playbook.routes */ "./app/playbook/playbook.routes.js");

__webpack_require__(/*! ./playbook.service */ "./app/playbook/playbook.service.js");

/***/ }),

/***/ "./app/playbook/playbook.routes.js":
/*!*****************************************!*\
  !*** ./app/playbook/playbook.routes.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.playbook', ['common.wizard', 'lp.cg.talkingpoint', 'lp.playbook.playlisttabs', 'lp.playbook.plays', 'lp.playbook.dashboard', 'lp.playbook.dashboard.launchhistory', 'lp.playbook.dashboard.sidebar', 'lp.playbook.wizard.settings', 'lp.playbook.wizard.rating', 'lp.playbook.wizard.segmentcreate', 'lp.playbook.wizard.targets', 'lp.playbook.wizard.name', 'lp.playbook.wizard.crmselection', 'lp.playbook.wizard.insights', 'lp.playbook.wizard.preview', 'lp.playbook.wizard.launch', 'lp.playbook.wizard.newlaunch']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.playbook', {
        url: '/playbook',
        onExit: ["FilterService", function onExit(FilterService) {
            FilterService.clear();
        }],
        resolve: {
            Model: function Model() {
                return null;
            },
            IsPmml: function IsPmml() {
                return null;
            },
            HasRatingsAvailable: function HasRatingsAvailable() {
                return null;
            }
        },
        redirectTo: 'home.playbook.plays'
    }).state('home.playbook.plays', {
        url: '/plays',
        views: {
            "summary@": {
                controller: 'PlayListTabsController',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/playlist/tabs/playlisttabs.component.html'
            }
        },
        redirectTo: 'home.playbook.plays.list'
    }).state('home.playbook.plays.list', {
        url: '/list',
        params: {
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook'
        },
        resolve: {
            PlayList: ["$q", "PlaybookWizardStore", function PlayList($q, PlaybookWizardStore) {
                var deferred = $q.defer();

                PlaybookWizardStore.getPlays().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "main@": {
                controller: 'PlayListController',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/playlist/playlist.component.html'
            }
        }
    }).state('home.playbook.plays.launchhistory', {
        url: '/launchhistory',
        resolve: {
            LaunchHistoryData: ["$q", "$stateParams", "PlaybookWizardStore", function LaunchHistoryData($q, $stateParams, PlaybookWizardStore) {
                var deferred = $q.defer(),
                    params = {
                    playName: '',
                    launchStates: 'Launching,Launched,Failed',
                    sortby: 'created',
                    descending: true,
                    offset: 0,
                    max: 10
                };

                PlaybookWizardStore.getPlayLaunches(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            LaunchHistoryCount: ["$q", "$stateParams", "PlaybookWizardStore", function LaunchHistoryCount($q, $stateParams, PlaybookWizardStore) {
                var deferred = $q.defer(),
                    params = {
                    playName: '',
                    launchStates: 'Launching,Launched,Failed',
                    startTimestamp: 0
                };

                PlaybookWizardStore.getPlayLaunchCount(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            FilterData: ["$q", "$timeout", "$stateParams", "PlaybookWizardStore", "LaunchHistoryData", function FilterData($q, $timeout, $stateParams, PlaybookWizardStore, LaunchHistoryData) {

                var deferred = $q.defer(),
                    filterItems = [],
                    launches = LaunchHistoryData,
                    uniqueLookupIdMapping = launches.uniqueLookupIdMapping,
                    allCountQuery = {
                    launchStates: 'Launching,Launched,Failed',
                    offset: 0,
                    startTimestamp: 0,
                    orgId: '',
                    externalSystemType: ''
                };

                PlaybookWizardStore.getPlayLaunchCount(allCountQuery).then(function (result) {
                    filterItems.push({
                        label: "All",
                        action: { destinationOrgId: '' },
                        total: result.toString()
                    });
                });

                $timeout(function () {

                    angular.forEach(uniqueLookupIdMapping, function (value, key) {
                        angular.forEach(value, function (val, index) {

                            var countParams = {
                                playName: $stateParams.play_name,
                                launchStates: 'Launching,Launched,Failed',
                                offset: 0,
                                startTimestamp: 0,
                                orgId: val.orgId,
                                externalSysType: val.externalSystemType
                            };
                            PlaybookWizardStore.getPlayLaunchCount(countParams).then(function (result) {
                                filterItems.push({
                                    label: val.orgName,
                                    data: {
                                        orgName: val.orgName,
                                        externalSystemType: val.externalSystemType,
                                        destinationOrgId: val.orgId
                                    },
                                    action: {
                                        destinationOrgId: val.orgId
                                    },
                                    total: result.toString()
                                });
                            });
                        });
                    });
                }, 250);

                deferred.resolve(filterItems);

                return deferred.promise;
            }]
        },
        views: {
            'main@': {
                controller: 'PlaybookDashboardLaunchHistory',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/launchhistory/launchhistory.component.html'
            }
        }
    }).state('home.playbook.dashboard', {
        url: '/dashboard/:play_name',
        params: {
            pageIcon: 'ico-insights',
            pageTitle: 'Campaign Overview',
            play_name: ''
        },
        onEnter: ['Play', 'BackStore', function (Play, BackStore) {
            BackStore.setBackLabel(Play.displayName);
            BackStore.setBackState('home.playbook');
            BackStore.setHidden(false);

            // var strings = ResourceStringsUtility.getString;
            // var play_name = $stateParams.play_name || '';
            // var segment = Play.segment;
            // var targetsDisabled = Play.ratingEngine ? false : true;

            // console.log('enter playbook.dashboard');
            // SidebarStore.set([{
            //         label: strings('NAVIGATION_SIDEBAR_LP_PLAYBOOK_PLAY_OVERVIEW'),
            //         sref: "home.attributes.activate",
            //         icon: "ico-analysis ico-light-gray"
            //     },{
            //         label: strings('NAVIGATION_SIDEBAR_LP_PLAYBOOK_TARGETS'),
            //         sref: "home.attributes.enable",
            //         icon: "ico-analysis ico-light-gray"
            //     },{
            //         label: strings('NAVIGATION_SIDEBAR_LP_PLAYBOOK_INSIGHTS'),
            //         sref: "home.attributes.enable",
            //         icon: "ico-analysis ico-light-gray"
            //     },{
            //         label: strings('NAVIGATION_SIDEBAR_LP_PLAYBOOK_LAUNCH_HISTORY'),
            //         sref: "home.attributes.enable",
            //         icon: "ico-analysis ico-light-gray"
            //     }
            // ]);
        }],
        resolve: {
            Play: ["$q", "$stateParams", "PlaybookWizardStore", function Play($q, $stateParams, PlaybookWizardStore) {
                var deferred = $q.defer(),
                    playName = $stateParams.play_name;

                PlaybookWizardStore.getPlay(playName, true).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            CampaignTypes: ["$q", "PlaybookWizardStore", function CampaignTypes($q, PlaybookWizardStore) {
                var deferred = $q.defer();

                PlaybookWizardStore.getTypes().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "navigation@home": {
                controller: 'SidebarPlaybookController',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/dashboard/sidebar/sidebar.component.html'
            },
            'main@': {
                controller: 'PlaybookDashboard',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/dashboard/dashboard.component.html'
            },
            'header.back@': 'backNav'
        }
    }).state('home.playbook.dashboard.insights', {
        url: '/insights',
        params: {
            pageIcon: 'ico-scoring',
            pageTitle: 'Insights',
            section: 'dashboard.insights'
        },
        resolve: {
            Entities: function Entities() {
                return ['account', 'recommendation', 'variable'];
            },
            TalkingPoints: ["CgTalkingPointStore", "$stateParams", function TalkingPoints(CgTalkingPointStore, $stateParams) {
                var play_name = $stateParams.play_name || '';
                return CgTalkingPointStore.getTalkingPoints(play_name);
            }],
            TalkingPointAttributes: ["CgTalkingPointStore", "Entities", function TalkingPointAttributes(CgTalkingPointStore, Entities) {
                return CgTalkingPointStore.getAttributes(Entities);
            }],
            TalkingPointPreviewResources: ["CgTalkingPointStore", function TalkingPointPreviewResources(CgTalkingPointStore) {
                return CgTalkingPointStore.getTalkingPointsPreviewResources();
            }],
            loadTinyMce: ["$ocLazyLoad", function loadTinyMce($ocLazyLoad) {
                return $ocLazyLoad.load('lib/js/tinymce/tinymce.min.js');
            }],
            loadUiTinyMce: ["$ocLazyLoad", function loadUiTinyMce($ocLazyLoad) {
                return $ocLazyLoad.load('lib/js/tinymce/uitinymce.min.js');
            }]
        },
        views: {
            'main@': {
                controller: 'PlaybookWizardInsights',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/insights/insights.component.html'
            }
        }
    }).state('home.playbook.dashboard.insights.preview', {
        url: '/preview',
        params: {
            pageIcon: 'ico-scoring',
            pageTitle: 'Insights',
            section: 'dashboard.insights.preview'
        },
        resolve: {
            Play: ["PlaybookWizardStore", "$stateParams", function Play(PlaybookWizardStore, $stateParams) {
                return PlaybookWizardStore.getPlay($stateParams.play_name, true);
            }],
            TalkingPointPreviewResources: ["CgTalkingPointStore", function TalkingPointPreviewResources(CgTalkingPointStore) {
                return CgTalkingPointStore.getTalkingPointsPreviewResources();
            }]
        },
        views: {
            'main@': {
                controller: 'PlaybookWizardPreview',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/preview/preview.component.html'
            }
        }
    }).state('home.playbook.dashboard.segment', {
        url: '/segment',
        params: {
            pageIcon: 'ico-playbook',
            pageTitle: 'Segments',
            section: 'dashboard.segment'
        },
        resolve: {
            Segments: ["SegmentService", function Segments(SegmentService) {
                return SegmentService.GetSegments();
            }]
        },
        views: {
            'main@': {
                controller: 'PlaybookWizardSegment',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/segment/segment.component.html'
            }
        }
    }).state('home.playbook.dashboard.targets', {
        url: '/targets/:segment',
        params: {
            pageIcon: 'ico-targets',
            pageTitle: 'Available Targets',
            section: 'dashboard.targets',
            segment: '',
            play_name: ''
        },
        resolve: {
            Accounts: ['$q', '$stateParams', 'PlaybookWizardService', 'PlaybookWizardStore', function ($q, $stateParams, PlaybookWizardService, PlaybookWizardStore) {
                var deferred = $q.defer();
                deferred.resolve([]);
                return deferred.promise;

                // PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function(data){

                //     var engineId = data.ratingEngine.id,
                //         query = { 
                //             free_form_text_search: '',
                //             restrictNotNullSalesforceId: false,
                //             entityType: 'Account',
                //             bucketFieldName: 'ScoreBucket',
                //             maximum: 10,
                //             offset: 0,
                //             sortBy: 'CompanyName',
                //             descending: false
                //         };

                //     PlaybookWizardService.getTargetData(engineId, query).then(function(data){ 
                //         PlaybookWizardStore.setTargetData(data.data);
                //         deferred.resolve(PlaybookWizardStore.getTargetData());
                //     });

                // });

                // return deferred.promise;
            }],
            NoSFIdsCount: [function () {
                return null;
            }],
            AccountsCoverage: ['$q', '$stateParams', 'PlaybookWizardStore', function ($q, $stateParams, PlaybookWizardStore) {

                var deferred = $q.defer();

                PlaybookWizardStore.getPlay($stateParams.play_name, { noSalesForceId: true }).then(function (data) {
                    var engineId = data.ratingEngine.id,
                        engineIdObject = [{ id: engineId }];

                    PlaybookWizardStore.getRatingsCounts(engineIdObject, true).then(function (data) {
                        var accountCount = data.ratingEngineIdCoverageMap && data.ratingEngineIdCoverageMap[engineId] && data.ratingEngineIdCoverageMap[engineId].accountCount ? data.ratingEngineIdCoverageMap[engineId].accountCount : 0;
                        deferred.resolve(accountCount);
                    });
                });

                return deferred.promise;
            }],
            Config: ['$q', '$stateParams', 'PlaybookWizardStore', function ($q, $stateParams, PlaybookWizardStore) {

                var deferred = $q.defer();

                PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function (play) {
                    var play = play;
                    var config = {
                        play: play,
                        excludeAccountsWithoutSalesforceId: play.excludeAccountsWithoutSalesforceId,
                        excludeContactsWithoutSalesforceId: play.excludeContactsWithoutSalesforceId,
                        header: {
                            class: 'playbook-targets',
                            label: 'Targets'
                        }
                    };
                    deferred.resolve(config);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: 'TargetTabsController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/results/targettabs.component.html'
            }
        },
        redirectTo: 'home.playbook.dashboard.targets.accounts'
    }).state('home.playbook.dashboard.targets.accounts', {
        url: '/accounts',
        params: {
            pageIcon: 'ico-targets',
            pageTitle: 'Available Targets',
            section: 'dashboard.targets',
            currentTargetTab: 'accounts'
        },
        resolve: {
            Contacts: [function () {
                return null;
            }],
            // ContactsCount: [function(){
            //     return null;
            // }],
            Config: [function () {
                return null;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'QueryResultsCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/results/queryresults.component.html'
            }
        }
    }).state('home.playbook.dashboard.targets.contacts', {
        url: '/contacts',
        params: {
            pageIcon: 'ico-targets',
            pageTitle: 'Available Targets',
            section: 'dashboard.targets',
            currentTargetTab: 'contacts'
        },
        resolve: {
            Contacts: ['$q', '$stateParams', 'PlaybookWizardStore', function ($q, $stateParams, PlaybookWizardStore) {

                var deferred = $q.defer();

                PlaybookWizardStore.getPlay($stateParams.play_name).then(function (data) {

                    var engineId = data.ratingEngine.id,
                        query = {
                        free_form_text_search: '',
                        restrictNotNullSalesforceId: false,
                        entityType: 'Contact',
                        bucketFieldName: 'ScoreBucket',
                        maximum: 15,
                        offset: 0,
                        sortBy: 'ContactName',
                        descending: false
                    };

                    PlaybookWizardService.getTargetData(engineId, query).then(function (data) {
                        PlaybookWizardStore.setTargetData(data.data);
                        deferred.resolve(PlaybookWizardStore.getTargetData());
                    });
                });

                return deferred.promise;
            }],
            Accounts: [function () {
                return null;
            }],
            AccountsCoverage: [function () {
                return null;
            }],
            Config: [function () {
                return null;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'QueryResultsCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/results/queryresults.component.html'
            }
        }
    }).state('home.playbook.dashboard.launchhistory', {
        url: '/launchhistory',
        params: {
            pageIcon: 'ico-refine',
            pageTitle: 'Launch History',
            section: 'dashboard.launchhistory'
        },
        resolve: {
            LaunchHistoryData: ["$q", "$stateParams", "PlaybookWizardStore", function LaunchHistoryData($q, $stateParams, PlaybookWizardStore) {
                var deferred = $q.defer(),
                    params = {
                    playName: $stateParams.play_name,
                    launchStates: 'Launching,Launched,Failed',
                    sortBy: 'created',
                    descending: true,
                    offset: 0,
                    max: 10
                };
                PlaybookWizardStore.getPlayLaunches(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            LaunchHistoryCount: ["$q", "$stateParams", "PlaybookWizardStore", function LaunchHistoryCount($q, $stateParams, PlaybookWizardStore) {
                var deferred = $q.defer(),
                    params = {
                    playName: $stateParams.play_name,
                    launchStates: 'Launching,Launched,Failed',
                    startTimestamp: 0
                };

                PlaybookWizardStore.getPlayLaunchCount(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            FilterData: [function () {
                return null;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'PlaybookDashboardLaunchHistory',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/launchhistory/launchhistory.component.html'
            }
        }
    }).state('home.playbook.dashboard.launch_job', {
        url: '/launch/:applicationId/job',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Launch Campaign'
        },
        resolve: {
            BuildProgressConfig: ["$stateParams", function BuildProgressConfig($stateParams) {
                var play_name = $stateParams.play_name || '';
                return {
                    text: {
                        main_title: 'Your campaign is launching',
                        main_title_completed: 'Your campaign is launched',
                        button_goto: 'Go to Campaigns'
                    },
                    button_goto_sref: 'home.playbook',
                    disable_create_button: true,
                    disable_cancel_button: true,
                    disable_steps: true,
                    disable_view_report: true
                };
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'ImportJobController',
                templateUrl: 'app/create/buildprogress/BuildProgressView.html'
            }
        }
    }).state('home.playbook.create', {
        url: '/create/:play_name',
        params: {
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook',
            play_name: ''
        },
        onExit: ["$transition$", "PlaybookWizardStore", function onExit($transition$, PlaybookWizardStore) {
            var to = $transition$._targetState._definition.name;

            if (!to.includes('home.playbook.create')) {
                PlaybookWizardStore.clear();
            }
        }],
        resolve: {
            WizardValidationStore: ["PlaybookWizardStore", function WizardValidationStore(PlaybookWizardStore) {
                return PlaybookWizardStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'playbook.create';
            },
            WizardProgressItems: ["$state", "PlaybookWizardStore", function WizardProgressItems($state, PlaybookWizardStore) {
                return [{
                    label: 'Segment',
                    state: 'segment',
                    nextFn: function nextFn(nextState) {
                        $state.go(nextState); // we don't want to auto save anymore, but go to the next step (it'll be saved in the store)
                    },
                    //PlaybookWizardStore.nextSaveGeneric, 
                    progressDisabled: true
                }, {
                    label: 'Model',
                    state: 'segment.rating',
                    nextFn: function nextFn(nextState) {
                        $state.go(nextState);
                    },
                    progressDisabled: true
                }, {
                    label: 'Name',
                    state: 'segment.rating.name',
                    secondaryLinkValidation: true,
                    secondaryLinkLabel: 'Save & Create Insights',
                    secondaryFn: function secondaryFn() {
                        PlaybookWizardStore.nextSaveAndGoto('home.playbook.dashboard.insights', {
                            include_play_name: true
                        });
                    },
                    lastRoute: true,
                    nextFn: function nextFn() {
                        PlaybookWizardStore.nextSaveAndGoto('home.playbook');
                    },
                    nextLabel: 'Save & Go to Campaign List',
                    progressDisabled: true
                }];
            }],
            WizardControlsOptions: function WizardControlsOptions() {
                return {
                    backState: '',
                    nextState: 'home.playbook',
                    preventUnload: 'home.playbook'
                };
            },
            WizardHeaderTitle: function WizardHeaderTitle() {
                return 'Create Campaign';
            },
            WizardContainerId: function WizardContainerId() {
                return 'playbook';
            }
        },
        views: {
            'summary@': {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'ImportWizard',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/wizard.component.html'
            },
            'wizard_progress@home.playbook.create': {
                resolve: {},
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls@home.playbook.create': {
                resolve: {},
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.playbook.create.segment'
    }).state('home.playbook.create.segment', {
        url: '/segment/:segment_name',
        params: {
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook',
            rating_id: '',
            segment_name: ''
        },
        resolve: {
            // Ratings: function(PlaybookWizardStore) {
            //     return PlaybookWizardStore.getRatings({active: true});
            // },
            Segments: ["SegmentService", function Segments(SegmentService) {
                return SegmentService.GetSegments();
            }]
        },
        views: {
            'wizard_content@home.playbook.create': {
                controller: 'PlaybookWizardSegmentCreate',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/segment_create/segment_create.component.html'
            }
        }
    }).state('home.playbook.create.segment.rating', {
        url: '/rating/',
        params: {
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook',
            rating_id: ''
        },
        resolve: {
            Ratings: ["PlaybookWizardStore", function Ratings(PlaybookWizardStore) {
                return PlaybookWizardStore.getRatings({ active: true });
            }]
        },
        views: {
            'wizard_content@home.playbook.create': {
                controller: 'PlaybookWizardRating',
                controllerAs: 'vm',
                templateUrl: 'app/playbook/content/rating/rating.component.html'
            }
        }
    }).state('home.playbook.create.segment.rating.name', {
        url: '/name',
        params: {
            section: 'wizard.insights',
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook'
        },
        resolve: {
            types: ["$q", "PlaybookWizardStore", function types($q, PlaybookWizardStore) {
                var deferred = $q.defer();

                PlaybookWizardStore.getTypes().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.playbook.create': 'name'
        }
    }).state('home.playbook.launch', {
        url: '/launch/:play_name',
        params: {
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook',
            play_name: '',
            status: 'Launch'
        },
        onEnter: ["$stateParams", "PlaybookWizardStore", function onEnter($stateParams, PlaybookWizardStore) {
            var play = PlaybookWizardStore.getCurrentPlay() || {};
            if (play.name) {
                PlaybookWizardStore.setSettings({
                    name: play.name,
                    createdBy: play.createdBy,
                    ratingEngine: {
                        id: play.ratingEngine.id
                    }
                });
            }
        }],
        onExit: ["$transition$", "PlaybookWizardStore", function onExit($transition$, PlaybookWizardStore) {
            var to = $transition$._targetState._definition.name;

            if (!to.includes('home.playbook.create')) {
                PlaybookWizardStore.clear();
            }
        }],
        resolve: {
            WizardValidationStore: ["PlaybookWizardStore", function WizardValidationStore(PlaybookWizardStore) {
                return PlaybookWizardStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'playbook.launch';
            },
            WizardProgressItems: ["$state", "PlaybookWizardStore", function WizardProgressItems($state, PlaybookWizardStore) {
                return [{
                    label: 'System', // CRM Selection
                    state: 'crmselection',
                    nextFn: function nextFn(nextState) {
                        $state.go(nextState); // we don't want to auto save anymore, but go to the next step (it'll be saved in the store)
                    },
                    progressDisabled: true
                }, {
                    label: 'Suppressions', // Targets
                    state: 'crmselection.targets',
                    nextFn: function nextFn(nextState) {
                        $state.go(nextState);
                    },
                    progressDisabled: true
                }, {
                    label: 'Launch',
                    state: 'crmselection.targets.launch',
                    nextLabel: 'Save & Launch later',
                    nextFn: function nextFn(nextState) {
                        PlaybookWizardStore.nextSaveLaunch(nextState, { saveOnly: true });
                    },
                    progressDisabled: true
                }];
            }],
            WizardControlsOptions: function WizardControlsOptions() {
                return {
                    backState: '', // '' takes you to lastFrom // 'home.playbook', 
                    nextState: 'home.playbook',
                    preventUnload: 'home.playbook'
                };
            },
            WizardHeaderTitle: ["$stateParams", function WizardHeaderTitle($stateParams) {
                return $stateParams.status;
            }],
            WizardContainerId: function WizardContainerId() {
                return 'playbook';
            }
        },
        views: {
            'summary@': {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'ImportWizard',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/wizard.component.html'
            },
            'wizard_progress@home.playbook.launch': {
                resolve: {},
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls@home.playbook.launch': {
                resolve: {},
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.playbook.launch.crmselection'
    }).state('home.playbook.launch.crmselection', {
        url: '/system',
        params: {
            section: 'wizard.insights',
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook'
        },
        resolve: {
            play: ["$q", "$stateParams", "PlaybookWizardStore", function play($q, $stateParams, PlaybookWizardStore) {
                var deferred = $q.defer();

                PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function (play) {
                    PlaybookWizardStore.setRating(play.ratingEngine);
                    deferred.resolve(play);
                });

                return deferred.promise;
            }],
            featureflags: ["$q", "FeatureFlagService", function featureflags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            orgs: ["$q", "SfdcStore", "featureflags", function orgs($q, SfdcStore, featureflags) {
                var deferred = $q.defer();

                SfdcStore.getOrgs().then(function (result) {
                    var orgs = result.CRM || [];

                    if (featureflags.LaunchPlayToMapSystem && result.MAP) {
                        orgs = orgs.concat(result.MAP);
                    }

                    deferred.resolve(orgs);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.playbook.launch': 'crmSelection'
        }
    }).state('home.playbook.launch.crmselection.targets', {
        url: '/suppressions',
        params: {
            section: 'wizard.targets',
            currentTargetTab: 'accounts',
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook'
        },
        resolve: {
            Config: [function () {
                return {
                    header: {
                        class: 'playbook-targets',
                        label: 'Targets'
                    }
                };
            }],
            Accounts: ['$q', '$stateParams', 'PlaybookWizardService', 'PlaybookWizardStore', function ($q, $stateParams, PlaybookWizardService, PlaybookWizardStore) {

                var deferred = $q.defer();

                PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function (play) {

                    var engineId = play.ratingEngine.id,
                        query = {
                        free_form_text_search: '',
                        restrictNotNullSalesforceId: false,
                        entityType: 'Account',
                        bucketFieldName: 'ScoreBucket',
                        maximum: 10,
                        offset: 0,
                        sortBy: 'CompanyName',
                        descending: false
                    };

                    PlaybookWizardService.getTargetData(engineId, query).then(function (data) {
                        PlaybookWizardStore.setTargetData(data.data);
                        deferred.resolve(PlaybookWizardStore.getTargetData());
                    });
                });

                return deferred.promise;
            }],
            //
            //
            //
            // Keep this commented out code for future use with the "Exclude accounts without SalesForce ID checkbox"
            //
            //
            //
            // NoSFIdsCount: ['$q', '$stateParams', 'PlaybookWizardService', 'PlaybookWizardStore', function($q, $stateParams, PlaybookWizardService, PlaybookWizardStore) {

            //     var deferred = $q.defer();

            //     PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function(data){

            //         var engineId = data.ratingEngine.id,
            //             query = {
            //                 free_form_text_search: '',
            //                 restrictNotNullSalesforceId: true,
            //                 entityType: 'Account',
            //                 bucketFieldName: 'ScoreBucket',
            //                 maximum: 1000000,
            //                 offset: 0,
            //                 sortBy: 'CompanyName',
            //                 descending: false
            //             };

            //         PlaybookWizardService.getTargetData(engineId, query).then(function(data){ 
            //             deferred.resolve(data.data.length);
            //         });

            //     });

            //     return deferred.promise;

            // }],
            NoSFIdsCount: [function () {
                return null;
            }],
            AccountsCoverage: ['$q', '$stateParams', 'PlaybookWizardStore', 'PlaybookWizardService', function ($q, $stateParams, PlaybookWizardStore, PlaybookWizardService) {

                var deferred = $q.defer();

                PlaybookWizardStore.getPlay($stateParams.play_name, true).then(function (data) {

                    var engineId = data.ratingEngine.id,
                        engineIdObject = [{ id: engineId }],
                        getExcludeItems = PlaybookWizardStore.getExcludeItems(),
                        getSegmentsOpts = {
                        loadContactsCount: true,
                        loadContactsCountByBucket: true
                    };

                    if (getExcludeItems) {
                        getSegmentsOpts.lookupId = PlaybookWizardStore.getDestinationAccountId();
                        getSegmentsOpts.restrictNullLookupId = true;
                    }

                    var segmentName = PlaybookWizardStore.getCurrentPlay().targetSegment.name;
                    PlaybookWizardService.getRatingSegmentCounts(segmentName, [engineId], getSegmentsOpts).then(function (result) {
                        var accountsCoverage = result.ratingModelsCoverageMap[Object.keys(result.ratingModelsCoverageMap)[0]];
                        deferred.resolve(accountsCoverage);
                    });

                    // PlaybookWizardStore.getRatingsCounts(engineIdObject).then(function(data){
                    //     var accountsCoverage = (data.ratingEngineIdCoverageMap && data.ratingEngineIdCoverageMap[engineId] ? data.ratingEngineIdCoverageMap[engineId] : null);
                    //     console.log(accountsCoverage);
                    //     deferred.resolve(accountsCoverage);
                    // });
                });

                return deferred.promise;
            }],
            Contacts: [function () {
                return null;
            }]
        },
        views: {
            "wizard_content@home.playbook.launch": {
                controller: 'QueryResultsCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/results/queryresults.component.html'
            }
        }
    }).state('home.playbook.launch.crmselection.targets.launch', {
        url: '/launch',
        params: {
            section: 'wizard.insights',
            pageIcon: 'ico-playbook',
            pageTitle: 'Campaign Playbook'
        },
        resolve: {},
        views: {
            'wizard_content@home.playbook.launch': 'newlaunch'
        }
    });
    // .state('home.playbook.create.rating.crmselection.targets.insights', {
    //     url: '/insights',
    //     params: {
    //         section: 'wizard.insights',
    //         pageIcon: 'ico-playbook',
    //         pageTitle: 'Playbook'
    //     },
    //     resolve: {
    //         Entities : function(){
    //             return ['account','recommendation','variable'];
    //         },
    //         TalkingPoints: function(CgTalkingPointStore, $stateParams) {
    //             var play_name = $stateParams.play_name || '';
    //             return CgTalkingPointStore.getTalkingPoints(play_name);
    //         },
    //         TalkingPointAttributes: function (CgTalkingPointStore, Entities) {
    //             return CgTalkingPointStore.getAttributes(Entities);
    //         },
    //         TalkingPointPreviewResources: function(CgTalkingPointStore) {
    //             return CgTalkingPointStore.getTalkingPointsPreviewResources();
    //         },
    //         loadTinyMce: function($ocLazyLoad) {
    //             return $ocLazyLoad.load('lib/js/tinymce/tinymce.min.js');
    //         },
    //         loadUiTinyMce: function($ocLazyLoad) {
    //             return $ocLazyLoad.load('lib/js/tinymce/uitinymce.min.js');
    //         }
    //     },
    //     views: {
    //         'wizard_content@home.playbook.create': {
    //             controller: 'PlaybookWizardInsights',
    //             controllerAs: 'vm',
    //             templateUrl: 'app/playbook/content/insights/insights.component.html'
    //         }
    //     }
    // })
    // .state('home.playbook.create.rating.crmselection.targets.insights.preview', {
    //     url: '/preview',
    //     params: {
    //         pageIcon: 'ico-playbook',
    //         pageTitle: 'Playbook'
    //     },
    //     resolve: {
    //         Play: function(PlaybookWizardStore) {
    //             return PlaybookWizardStore.getCurrentPlay();
    //         },
    //         TalkingPointPreviewResources: function(CgTalkingPointStore) {
    //             return CgTalkingPointStore.getTalkingPointsPreviewResources();
    //         }
    //     },
    //     views: {
    //         'wizard_content@home.playbook.create': {
    //             controller: 'PlaybookWizardPreview',
    //             controllerAs: 'vm',
    //             templateUrl: 'app/playbook/content/preview/preview.component.html'
    //         }
    //     }
    // })
    // .state('home.playbook.create.rating.crmselection.targets.insights.preview.launch', {
    //     url: '/launch',
    //     views: {
    //         'wizard_content@home.playbook.create': {
    //             templateUrl: 'app/playbook/content/launch/launch.component.html'
    //         }
    //     }
    // })
}]);

/***/ }),

/***/ "./app/playbook/playbook.service.js":
/*!******************************************!*\
  !*** ./app/playbook/playbook.service.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

angular.module('lp.playbook').service('PlaybookWizardStore', ["$q", "$state", "$stateParams", "$interval", "PlaybookWizardService", "CgTalkingPointStore", "BrowserStorageUtility", "RatingsEngineStore", function ($q, $state, $stateParams, $interval, PlaybookWizardService, CgTalkingPointStore, BrowserStorageUtility, RatingsEngineStore) {
    var PlaybookWizardStore = this;

    this.current = {
        plays: [],
        tileStates: {}

    };
    this.checkLaunchState = {};
    this.savedRating = null;

    // Play Launch Data
    this.bucketsToLaunch = null;
    this.topNCount = null;
    this.selectedBucket = 'A';
    this.destinationOrgId = null;
    this.destinationSysType = null;
    this.destinationAccountId = null;
    this.excludeItems = false;

    this.init = function () {
        var _validation;

        this.settings = {};
        this.launch = {};
        this.savedSegment = null;
        this.currentPlay = this.currentPlay || null;
        this.playLaunches = null;
        this.savedTalkingPoints = null;
        this.targetData = null;
        this.types = null;
        this.recommendationCounts = null;

        this.settings_form = {
            play_display_name: '',
            play_description: ''
        };

        this.segment_form = {
            segment_selection: ''
        };

        this.crmselection_form = {
            crm_selection: ''
        };

        this.rating_form = {
            rating_selection: ''
        };

        this.validation = (_validation = {
            name: false,
            settings: false,
            segment: true,
            rating: true,
            targets: false
        }, _defineProperty(_validation, 'name', true), _defineProperty(_validation, 'crmselection', false), _defineProperty(_validation, 'insights', false), _defineProperty(_validation, 'preview', true), _defineProperty(_validation, 'launch', true), _defineProperty(_validation, 'newlaunch', true), _validation);

        this.barChartConfig = {
            'data': {
                'tosort': true,
                'sortBy': 'bucket_name',
                'trim': true,
                'top': 6
            },
            'chart': {
                'header': 'Value',
                'emptymsg': '',
                'usecolor': true,
                'color': '#e8e8e8',
                'mousehover': false,
                'type': 'integer',
                'showstatcount': false,
                'maxVLines': 3,
                'showVLines': false
            },
            'vlines': {
                'suffix': ''
            },
            'columns': [{
                'field': 'num_leads',
                'label': 'Records',
                'type': 'number',
                'chart': true
            }]
        };

        this.barChartLiftConfig = {
            'data': {
                'tosort': true,
                'sortBy': 'bucket_name',
                'trim': true,
                'top': 6
            },
            'chart': {
                'header': 'Value',
                'emptymsg': '',
                'usecolor': true,
                'color': '#e8e8e8',
                'mousehover': false,
                'type': 'decimal',
                'showstatcount': false,
                'maxVLines': 3,
                'showVLines': true
            },
            'vlines': {
                'suffix': 'x'
            },
            'columns': [{
                'field': 'lift',
                'label': 'Lift',
                'type': 'string',
                'suffix': 'x',
                'chart': true
            }]
        };
    };

    this.init();

    this.clear = function () {
        this.init();
        this.currentPlay = null;
        CgTalkingPointStore.clear();
    };

    this.getPlays = function (cacheOnly) {
        var deferred = $q.defer();

        if (this.current.plays.length > 0) {
            deferred.resolve(this.current.plays);

            if (cacheOnly) {
                return this.current;
            }
        }

        PlaybookWizardService.getPlays().then(function (result) {
            PlaybookWizardStore.setPlays(result);
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.setPlays = function (plays) {
        this.current.plays = plays;
        PlaybookWizardStore.current.tileStates = {};
        angular.forEach(plays, function (play) {
            var name = play.name;
            PlaybookWizardStore.current.tileStates[name] = {
                showCustomMenu: false,
                editRating: false,
                saveEnabled: false
            };

            if (play.launchHistory && play.launchHistory.mostRecentLaunch != null && play.launchHistory.mostRecentLaunch.launchState === 'Launching') {
                PlaybookWizardStore.current.tileStates[play.name].launching = true;
                PlaybookWizardStore.checkLaunchStateInterval(play);
            }

            if (play.segment != null) {
                play.hasSegment = true;
            };
        });
    };

    this.checkLaunchStateInterval = function (play) {
        PlaybookWizardStore.checkLaunchState[play.name] = $interval(function () {

            var params = {
                playName: play.name,
                offset: 0
            };

            PlaybookWizardStore.getPlayLaunches(params).then(function (result) {
                if (result.errorCode) {
                    $interval.cancel(PlaybookWizardStore.checkLaunchState[play.name]);
                } else if (result && result[0]) {
                    if (result[0].launchState === 'Launched' || result[0].launchState === 'Failed') {
                        $interval.cancel(PlaybookWizardStore.checkLaunchState[play.name]);
                        play.launchHistory.mostRecentLaunch.launchState = result[0].launchState;
                        PlaybookWizardStore.current.tileStates[play.name].launching == false;
                    }
                }
            });
        }, 10 * 1000);
    };

    this.cancelCheckLunch = function () {
        for (var i in PlaybookWizardStore.checkLaunchState) {
            $interval.cancel(PlaybookWizardStore.checkLaunchState[i]);
        }
        PlaybookWizardStore.checkLaunchState = {};
    };

    this.setSettings = function (obj) {
        var obj = obj || {};
        for (var i in obj) {
            var key = i,
                value = obj[i];
            this.settings[key] = value;
        }
    };

    this.nextSaveGeneric = function (nextState) {
        var opts = PlaybookWizardStore.settings,
            changed = false;

        if (PlaybookWizardStore.currentPlay && PlaybookWizardStore.currentPlay.name) {
            opts.name = PlaybookWizardStore.currentPlay.name;
        }

        if (PlaybookWizardStore.settings) {
            if (PlaybookWizardStore.currentPlay) {
                for (var i in PlaybookWizardStore.settings) {
                    var key = i,
                        setting = PlaybookWizardStore.settings[i];

                    if (PlaybookWizardStore.currentPlay[key] != setting) {
                        changed = true;
                        break;
                    }
                }
            } else {
                changed = true;
            }
            if (changed) {

                if (opts.ratingEngine) {
                    RatingsEngineStore.getRating(opts.ratingEngine.id).then(function (result) {
                        PlaybookWizardStore.setRating(result);
                    });
                } else {
                    var ratingEngine = PlaybookWizardStore.getSavedRating();
                    opts.ratingEngine = ratingEngine;
                }

                PlaybookWizardStore.savePlay(opts).then(function (play) {
                    $state.go(nextState, { play_name: play.name });
                });
            } else {
                $state.go(nextState, { play_name: PlaybookWizardStore.currentPlay.name });
            }
        }
    };

    this.nextSaveAndGoto = function (nextState) {
        var opts = PlaybookWizardStore.settings,
            changed = false;

        if (PlaybookWizardStore.currentPlay && PlaybookWizardStore.currentPlay.name) {
            opts.name = PlaybookWizardStore.currentPlay.name;
        }

        if (PlaybookWizardStore.settings) {
            if (PlaybookWizardStore.currentPlay) {
                for (var i in PlaybookWizardStore.settings) {
                    var key = i,
                        setting = PlaybookWizardStore.settings[i];

                    if (PlaybookWizardStore.currentPlay[key] != setting) {
                        changed = true;
                        break;
                    }
                }
            } else {
                changed = true;
            }
            if (changed) {
                PlaybookWizardStore.savePlay(opts).then(function (play) {
                    if (play && (typeof play === 'undefined' ? 'undefined' : _typeof(play)) === 'object' && play.name) {
                        if (['home.playbook.dashboard'].indexOf(nextState) > -1) {
                            $state.go(nextState);
                        } else {
                            $state.go(nextState, { play_name: play.name });
                        }
                    }
                });
            }
        }
    };

    this.nextSaveLaunch = function (nextState, opts) {
        var opts = opts || {},
            play = opts.play || PlaybookWizardStore.settings,
            launchObj = opts.launchObj || {
            bucketsToLaunch: PlaybookWizardStore.getBucketsToLaunch(),
            destinationOrgId: PlaybookWizardStore.getDestinationOrgId(),
            destinationSysType: PlaybookWizardStore.getDestinationSysType(),
            destinationAccountId: PlaybookWizardStore.getDestinationAccountId(),
            topNCount: PlaybookWizardStore.getTopNCount()
        },
            saveOnly = opts.saveOnly || false,
            lastIncompleteLaunchId = PlaybookWizardStore.currentPlay.launchHistory.lastIncompleteLaunch ? PlaybookWizardStore.currentPlay.launchHistory.lastIncompleteLaunch.launchId : '',
            lastIncompleteLaunch = opts.lastIncompleteLaunch || null;

        if (play) {
            if (play.ratingEngine) {
                RatingsEngineStore.getRating(play.ratingEngine.id).then(function (result) {
                    PlaybookWizardStore.setRating(result);
                });
            } else {
                var ratingEngine = PlaybookWizardStore.getSavedRating();
                play.ratingEngine = ratingEngine;
            }
            // launch saved play
            if (lastIncompleteLaunch) {
                PlaybookWizardService.saveLaunch(PlaybookWizardStore.currentPlay.name, {
                    launch_id: lastIncompleteLaunch.launchId,
                    launchObj: Object.assign({}, lastIncompleteLaunch, launchObj)
                }).then(function (launch) {
                    PlaybookWizardService.saveLaunch(PlaybookWizardStore.currentPlay.name, {
                        launch_id: lastIncompleteLaunch.launchId,
                        action: 'launch'
                    }).then(function (saved) {
                        $state.go('home.playbook.dashboard.launch_job', { play_name: play.name, applicationId: saved.applicationId });
                    });
                });
            } else if (lastIncompleteLaunchId) {
                // save play
                PlaybookWizardStore.savePlay(play).then(function (play) {
                    // save launch
                    PlaybookWizardService.saveLaunch(PlaybookWizardStore.currentPlay.name, {
                        launch_id: lastIncompleteLaunchId,
                        launchObj: Object.assign({}, PlaybookWizardStore.currentPlay.launchHistory.lastIncompleteLaunch, launchObj)
                    }).then(function (saved) {
                        if (!saveOnly) {
                            // launch
                            PlaybookWizardService.saveLaunch(play.name, {
                                launch_id: lastIncompleteLaunchId,
                                action: 'launch'
                            }).then(function (launch) {
                                // after launch
                                $state.go('home.playbook.dashboard.launch_job', { play_name: play.name, applicationId: saved.applicationId });
                            });
                        } else {
                            // saved but not launched
                            $state.go('home.playbook');
                        }
                    });
                });
            } else {
                // save play
                PlaybookWizardStore.savePlay(play).then(function (play) {
                    // get launchid
                    PlaybookWizardService.saveLaunch(play.name, {
                        launchObj: launchObj
                    }).then(function (launch) {
                        var launch = launch || {};
                        // save launch
                        if (launch && !saveOnly) {
                            PlaybookWizardService.saveLaunch(PlaybookWizardStore.currentPlay.name, {
                                launch_id: launch.id,
                                action: 'launch'
                            }).then(function (saved) {
                                // after launch
                                $state.go('home.playbook.dashboard.launch_job', { play_name: play.name, applicationId: saved.applicationId });
                            });
                        } else {
                            // saved but not launched
                            $state.go('home.playbook');
                        }
                    });
                });
            }
        }
    };

    // this.nextSaveInsight = function(nextState) {
    //     if(PlaybookWizardStore.savedTalkingPoints && PlaybookWizardStore.savedTalkingPoints.length) {
    //         CgTalkingPointStore.saveTalkingPoints(PlaybookWizardStore.savedTalkingPoints).then(function(){
    //             $state.go(nextState, {play_name: PlaybookWizardStore.currentPlay.name});
    //         });
    //     } else {
    //         $state.go(nextState, {play_name: PlaybookWizardStore.currentPlay.name});
    //     }
    // }

    // *OLD*
    this.nextLaunch = function () {

        var play = PlaybookWizardStore.currentPlay,
            opts = {
            bucketsToLaunch: PlaybookWizardStore.getBucketsToLaunch(),
            topNCount: PlaybookWizardStore.getTopNCount(),
            destinationOrgId: PlaybookWizardStore.getDestinationOrgId(),
            destinationSysType: PlaybookWizardStore.getDestinationSysType(),
            destinationAccountId: PlaybookWizardStore.getDestinationAccountId(),
            excludeItems: PlaybookWizardStore.getExcludeItems()
        };

        PlaybookWizardStore.launchPlay(play, opts).then(function (data) {
            $state.go('home.playbook.dashboard.launch_job', { play_name: play.name, applicationId: data.applicationId });
        });
    };

    this.setTalkingPoints = function (talkingPoints) {
        this.savedTalkingPoints = talkingPoints;
    };

    this.getTalkingPoints = function () {
        return this.savedTalkingPoints;
    };

    this.getRatings = function (active) {
        var deferred = $q.defer();
        PlaybookWizardService.getRatings(active).then(function (data) {
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    this.getRatingsCounts = function (Ratings, noSalesForceId) {
        var deferred = $q.defer(),
            ratings_ids = [],
            noSalesForceId = noSalesForceId || false;
        if (Ratings && (typeof Ratings === 'undefined' ? 'undefined' : _typeof(Ratings)) === 'object') {
            Ratings.forEach(function (value, key) {
                ratings_ids.push(value.id);
            });
            PlaybookWizardService.getRatingsCounts(ratings_ids, noSalesForceId).then(function (data) {
                deferred.resolve(data);
            });
        }
        return deferred.promise;
    };

    this.setRating = function (rating) {
        this.savedRating = rating;
    };

    this.saveRating = function (rating, play_name) {
        if (rating) {
            this.getPlay(play_name).then(function (play) {
                PlaybookWizardStore.savePlay({
                    displayName: play.displayName,
                    name: play.name,
                    ratingEngine: rating,
                    launchHistory: {
                        playLaunch: {
                            bucketsToLaunch: bucketsToLaunch
                        }
                    }
                }).then(function (response) {
                    PlaybookWizardStore.setSegment(segment);
                });
            });
        }
    };

    this.getSavedRating = function () {
        return this.savedRating;
    };

    this.setSegment = function (segment) {
        this.savedSegment = segment;
    };

    this.saveSegment = function (segment, play_name) {
        if (segment) {
            this.getPlay(play_name).then(function (play) {
                PlaybookWizardStore.savePlay({
                    displayName: play.displayName,
                    name: play.name,
                    segment: segment.name
                }).then(function (response) {
                    PlaybookWizardStore.setSegment(segment);
                });
            });
        }
    };

    this.getSavedSegment = function () {
        return this.savedSegment;
    };

    this.getValidation = function (type) {
        return this.validation[type];
    };

    this.setValidation = function (type, value) {
        this.validation[type] = value;
    };

    this.setTopNCount = function (limit) {
        this.topNCount = limit;
    };

    this.getTopNCount = function () {
        return this.topNCount;
    };

    this.setBucketsToLaunch = function (buckets) {
        this.bucketsToLaunch = buckets;
    };

    this.getBucketsToLaunch = function () {
        return this.bucketsToLaunch;
    };

    this.setDestinationOrgId = function (destinationOrgId) {
        this.destinationOrgId = destinationOrgId;
    };
    this.getDestinationOrgId = function () {
        return this.destinationOrgId;
    };

    this.setDestinationSysType = function (destinationSysType) {
        this.destinationSysType = destinationSysType;
    };
    this.getDestinationSysType = function () {
        return this.destinationSysType;
    };

    this.setDestinationAccountId = function (destinationAccountId) {
        this.destinationAccountId = destinationAccountId;
    };
    this.getDestinationAccountId = function () {
        return this.destinationAccountId;
    };

    this.setExcludeItems = function (excludeItems) {
        this.excludeItems = excludeItems;
    };
    this.getExcludeItems = function () {
        return this.excludeItems;
    };

    this.setPlay = function (play) {
        this.currentPlay = play;
        //this.savedSegment = play.segment;
    };

    this.getCurrentPlay = function () {
        return this.currentPlay;
    };

    this.getPlay = function (play_name, nocache) {
        var deferred = $q.defer(),
            play = this.current.plays.filter(function (item) {
            return item.name == play_name;
        });

        if (play && !nocache) {
            deferred.resolve(play);
        } else {
            PlaybookWizardService.getPlay(play_name).then(function (data) {
                PlaybookWizardStore.setPlay(data);
                deferred.resolve(data);
            });
        }
        return deferred.promise;
    };

    this.savePlay = function (opts) {
        var deferred = $q.defer();
        var ClientSession = BrowserStorageUtility.getClientSession();
        opts.createdBy = opts.createdBy || ClientSession.EmailAddress;
        opts.updatedBy = ClientSession.EmailAddress;

        PlaybookWizardService.savePlay(opts).then(function (data) {
            PlaybookWizardStore.setPlay(data);
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    this.deletePlay = function (playName) {
        var deferred = $q.defer();

        PlaybookWizardService.deletePlay(playName).then(function (result) {
            deferred.resolve(result);
            if (result === true) {
                PlaybookWizardStore.setPlays(PlaybookWizardStore.current.plays.filter(function (play) {
                    return play.name != playName;
                }));
            }
        });

        return deferred.promise;
    };

    this.hasRules = function (play) {
        try {
            if (Object.keys(play.coverage).length) {
                return true;
            } else {
                return false;
            }
        } catch (err) {
            return false;
        }
    };

    this.getPlayLaunches = function (params, where) {
        var deferred = $q.defer();
        if (this.playLaunches) {
            return this.playLaunches;
        } else {
            var params = {
                playName: params.playName,
                launchStates: params.launchStates ? params.launchStates : '',
                sortby: params.sortby,
                descending: params.descending,
                startTimestamp: 0,
                offset: params.offset || 0,
                max: params.max || 10,
                orgId: params.orgId,
                externalSysType: params.externalSysType
            };
            PlaybookWizardService.playLaunches(params).then(function (data) {
                deferred.resolve(data);
            });
            return deferred.promise;
        }
    };

    this.getPlayLaunchCount = function (params, where) {
        var deferred = $q.defer(),
            params = {
            playName: params.playName,
            launchStates: params.launchStates ? params.launchStates : '',
            startTimestamp: params.startTimestamp || 0,
            offset: params.offset || 0,
            orgId: params.orgId || '',
            externalSysType: params.externalSysType || ''
        };
        PlaybookWizardService.getPlayLaunchCount(params).then(function (data) {
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    this.launchPlay = function (play, opts) {
        var deferred = $q.defer();
        PlaybookWizardService.launchPlay(play, opts).then(function (data) {
            deferred.resolve(data);
            PlaybookWizardStore.setPlay(data);
        });
        return deferred.promise;
    };

    this.removeSegment = function (play) {
        play.segment = '';
        var deferred = $q.defer();
        PlaybookWizardService.savePlay(play).then(function (data) {
            deferred.resolve(data);
            PlaybookWizardStore.setPlay(data);
        });
        return deferred.promise;
    };

    this.launchButton = function (play, launchedState) {
        var launchButton = {},
            launchButtonStates = {
            initial: {
                label: 'Launch',
                state: ''
            },
            Launching: {
                label: 'Launching'
            },
            Launched: {
                label: 'Relaunch'
            }
        },
            state = play.launchHistory && play.launchHistory.mostRecentLaunch && play.launchHistory.mostRecentLaunch.launchState ? play.launchHistory.mostRecentLaunch.launchState : null;

        launchButton.state = launchedState || state;

        if (launchedState !== 'Failed' && state && launchButtonStates[state]) {
            launchButton.label = launchButtonStates[state].label;
        } else {
            if ((state === 'Failed' || launchedState === 'Failed') && play.launchHistory.playLaunch) {
                launchButton.label = launchButtonStates.Launched.label;
            } else {
                launchButton.label = launchButtonStates.initial.label;
            }
        }

        return launchButton;
    };

    this.getLaunchedStatus = function (play) {
        var launchedState = play.launchHistory && play.launchHistory.playLaunch && play.launchHistory.playLaunch.launchState ? play.launchHistory.playLaunch.launchState : null,
            hasLaunched = launchedState === 'Launched' ? true : false,
            hasLaunchHistory = play.launchHistory.mostRecentLaunch || play.launchHistory.lastCompletedLaunch || play.launchHistory.lastIncompleteLaunch ? true : false;
        return {
            hasLaunchHistory: hasLaunchHistory,
            launchedState: launchedState,
            hasLaunched: hasLaunched
        };
    };

    this.setTargetData = function (targetData) {
        this.targetData = targetData;
    };
    this.getTargetData = function () {
        return this.targetData;
    };

    this.setTalkingPoints = function (talkingPoints) {
        this.savedTalkingPoints = talkingPoints;
    };

    this.getTalkingPoints = function () {
        return this.savedTalkingPoints;
    };

    this.setTypes = function (types) {
        this.types = types;
    };

    this.getTypes = function (params) {
        var deferred = $q.defer();

        PlaybookWizardService.getTypes().then(function (data) {
            PlaybookWizardStore.setTypes(data);
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    this.setRecommendationCounts = function (recommendationCounts) {
        this.recommendationCounts = recommendationCounts;
    };

    this.getRecommendationCounts = function () {
        return this.recommendationCounts;
    };
}]).service('PlaybookWizardService', ["$q", "$http", "$state", "$timeout", function ($q, $http, $state, $timeout) {
    this.host = '/pls'; //default

    this.getPlays = function () {
        var deferred = $q.defer(),
            result,
            url = '/pls/play' + '?shouldLoadCoverage=true';
        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.deletePlay = function (playName) {
        var deferred = $q.defer(),
            result,
            url = '/pls/play/' + playName;
        $http({
            method: 'DELETE',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.setHost = function (value) {
        this.host = value;
    };

    this.getPlay = function (play_name) {
        var deferred = $q.defer(),
            play_name_url = play_name ? '/' + play_name : '';
        $http({
            method: 'GET',
            url: this.host + '/play' + play_name_url
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.savePlay = function (opts) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: this.host + '/play',
            data: opts
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.saveLaunch = function (play_name, opts) {
        var deferred = $q.defer(),
            opts = opts || {},
            launch_id = opts.launch_id || '',
            action = opts.action || '',
            launchObj = opts.launchObj || '';

        $http({
            method: 'POST',
            url: this.host + '/play/' + play_name + '/launches' + (launch_id ? '/' + launch_id : '') + (action ? '/' + action : ''),
            data: launchObj
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getPlayLaunchCount = function (params) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/play/launches/dashboard/count',
            params: params
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    var canceler = $q.defer();

    this.playLaunches = function (params) {

        canceler.resolve("cancelled");
        canceler = $q.defer();

        $http({
            method: 'GET',
            url: this.host + '/play/launches/dashboard/',
            params: params
        }).then(function onSuccess(response) {
            var result = response.data;
            canceler.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            canceler.reject(errorMsg);
        });
        return canceler.promise;
    };

    this.launchPlay = function (play, opts) {

        var deferred = $q.defer(),
            play_name = play.name,
            bucketsToLaunch = opts.bucketsToLaunch,
            topNCount = opts.topNCount,
            destinationOrgId = opts.destinationOrgId,
            destinationSysType = opts.destinationSysType,
            destinationAccountId = opts.destinationAccountId,
            excludeItems = opts.excludeItems;

        $http({
            method: 'POST',
            url: this.host + '/play/' + play_name + '/launches',
            data: {
                launch_state: 'Launching',
                bucketsToLaunch: bucketsToLaunch,
                topNCount: topNCount,
                destinationOrgId: destinationOrgId,
                destinationSysType: destinationSysType,
                destinationAccountId: destinationAccountId,
                excludeItemsWithoutSalesforceId: excludeItems
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getRatings = function (opts) {
        var deferred = $q.defer(),
            opts = opts;

        $http({
            method: 'GET',
            params: {
                type: opts.type || null, //'RULE_BASED'
                status: opts.active ? 'ACTIVE' : '',
                'publishedratingsonly': 'true'
            },
            url: this.host + '/ratingengines',
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getRatingsCounts = function (ratings, noSalesForceId) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: this.host + '/ratingengines/coverage',
            data: {
                ratingEngineIds: ratings,
                restrictNotNullSalesforceId: noSalesForceId

            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getRatingSegmentCounts = function (segmentName, ratings, opts) {
        var deferred = $q.defer(),
            opts = opts || {};
        $http({
            method: 'POST',
            url: this.host + '/ratingengines/coverage/segment/' + segmentName,
            data: {
                ratingEngineIds: ratings,
                loadContactsCountByBucket: opts.loadContactsCountByBucket,
                loadContactsCount: opts.loadContactsCount,
                lookupId: opts.lookupId,
                restrictNullLookupId: opts.restrictNullLookupId
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getLookupCounts = function (engineId, accountId) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: this.host + '/ratingengines/coverage',
            data: {
                ratingIdLookupColumnPairs: [{
                    responseKeyId: accountId || null,
                    ratingEngineId: engineId || null,
                    lookupColumn: accountId || null
                }]
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getTargetData = function (engineId, query) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/ratingengines/' + engineId + '/entitypreview',
            params: query
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getTargetCount = function (engineId, query) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: this.host + '/ratingengines/' + engineId + '/entitypreview/count',
            params: query
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.getTypes = function (engineId, query) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/playtypes'
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/ratingsengine/content/activatescoring/activatescoring.component.js":
/*!********************************************************************************!*\
  !*** ./app/ratingsengine/content/activatescoring/activatescoring.component.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.activatescoring', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.widgets.ModelDetailsWidget', 'mainApp.models.services.ModelService']).controller('RatingsEngineActivateScoring', ["$scope", "$rootScope", "$state", "$stateParams", "$timeout", "ResourceUtility", "Model", "ModelStore", "ModelRatingsService", "CurrentConfiguration", "RatingsSummary", function ($scope, $rootScope, $state, $stateParams, $timeout, ResourceUtility, Model, ModelStore, ModelRatingsService, CurrentConfiguration, RatingsSummary) {

    var vm = this;
    angular.extend(vm, {
        stateParams: $stateParams,
        modelId: $stateParams.modelId,
        tenantName: $stateParams.tenantName,
        model: Model,
        saveInProgress: false,
        showSaveBucketsError: false,
        updateContent: false,
        ResourceUtility: ResourceUtility,
        currentConfiguration: CurrentConfiguration,
        workingBuckets: CurrentConfiguration,
        ratingsSummary: RatingsSummary,
        bucketNames: ['A+', 'A', 'B', 'C', 'D', 'F'],
        slidersContainer: document.getElementById("sliders"),
        barColors: document.getElementById("barColors"),
        section: $state.params && $state.params.section ? $state.params.section : ''
    });

    vm.init = function () {
        vm.Math = window.Math;

        if (vm.model.EventTableProvenance.SourceSchemaInterpretation === "SalesforceLead") {
            vm.modelType = "Leads";
        } else {
            vm.modelType = "Accounts";
        };

        vm.chartNotUpdated = true;

        renderChart();
    };

    function renderChart() {
        var verticalAxis = document.getElementById("verticalAxis");

        // Get tallest bar in set
        vm.largestLiftInSet = Math.max.apply(null, vm.ratingsSummary.bar_lifts);

        // Set height of chart components based off tallest bar
        vm.relativeHeightOfTallest = Math.round(12 * vm.largestLiftInSet + 10);
        if (vm.relativeHeightOfTallest < 150) {
            vm.chartContainerHeight = Math.round(25 * vm.largestLiftInSet + 10);
            vm.barMultiplier = 25;
        } else {
            vm.chartContainerHeight = Math.round(15 * vm.largestLiftInSet + 10);
            vm.barMultiplier = 15;
        }

        // Define height of dugout
        vm.dugoutHeight = vm.chartContainerHeight - 8;

        // Create vertical axis based on maxLift
        vm.yAxisNumber = Math.round(vm.largestLiftInSet);
        if (vm.yAxisNumber >= 3 && vm.yAxisNumber <= 10) {
            verticalAxis.classList.add('reduceSmall');
        } else if (vm.yAxisNumber > 10) {
            verticalAxis.classList.add('reduceBig');
        }

        vm.getNumber = function (num) {
            if (!Number.isNaN(num)) {
                return new Array(num);
            }
        };
        vm.axisItemHeight = vm.chartContainerHeight / vm.yAxisNumber;

        refreshChartData();
    }

    function refreshChartData() {
        vm.buckets = vm.workingBuckets;
        vm.updateContent = false;

        if (vm.buckets.length === 6) {
            vm.bucketNames = ['A+', 'A', 'B', 'C', 'D', 'F'];
            vm.canAddBucket = false;
        } else if (vm.buckets.length < 6) {
            vm.bucketNames = ['A', 'B', 'C', 'D', 'F'];
            vm.canAddBucket = true;
        };

        // loop through buckets in object and set their values
        for (var i = 0, len = vm.buckets.length; i < len; i++) {

            var previousBucket = vm.buckets[i - 1];
            if (previousBucket != null) {
                vm.previousRightBoundScore = previousBucket["right_bound_score"];
            }

            // set each buckets left_bound_score to the previous buckets right_bound_score minus one
            vm.buckets[i].left_bound_score = vm.previousRightBoundScore - 1;
            vm.buckets[0].left_bound_score = 99;

            if (vm.buckets[i].right_bound_score === 0) {
                vm.buckets[i].right_bound_score = 5;
            };

            vm.rightScore = vm.buckets[i].right_bound_score - 1;
            vm.rightLeads = vm.ratingsSummary.bucketed_scores[vm.rightScore].left_num_leads;
            vm.rightConverted = vm.ratingsSummary.bucketed_scores[vm.rightScore].left_num_converted;
            vm.leftScore = vm.buckets[i].left_bound_score;
            vm.leftLeads = vm.ratingsSummary.bucketed_scores[vm.leftScore].left_num_leads;
            vm.leftConverted = vm.ratingsSummary.bucketed_scores[vm.leftScore].left_num_converted;

            vm.totalLeads = vm.rightLeads - vm.leftLeads;
            vm.totalConverted = vm.rightConverted - vm.leftConverted;

            vm.buckets[i].num_leads = vm.rightLeads - vm.leftLeads;

            if (vm.totalLeads == 0 || vm.ratingsSummary.total_num_converted == 0 || vm.ratingsSummary.total_num_leads == 0) {
                vm.buckets[i].lift = 0;
            } else {
                vm.buckets[i].lift = vm.totalConverted / vm.totalLeads / (vm.ratingsSummary.total_num_converted / vm.ratingsSummary.total_num_leads);
            }

            vm.buckets[i].bucket_name = vm.bucketNames[i];
        }
    }

    vm.addBucket = function (ev) {
        if (vm.workingBuckets.length < 6 && vm.canAddBucket) {
            vm.containerBox = vm.slidersContainer.getBoundingClientRect();
            vm.relativeSliderChartPosition = (ev.clientX - vm.containerBox.left) / vm.containerBox.width;

            var addSlider = {
                creation_timestamp: 0,
                left_bound_score: 0,
                lift: 0,
                bucket_name: "",
                num_leads: 0,
                right_bound_score: 100 - Math.round(vm.relativeSliderChartPosition * 100)
            };

            vm.workingBuckets.push(addSlider);
            vm.workingBuckets.sort(function (a, b) {
                return b.right_bound_score - a.right_bound_score;
            });

            vm.chartNotUpdated = false;
            vm.canAddBucket = true;

            refreshChartData();
        } else {
            vm.canAddBucket = false;
        }
    };

    vm.eleMouseDown = function (ev, bucket, index) {
        ev.preventDefault();
        ev.stopPropagation();

        vm.slider = ev.currentTarget;
        vm.containerBox = vm.slidersContainer.getBoundingClientRect();
        vm.bucket = bucket;
        vm.index = index;

        vm.bucket.isMoving = true;
        vm.canAddBucket = false;
        vm.showRemoveBucketText = false;
        vm.startingPosition = ev.clientX;
        vm.updateContent = false;
        vm.right = bucket.right_bound_score;

        document.addEventListener('mousemove', eleMouseMove, false);
        document.addEventListener('mouseup', eleMouseUp, false);
    };

    function eleMouseMove(ev) {
        ev.preventDefault();
        ev.stopPropagation();

        vm.firstBucket = vm.workingBuckets[Object.keys(vm.workingBuckets)[0]];
        vm.relativeSliderChartPosition = (ev.clientX - vm.containerBox.left) / vm.containerBox.width;

        if (vm.index === 0) {
            vm.sliderBoundaryLeft = 98;
            vm.sliderBoundaryRight = vm.workingBuckets[Object.keys(vm.workingBuckets)[vm.index + 1]].right_bound_score + 2;
        } else {
            vm.sliderBoundaryRight = vm.workingBuckets[Object.keys(vm.workingBuckets)[vm.index + 1]].right_bound_score + 2;
            vm.sliderBoundaryLeft = vm.workingBuckets[Object.keys(vm.workingBuckets)[vm.index - 1]].right_bound_score - 2;
        }

        var right = 100 - Math.round(vm.relativeSliderChartPosition * 100);
        var leftCheck = right <= vm.sliderBoundaryLeft;
        var rightCheck = right >= vm.sliderBoundaryRight;

        vm.right = right;

        if (leftCheck && rightCheck) {
            this.right = right;
            vm.slider.style.right = right + '%';
        } else {
            vm.slider.style.right = (leftCheck ? vm.sliderBoundaryRight : vm.sliderBoundaryLeft) + '%';
        }

        if (vm.workingBuckets.length > 2 && ev.clientY > vm.containerBox.bottom + 10) {
            vm.showRemoveBucketText = true;
            vm.slider.style.opacity = .25;

            if (vm.showRemoveBucketText) {
                $scope.$apply();
            }
        } else {
            vm.showRemoveBucketText = false;
            vm.slider.style.opacity = 1;

            if (!vm.showRemoveBucketText) {
                $scope.$apply();
            }
        }
    }

    function eleMouseUp(ev, index) {
        ev.preventDefault();
        ev.stopPropagation();

        vm.bucket.isMoving = false;

        if (vm.startingPosition != ev.clientX) {
            vm.bucket.right_bound_score = this.right;
            vm.chartNotUpdated = false;
        }

        vm.slider.style.opacity = 1;
        vm.canAddBucket = false;

        vm.workingBuckets.sort(function (a, b) {
            return b.right_bound_score - a.right_bound_score;
        });

        if (vm.workingBuckets.length > 2 && ev.clientY > vm.containerBox.bottom + 10) {
            vm.chartNotUpdated = false;
            vm.showRemoveBucketText = false;

            vm.workingBuckets.splice(vm.index, 1);

            var buckets = vm.workingBuckets;

            for (var i = 0, len = buckets.length; i < len; i++) {
                var previousBucket = buckets[i - 1];

                for (var bucket in previousBucket) {
                    vm.previousRightBoundScore = previousBucket["right_bound_score"];
                }

                buckets[i].left_bound_score = vm.previousRightBoundScore - 1;
                buckets[0].left_bound_score = 99;
            }

            $scope.$apply();
        }

        delete vm.slider;

        document.removeEventListener('mousemove', eleMouseMove, false);
        document.removeEventListener('mouseup', eleMouseUp, false);

        $timeout(function () {
            refreshChartData();
        }, 1);
    }

    vm.publishConfiguration = function () {
        vm.chartNotUpdated = false;
        vm.savingConfiguration = true;

        var modelId = vm.model.modelId,
            rating_id = $stateParams.rating_id;

        // console.log(vm.model);

        ModelRatingsService.CreateABCDBucketsRatingEngine(rating_id, modelId, vm.workingBuckets).then(function (result) {
            if (result != null && result.success === true) {
                vm.showSuccess = true;
                vm.chartNotUpdated = true;
                vm.updateContent = true;
                $timeout(function () {
                    vm.updateContent = false;
                    vm.showSuccess = false;
                }, 200);
            } else {
                vm.savingConfiguration = false;
                vm.createBucketsErrorMessage = result;
                vm.showSaveBucketsError = true;
            }
        });
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/activatescoring/activatescoring.index.js":
/*!****************************************************************************!*\
  !*** ./app/ratingsengine/content/activatescoring/activatescoring.index.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./activatescoring.component */ "./app/ratingsengine/content/activatescoring/activatescoring.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/ai/ai.index.js":
/*!**************************************************!*\
  !*** ./app/ratingsengine/content/ai/ai.index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./products/products.component */ "./app/ratingsengine/content/ai/products/products.component.js");

__webpack_require__(/*! ./prospect/prospect-graph.component */ "./app/ratingsengine/content/ai/prospect/prospect-graph.component.js");

__webpack_require__(/*! ./ratings-engines-ai.service */ "./app/ratingsengine/content/ai/ratings-engines-ai.service.js");

__webpack_require__(/*! ./refine/ai-refine-target.component */ "./app/ratingsengine/content/ai/refine/ai-refine-target.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/ai/products/products.component.js":
/*!*********************************************************************!*\
  !*** ./app/ratingsengine/content/ai/products/products.component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.ai.products', []).controller('RatingsEngineAIProducts', ["$scope", "RatingsEngineAIStore", "RatingsEngineAIService", "RatingsEngineStore", "Products", function ($scope, RatingsEngineAIStore, RatingsEngineAIService, RatingsEngineStore, Products) {
    var vm = this;
    angular.extend(vm, {
        totalProducts: function () {
            var max = Products.length;
            var ret = [];
            for (var i = 0; i < max; i++) {
                ret.push({ 'id': Products[i].ProductId, 'displayName': Products[i].ProductName });
            }
            return ret;
        }(),
        products: [],
        rowsPerPage: 5,
        productsCount: 0,
        page: 0,
        maxpages: 0,
        productsSelected: {}

    });

    vm.init = function () {
        vm.productsCount = vm.totalProducts.length;
        vm.calculateMaxPages();
        vm.loadNextPage();
        vm.validateNextStep();
    };
    /**
     * Initialize the max number of mages available based on
     * the number of product and the number of rows per page
     */
    vm.calculateMaxPages = function () {
        if (vm.productsCount > 0) {
            if (vm.productsCount == vm.rowsPerPage) {
                vm.maxpages = 1;
            } else {
                vm.maxpages = Math.ceil(vm.productsCount / vm.rowsPerPage);
            }
        }
    };
    /**
     * Fetch product for next page
     */
    vm.loadNextPage = function () {
        if (vm.page < vm.maxpages) {
            vm.page++;
            vm.loadProducts(vm.page);
        }
    };
    /**
     * Fetch product for previouse page
     */
    vm.loadPreviousePage = function () {
        if (vm.page > 1) {
            vm.page--;
            vm.loadProducts(vm.page);
        }
    };
    /**
     * @param page @type number Page of products to show
     */
    vm.loadProducts = function (page) {
        var from = (page - 1) * vm.rowsPerPage;
        var to = page * vm.rowsPerPage;
        if (to > vm.productsCount) {
            to = vm.productsCount;
        }

        vm.products = [];
        var j = 0;
        for (var i = from, j = 0; i < to; i++, j++) {
            vm.products[j] = angular.copy(vm.totalProducts[i]);
            vm.products[j]['selected'] = RatingsEngineAIStore.isProductSelected(vm.products[j].id);
        }
    };

    vm.getTotalProductsCount = function () {
        return vm.productsCount;
    };

    /**
     * @param index index in the visible page of the grid
     */
    vm.selectProduct = function (index) {
        vm.products[index]['selected'] = vm.products[index]['selected'] == undefined ? true : !vm.products[index]['selected'];
        var productId = vm.products[index].id;
        RatingsEngineAIStore.selectProduct(productId, vm.products[index].displayName);
        vm.validateNextStep();
    };
    /**
     * @returns the number of product selected
     */
    vm.getProductsSelectedCount = function () {
        return RatingsEngineAIStore.getProductsSelectedCount();
    };
    /**
     * Method used to validate the next step for the wizard
     */
    vm.validateNextStep = function () {
        if (RatingsEngineAIStore.getProductsSelectedCount() > 0) {
            vm.setValidation('products', true);
        } else {
            vm.setValidation('products', false);
        }
    };
    /**
     * Enable/Disable the next step of the wizard
     * @argument type @type string This value has to be equal to the value which is inside the RatingsEngineStore.validation
     * @argument validated @type boolean Enable or disable the next step
     * 
     */
    vm.setValidation = function (type, validated) {
        RatingsEngineStore.setValidation(type, validated);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/ai/prospect/prospect-graph.component.js":
/*!***************************************************************************!*\
  !*** ./app/ratingsengine/content/ai/prospect/prospect-graph.component.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.ai.prospect.prospect-graph', []).controller('RatingsEngineAIProspectGraph', ["$scope", "RatingsEngineAIStore", "RatingsEngineAIService", "RatingsEngineStore", function ($scope, RatingsEngineAIStore, RatingsEngineAIService, RatingsEngineStore) {
    var vm = this;

    angular.extend(vm, {
        prospectPercentage: '50%',
        customersPercentage: '80%'
    });

    vm.init = function () {};

    vm.getChartStyle = function (chartType) {
        var styleObj = {};
        if ('prospect' === chartType) {
            styleObj = {
                'height': vm.prospectPercentage
            };
        } else if ('customers' === chartType) {
            styleObj = {
                'height': vm.customersPercentage
            };
            return styleObj;
        }
        return styleObj;
    };
    vm.setValidation = function (type, validated) {
        RatingsEngineStore.setValidation(type, validated);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/ai/ratings-engines-ai.service.js":
/*!********************************************************************!*\
  !*** ./app/ratingsengine/content/ai/ratings-engines-ai.service.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.ai', []).config(['$httpProvider', function ($httpProvider) {
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
}]).service('RatingsEngineAIStore', ["$q", "$state", "$stateParams", "RatingsEngineService", "RatingsEngineAIService", "DataCloudStore", "BrowserStorageUtility", "$timeout", "SegmentService", function ($q, $state, $stateParams, RatingsEngineService, RatingsEngineAIService, DataCloudStore, BrowserStorageUtility, $timeout, SegmentService) {

    this.buildOptions = [];

    this.productsSelected = {};
    this.similarProducts = {};
    this.trainingProducts = []; // this is the value to add to the AI model

    this.aiModelOptions = {
        workflowType: 'CROSS_SELL',
        targetCustomerSet: 'new',
        modelingMethod: 'PROPENSITY',
        trainingProducts: [],
        modelingJobId: '',
        similarSegmentId: ''
    };

    /************* Refine variables *************/
    this.customers = '', this.successes = '', this.sellOption = {};
    this.prioritizeOption = {};
    /*******************************************/

    this.init = function () {
        this.prospect = { 'prospect': 0, 'customers': 0 };
        this.settings = {};

        this.buildOptions = RatingsEngineAIService.getBuildOptions();
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.getNumberOfProducts = function () {
        RatingsEngineAIService.getProductsCount(segment_id).then(function (data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    this.clearSelection = function () {
        this.productsSelected = {};
    };

    this.selectProduct = function (id, name) {
        if (this.productsSelected[id]) {
            delete this.productsSelected[id];
        } else {
            this.productsSelected[id] = name;
        }
    };
    this.getProductsSelected = function () {
        return this.productsSelected;
    };
    this.isProductSelected = function (id) {
        if (this.productsSelected[id]) {
            return true;
        } else {
            return false;
        }
    };
    this.getProductsSelectedCount = function () {
        return Object.keys(this.productsSelected).length;
    };

    this.getProducts = function (params) {
        var deferred = $q.defer();
        RatingsEngineAIService.getProductsAPI(params).then(function (data) {
            deferred.resolve(data.data);
        });
        return deferred.promise;
    };

    this.getSegments = function () {
        var deferred = $q.defer();
        SegmentService.GetSegments().then(function (data) {
            deferred.resolve(data);
        });
        return deferred.promise;
    };

    /**
     * Reset the option for the refine
     */
    this.resetRefineOptions = function () {
        this.sellOption = {};
        this.prioritizeOption = {};
    };
    /**
     * 
     * @param value @type Object
     * {'sellValue': '', sellOptions: {'name': ''}}
     * Store the value choosen for the refine the target
     *  
     */
    this.setSellOption = function (sellValue, options) {
        this.sellOption['sellValue'] = sellValue;
        this.sellOption['sellOptions'] = options;
    };

    this.getProspectCustomers = function () {
        var deferred = $q.defer();
        if (!angular.equals(this.sellOption, {}) && !angular.equals(this.prioritizeOption, {})) {

            RatingsEngineAIService.getProspectsCustomers(this.sellOption, this.prioritizeOption).then(function (response) {
                deferred.resolve(response);
            });

            return deferred.promise;
        } else {
            return deferred.promise;
        }
    };

    /**
     * 
     * @param value @type string
     * Store the option to prioritize the target refine 
     */
    this.setPrioritizeOption = function (value) {
        this.prioritizeOption[value] = value;
    };

    this.getProductsSelectedIds = function () {
        var ids = Object.keys(this.productsSelected);
        return ids;
    };

    this.addSimilarProducts = function (products) {
        this.similarProducts = products;
    };

    this.getProdutTrainingIds = function () {
        return Object.keys(this.similarProducts);
    };
}]).service('RatingsEngineAIService', ["$q", "$http", "$state", function ($q, $http, $state) {

    this.getBuildOptions = function () {
        var buildOptions = [{ id: 0, label: 'Rate Customers likely to buy next quarter', name: '', disabled: 'false' }, { id: 1, label: 'Rate Prospects for fit to my Products', name: '', disabled: 'true' }, { id: 2, label: 'Rate Prospect for overall fit to my businnes', name: '', disabled: 'true' }, { id: 3, label: 'Upload training data and build a custom probability model', name: '', disabled: 'true' }, { id: 4, label: 'Upload a model I already built (PMML format)', name: '', disabled: 'true' }];
        return buildOptions;
    };

    this.getSellOptions = function () {
        var deferred = $q.defer();
        var data = [{ 'id': 1, 'name': '6 months' }, { 'id': 2, 'name': '12 months' }, { 'id': 3, 'name': '18 months' }];
        deferred.resolve(data);

        return deferred.promise;
    };
    /**
     * Fetch the prospect count and the customers cound given a segment id
     */
    this.getProspect = function (id) {
        var deferred = $q.defer();
        var data = { 'prospect': 500, 'customers': 150 };
        deferred.resolve(data);

        return deferred.promise;
    };
    /**
     * Return the number of product
     */
    this.getProductsCount = function () {
        var deferred = $q.defer();
        var data = { 'count': 100 };
        deferred.resolve(data);
        return deferred.promise;
    };

    /**
    * Load the products by page number
    */
    this.getProductsAPI = function (params) {
        var deferred = $q.defer();
        var max = params.max;
        var offset = params.offset;
        var data = [];
        url = '/pls/products/data';
        $http({
            method: 'GET',
            url: url,
            params: {
                max: params.max || 1000,
                offset: params.offset || 0
            },
            headers: {
                'Accept': 'application/json'
            }
        }).then(function (response) {
            deferred.resolve(response.data);
        }, function (response) {
            deferred.resolve(response.data);
        });
        return deferred.promise;
    };
    /**
     * Load the products by page number
     */
    this.getProducts = function (from, to) {
        var deferred = $q.defer();
        var data = [];
        for (var i = from; i < to; i++) {
            data.push({ 'selected': false, 'id': i, 'name': "Product Name " + i });
        }
        deferred.resolve(data);

        return deferred.promise;
    };

    this.getProspectsCustomers = function (sellOption, prioritizeOption) {
        console.log('API CALL');
        var deferred = $q.defer();
        var data = { 'prospects': Math.floor(Math.random() * 10000), 'customers': Math.floor(Math.random() * 10000) };

        deferred.resolve(data);

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/ratingsengine/content/ai/refine/ai-refine-target.component.js":
/*!***************************************************************************!*\
  !*** ./app/ratingsengine/content/ai/refine/ai-refine-target.component.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.ai.refine', ['mainApp.appCommon.directives.chips', 'mainApp.appCommon.directives.input.selection']).controller('RatingsEngineAIRefineTarget', ["$scope", "RefineService", "RatingsEngineStore", "RatingsEngineAIStore", "RefineSellOptions", function ($scope, RefineService, RatingsEngineStore, RatingsEngineAIStore, RefineSellOptions) {
    var vm = this;

    angular.extend(vm, {
        refine: RefineService.refineModel,

        customers: '',
        prospects: '',
        historical: '',

        sellType: '',
        resellOptions: RefineSellOptions,
        resellOption: {},
        prioritizeOption: ''

    });

    vm.init = function () {
        RefineService.reset();
        RatingsEngineAIStore.resetRefineOptions();
        vm.validateNextStep();
        // console.log('Init refine Target');
        $scope.$watch(function () {
            return RefineService.refineModel;
        }, function (newVal, oldVal) {
            vm.refine = newVal;
        }, true);
        vm.resellOption = vm.resellOptions[0];
        vm.sellTypeChosen('new');
        vm.prioritizeOptionChosen('PROPENSITY');
    };

    /**
     * 
     * @param value 
     * Set the type of sell chosen
     */
    vm.sellTypeChosen = function (value) {
        // console.log('Changed ' + value);
        vm.sellType = value;
        if ('new' === value) {
            RatingsEngineAIStore.setSellOption(value, {});
            vm.getProspectCustomers();
        } else {
            RatingsEngineAIStore.setSellOption(value, vm.resellOption);
            vm.getProspectCustomers();
        }
        vm.validateNextStep();
    };

    /**
     * 
     * @param value 
     * Set the type of prioritization chosen
     */
    vm.prioritizeOptionChosen = function (value) {
        // console.log('Prioritize', value);
        vm.prioritizeOption = value;
        RatingsEngineAIStore.setPrioritizeOption(value);
        vm.getProspectCustomers();
        vm.validateNextStep();
    };

    vm.getProspectCustomers = function () {

        RatingsEngineAIStore.getProspectCustomers().then(function (result) {
            vm.customers = result.customers;
            vm.prospects = result.prospects;
        });
    };

    /**
     * Switch for the refine model view
     */
    vm.showRefineModel = function () {
        // console.log('Change view');
        RefineService.changeValue();
    };

    /**
    * Method used to validate the next step for the wizard
    */
    vm.validateNextStep = function () {
        if (!angular.equals(RatingsEngineAIStore.sellOption, {}) && !angular.equals(RatingsEngineAIStore.prioritizeOption, {})) {
            vm.setValidation('refine', true);
        } else {
            vm.setValidation('refine', false);
        }
    };

    /**
    * Enable/Disable the next step of the wizard
    * @argument type @type string This value has to be equal to the value which is inside the RatingsEngineStore.validation
    * @argument validated @type boolean Enable or disable the next step
    * 
    */
    vm.setValidation = function (type, validated) {
        RatingsEngineStore.setValidation(type, validated);
    };

    vm.init();
}]).controller('RatingsEngineAIRefineModel', ["$scope", "RefineService", "RatingsEngineStore", "RatingsEngineAIStore", "RatingsEngineAIService", "Products", "Segments", function ($scope, RefineService, RatingsEngineStore, RatingsEngineAIStore, RatingsEngineAIService, Products, Segments) {
    var vm = this;
    // console.log('PRODUCTS',Products);
    angular.extend(vm, {
        refine: RefineService.refineModel,

        customersCount: '',
        prospectsCount: '',
        historicalCount: '',

        spent: false,
        bought: false,
        historical: false,
        similarProducts: false,
        similarSegments: false,
        productsDataSource: function () {
            var max = Products.length;
            var ret = [];
            for (var i = 0; i < max; i++) {
                ret.push({ 'id': Products[i].ProductId, 'displayName': Products[i].ProductName });
            }
            return ret;
        }(),
        segmentsDatasource: function () {
            var max = Segments.length;
            var ret = [];
            for (var i = 0; i < max; i++) {
                if ('' !== Segments[i].name) {
                    ret.push({ 'id': Segments[i].name, 'displayName': Segments[i].display_name });
                }
            }
            return ret;
        }(),
        datasource: [],
        options: [],
        spentOptions: [{ 'id': 1, 'name': 'At least' }, { 'id': 2, 'name': 'At most' }],
        boughtOptions: [{ 'id': 1, 'name': 'At least' }, { 'id': 2, 'name': 'At most' }],
        historicalOptions: [{ 'id': 1, 'name': 'Months' }, { 'id': 2, 'name': 'Years' }]

    });

    vm.init = function () {
        // console.info('Init refine Model');
        $scope.$watch(function () {
            return RefineService.refineModel;
        }, function (newVal, oldVal) {
            vm.refine = newVal;
            // console.log('NEW ' + newVal + ' - OLD ' + oldVal);
        }, true);

        vm.datasource = [];

        vm.getProspectCustomers();
    };

    vm.similarProductsChecked = function () {
        console.log(vm.similarProducts);
        if (!vm.similarProducts) {
            RatingsEngineAIStore.addSimilarProducts({});
            // RatingsEngineStore.nextSaveProductToAIModel();
        }
    };

    vm.getSpentOptions = function () {
        return vm.spentOptions;
    };
    vm.getBoughtOptions = function () {
        return vm.boughtOptions;
    };

    vm.getHistoricalOptions = function () {
        return vm.historicalOptions;
    };

    vm.callbackSegments = function (element) {
        // console.log(element);
    };
    vm.productsCallback = function (elements) {
        RatingsEngineAIStore.addSimilarProducts(elements);
    };

    vm.getProspectCustomers = function () {

        RatingsEngineAIStore.getProspectCustomers().then(function (result) {
            vm.customersCount = result.customers;
            vm.prospectsCount = result.prospects;
        });
    };

    vm.init();
}]).service('RefineService', function () {
    this.refineModel = false;

    this.reset = function () {
        this.refineModel = false;
    };

    this.changeValue = function () {
        this.refineModel = !this.refineModel;
    };
    this.getRefineModel = function () {
        return this.refineModel;
    };
});

/***/ }),

/***/ "./app/ratingsengine/content/attributes/attributes.component.js":
/*!**********************************************************************!*\
  !*** ./app/ratingsengine/content/attributes/attributes.component.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.attributes', []).controller('RatingsEngineAttributes', ["$q", "$state", "$stateParams", "RatingsEngineStore", "Rating", function ($q, $state, $stateParams, RatingsEngineStore, Rating) {

    var vm = this;
    angular.extend(vm, {
        disableTrainingAttributes: false,
        disableCDLAttributes: false,
        scoringAttributes: {
            'DataCloud': true,
            'CDL': true,
            'CustomFileAttributes': true
        }
    });

    vm.init = function () {
        if (RatingsEngineStore.getCustomEventModelingType() == 'LPI' || Rating.segment == null) {
            vm.disableCDLAttributes = true;
            vm.scoringAttributes['CDL'] = false;
            vm.scoringAttributes['CustomFileAttributes'] = vm.checkDataStores(Rating) ? Rating.activeModel.AI.advancedModelingConfig.custom_event.dataStores.indexOf('CustomFileAttributes') >= 0 : true;
        } else if (RatingsEngineStore.getCustomEventModelingType() == 'CDL' || Rating.segment != null) {
            vm.disableTrainingAttributes = true;
            vm.scoringAttributes['CDL'] = vm.checkDataStores(Rating) ? Rating.activeModel.AI.advancedModelingConfig.custom_event.dataStores.indexOf('CDL') >= 0 : true;
            vm.scoringAttributes['CustomFileAttributes'] = false;
        }
        var dataStores = filterDataStores(vm.scoringAttributes);
        RatingsEngineStore.setDataStores(dataStores);
        RatingsEngineStore.setValidation("attributes", true);
    };

    vm.checkDataStores = function (rating) {
        return rating && rating.activeModel && rating.activeModel.AI && rating.activeModel.AI.advancedModelingConfig && rating.activeModel.AI.advancedModelingConfig.custom_event && rating.activeModel.AI.advancedModelingConfig.custom_event.dataStores;
    };

    vm.setScoringAttributes = function (option) {
        vm.scoringAttributes[option] = !vm.scoringAttributes[option];
        var dataStores = filterDataStores(vm.scoringAttributes);
        RatingsEngineStore.setDataStores(dataStores);
        dataStores.length > 0 ? RatingsEngineStore.setValidation("attributes", true) : RatingsEngineStore.setValidation("attributes", false);
    };

    var filterDataStores = function filterDataStores(dataStores) {
        return Object.keys(dataStores).filter(function (attr) {
            return dataStores[attr];
        });
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/attributes/attributes.index.js":
/*!******************************************************************!*\
  !*** ./app/ratingsengine/content/attributes/attributes.index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./attributes.component */ "./app/ratingsengine/content/attributes/attributes.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/creation/creation.component.js":
/*!******************************************************************!*\
  !*** ./app/ratingsengine/content/creation/creation.component.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.creation', []).component('ratingsEngineCreation', {
    templateUrl: 'app/ratingsengine/content/creation/creation.component.html',
    bindings: {
        ratingEngine: '<',
        products: '<'
    },
    controller: ["$q", "$state", "$stateParams", "$scope", "$interval", "RatingsEngineStore", "JobsStore", function controller($q, $state, $stateParams, $scope, $interval, RatingsEngineStore, JobsStore) {
        var vm = this,
            checkJobStatus;

        angular.extend(vm, {
            hasSettingsInfo: true,
            status: 'Preparing Modeling Job',
            progress: '1%',
            modelSettingsSummary: {
                'cross_sell': {
                    'segment': true,
                    'products': true,
                    'availableAttributes': false,
                    'scoreExternalFile': false,
                    'prioritizeBy': true,
                    'modelSettingsTitle': true
                },
                'custom_event': {
                    'segment': RatingsEngineStore.getCustomEventModelingType() == 'CDL',
                    'products': false,
                    'availableAttributes': true,
                    'scoreExternalFile': true,
                    'prioritizeBy': false,
                    'modelSettingsTitle': false
                }
            },
            jobStarted: false,
            completedTimes: {},
            completedSteps: {}
        });

        vm.$onInit = function () {

            vm.setValidation('creation', true);

            var model = vm.ratingEngine.latest_iteration.AI;
            vm.type = vm.ratingEngine.type.toLowerCase();

            console.log(model);

            vm.predictionType = model.predictionType;
            vm.trainingSegment = model.trainingSegment;

            if (vm.type === 'cross_sell') {

                // console.log(model);
                var keys = Object.keys(model.advancedModelingConfig.cross_sell.filters),
                    purchasedBeforePeriod = model.advancedModelingConfig.cross_sell.filters['PURCHASED_BEFORE_PERIOD'],
                    csFilters = Object.keys(model.advancedModelingConfig.cross_sell.filters).length,
                    trainingSegment = model.trainingSegment,
                    trainingProducts = model.advancedModelingConfig.cross_sell.trainingProducts;

                if ((keys.length === 0 || purchasedBeforePeriod && csFilters === 1) && (trainingSegment === null || trainingSegment === undefined) && (trainingProducts === null || trainingProducts === undefined)) {
                    vm.hasSettingsInfo = false;
                }

                vm.targetProducts = model.advancedModelingConfig.cross_sell.targetProducts;
                vm.modelingStrategy = model.advancedModelingConfig.cross_sell.modelingStrategy;
                vm.configFilters = model.advancedModelingConfig.cross_sell.filters;
                vm.trainingProducts = model.advancedModelingConfig.cross_sell.trainingProducts;

                // console.log(vm.configFilters);

                if (vm.targetProducts.length === 0) {
                    vm.modelSettingsSummary.cross_sell.products = false;
                }

                if (vm.modelingStrategy === 'CROSS_SELL_FIRST_PURCHASE') {
                    vm.ratingEngineType = 'First Purchase Cross-Sell';
                } else if (vm.modelingStrategy === 'CROSS_SELL_REPEAT_PURCHASE') {
                    vm.ratingEngineType = 'Repeat Purchase Cross-Sell';
                }

                if (vm.predictionType === 'PROPENSITY') {
                    vm.prioritizeBy = 'Likely to Buy';
                } else if (vm.predictionType === 'EXPECTED_VALUE') {
                    vm.prioritizeBy = 'Likely Amount of Spend';
                }

                if (vm.configFilters['SPEND_IN_PERIOD']) {
                    if (vm.configFilters['SPEND_IN_PERIOD'].criteria === 'GREATER_OR_EQUAL') {
                        vm.spendCriteria = 'at least';
                    } else {
                        vm.spendCriteria = 'at most';
                    }
                }

                if (vm.configFilters['QUANTITY_IN_PERIOD']) {
                    if (vm.configFilters['QUANTITY_IN_PERIOD'].criteria === 'GREATER_OR_EQUAL') {
                        vm.quantityCriteria = 'at least';
                    } else {
                        vm.quantityCriteria = 'at most';
                    }
                }

                if (vm.targetProducts !== null) {
                    vm.targetProductName = vm.returnProductNameFromId(vm.targetProducts[0]);
                }
                if (vm.trainingProducts !== null && vm.trainingProducts != undefined) {
                    vm.trainingProductName = vm.returnProductNameFromId(vm.trainingProducts[0]);
                }

                vm.updateSteps();
            } else if (vm.type == 'custom_event') {

                vm.hasSettingsInfo = true;
                vm.ratingEngineType = 'Custom Event';
                vm.prioritizeBy = 'Likely to Buy';

                var dataStore = model.advancedModelingConfig.custom_event.dataStores;
                vm.availableAttributes = dataStore.length == 1 ? RatingsEngineStore.formatTrainingAttributes(dataStore[0]) : RatingsEngineStore.formatTrainingAttributes(dataStore[0]) + ' + ' + RatingsEngineStore.formatTrainingAttributes(dataStore[1]);

                vm.updateSteps();
            }
        };

        vm.updateSteps = function () {
            if (vm.type === 'cross_sell') {
                vm.steps = [{
                    label: 'Gathering Data',
                    hasStarted: !vm.startTimestamp || !vm.jobStarted,
                    showSpinner: !vm.startTimestamp || !vm.jobStarted,
                    startTimestamp: vm.startTimestamp
                }, {
                    label: 'Profiling',
                    hasStarted: vm.processingFile || vm.completedTimes.load_data,
                    showSpinner: vm.processingFile,
                    startTimestamp: vm.completedTimes.load_data
                }, {
                    label: 'Modeling',
                    hasStarted: vm.matchingToDataCloud || vm.completedTimes.create_global_target_market,
                    showSpinner: vm.matchingToDataCloud,
                    startTimestamp: vm.completedTimes.create_global_target_market
                }, {
                    label: 'Scoring',
                    hasStarted: vm.scoringTrainingSet || vm.completedTimes.score_training_set,
                    showSpinner: vm.scoringTrainingSet,
                    startTimestamp: vm.completedTimes.score_training_set
                }];
            } else {
                vm.steps = [{
                    label: 'Processing File',
                    hasStarted: vm.processingFile || !vm.jobStarted,
                    showSpinner: vm.processingFile || !vm.jobStarted,
                    startTimestamp: vm.completedTimes.load_data
                }, {
                    label: 'Matching to Data Cloud',
                    hasStarted: vm.matchingToDataCloud,
                    showSpinner: vm.matchingToDataCloud,
                    startTimestamp: vm.completedTimes.match_data
                }, {
                    label: 'Modeling and Scoring',
                    hasStarted: vm.modelingAndScoring,
                    showSpinner: vm.modelingAndScoring,
                    startTimestamp: vm.completedTimes.create_global_model
                }];
            }
        };

        vm.checkJobStatus = function () {
            var appId = vm.ratingEngine.latest_iteration.AI.modelingJobId ? vm.ratingEngine.latest_iteration.AI.modelingJobId : RatingsEngineStore.getApplicationId(); // update once backend sets modelingjobId for CE
            if (appId) {

                JobsStore.getJobFromApplicationId(appId).then(function (result) {
                    if (result.id) {

                        console.log(result);

                        vm.jobStarted = true;
                        vm.status = result.jobStatus;
                        vm.startTimestamp = result.startTimestamp;
                        vm.completedSteps = result.completedSteps;
                        vm.completedTimes = result.completedTimes;
                        vm.globalStep = vm.type == 'cross_sell' ? vm.completedTimes.create_global_target_market : vm.completedTimes.create_global_model;

                        vm.steps = [];

                        if (vm.type == 'cross_sell') {
                            vm.stepMultiplier = 5.5;
                            vm.processingFile = result.stepRunning == 'load_data';
                            vm.matchingToDataCloud = vm.completedTimes.load_data && !vm.globalStep;
                            vm.scoringTrainingSet = vm.globalStep && !vm.completedTimes.score_training_set;
                        } else {
                            vm.stepMultiplier = 5.5;
                            vm.processingFile = result.stepRunning == 'load_data';
                            vm.matchingToDataCloud = result.stepRunning == 'match_data';
                            vm.modelingAndScoring = result.stepRunning == 'create_global_model';
                        }

                        vm.updateSteps();

                        // Green status bar
                        if (result.stepsCompleted.length > 0) {
                            var tmp = result.stepsCompleted.length / 2 * vm.stepMultiplier;
                            if (tmp > 100 && vm.status !== 'Completed') {
                                tmp = 99;
                            }
                            vm.progress = tmp + '%';
                        }
                        // Cancel $interval when completed
                        if (vm.status === 'Completed') {
                            vm.progress = 100 + '%';
                            $interval.cancel(vm.checkJobStatus);
                        } else if (vm.status == 'Failed') {
                            $interval.cancel(vm.checkJobStatus);
                        }
                    }
                });
            }
        };
        var promise = $interval(vm.checkJobStatus, 10000);
        $scope.$on('$destroy', function () {
            if (promise) {
                $interval.cancel(promise);
            }
        });

        vm.returnProductNameFromId = function (productId) {
            var products = vm.products,
                product = products.find(function (obj) {
                return obj.ProductId === productId.toString();
            });

            return product.ProductName;
        };

        vm.setValidation = function (type, validated) {
            RatingsEngineStore.setValidation(type, validated);
        };

        vm.getTrainingFileName = function () {
            return RatingsEngineStore.getDisplayFileName();
        };

        vm.showSetting = function (setting) {
            // console.log('SETTINGS', setting, vm.modelSettingsSummary[vm.type][setting]);
            return vm.modelSettingsSummary[vm.type][setting];
        };
    }]

});

/***/ }),

/***/ "./app/ratingsengine/content/creation/creation.index.js":
/*!**************************************************************!*\
  !*** ./app/ratingsengine/content/creation/creation.index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./creation.component */ "./app/ratingsengine/content/creation/creation.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/creationhistory/creation-history.index.js":
/*!*****************************************************************************!*\
  !*** ./app/ratingsengine/content/creationhistory/creation-history.index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./creationhistory.component */ "./app/ratingsengine/content/creationhistory/creationhistory.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/creationhistory/creationhistory.component.js":
/*!********************************************************************************!*\
  !*** ./app/ratingsengine/content/creationhistory/creationhistory.component.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.creationhistory', []).controller('RatingsEngineCreationHistory', ["$scope", "$timeout", "$element", "$state", "$stateParams", "RatingsEngineStore", "RatingsEngineService", function ($scope, $timeout, $element, $state, $stateParams, RatingsEngineStore, RatingsEngineService) {

    var vm = this;
    angular.extend(vm, {
        current: RatingsEngineStore.current,
        currentPage: 1,
        pageSize: 10,
        sortBy: 'created',
        sortDesc: true

    });

    vm.init = function () {};
    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/dashboard/dashboard.component.js":
/*!********************************************************************!*\
  !*** ./app/ratingsengine/content/dashboard/dashboard.component.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.dashboard', ['mainApp.appCommon.directives.barchart']).controller('RatingsEngineDashboard', ["$q", "$stateParams", "$state", "$rootScope", "$scope", "$sce", "RatingsEngineStore", "RatingsEngineService", "AtlasRemodelStore", "Modal", "Dashboard", "RatingEngine", "Model", "Notice", "IsRatingEngine", "IsPmml", "Products", "TargetProducts", "TrainingProducts", "AuthorizationUtility", "FeatureFlagService", function ($q, $stateParams, $state, $rootScope, $scope, $sce, RatingsEngineStore, RatingsEngineService, AtlasRemodelStore, Modal, Dashboard, RatingEngine, Model, Notice, IsRatingEngine, IsPmml, Products, TargetProducts, TrainingProducts, AuthorizationUtility, FeatureFlagService) {
    var vm = this,
        flags = FeatureFlagService.Flags();

    var featureFlagsConfig = {};
    featureFlagsConfig[flags.PLAYBOOK_MODULE] = true;

    angular.extend(vm, {
        playbookEnabled: AuthorizationUtility.checkFeatureFlags(featureFlagsConfig),
        deactivateInProgress: false,
        dashboard: Dashboard,
        ratingEngine: RatingEngine,
        modelSummary: Model,
        products: Products,
        targetProducts: TargetProducts,
        trainingProducts: TrainingProducts,
        barChartConfig: {
            'data': {
                'tosort': true,
                'sortBy': 'bucket_name',
                'trim': true,
                'top': 6
            },
            'chart': {
                'header': 'Value',
                'emptymsg': '',
                'usecolor': true,
                'color': '#e8e8e8',
                'mousehover': false,
                'type': 'integer',
                'showstatcount': false,
                'maxVLines': 3,
                'showVLines': false
            },
            'vlines': {
                'suffix': ''
            },
            'columns': [{
                'field': 'num_leads',
                'label': 'Records',
                'type': 'number',
                'chart': true
            }]
        },
        barChartLiftConfig: {
            'data': {
                'tosort': true,
                'sortBy': 'bucket_name',
                'trim': true,
                'top': 6
            },
            'chart': {
                'header': 'Value',
                'emptymsg': '',
                'usecolor': true,
                'color': '#e8e8e8',
                'mousehover': false,
                'type': 'decimal',
                'showstatcount': false,
                'maxVLines': 3,
                'showVLines': true
            },
            'vlines': {
                'suffix': 'x'
            },
            'columns': [{
                'field': 'lift',
                'label': 'Lift',
                'type': 'string',
                'suffix': 'x',
                'chart': true
            }]
        },
        modalConfig: {
            'name': "rating_engine_deactivate",
            'dischargeaction': 'cancel',
            'confirmaction': 'ok'
        }
    });

    vm.modalCallback = function (args) {
        var modal = Modal.get(vm.modalConfig.name);

        if ('closedForced' === args.action) {} else if (vm.modalConfig.dischargeaction === args.action) {
            Modal.modalRemoveFromDOM(modal, args);
        } else if (vm.modalConfig.confirmaction === args.action) {
            modal.waiting(true);
            modal.disableDischargeButton(true);
            vm.deactivateRating().then(function (result) {
                if (result.success === true) {
                    Modal.modalRemoveFromDOM(modal, args);
                }
            });
        }
    };

    vm.viewUrl = function () {
        return 'app/ratingsengine/content/dashboard/deactive-message.component.html';
    };

    vm.isActive = function (status) {
        return status === 'ACTIVE' ? true : false;
    };

    vm.deactivate = function () {
        if (vm.dashboard.plays && vm.dashboard.plays.length > 0 && vm.ratingEngine.status === 'ACTIVE') {
            // vm.toggleModal();

            var plays = vm.generateHtmlFromPlays();
            Modal.warning({
                name: "rating_engine_deactivate",
                icon: 'ico ico-model ico-black',
                title: "Deactivate Model",
                message: $sce.trustAsHtml('<section class=rating-engine-deactivate style=margin-top:0><p>Deactivating a model will prevent all of the campaigns which use it from launching. This model is currently being used by the following campaigns:<ul class=plays-used-list>' + plays + '</ul></section>'),
                confirmtext: "Deactivate",
                confirmcolor: "blue-button",
                headerconfig: { "background-color": "white", "color": "black" }
            }, vm.modalCallback);
        } else {
            vm.deactivateRating();
        }
    };

    vm.generateHtmlFromPlays = function () {
        var html = "";
        vm.dashboard.plays.forEach(function (play) {
            html += "<li>" + play.displayName + "</li>";
        });
        return html;
    };

    vm.disableScoringButton = function () {
        if (vm.ratingEngine.status === 'INACTIVE' || vm.deactivateInProgress === true) {
            return true;
        }

        if (!vm.isRulesBased) {
            return vm.dashboard.summary.bucketMetadata ? false : true;
        } else {
            return false;
        }
    };

    vm.deactivateRating = function () {
        vm.deactivateInProgress = true;
        var deferred = $q.defer();

        var newStatus = vm.isActive(vm.ratingEngine.status) ? 'INACTIVE' : 'ACTIVE',
            newRating = {
            id: vm.ratingEngine.id,
            status: newStatus
        };
        var msgStatus = newStatus == 'ACTIVE' ? 'activated' : 'deactivated';
        var model = vm.ratingEngine.scoring_iteration;
        RatingsEngineService.saveRating(newRating).then(function (data) {

            //This call is made because the POST API does not return 
            // The activeModel. Next release M-21 the json structure is going to change
            RatingsEngineService.getRating(vm.ratingEngine.id).then(function (dataUpdated) {
                vm.ratingEngine = dataUpdated;
                $rootScope.$broadcast('statusChange', {
                    activeStatus: data.status
                });
                Notice.success({
                    delay: 3000,
                    title: 'Deactivate Scoring',
                    message: 'Your scoring has been ' + msgStatus + '.'
                });
                RatingsEngineService.getRatingDashboard(newRating.id).then(function (data) {
                    vm.dashboard.plays = data.plays;
                    vm.initDataModel();
                    deferred.resolve({ success: true });
                    vm.deactivateInProgress = false;
                });
            });
        });
        return deferred.promise;
    };

    vm.status_toggle = vm.isActive(vm.ratingEngine.status);

    vm.toggleActive = function () {
        var active = vm.isActive(vm.ratingEngine.status);
        if (active && vm.dashboard.plays.length > 0) {
            var modal = Modal.get(vm.modalConfig.name);
            modal.toggle();
        } else {
            var newStatus = vm.isActive(vm.ratingEngine.status) ? 'INACTIVE' : 'ACTIVE',
                newRating = {
                id: vm.ratingEngine.id,
                status: newStatus
            };
            RatingsEngineService.saveRating(newRating).then(function (data) {
                $rootScope.$broadcast('statusChange', {
                    activeStatus: data.status
                });
                vm.ratingEngine = data;
                vm.status_toggle = vm.isActive(data.status);
                vm.toggleScoringButtonText = vm.status_toggle ? 'Deactivate Scoring' : 'Activate Scoring';
            });
        }
    };

    vm.initDataModel = function () {

        vm.relatedItems = [];
        Object.keys(vm.dashboard.dependencies).forEach(function (type) {
            if (vm.dashboard.dependencies[type]) {
                vm.dashboard.dependencies[type].forEach(function (name) {
                    type = type == 'Play' ? 'Campaign' : type;
                    vm.relatedItems.push({
                        type: type,
                        name: name
                    });
                });
            }
        });

        vm.hasBuckets = vm.ratingEngine.counts != null;
        vm.statusIsActive = vm.ratingEngine.status === 'ACTIVE';
        vm.isRulesBased = vm.ratingEngine.type === 'RULE_BASED';
        vm.isPublished = vm.dashboard.summary.isPublished ? true : false;
        vm.isPublishedOrScored = vm.ratingEngine.published_iteration || vm.ratingEngine.scoring_iteration ? true : false;

        RatingsEngineStore.setRatingEngine(vm.ratingEngine);

        if (vm.ratingEngine.type === 'CROSS_SELL' || vm.ratingEngine.type === 'CUSTOM_EVENT') {
            vm.ratingEngine.chartConfig = vm.barChartLiftConfig;
            vm.publishOrActivateButtonLabel = 'New Scoring Configuration'; //vm.dashboard.summary.bucketMetadata.length > 0 ? 'New Scoring Configuration' : 'Activate Scoring';
        } else {
            vm.ratingEngine.chartConfig = vm.barChartConfig;
        }

        if (vm.isRulesBased) {
            vm.toggleScoringButtonText = vm.status_toggle ? 'Deactivate Scoring' : 'Activate Scoring';
            vm.modelingStrategy = 'RULE_BASED';
        } else {
            if (vm.isPublishedOrScored) {
                vm.model = vm.ratingEngine.published_iteration ? vm.ratingEngine.published_iteration.AI : vm.ratingEngine.scoring_iteration.AI;
                vm.modelSummary = vm.model.modelSummaryId;
            } else {
                vm.model = vm.ratingEngine.latest_iteration.AI;

                var dashboardIterations = vm.dashboard.iterations;
                vm.activeIterations = [];
                angular.forEach(dashboardIterations, function (iteration) {
                    if (iteration.modelSummaryId && iteration.modelingJobStatus == "Completed") {
                        vm.activeIterations.push(iteration);
                    }
                });
                vm.modelSummary = vm.activeIterations.length > 0 ? vm.activeIterations[vm.activeIterations.length - 1].modelSummaryId : null;
            }
            var type = vm.ratingEngine.type.toLowerCase();

            if (type === 'cross_sell') {
                if (typeof vm.model.advancedModelingConfig[type].filters != 'undefined' && (Object.keys(vm.model.advancedModelingConfig[type].filters).length === 0 || vm.model.advancedModelingConfig[type].filters['PURCHASED_BEFORE_PERIOD'] && Object.keys(vm.model.advancedModelingConfig[type].filters).length === 1) && vm.model.trainingSegment == null && vm.model.advancedModelingConfig[type].filters.targetProducts == null) {
                    vm.hasSettingsInfo = false;
                } else {
                    vm.hasSettingsInfo = true;
                }

                if (Array.isArray(vm.targetProducts)) {
                    vm.targetProductsIsArray = true;
                    vm.tooltipContent = angular.copy(vm.targetProducts);
                    vm.targetProducts = vm.targetProducts.length + ' selected';
                } else {
                    vm.targetProductsIsArray = false;
                    vm.targetProducts = vm.targetProducts.ProductName;
                }

                vm.modelingStrategy = vm.model.advancedModelingConfig[type].modelingStrategy;
                vm.configFilters = vm.model.advancedModelingConfig[type].filters;

                if (vm.configFilters && vm.configFilters['SPEND_IN_PERIOD']) {
                    vm.spendCriteria = vm.configFilters['SPEND_IN_PERIOD'].criteria === 'GREATER_OR_EQUAL' ? 'at least' : 'at most';
                }

                if (vm.configFilters && vm.configFilters['QUANTITY_IN_PERIOD']) {
                    vm.quantityCriteria = vm.configFilters['QUANTITY_IN_PERIOD'].criteria === 'GREATER_OR_EQUAL' ? 'at least' : 'at most';
                }

                if (vm.modelingStrategy === 'CROSS_SELL_FIRST_PURCHASE') {
                    vm.ratingEngineType = 'First Purchase Cross-Sell';
                } else if (vm.modelingStrategy === 'CROSS_SELL_REPEAT_PURCHASE') {
                    vm.ratingEngineType = 'Repeat Purchase Cross-Sell';
                }
            } else {
                vm.modelingStrategy = 'CUSTOM_EVENT';
                vm.ratingEngineType = 'Custom Event';
            }

            vm.predictionType = vm.model.predictionType;
            vm.trainingSegment = vm.model.trainingSegment;

            if (vm.predictionType === 'PROPENSITY') {
                vm.prioritizeBy = 'Likely to Buy';
            } else if (vm.predictionType === 'EXPECTED_VALUE') {
                vm.prioritizeBy = 'Likely Amount of Spend';
            }
        }
    };

    vm.init = function () {
        vm.initDataModel();
    };

    vm.isIterationActive = function (iterationId) {
        if (vm.ratingEngine.scoring_iteration != null) {
            if (vm.ratingEngine.scoring_iteration.AI.id == iterationId) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    };

    vm.getCustomEventAvailableAttributes = function (model) {
        var dataStore = model.advancedModelingConfig.custom_event.dataStores;
        if (dataStore) {
            return dataStore.length == 1 ? RatingsEngineStore.formatTrainingAttributes(dataStore[0]) : RatingsEngineStore.formatTrainingAttributes(dataStore[0]) + ' + ' + RatingsEngineStore.formatTrainingAttributes(dataStore[1]);
        } else {
            return false;
        }
    };
    vm.getScoringButtonLable = function () {
        if (vm.isRulesBased) {
            return vm.ratingEngine.status === 'INACTIVE' ? 'Activate Scoring' : 'Deactivate Scoring';
        } else {
            return 'Deactivate Scoring';
        }
    };
    vm.disableButtonScoring = function () {
        if (!vm.isRulesBased) {
            // return vm.dashboard.summary.bucketMetadata ? false : true ;
            var deactivate = vm.ratingEngine.status === 'INACTIVE' || vm.deactivateInProgress === true;
            return deactivate;
        } else {
            return vm.deactivateInProgress;
        }
    };

    vm.isJobRunning = function () {
        var jobStatus = '';
        if (vm.ratingEngine.type === 'RULE_BASED') {
            var activeModel = vm.ratingEngine.activeModel;
            jobStatus = activeModel.rule.modelingJobStatus;
        } else {
            var model = vm.ratingEngine.scoring_iteration ? vm.ratingEngine.scoring_iteration : vm.ratingEngine.latest_iteration;
            jobStatus = model.AI.modelingJobStatus;
        }

        switch (jobStatus) {
            case 'Completed':
                return false;

            default:
                return true;
        }
    };

    vm.canNewScoringConfig = function () {
        var can = !(vm.dashboard.summary.bucketMetadata && vm.dashboard.summary.bucketMetadata.length === 0 || vm.isJobRunning());
        if (vm.dashboard.iterations) {
            var iterations = vm.dashboard.iterations;
            can = iterations.some(function (iteration) {
                return iteration.modelingJobStatus === 'Completed';
            });
        }
        return can;
    };

    vm.canCreatePlay = function () {
        if (vm.playbookEnabled) {
            return vm.dashboard.summary.isPublished && vm.ratingEngine.status === 'ACTIVE';
        } else {
            return false;
        }
    };

    vm.remodel = function (iteration) {
        var engineId = vm.ratingEngine.id,
            modelId = iteration.id;

        RatingsEngineStore.getRatingModel(engineId, modelId).then(function (result) {
            AtlasRemodelStore.setRemodelIteration(result);
            RatingsEngineStore.setRatingEngine(vm.ratingEngine);
            $state.go('home.ratingsengine.remodel', { engineId: engineId, modelId: modelId });
        });
    };

    vm.viewIteration = function (iteration) {
        var modelId = iteration.modelSummaryId,
            rating_id = $stateParams.rating_id;

        $state.go('home.model.attributes', {
            rating_id: rating_id,
            modelId: modelId,
            viewingIteration: true
        }, { reload: true });
    };

    $scope.$on("$destroy", function () {
        var modal = Modal.get(vm.modalConfig.name);
        if (modal) {
            Modal.modalRemoveFromDOM(modal, { name: 'rating_engine_deactivate' });
        }
    });

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/dashboard/dashboard.index.js":
/*!****************************************************************!*\
  !*** ./app/ratingsengine/content/dashboard/dashboard.index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./dashboard.component */ "./app/ratingsengine/content/dashboard/dashboard.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/prioritization/prioritization.component.js":
/*!******************************************************************************!*\
  !*** ./app/ratingsengine/content/prioritization/prioritization.component.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.prioritization', []).controller('RatingsEngineAIPrioritization', ["$scope", "$stateParams", "RatingsEngineStore", "RatingsEngineService", "Products", "PredictionType", function ($scope, $stateParams, RatingsEngineStore, RatingsEngineService, Products, PredictionType) {
    var vm = this;
    angular.extend(vm, {
        predictionType: PredictionType
    });

    vm.init = function () {
        vm.validateNextStep();
    };

    vm.setPredictionType = function (predictionType) {
        RatingsEngineStore.setPredictionType(predictionType);
        vm.predictionType = predictionType;
        vm.validateNextStep();
    };

    vm.validateNextStep = function () {
        if (RatingsEngineStore.getPredictionType() != null) {
            vm.setValidation('prioritization', true);
        } else {
            vm.setValidation('prioritization', false);
        }
    };
    vm.setValidation = function (type, validated) {
        RatingsEngineStore.setValidation(type, validated);
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/prioritization/prioritization.index.js":
/*!**************************************************************************!*\
  !*** ./app/ratingsengine/content/prioritization/prioritization.index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./prioritization.component */ "./app/ratingsengine/content/prioritization/prioritization.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/products/products.component.js":
/*!******************************************************************!*\
  !*** ./app/ratingsengine/content/products/products.component.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.products', ['mainApp.appCommon.directives.formOnChange']).controller('RatingsEngineProducts', ["$scope", "$stateParams", "$timeout", "RatingsEngineStore", "RatingsEngineService", "Products", "PeriodType", function ($scope, $stateParams, $timeout, RatingsEngineStore, RatingsEngineService, Products, PeriodType) {
    var vm = this;
    angular.extend(vm, {
        products: Products,
        currentPage: 1,
        pageSize: 10,
        productsCount: 0,
        productsSelected: {},
        sortBy: 'ProductName',
        showPagination: true,
        selectedAll: false,
        engineType: $stateParams.engineType,
        configFilters: {},
        timePeriod: getPurchasedBeforePeriod(),
        periodType: PeriodType.ApsRollingPeriod + '(s)'
    });

    $scope.$watch('vm.search', function (newValue, oldValue) {
        if (vm.search || oldValue) {
            vm.currentPage = 1;
        }
    });

    vm.init = function () {

        vm.getSelectedProducts();

        vm.filteredProducts = vm.products.slice(0, 10);
        vm.productsCount = vm.products.length;

        vm.validateNextStep();

        if (vm.engineType === 'CROSS_SELL_REPEAT_PURCHASE') {
            vm.resellFormOnChange();
        };
    };

    vm.getSelectedProducts = function () {
        if ($stateParams.rating_id) {
            RatingsEngineStore.getRating($stateParams.rating_id).then(function (rating) {

                if (rating.activeModel.AI.advancedModelingConfig.cross_sell.targetProducts !== null) {
                    var selectedTargetProducts = rating.activeModel.AI.advancedModelingConfig.cross_sell.targetProducts;
                    angular.forEach(selectedTargetProducts, function (value, key) {

                        var product = Products.filter(function (product) {
                            return product.ProductId === value;
                        });
                        product[0].Selected = true;

                        var productId = product[0].ProductId,
                            productName = product[0].ProductName;
                        if (!RatingsEngineStore.productsSelected[productId]) {
                            RatingsEngineStore.selectProduct(productId, productName);
                        };
                    });
                    vm.productsSelected = RatingsEngineStore.getProductsSelected();
                    vm.validateNextStep();
                } else {
                    RatingsEngineStore.clearSelection();
                    vm.productsSelected = {};
                }
            });
        }
    };

    vm.getTotalProductsCount = function () {
        return vm.productsCount;
    };

    vm.selectAll = function () {
        if (vm.selectedAll) {
            vm.selectedAll = true;
            RatingsEngineStore.selectAllProducts(vm.products);
            vm.products.forEach(function (product) {
                product.Selected = true;
            });
        } else {
            vm.selectedAll = false;
            vm.products.forEach(function (product) {
                product.Selected = false;
            });
            RatingsEngineStore.clearSelection();
        }

        vm.productsSelected = RatingsEngineStore.getProductsSelected();

        vm.validateNextStep();
    };
    vm.selectProduct = function (productId, index) {

        var product = vm.products.filter(function (product) {
            return product.ProductId === productId;
        });

        RatingsEngineStore.selectProduct(productId, product[0].ProductName);

        vm.productsSelected = RatingsEngineStore.getProductsSelected();
        vm.validateNextStep();

        // Uncomment when ability to select all products is available
        // if (Object.keys(vm.productsSelected).length === vm.products.length) {
        //     vm.selectedAll = true;
        // } else {
        //     vm.selectedAll = false;
        // }
    };

    vm.validateNextStep = function () {
        if (Object.keys(vm.productsSelected).length > 0) {
            vm.setValidation('products', true);
        } else {
            vm.setValidation('products', false);
        }
    };

    vm.setValidation = function (type, validated) {
        RatingsEngineStore.setValidation(type, validated);
    };

    vm.resellFormOnChange = function () {
        vm.configFilters.PURCHASED_BEFORE_PERIOD = {
            "configName": "PURCHASED_BEFORE_PERIOD",
            "criteria": "PRIOR_ONLY",
            "value": parseInt(vm.timePeriod)
        };

        RatingsEngineStore.setConfigFilters(vm.configFilters);
    };

    vm.getSelectedCount = function () {
        return Object.keys(vm.productsSelected).length;
    };

    function getPurchasedBeforePeriod() {
        var configFilters = RatingsEngineStore.getConfigFilters();
        if (configFilters && configFilters.PURCHASED_BEFORE_PERIOD && configFilters.PURCHASED_BEFORE_PERIOD.value) {
            return configFilters.PURCHASED_BEFORE_PERIOD.value.toString();
        } else {
            return '6';
        }
    }

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/products/products.index.js":
/*!**************************************************************!*\
  !*** ./app/ratingsengine/content/products/products.index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./products.component */ "./app/ratingsengine/content/products/products.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/ratingsenginetype/ratingengine-type.index.js":
/*!********************************************************************************!*\
  !*** ./app/ratingsengine/content/ratingsenginetype/ratingengine-type.index.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./ratingsenginetype.component */ "./app/ratingsengine/content/ratingsenginetype/ratingsenginetype.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/ratingsenginetype/ratingsenginetype.component.js":
/*!************************************************************************************!*\
  !*** ./app/ratingsengine/content/ratingsenginetype/ratingsenginetype.component.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.ratingsenginetype', []).controller('RatingsEngineType', ["$state", "$stateParams", "RatingsEngineStore", "FeatureFlagService", "ConfigureAttributesStore", function ($state, $stateParams, RatingsEngineStore, FeatureFlagService, ConfigureAttributesStore) {
    var vm = this;
    angular.extend(vm, {
        datacollectionPrecheck: null,
        datacollectionPrechecking: false
    });

    function getDatacollectionPrecheck() {
        vm.datacollectionPrechecking = true; // spinner
        ConfigureAttributesStore.getPrecheck().then(function (result) {
            vm.datacollectionPrecheck = result;
            vm.datacollectionPrechecking = false;
        });
    }

    vm.setType = function (wizardSteps, engineType) {
        // RatingsEngineStore.setType(type, engineType);
        $state.go('home.ratingsengine.' + wizardSteps, { engineType: engineType });
    };

    var flags = FeatureFlagService.Flags();
    vm.showCrossSellModeling = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CROSS_SELL_MODELING);

    vm.init = function () {
        getDatacollectionPrecheck();
    };
    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/ratingslist/modals/deleteratingmodal.component.js":
/*!*************************************************************************************!*\
  !*** ./app/ratingsengine/content/ratingslist/modals/deleteratingmodal.component.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.ratingsengine.deleteratingmodal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility']).service('DeleteRatingModal', ["$compile", "$templateCache", "$rootScope", "$http", function ($compile, $templateCache, $rootScope, $http) {
    var self = this;
    this.show = function (rating) {
        $http.get('app/ratingsengine/content/ratingslist/modals/deleteratingmodal.component.html', { cache: $templateCache }).success(function (html) {
            var scope = $rootScope.$new();
            scope.ratingId = rating.id;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DeleteRatingController', ["$scope", "$timeout", "ResourceUtility", "RatingsEngineStore", function ($scope, $timeout, ResourceUtility, RatingsEngineStore) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deleteRatingClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        deleteRating($scope.ratingId);
    };

    function deleteRating(ratingId) {
        $("#deleteRatingError").hide();
        $("#modalContainer").modal('hide');

        RatingsEngineStore.deleteRating(ratingId); //.then(function(result) {});
    }

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/ratingsengine/content/ratingslist/ratingslist.component.js":
/*!************************************************************************!*\
  !*** ./app/ratingsengine/content/ratingslist/ratingslist.component.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.ratingslist', ['mainApp.ratingsengine.deleteratingmodal', 'mainApp.appCommon.directives.barchart', 'mainApp.core.utilities.NavUtility', 'lp.tile.edit']).controller('RatingsEngineListController', ["$scope", "$timeout", "$location", "$element", "$state", "$stateParams", "$filter", "$interval", "$rootScope", "RatingsEngineStore", "RatingsEngineService", "DeleteRatingModal", "NavUtility", "StateHistory", "JobsStore", "JobsService", "ModelRatingsService", "ConfigureAttributesStore", "FilterService", "DataCloudStore", function ($scope, $timeout, $location, $element, $state, $stateParams, $filter, $interval, $rootScope, RatingsEngineStore, RatingsEngineService, DeleteRatingModal, NavUtility, StateHistory, JobsStore, JobsService, ModelRatingsService, ConfigureAttributesStore, FilterService, DataCloudStore) {
    var vm = this;

    angular.extend(vm, {
        current: RatingsEngineStore.current,
        isRatingsSet: true,
        query: '',
        ceil: window.Math.ceil,
        createRatingState: 'home.ratingsengine.ratingsenginetype',
        currentPage: 1,
        header: {
            sort: {
                label: 'Sort By',
                icon: 'numeric',
                order: '-',
                property: 'updated',
                items: [{ label: 'Last Modified', icon: 'numeric', property: 'updated' }, { label: 'Creation Date', icon: 'numeric', property: 'created' }, { label: 'Model Name', icon: 'alpha', property: 'displayName' }]
            },
            filter: {
                label: 'Filter By',
                value: {},
                items: [{ label: "All", action: {}, total: vm.totalLength }, { label: "Active", action: { status: 'ACTIVE' }, total: vm.activeCount }, { label: "Inactive", action: { status: 'INACTIVE' }, total: vm.inactiveCount }, { label: "Rules Based", action: { tileClass: 'RULE_BASED' }, total: vm.inactiveCount }, { label: "First Purchase Cross-Sell", action: { tileClass: 'CROSS_SELL_FIRST_PURCHASE' }, total: vm.inactiveCount }, { label: "Repeat Purchase Cross-Sell", action: { tileClass: 'CROSS_SELL_REPEAT_PURCHASE' }, total: vm.inactiveCount }, { label: "Custom Event", action: { tileClass: 'CUSTOM_EVENT' }, total: vm.inactiveCount }]
            }
        },
        barChartConfig: {
            'data': {
                'tosort': true,
                'sortBy': 'bucket_name',
                'trim': true,
                'top': 6
            },
            'chart': {
                'header': 'Value',
                'emptymsg': '',
                'usecolor': true,
                'color': '#e8e8e8',
                'mousehover': false,
                'type': 'integer',
                'showstatcount': false,
                'maxVLines': 3,
                'showVLines': false
            },
            'vlines': {
                'suffix': ''
            },
            'columns': [{
                'field': 'num_leads',
                'label': 'Records',
                'type': 'number',
                'chart': true
            }]
        },
        barChartLiftConfig: {
            'data': {
                'tosort': true,
                'sortBy': 'bucket_name',
                'trim': true,
                'top': 6
            },
            'chart': {
                'header': 'Value',
                'emptymsg': '',
                'usecolor': true,
                'color': '#e8e8e8',
                'mousehover': false,
                'type': 'decimal',
                'showstatcount': false,
                'maxVLines': 3,
                'showVLines': true
            },
            'vlines': {
                'suffix': 'x'
            },
            'columns': [{
                'field': 'lift',
                'label': 'Lift',
                'type': 'string',
                'suffix': 'x',
                'chart': true
            }]
        },
        editConfig: {
            data: { id: 'id' },
            fields: {
                name: { fieldname: 'displayName', visible: true, maxLength: 50 },
                description: { fieldname: 'description', visible: false, maxLength: 1000 }
            }
        }
    });

    vm.count = function (type) {
        return $filter('filter')(vm.current.ratings, { status: type }, true).length;
    };

    vm.saveName = function (obj, newData) {
        if (!newData) {
            vm.saveInProgress = false;
            vm.current.tileStates[obj.id].editRating = false;
        } else {
            updateRating(obj, newData);
            DataCloudStore.clear();
        }
    };

    vm.init = function ($q, $filter) {
        RatingsEngineStore.clear();

        vm.totalLength = vm.count();
        vm.activeCount = vm.count('ACTIVE');
        vm.inactiveCount = vm.count('INACTIVE');

        var referringRoute = StateHistory.lastFrom().name,
            lastRouteContainsSegmentOrAttributes = referringRoute.split('.').indexOf("products") > -1 || referringRoute.split('.').indexOf("attributes") > -1;

        // $scope.$watch('vm.header.filter.filtered', function() {
        //     vm.currentPage = 1;
        // });

        $scope.$watch('vm.current.ratings', function () {

            if (lastRouteContainsSegmentOrAttributes) {
                vm.isRatingsSet = RatingsEngineStore.ratingsSet;
            };

            var filterStore = FilterService.getFilters('ratings.filter');

            vm.header.filter.filtered = filterStore ? filterStore.filtered : vm.current.ratings;
            vm.header.filter.unfiltered = vm.current.ratings;

            angular.forEach(vm.current.ratings, function (rating, key, array) {
                if (rating.displayName === 'DS_Test_1stPur_0002_EV') {
                    console.log(JSON.stringify(rating.bucketMetadata));
                }
                if (rating.type === 'CROSS_SELL' && rating.advancedRatingConfig) {
                    rating.tileClass = rating.advancedRatingConfig.cross_sell.modelingStrategy;
                } else {
                    rating.tileClass = rating.type;
                }

                vm.setChartConfig(rating);
            });
        });

        // var arr = vm.current.ratings;
        // console.log(arr.slice(Math.max(arr.length - 10, 1)));
        // console.log('inProgressModelJobs', JobsStore.inProgressModelJobs);
    };

    vm.setChartConfig = function (rating) {
        if (rating.bucketMetadata && (rating.bucketMetadata != undefined || rating.bucketMetadata != null || rating.bucketMetadata.length != 0)) {
            if (rating.type === 'CROSS_SELL' || rating.type === 'CUSTOM_EVENT') {
                rating.chartConfig = vm.barChartLiftConfig;
            } else {
                rating.chartConfig = vm.barChartConfig;
            }
        }
    };

    vm.setData = function () {};

    vm.isPublished = function (rating) {};

    vm.checkState = function (type) {
        var map = {
            'home.segment.explorer.attributes': 'attributes',
            'home.segment.explorer.enumpicker': 'attributes',
            'home.segment.explorer.builder': 'builder',
            'home.segment.accounts': 'accounts',
            'home.segment.contacts': 'contacts'
        };

        return map[StateHistory.lastTo().name] == type;
    };

    /**
     * if they decide they want to add sorting by account or contact counts uncomment this and add
     * { label: 'Accounts', icon: 'numeric', property: 'accountCount' },
     * { label: 'Contacts', icon: 'numeric', property: 'contactCount' }
     * to sort object above
     */
    var checkForBuckets = $interval(function () {
        if (vm.current.bucketCountMap && vm.current.ratings) {
            angular.forEach(vm.current.ratings, function (rating, key) {
                rating.accountCount = vm.current.bucketCountMap[rating.id].accountCount || 0;
                rating.contactCount = vm.current.bucketCountMap[rating.id].contactCount || 0;
            });
            $interval.cancel(checkForBuckets);
        }
    }, 1000);
    vm.init();

    vm.hasRules = function (rating) {
        var hasRules = RatingsEngineStore.hasRules(rating);
        return hasRules;
    };

    vm.isAIRating = function (rating) {
        if (rating && rating.type != 'RULE_BASED') {
            return true;
        }
        return false;
    };

    vm.customMenuClick = function ($event, rating) {
        if ($event != null) {
            $event.stopPropagation();
        }

        var tileState = vm.current.tileStates[rating.id];
        tileState.showCustomMenu = !tileState.showCustomMenu;

        if (tileState.showCustomMenu) {
            $(document).bind('click', function (event) {
                var isClickedElementChildOfPopup = $element.find(event.target).length > 0;

                if (isClickedElementChildOfPopup) return;

                $scope.$apply(function () {
                    tileState.showCustomMenu = false;
                    $(document).unbind(event);
                });
            });
        }
    };

    vm.tileClick = function ($event, rating) {
        $event.preventDefault();

        var tileState = vm.current.tileStates[rating.id];

        if (tileState.editRating !== true) {
            RatingsEngineStore.getModel(rating.id).then(function (model) {
                if (rating.type === 'CROSS_SELL' || rating.type === 'CUSTOM_EVENT') {

                    var jobStatus = model.AI.modelingJobStatus;
                    var modelId = model.AI.modelSummaryId ? model.AI.modelSummaryId : '',
                        modelJobId = model.AI.modelingJobId;

                    if (modelId !== null || modelJobId !== null) {
                        $state.go('home.ratingsengine.dashboard', {
                            rating_id: rating.id,
                            modelId: modelId,
                            modelingJobStatus: jobStatus
                        });
                    } else {
                        if (rating.type === 'CROSS_SELL') {
                            var strategy = rating.advancedRatingConfig.cross_sell.modelingStrategy;
                            $state.go('home.ratingsengine.productpurchase', { rating_id: rating.id, engineType: strategy, fromList: true });
                        } else {
                            $state.go('home.ratingsengine.customevent', { rating_id: rating.id, fromList: true });
                        }
                    }
                } else {
                    $state.go('home.ratingsengine.dashboard', {
                        rating_id: rating.id,
                        modelId: ''
                    });
                }
            });
        }
    };

    vm.editRatingClick = function ($event, rating) {
        $event.stopPropagation();
        var tileState = vm.current.tileStates[rating.id];
        tileState.showCustomMenu = !tileState.showCustomMenu;
        tileState.editRating = !tileState.editRating;
    };

    /**
     * This method 
     * @param {*} rating 
     */
    function activateRating(rating) {

        vm.saveInProgress = true;
        var newStatus = rating.status === 'ACTIVE' ? 'INACTIVE' : 'ACTIVE';
        if (vm.isAIRating(rating)) {
            var aiModelId = rating.latestIterationId;
            ModelRatingsService.CreateABCDBucketsRatingEngine(rating.id, aiModelId, rating.bucketMetadata).then(function (result) {
                if (result != null && result.success === true) {
                    updateRating(rating, {
                        id: rating.id,
                        status: newStatus
                    });
                } else {
                    vm.saveInProgress = false;
                }
            });
        } else {
            updateRating(rating, {
                id: rating.id,
                status: newStatus
            });
        }
    }

    vm.editStatusClick = function ($event, rating, disable) {
        $event.stopPropagation();

        // console.log(rating, disable);

        if (disable) {
            return false;
        } else {
            activateRating(rating);
        }
        // updateRating(rating, updatedRating);
        RatingsEngineStore.setRatings(vm.current.ratings, true);
    };

    vm.showDeleteRatingModalClick = function ($event, rating) {
        $event.preventDefault();
        $event.stopPropagation();

        DeleteRatingModal.show(rating);
    };

    vm.canBeActivated = function (rating) {
        var type = rating.type;

        // var ret = false;
        if (rating.status !== 'ACTIVE' && type === 'RULE_BASED') {
            return true;
        } else {
            return false;
        }
    };

    vm.enableDelete = function (ratingId) {
        return !JobsStore.inProgressModelJobs.hasOwnProperty(ratingId) && !JobsStore.cancelledJobs.hasOwnProperty(ratingId);
    };

    vm.disableCancelJob = function (ratingId) {
        return !vm.enableDelete(ratingId) && JobsStore.inProgressModelJobs[ratingId] == null;
    };

    vm.cancelJobClickConfirm = function ($event, ratingId) {
        $event.stopPropagation();

        var jobId = JobsStore.inProgressModelJobs[ratingId];
        if (jobId) {
            //jobId can be null when status is pending
            JobsService.cancelJob(jobId).then(function (result) {
                JobsStore.cancelledJobs[ratingId] = jobId;
                delete JobsStore.inProgressModelJobs[ratingId];
            });
        } else {
            console.log('jobid', jobId);
        }
    };

    vm.isCancellingJob = function (ratingId) {
        return JobsStore.inProgressModelJobs[ratingId] == undefined && JobsStore.cancelledJobs[ratingId] != undefined;
    };

    function updateRating(rating, updatedRating) {
        vm.saveInProgress = true;
        RatingsEngineService.saveRating(updatedRating).then(function (result) {
            vm.saveInProgress = false;
            rating.status = result.status;
            vm.current.tileStates[rating.id].editRating = false;
            rating.displayName = result.displayName; //updates display name of rating; otherwise displays old name
        });
    }
}]);

/***/ }),

/***/ "./app/ratingsengine/content/ratingslist/ratingslist.index.js":
/*!********************************************************************!*\
  !*** ./app/ratingsengine/content/ratingslist/ratingslist.index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./modals/deleteratingmodal.component */ "./app/ratingsengine/content/ratingslist/modals/deleteratingmodal.component.js");

__webpack_require__(/*! ./ratingslist.component */ "./app/ratingsengine/content/ratingslist/ratingslist.component.js");

__webpack_require__(/*! ./tabs/ratingsenginetabs.component */ "./app/ratingsengine/content/ratingslist/tabs/ratingsenginetabs.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/ratingslist/tabs/ratingsenginetabs.component.js":
/*!***********************************************************************************!*\
  !*** ./app/ratingsengine/content/ratingslist/tabs/ratingsenginetabs.component.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.ratingsenginetabs', ['mainApp.appCommon.utilities.ResourceUtility']).controller('RatingsEngineTabsController', ["$filter", "ResourceUtility", "RatingsEngineStore", function ($filter, ResourceUtility, RatingsEngineStore) {
    var vm = this;

    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        current: RatingsEngineStore.current
    });

    vm.count = function (type) {
        return $filter('filter')(vm.current.ratings, { status: type }, true).length;
    };
}]);

/***/ }),

/***/ "./app/ratingsengine/content/remodel/attributes/attributes.component.js":
/*!******************************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/attributes/attributes.component.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.remodel.attributes', []).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.ratingsengine.remodel.training.attributes', {
        url: '/attributes',
        onExit: ['AtlasRemodelStore', function (AtlasRemodelStore) {
            AtlasRemodelStore.init();
        }],
        resolve: {
            configfilters: ['$q', 'RatingsEngineStore', function ($q, RatingsEngineStore) {
                var deferred = $q.defer();
                var copy = angular.copy(RatingsEngineStore.getConfigFilters());
                deferred.resolve(copy);
                return deferred.promise;
            }],
            attributes: ['$q', '$stateParams', 'AtlasRemodelStore', 'configfilters', function ($q, $stateParams, AtlasRemodelStore, configfilters) {
                var deferred = $q.defer(),
                    engineId = $stateParams.engineId,
                    modelId = $stateParams.modelId,
                    dataStoresArray = configfilters.dataStores;

                AtlasRemodelStore.getAttributes(engineId, modelId, dataStoresArray).then(function (attributes) {
                    deferred.resolve(attributes);
                });

                return deferred.promise;
            }],
            associatedRules: ['$q', '$stateParams', 'AtlasRemodelStore', function ($q, $stateParams, AtlasRemodelStore) {

                var deferred = $q.defer(),
                    iteration = AtlasRemodelStore.getRemodelIteration(),
                    modelSummaryId = iteration.AI.modelSummaryId;

                AtlasRemodelStore.getAssociatedRules(modelSummaryId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.remodel': 'remodelAttributes'
        }
    });
}]).component('remodelAttributes', {
    templateUrl: 'app/ratingsengine/content/remodel/attributes/attributes.component.html',
    bindings: {
        attributes: '<',
        filters: '<',
        configfilters: '<',
        associatedRules: '<'
    },
    controller: ["$q", "$scope", "$stateParams", "$timeout", "AtlasRemodelStore", function controller($q, $scope, $stateParams, $timeout, AtlasRemodelStore) {

        var vm = this;

        vm.$onInit = function () {
            vm.store = AtlasRemodelStore;
            vm.store.setConfigFilters(vm.configfilters);
            vm.store.set('associatedRules', vm.associatedRules);

            if (!vm.attributes['My Attributes']) {
                vm.attributes['My Attributes'] = [];
            }

            // Move Lead Information attributes to My Attributes and delete Lead Information Category
            if (vm.attributes['Lead Information']) {
                angular.forEach(vm.attributes['Lead Information'], function (attribute) {
                    attribute.Category = 'My Attributes';
                    vm.attributes['My Attributes'].push(attribute);
                });
                delete vm.attributes['Lead Information'];
            }

            // Set attributes data
            vm.store.setRemodelAttributes(vm.attributes);

            // Create categories object to render categories tabs
            vm.categories = {};
            angular.forEach(vm.attributes, function (value, key) {
                vm.categories[key] = value.length;
            });

            vm.filters = vm.store.getFilters();

            // Set default category in the store
            vm.selectedCategory = Object.keys(vm.categories)[0];
            vm.setCategoryData(vm.selectedCategory);
        };

        vm.setCategoryData = function (category) {
            vm.filters.currentPage = 1;
            // console.log(category, vm.filters);
            AtlasRemodelStore.set('category', category);
        };
    }]
});

/***/ }),

/***/ "./app/ratingsengine/content/remodel/creation/creation.component.js":
/*!**************************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/creation/creation.component.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.remodel.creation', []).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.ratingsengine.remodel.training.attributes.creation', {
        url: '/creation',
        resolve: {
            ratingEngine: ['$q', '$stateParams', 'RatingsEngineStore', function ($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                console.log($stateParams);

                RatingsEngineStore.getRating($stateParams.engineId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            products: ['$q', '$stateParams', 'RatingsEngineStore', function ($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                var params = {
                    max: 1000,
                    offset: 0
                };
                RatingsEngineStore.getProducts(params).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.remodel': 'ratingsEngineCreation'
        }
    });
}]);

/***/ }),

/***/ "./app/ratingsengine/content/remodel/filters/filters.component.js":
/*!************************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/filters/filters.component.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.remodel.filters', []).component('attrRemodelFilters', {
    templateUrl: 'app/ratingsengine/content/remodel/filters/filters.component.html',
    bindings: {
        filters: '< '
    },
    controller: ["$state", "$stateParams", "AttrConfigStore", function controller($state, $stateParams, AttrConfigStore) {
        var vm = this;

        vm.$onInit = function () {};
    }]
});

/***/ }),

/***/ "./app/ratingsengine/content/remodel/list/list.component.js":
/*!******************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/list/list.component.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.remodel.list', []).component('attrRemodelList', {
    templateUrl: 'app/ratingsengine/content/remodel/list/list.component.html',
    bindings: {
        filters: '<'
    },
    controller: ["$scope", "$state", "$stateParams", "AtlasRemodelStore", function controller($scope, $state, $stateParams, AtlasRemodelStore) {
        var vm = this;

        angular.extend(vm, {
            store: AtlasRemodelStore,
            params: $stateParams,
            allAttributes: AtlasRemodelStore.getRemodelAttributes(),
            sortBy: 'DisplayName'
        });

        vm.$onInit = function () {

            vm.associatedRules = AtlasRemodelStore.get('associatedRules');
        };

        vm.getCategoryAttributes = function () {
            var category = AtlasRemodelStore.get('category'),
                categoryAttributes = vm.allAttributes[category];

            angular.forEach(categoryAttributes, function (attribute) {
                attribute.hasWarning = attribute.IsCoveredByOptionalRule || attribute.IsCoveredByMandatoryRule ? true : false;
            });

            return categoryAttributes;
        };

        vm.filterRules = function (attr) {

            vm.attrTooltipContent = [];

            angular.forEach(vm.associatedRules, function (rule) {
                angular.forEach(attr.AssociatedDataRules, function (attrRule) {
                    if (rule.name === attrRule) {
                        vm.attrTooltipContent.push(rule);
                    }
                });
            });
        };

        vm.searchFilter = function (attr) {

            var text = vm.filters.queryText;
            if (text) {

                var chkName = attr.DisplayName.indexOf(text) >= 0,
                    chkCategory = (attr.Category || '').indexOf(text) >= 0;

                if (chkName || chkCategory) {
                    return true;
                } else if (attr.Attributes) {
                    for (var i = 0; i < attr.Attributes.length; i++) {
                        if (attr.Attributes[i].DisplayName.indexOf(text) >= 0) {
                            return true;
                        }
                    }
                }
            } else {
                return true;
            }

            return false;
        };

        vm.endsWith = function (item, string) {
            var reg = new RegExp(string + '$'),
                item = item || '',
                match = item.match(reg);
            if (match) {
                return true;
            }
            return false;
        };

        vm.toggleSelected = function (attribute) {
            var approvedUsage = attribute.ApprovedUsage;

            if (approvedUsage.indexOf('None') > -1) {
                approvedUsage.splice(0, 1);
                if (attribute.OriginalApprovedUsage) {
                    approvedUsage.push(attribute.OriginalApprovedUsage);
                } else {
                    approvedUsage.push('ModelAndAllInsights');
                }
            } else {
                attribute.OriginalApprovedUsage = approvedUsage[0];
                approvedUsage.splice(0, 1);
                approvedUsage.push('None');
            }
        };
    }]
});

/***/ }),

/***/ "./app/ratingsengine/content/remodel/remodel.component.js":
/*!****************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/remodel.component.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.remodel', ['lp.ratingsengine.remodel.training', 'lp.ratingsengine.remodel.attributes', 'lp.ratingsengine.remodel.creation', 'lp.ratingsengine.remodel.list', 'lp.ratingsengine.remodel.filters']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.ratingsengine.remodel', {
        url: '/:engineId/remodel/:modelId',
        onExit: ['RatingsEngineStore', 'AtlasRemodelStore', function (RatingsEngineStore, AtlasRemodelStore) {
            RatingsEngineStore.init();
            AtlasRemodelStore.init();
        }],
        resolve: {
            WizardValidationStore: ["RatingsEngineStore", function WizardValidationStore(RatingsEngineStore) {
                return RatingsEngineStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'ratingsengine.remodel';
            },
            WizardProgressItems: ["$state", "AtlasRemodelStore", "RatingsEngineService", "RatingsEngineStore", "Banner", function WizardProgressItems($state, AtlasRemodelStore, RatingsEngineService, RatingsEngineStore, Banner) {
                return [{
                    label: 'Training Changes',
                    state: 'training',
                    nextFn: function nextFn(nextState) {
                        var ratingId = $state.params.engineId,
                            modelId = $state.params.modelId;

                        RatingsEngineService.validateModel(ratingId, modelId).then(function (result) {
                            var success = !result.data.errorCode;
                            if (success) {
                                RatingsEngineService.validateModel(ratingId, modelId).then(function (result) {
                                    var success = !result.data.errorCode;
                                    if (success) {
                                        $state.go(nextState);
                                    }
                                });
                            }
                        });
                    },
                    progressDisabled: false
                }, {
                    label: 'Attributes Enablement',
                    state: 'training.attributes',
                    nextFn: function nextFn(nextState) {
                        AtlasRemodelStore.saveIteration(nextState);
                    },
                    progressDisabled: false,
                    showNextSpinner: true
                }, {
                    label: 'Creation',
                    state: 'training.attributes.creation',
                    progressDisabled: true,
                    hideBack: true,
                    secondaryLinkLabel: 'Go to Model List',
                    secondaryLink: 'home.ratingsengine',
                    lastRoute: true,
                    nextLabel: 'Create another Model',
                    nextFn: function nextFn(nextState) {
                        $state.go('home.ratingsengine.ratingsenginetype');
                    }
                }];
            }],
            WizardContainerId: function WizardContainerId() {
                return 'ratingsengine';
            },
            WizardHeaderTitle: ["$stateParams", "AtlasRemodelStore", function WizardHeaderTitle($stateParams, AtlasRemodelStore) {
                var iteration = AtlasRemodelStore.getRemodelIteration(),
                    title = 'Remodel - Iteration ' + iteration.AI.iteration;

                return title;
            }],
            WizardControlsOptions: ["$stateParams", "AtlasRemodelStore", function WizardControlsOptions($stateParams, AtlasRemodelStore) {

                var iteration = AtlasRemodelStore.getRemodelIteration();

                return {
                    backState: {
                        route: 'home.ratingsengine.dashboard',
                        params: {
                            rating_id: $stateParams.engineId,
                            modelId: iteration.AI.modelSummaryId
                        }
                    },
                    nextState: 'home.ratingsengine.dashboard',
                    secondaryLink: 'home.ratingsengine'

                };
            }]
        },
        views: {
            'summary@': {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'ImportWizard',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/wizard.component.html'
            },
            'wizard_header@home.ratingsengine.remodel': {
                controller: 'WizardHeader',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/header/header.component.html'
            },
            'wizard_progress@home.ratingsengine.remodel': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'
            },
            'wizard_controls@home.ratingsengine.remodel': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.ratingsengine.remodel.training'
    });
}]).component('remodel', {
    template: '',
    controller: function controller() {}
});

/***/ }),

/***/ "./app/ratingsengine/content/remodel/remodel.index.js":
/*!************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/remodel.index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./attributes/attributes.component */ "./app/ratingsengine/content/remodel/attributes/attributes.component.js");

__webpack_require__(/*! ./creation/creation.component */ "./app/ratingsengine/content/remodel/creation/creation.component.js");

__webpack_require__(/*! ./filters/filters.component */ "./app/ratingsengine/content/remodel/filters/filters.component.js");

__webpack_require__(/*! ./list/list.component */ "./app/ratingsengine/content/remodel/list/list.component.js");

__webpack_require__(/*! ./training/training.component */ "./app/ratingsengine/content/remodel/training/training.component.js");

__webpack_require__(/*! ./remodel.component */ "./app/ratingsengine/content/remodel/remodel.component.js");

__webpack_require__(/*! ./remodel.service */ "./app/ratingsengine/content/remodel/remodel.service.js");

/***/ }),

/***/ "./app/ratingsengine/content/remodel/remodel.service.js":
/*!**************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/remodel.service.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.remodel').service('AtlasRemodelStore', ["$q", "$state", "$stateParams", "$timeout", "BrowserStorageUtility", "AtlasRemodelService", "RatingsEngineStore", "JobsStore", function ($q, $state, $stateParams, $timeout, BrowserStorageUtility, AtlasRemodelService, RatingsEngineStore, JobsStore) {
    var store = this;

    this.init = function () {
        this.remodelIteration = null;

        this.filters = {
            currentPage: 1,
            pageSize: 10,
            sortPrefix: '+',
            queryText: ''
        };

        this.limit = -1;
        this.selected = [];
        this.start_selected = [];
        this.category = '';
        this.associatedRules = [];

        this.remodelAttributes = {};
        this.configFilters = RatingsEngineStore.getConfigFilters();
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.set = function (property, value) {
        this[property] = value;
    };
    this.get = function (property) {
        return this[property];
    };

    this.getFilters = function () {
        return this.filters;
    };

    this.setRemodelIteration = function (iteration) {
        this.remodelIteration = iteration;
    };
    this.getRemodelIteration = function () {
        return this.remodelIteration;
    };

    this.getRemodelAttributes = function () {
        return this.remodelAttributes;
    };
    this.setRemodelAttributes = function (remodelAttributes) {
        this.remodelAttributes = remodelAttributes;
    };

    this.getAttributes = function (engineId, modelId, dataStoresArray) {
        var deferred = $q.defer();

        AtlasRemodelService.getAttributes(engineId, modelId, dataStoresArray).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.getAssociatedRules = function (modelSummaryId) {
        var deferred = $q.defer();

        AtlasRemodelService.getAssociatedRules(modelSummaryId).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.setConfigFilters = function (filters) {
        this.configFilters = filters;
    };
    this.saveIteration = function (nextState) {

        var engineId = $stateParams.engineId,
            iteration = store.getRemodelIteration(),
            clientSession = BrowserStorageUtility.getClientSession(),
            createdBy = clientSession.EmailAddress;

        iteration.AI.derived_from_rating_model = iteration.AI.id;
        iteration.AI.createdBy = createdBy;

        // console.log(store.configFilters);

        if (iteration.AI.advancedModelingConfig.cross_sell) {
            iteration.AI.trainingSegment = RatingsEngineStore.getTrainingSegment();
            iteration.AI.advancedModelingConfig.cross_sell.filters = store.configFilters; // RatingsEngineStore.getConfigFilters();
        } else {
            iteration.AI.advancedModelingConfig.custom_event = store.configFilters; //RatingsEngineStore.getConfigFilters();
        }

        // Sanitize iteration to remove data
        delete iteration.AI.pid;
        delete iteration.AI.id;
        delete iteration.AI.modelingJobId;
        delete iteration.AI.modelingJobStatus;
        delete iteration.AI.modelSummaryId;

        // console.log(iteration.AI.advancedModelingConfig.cross_sell.filters);

        // Save iteration
        AtlasRemodelService.saveIteration(engineId, iteration).then(function (result) {

            var modelId = result.AI.id,
                attributes = store.getRemodelAttributes();

            // Sanitize attributes to remove OriginalApprovedUsage (used when toggling Enable/Disable in Attributes screen)
            angular.forEach(attributes, function (category) {
                var modifiedAttributes = category.filter(function (attribute) {
                    return attribute.OriginalApprovedUsage;
                });
                if (modifiedAttributes.length > 0) {
                    angular.forEach(modifiedAttributes, function (attribute) {
                        delete attribute.OriginalApprovedUsage;
                    });
                }
                var hasWarningAttributes = category.filter(function (attribute) {
                    return attribute.hasWarning;
                });
                if (hasWarningAttributes.length > 0) {
                    angular.forEach(hasWarningAttributes, function (attribute) {
                        delete attribute.hasWarning;
                    });
                }
            });

            // Launch Model
            AtlasRemodelService.launchModeling(engineId, modelId, attributes).then(function (applicationid) {
                // console.log(applicationid);

                RatingsEngineStore.setApplicationId(applicationid);
                JobsStore.inProgressModelJobs[engineId] = null;

                // console.log('Model Launched', id, nextState);
                if (nextState) {
                    $state.go(nextState, { ai_model_job_id: applicationid });
                }
            });
        });
    };
}]).service('AtlasRemodelService', ["$q", "$http", function ($q, $http) {

    this.getAttributes = function (engineId, modelId, dataStoresArray) {
        var deferred = $q.defer(),
            dataStores = dataStoresArray ? dataStoresArray.join(",") : undefined,
            dataStoresParams = dataStores ? '?data_stores=' + dataStores : '';
        $http({
            method: 'GET',
            url: '/pls/ratingengines/' + engineId + '/ratingmodels/' + modelId + '/metadata' + dataStoresParams
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getAssociatedRules = function (modelSummaryId) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/models/modelreview/' + modelSummaryId
        }).then(function onSuccess(response) {
            var result = response.data;

            if (result.Success == true) {
                deferred.resolve(result.Result);
            } else {
                deferred.resolve(result);
            }
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.saveIteration = function (engineId, iteration) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/ratingengines/' + engineId + '/ratingmodels',
            data: iteration
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.launchModeling = function (engineId, modelId, attributes) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/ratingengines/' + engineId + '/ratingmodels/' + modelId + '/model',
            headers: {
                'Accept': 'text/plain'
            },
            data: attributes
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/ratingsengine/content/remodel/training/training.component.js":
/*!**************************************************************************!*\
  !*** ./app/ratingsengine/content/remodel/training/training.component.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.remodel.training', []).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.ratingsengine.remodel.training', {
        url: '/training',
        resolve: {
            ratingEngine: ['RatingsEngineStore', function (RatingsEngineStore) {
                return RatingsEngineStore.getRatingEngine();
            }],
            segments: ['SegmentService', function (SegmentService) {
                return SegmentService.GetSegments();
            }],
            products: ['$q', 'RatingsEngineStore', function ($q, RatingsEngineStore) {
                var deferred = $q.defer();

                var params = {
                    max: 1000,
                    offset: 0
                };
                RatingsEngineStore.getProducts(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            iteration: ['$q', '$stateParams', 'RatingsEngineStore', 'AtlasRemodelStore', 'ratingEngine', function ($q, $stateParams, RatingsEngineStore, AtlasRemodelStore, ratingEngine) {
                var deferred = $q.defer(),
                    engineId = $stateParams.engineId,
                    modelId = $stateParams.modelId;

                console.log($stateParams);

                RatingsEngineStore.getRatingModel(engineId, modelId).then(function (result) {
                    AtlasRemodelStore.setRemodelIteration(result);
                    RatingsEngineStore.setRatingEngine(ratingEngine);

                    deferred.resolve(result);
                });
                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.remodel': 'ratingsEngineAITraining'
        }
    });
}]);

/***/ }),

/***/ "./app/ratingsengine/content/segment/segment.component.js":
/*!****************************************************************!*\
  !*** ./app/ratingsengine/content/segment/segment.component.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.segment', []).controller('RatingsEngineSegment', ["$scope", "$state", "$stateParams", "ResourceUtility", "RatingsEngineStore", "DataCloudStore", "Segments", "QueryStore", "CurrentRatingEngine", "FeatureFlagService", function ($scope, $state, $stateParams, ResourceUtility, RatingsEngineStore, DataCloudStore, Segments, QueryStore, CurrentRatingEngine, FeatureFlagService) {
    var vm = this,
        flags = FeatureFlagService.Flags();

    angular.extend(vm, {
        currentRating: CurrentRatingEngine,
        stored: RatingsEngineStore.segment_form,
        segments: Segments,
        stateParams: $stateParams,
        currentPage: 1,
        pageSize: 10,
        block_user: true,
        showPagination: true,
        hasSegments: true,
        sortBy: 'Selected',
        segmentsKeyMap: {},
        showScoreTrainingFileOption: FeatureFlagService.FlagIsEnabled(flags.SCORE_EXTERNAL_FILE),
        scoreTrainingFile: false
    });

    var makeSegmentsKeyMap = function makeSegmentsKeyMap(segments) {
        var segmentsKeyMap = {};
        segments.forEach(function (segment, index) {
            segmentsKeyMap[segment.name] = index;
        });
        return segmentsKeyMap;
    };

    $scope.$watch('vm.search', function (newValue, oldValue) {
        if (vm.search || oldValue) {
            vm.currentPage = 1;
        }
    });

    vm.init = function () {

        vm.filteredSegments = vm.segments.slice(0, 10);
        vm.segmentsKeyMap = makeSegmentsKeyMap(vm.segments);

        if (vm.segments.length === 0) {
            vm.hasSegments = false;
            vm.isValid = false;
        }

        if (vm.filteredSegments.length < 10) {
            vm.showPagination = false;
        }

        RatingsEngineStore.setValidation('segment', false);
        if ($stateParams.rating_id) {
            RatingsEngineStore.getRating($stateParams.rating_id).then(function (rating) {
                if (rating.segment) {
                    vm.stored.segment_selection = rating.segment.name;
                    vm.setSegment(rating.segment);
                } else if (rating.type == 'CUSTOM_EVENT') {
                    // LPI-version of custom-event modeling
                    vm.scoreTrainingFile = true;
                }
                vm.block_user = false;
                RatingsEngineStore.setValidation('segment', true);

                var makeItemFirst = function makeItemFirst(name) {
                    for (var i = 0; i < vm.segments.length; i++) {
                        if (vm.segments[i].name == name) {
                            vm.segments[i].Selected = true;
                        }
                    }
                };
                makeItemFirst(vm.stored.segment_selection);
            });
        } else {
            vm.block_user = false;
        }

        RatingsEngineStore.setModelingStrategy(vm.stateParams.engineType);
    };

    vm.endsWith = function (item, string) {
        var reg = new RegExp(string + '$'),
            item = item || '',
            match = item.match(reg);
        if (match) {
            return true;
        }
        return false;
    };

    function chunk(arr, n) {
        if (n < 2) return [arr];

        var len = arr.length,
            out = [],
            i = 0,
            size;

        if (len % n === 0) {
            size = Math.floor(len / n);
            while (i < len) {
                out.push(arr.slice(i, i += size));
            }
        } else {
            while (i < len) {
                size = Math.ceil((len - i) / n--);
                out.push(arr.slice(i, i += size));
            }
        }

        return out;
    }

    vm.getCounts = function (segments) {
        var segmentIds = [],
            _segments = {};

        angular.forEach(segments, function (segment) {
            var segmentId = segment.name;
            segmentIds.push(segmentId);
        });

        var segmentChunks = chunk(segmentIds, 5) || [];

        angular.forEach(segmentChunks, function (ids, index) {
            RatingsEngineStore.getSegmentsCounts(ids).then(function (response) {
                ids.forEach(function (id) {
                    if (vm.segmentsKeyMap && vm.segmentsKeyMap[id] !== 'undefined' && response.segmentIdCoverageMap && response.segmentIdCoverageMap[id]) {
                        vm.segments[vm.segmentsKeyMap[id]].numAccounts = response.segmentIdCoverageMap[id].accountCount ? response.segmentIdCoverageMap[id].accountCount : 0;
                        vm.segments[vm.segmentsKeyMap[id]].numContacts = response.segmentIdCoverageMap[id].contactCount ? response.segmentIdCoverageMap[id].contactCount : 0;
                    } else {
                        vm.segments[vm.segmentsKeyMap[id]].numAccounts = 0;
                        vm.segments[vm.segmentsKeyMap[id]].numContacts = 0;
                    }
                });
                var done = index + 1 === segmentChunks.length;
                if (done) {
                    vm.loadingSupplementaryData = false;
                }
            });
        });
    };

    vm.setSegment = function (segment) {

        // console.log(segment);

        RatingsEngineStore.setValidation('segment', true);
        RatingsEngineStore.setSegment(segment);
        RatingsEngineStore.setCustomEventModelingType('CDL');
    };

    vm.selectTrainingFile = function () {
        if (vm.scoreTrainingFile) {
            // RatingsEngineStore.setSegment(vm.segments[vm.segments.length - 1]);
            RatingsEngineStore.setSegment(null);

            vm.stored.segment_selection = "";
            RatingsEngineStore.setCustomEventModelingType('LPI');
            RatingsEngineStore.setValidation('segment', true);
        } else {
            RatingsEngineStore.setValidation('segment', false);
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/segment/segment.index.js":
/*!************************************************************!*\
  !*** ./app/ratingsengine/content/segment/segment.index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./segment.component */ "./app/ratingsengine/content/segment/segment.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/summary/summary.component.js":
/*!****************************************************************!*\
  !*** ./app/ratingsengine/content/summary/summary.component.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.summary', []).controller('RatingsEngineSummary', ["$q", "$state", "$stateParams", "Rating", "CurrentRatingEngine", "RatingsEngineModels", "RatingsEngineStore", "QueryStore", function ($q, $state, $stateParams, Rating, CurrentRatingEngine, RatingsEngineModels, RatingsEngineStore, QueryStore) {
    var vm = this;

    angular.extend(vm, {
        rating: Rating,
        labelIncrementor: 0,
        bucket: 'A',
        buckets: [],
        bucketsMap: { 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5 },
        bucketLabels: ['A', 'B', 'C', 'D', 'E', 'F'],
        default_bucket: 'A',
        rating_rule: {},
        coverage_map: {},
        rating_id: $stateParams.rating_id,
        ratings: RatingsEngineStore.ratings,
        treeMode: 'account',
        ratingStatus: false
    });

    vm.init = function () {

        vm.rating_rule = RatingsEngineModels.rule.ratingRule;
        vm.rating_buckets = vm.rating_rule.bucketToRuleMap;
        vm.default_bucket = vm.rating_rule.defaultBucketName;

        RatingsEngineStore.setRule(RatingsEngineModels);

        vm.initCoverageMap();

        RatingsEngineStore.getCoverageMap(RatingsEngineModels, CurrentRatingEngine.segment.name).then(function (result) {
            var CoverageMap = vm.initCoverageMap(result);
            console.log('[AQB] CoverageMap:', CoverageMap);
        });

        vm.getRuleRecordCounts();

        if (vm.rating.status = 'ACTIVE') {
            vm.ratingStatus = true;
        } else {
            vm.ratingStatus = false;
        }

        vm.isValid = true;
    };

    vm.changeDetails = function () {

        if (vm.rating.displayName.length === 0) {
            RatingsEngineStore.validation.summary = false;
        } else {
            RatingsEngineStore.validation.summary = true;
        };

        if (vm.ratingStatus === true) {
            vm.rating.status = 'ACTIVE';
        } else {
            vm.rating.status = 'INACTIVE';
        }

        //TODO: Check why we have this set of the opts
        // $stateParams.opts = {
        // 	rating_id: $stateParams.rating_id,
        // 	displayName: vm.rating.displayName,
        // 	note: vm.rating.note,
        // 	status: vm.rating.status
        // }
        // console.log('$stateParams ====> ', $stateParams);
    };

    vm.initCoverageMap = function (map) {
        var n = map ? 0 : -1;

        vm.buckets = [];

        vm.bucketLabels.forEach(function (bucketName, index) {
            vm.buckets.push({ bucket: bucketName, count: n });
        });

        if (map) {
            var segmentId = Object.keys(map.segmentIdModelRulesCoverageMap)[0];

            vm.coverage_map = map.segmentIdModelRulesCoverageMap[segmentId];

            if (vm.coverage_map.bucketCoverageCounts) {
                vm.coverage_map.bucketCoverageCounts.forEach(function (bkt) {
                    vm.buckets[vm.bucketsMap[bkt.bucket]].count = bkt.count;
                });
            }
        }

        return map;
    };

    vm.getRuleCount = function (bkt) {
        return QueryStore.getRuleCount(bkt, vm.rating_rule.bucketToRuleMap, vm.bucketLabels);
    };

    vm.getRuleRecordCounts = function (restrictions) {
        var restrictions = restrictions || vm.getAllBucketRestrictions(),
            segmentId = CurrentRatingEngine.segment.name,
            map = {};

        restrictions.forEach(function (bucket, index) {
            bucket.bucketRestriction.bkt.Cnt = -1;

            map[bucket.bucketRestriction.attr + '_' + index] = bucket;
        });

        return RatingsEngineStore.getBucketRuleCounts(restrictions, segmentId);

        // RatingsEngineStore.getBucketRuleCounts(restrictions, segmentId).then(function(result) {
        //     var buckets = result.segmentIdAndSingleRulesCoverageMap;

        //     Object.keys(buckets).forEach(function(key) {
        //         var label = map[key].bucketRestriction.attr,
        //             type = label.split('.')[0] == 'Contact' ? 'contact' : 'account';

        //         map[key].bucketRestriction.bkt.Cnt = buckets[key][type + 'Count'];
        //     });
        // }); 
    };

    vm.getAllBucketRestrictions = function () {
        var RatingEngineCopy = RatingsEngineModels,
            BucketMap = RatingEngineCopy.rule.ratingRule.bucketToRuleMap,
            restrictions = [];

        var recursive = function recursive(tree, restrictions) {
            if (!restrictions) {
                var restrictions = [];
            }

            tree.forEach(function (branch) {
                if (branch && branch.bucketRestriction && branch.bucketRestriction && branch.bucketRestriction.bkt.Id) {
                    restrictions.push(branch);
                }

                if (branch && branch.logicalRestriction) {
                    recursive(branch.logicalRestriction.restrictions, restrictions);
                }
            });
        };

        vm.bucketLabels.forEach(function (bucketName, index) {
            var logical = BucketMap[bucketName][vm.treeMode + '_restriction'].logicalRestriction;

            recursive(logical.restrictions, restrictions);
        });

        return restrictions;
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/summary/summary.index.js":
/*!************************************************************!*\
  !*** ./app/ratingsengine/content/summary/summary.index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./summary.component */ "./app/ratingsengine/content/summary/summary.component.js");

/***/ }),

/***/ "./app/ratingsengine/content/training/customeventtraining.component.js":
/*!*****************************************************************************!*\
  !*** ./app/ratingsengine/content/training/customeventtraining.component.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.training').controller('RatingsEngineCustomEventTraining', ["$q", "$scope", "$stateParams", "RatingsEngineStore", "ResourceUtility", "ImportStore", function ($q, $scope, $stateParams, RatingsEngineStore, ResourceUtility, ImportStore) {
    var vm = this;
    angular.extend(vm, {
        ResourceUtility: ResourceUtility,
        params: {
            infoTemplate: "<div class='row divider'><div class='twelve columns'><h4>What is a Training File?</h4><p>A training set is a CSV file with records of your historical successes. It is used to build your ideal customer profile by leveraging the Lattice Predictive Insights platform. Ideal training set should have at least 7,000 accounts, 150 success events and a conversion rate of less than 10%.</p></div></div><div class='row'><div class='twelve columns'><h4>Account Model:</h4><p>Upload a CSV file with accounts</p><p>Required: Id (any unique value for each record), Website (domain of company website), Event (1 for success, 0 otherwise)</p></div></div>",
            compressed: true,
            importError: false,
            importErrorMsg: '',
            tooltipConfiguration: {
                tooltipSide: 'bottom',
                whiteFont: true
            }
        },
        uploaded: false,
        goState: null,
        next: false,
        oneRecordPerAccount: false,
        includePersonalEmailDomains: false,
        useCuratedAttributes: false,
        modelTrainingOptions: RatingsEngineStore.getModelTrainingOptions()
    });

    vm.init = function () {
        RatingsEngineStore.setValidation("training", false);
    };

    vm.fileLoad = function (headers) {
        var columns = headers.split(','),
            nonDuplicatedColumns = [],
            duplicatedColumns = [],
            schemaSuggestion;

        vm.params.importError = false;
        vm.showImportError = false;

        vm.params.infoTemplate = "<p>Please prepare a CSV file with the data you wish to import, using the sample CSV file above as a guide.</p><p>You will be asked to map your fields to the Lattice system, so you may want to keep the uploaded file handy for the next few steps.</p>";

        if (columns.length > 0) {
            for (var i = 0; i < columns.length; i++) {
                if (nonDuplicatedColumns.indexOf(columns[i]) < 0) {
                    nonDuplicatedColumns.push(columns[i]);
                } else {
                    duplicatedColumns.push(columns[i]);
                }
            }
            if (duplicatedColumns.length != 0) {
                vm.showImportError = true;
                vm.importErrorMsg = "Duplicate column(s) detected: '[" + duplicatedColumns + "]'";
                vm.params.importError = true;
            }

            var hasWebsite = columns.indexOf('Website') != -1 || columns.indexOf('"Website"') != -1,
                hasEmail = columns.indexOf('Email') != -1 || columns.indexOf('"Email"') != -1;

            // do stuff
        }
    };

    vm.fileSelect = function (fileName) {
        setTimeout(function () {
            vm.uploaded = false;
        }, 25);
    };

    vm.fileDone = function (result) {
        vm.uploaded = true;
        if (result.Result) {
            vm.fileName = result.Result.name;
            RatingsEngineStore.setCSVFileName(vm.fileName);
            RatingsEngineStore.setDisplayFileName(result.Result.display_name);
            vm.next = vm.goState;
            RatingsEngineStore.setValidation("training", true);
        }
    };

    vm.fileCancel = function () {
        var xhr = ImportStore.Get('cancelXHR', true);

        if (xhr) {
            xhr.abort();
        }
    };

    vm.setTrainingOptions = function (trainingOption) {
        var current = RatingsEngineStore.modelTrainingOptions[trainingOption];
        switch (trainingOption) {
            case 'deduplicationType':
                RatingsEngineStore.modelTrainingOptions[trainingOption] = current == 'ONELEADPERDOMAIN' ? 'MULTIPLELEADSPERDOMAIN' : 'ONELEADPERDOMAIN';
                return;
            case 'excludePublicDomains':
                RatingsEngineStore.modelTrainingOptions[trainingOption] = !current;
                return;
            case 'transformationGroup':
                RatingsEngineStore.modelTrainingOptions[trainingOption] = current == 'NONE' ? null : 'NONE';
                return;
        }
    };

    vm.init();
}]);

/***/ }),

/***/ "./app/ratingsengine/content/training/training.component.js":
/*!******************************************************************!*\
  !*** ./app/ratingsengine/content/training/training.component.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine.wizard.training', ['mainApp.appCommon.directives.chips', 'mainApp.appCommon.directives.formOnChange', 'common.datacloud.query.builder.tree.edit.transaction.edit.numerical.range']).component('ratingsEngineAITraining', {
    templateUrl: 'app/ratingsengine/content/training/training.component.html',
    bindings: {
        ratingEngine: '<',
        segments: '<',
        products: '<',
        iteration: '<'
    },
    controller: ["$q", "$scope", "$stateParams", "$timeout", "RatingsEngineStore", "RatingsEngineService", "SegmentService", "AtlasRemodelStore", function controller($q, $scope, $stateParams, $timeout, RatingsEngineStore, RatingsEngineService, SegmentService, AtlasRemodelStore) {

        var vm = this;

        angular.extend(vm, {
            spendCriteria: "GREATER_OR_EQUAL",
            spendValue: 1500,
            quantityCriteria: "GREATER_OR_EQUAL",
            quantityValue: 2,
            periodsCriteria: "WITHIN",
            periodsValue: 2,
            configFilters: angular.copy(RatingsEngineStore.getConfigFilters()),
            trainingSegment: null,
            trainingProducts: null,
            scoringCountReturned: false,
            recordsCountReturned: false,
            purchasesCountReturned: false,
            pageTitle: $stateParams.section === 'wizard.ratingsengine_segment' ? 'How do you want to train the model?' : 'Do you want to change the way the model is trained?',
            checkboxModel: {},
            repeatPurchaseRemodel: false
        });

        vm.getNumericalConfig = function () {
            var config = { debounce: 800 };
            var ret = JSON.stringify(config);
            return ret;
        };

        vm.$onInit = function () {

            AtlasRemodelStore.setRemodelIteration(vm.iteration);

            vm.ratingModel = vm.iteration ? vm.iteration.AI : vm.ratingEngine.latest_iteration.AI;
            vm.engineType = vm.ratingEngine.type.toLowerCase();

            if ($stateParams.section != "wizard.ratingsengine_segment") {
                if (vm.engineType == 'cross_sell') {

                    vm.filters = vm.ratingModel.advancedModelingConfig.cross_sell.filters;

                    vm.repeatPurchase = vm.ratingEngine.advancedRatingConfig.cross_sell.modelingStrategy === 'CROSS_SELL_REPEAT_PURCHASE' ? true : false;
                    if (vm.repeatPurchase) {
                        vm.purchasedBeforePeriod = vm.filters.PURCHASED_BEFORE_PERIOD.value.toString();
                        vm.repeatPurchaseRemodel = true;
                    }

                    vm.trainingSegment = vm.ratingModel.trainingSegment ? vm.ratingModel.trainingSegment : null;

                    vm.trainingProducts = vm.ratingModel.advancedModelingConfig.cross_sell.trainingProducts ? vm.ratingModel.advancedModelingConfig.cross_sell.trainingProducts : null;

                    // Setup form for Cross Sell Models
                    vm.checkboxModel = {
                        spend: vm.filters.SPEND_IN_PERIOD ? true : false,
                        quantity: vm.filters.QUANTITY_IN_PERIOD ? true : false,
                        periods: vm.filters.TRAINING_SET_PERIOD ? true : false
                    };

                    vm.spendCriteria = vm.filters.SPEND_IN_PERIOD ? vm.filters.SPEND_IN_PERIOD.criteria : "GREATER_OR_EQUAL";
                    vm.spendValue = vm.filters.SPEND_IN_PERIOD ? vm.filters.SPEND_IN_PERIOD.value : 1500;

                    vm.quantityCriteria = vm.filters.QUANTITY_IN_PERIOD ? vm.filters.QUANTITY_IN_PERIOD.criteria : "GREATER_OR_EQUAL";
                    vm.quantityValue = vm.filters.QUANTITY_IN_PERIOD ? vm.filters.QUANTITY_IN_PERIOD.value : 2;

                    vm.periodsCriteria = vm.filters.TRAINING_SET_PERIOD ? vm.filters.TRAINING_SET_PERIOD.criteria : "WITHIN";
                    vm.periodsValue = vm.filters.TRAINING_SET_PERIOD ? vm.filters.TRAINING_SET_PERIOD.value : 2;

                    vm.validateCrossSellForm();
                } else {
                    // Setup form for Custom Event Models
                    vm.filters = vm.iteration.AI.advancedModelingConfig.custom_event;

                    RatingsEngineStore.setDisplayFileName(vm.filters.sourceFileName);

                    vm.checkboxModel = {
                        datacloud: vm.filters.dataStores.indexOf('DataCloud') > -1 ? true : false,
                        cdl: vm.filters.dataStores.indexOf('CDL') > -1 ? true : false,
                        customFile: vm.filters.dataStores.indexOf('CustomFileAttributes') > -1 ? true : false,
                        deduplicationType: vm.filters.deduplicationType == 'ONELEADPERDOMAIN' ? true : false,
                        excludePublicDomains: vm.filters.excludePublicDomains == true ? false : true,
                        transformationGroup: vm.filters.transformationGroup == 'NONE' ? false : true
                    };

                    vm.configFilters = angular.copy(vm.filters);

                    vm.configFilters.dataStores = [];
                    if (vm.checkboxModel.datacloud) {
                        vm.configFilters.dataStores.push('DataCloud');
                    }
                    if (vm.checkboxModel.cdl) {
                        vm.configFilters.dataStores.push('CDL');
                    }
                    if (vm.checkboxModel.customFile) {
                        vm.configFilters.dataStores.push('CustomFileAttributes');
                    }

                    vm.checkForDisable();
                    vm.validateCustomEventForm();
                }
            }

            vm.engineId = vm.ratingEngine.id;
            vm.modelId = vm.ratingModel.id;

            vm.modelingStrategy = vm.ratingModel.advancedModelingConfig[vm.engineType].modelingStrategy;

            if (vm.engineType == 'cross_sell') {

                if (angular.equals({}, vm.ratingEngine.latest_iteration.AI.advancedModelingConfig.cross_sell.filters)) {
                    vm.ratingEngine.latest_iteration.AI.advancedModelingConfig.cross_sell.filters = vm.ratingEngine.activeModel.AI.advancedModelingConfig.cross_sell.filters;
                }
                vm.getRecordsCount(vm.engineId, vm.modelId, vm.ratingEngine);
                vm.getPurchasesCount(vm.engineId, vm.modelId, vm.ratingEngine);
                vm.getScoringCount(vm.engineId, vm.modelId, vm.ratingEngine);
            }
        };

        // Functions for Cross Sell Models
        // ============================================================================================
        // ============================================================================================
        // ============================================================================================

        vm.getRecordsCount = function (engineId, modelId, ratingEngine) {
            vm.recordsCountReturned = false;
            RatingsEngineStore.getTrainingCounts(engineId, modelId, ratingEngine, 'TRAINING').then(function (count) {
                vm.recordsCount = count;
                vm.recordsCountReturned = true;
            });
        };
        vm.getPurchasesCount = function (engineId, modelId, ratingEngine) {
            vm.purchasesCountReturned = false;
            RatingsEngineStore.getTrainingCounts(engineId, modelId, ratingEngine, 'EVENT').then(function (count) {
                vm.purchasesCount = count;
                vm.purchasesCountReturned = true;
            });
        };
        vm.getScoringCount = function (engineId, modelId, ratingEngine) {
            vm.scoringCountReturned = false;
            RatingsEngineStore.getTrainingCounts(engineId, modelId, ratingEngine, 'TARGET').then(function (count) {
                vm.scoringCount = count;
                vm.scoringCountReturned = true;
            });
        };

        vm.segmentCallback = function (selectedSegment) {
            vm.trainingSegment = selectedSegment[0];
            RatingsEngineStore.setTrainingSegment(vm.trainingSegment);
            vm.ratingModel.trainingSegment = vm.trainingSegment;
            vm.updateSegmentSelected(vm.trainingSegment);
            vm.autcompleteChange();
        };
        vm.updateSegmentSelected = function (trainingSegment) {
            if (vm.ratingEngine.activeModel.AI) {
                vm.ratingEngine.latest_iteration.AI.trainingSegment = trainingSegment ? trainingSegment : null;
                vm.ratingEngine.activeModel.AI.trainingSegment = trainingSegment ? trainingSegment : null;
            }
        };

        vm.productsCallback = function (selectedProducts) {
            vm.trainingProducts = [];
            angular.forEach(selectedProducts, function (product) {
                vm.trainingProducts.push(product.ProductId);
            });
            vm.updateProductsSelected(vm.trainingProducts);
            RatingsEngineStore.setTrainingProducts(vm.trainingProducts);
            vm.ratingModel.advancedModelingConfig.cross_sell.trainingProducts = vm.trainingProducts;

            vm.autcompleteChange();
        };
        vm.updateProductsSelected = function (listProducts) {
            if (vm.ratingEngine.activeModel.AI) {
                vm.ratingEngine.latest_iteration.AI.advancedModelingConfig.cross_sell.trainingProducts = listProducts;
                vm.ratingEngine.activeModel.AI.advancedModelingConfig.cross_sell.trainingProducts = listProducts;
            }
        };

        vm.autcompleteChange = function () {
            vm.getRecordsCount(vm.engineId, vm.modelId, vm.ratingEngine);
            vm.getPurchasesCount(vm.engineId, vm.modelId, vm.ratingEngine);
        };

        vm.getSpendConfig = function () {
            return {
                from: { name: 'from-spend', value: vm.spendValue, position: 0, type: 'Spend', min: '0', max: '2147483647' },
                to: { name: 'to-spend', value: vm.spendValue, position: 1, type: 'Spend', min: '0', max: '2147483647' }
            };
        };

        vm.getQuantityConfig = function () {
            return {
                from: { name: 'from-quantity', value: vm.quantityValue, position: 0, type: 'Quantity', min: '0', max: '2147483647', disabled: true, visible: true },
                to: { name: 'to-quantity', value: vm.quantityValue, position: 1, type: 'Quantity', min: '0', max: '2147483647', disbaled: true, visible: false }
            };
        };

        vm.getPeriodConfig = function () {
            return {
                from: { name: 'from-period', value: vm.periodsValue, position: 0, type: 'Period', min: '0', max: '2147483647' },
                to: { name: 'to-period', value: vm.periodsValue, position: 1, type: 'Period', min: '0', max: '2147483647' }
            };
        };

        vm.getSpendConfigString = function () {
            var ret = JSON.stringify(vm.getSpendConfig());
            return ret;
        };

        vm.getQuantityConfigString = function () {
            var ret = JSON.stringify(vm.getQuantityConfig());
            return ret;
        };

        vm.getPeriodConfigString = function () {
            var ret = JSON.stringify(vm.getPeriodConfig());
            return ret;
        };

        vm.callbackSpend = function (type, position, value) {
            if (value) {
                vm.spendValue = value;
            }
            vm.formOnChange();
        };

        vm.callbackQuantity = function (type, position, value) {
            if (value) {
                vm.quantityValue = value;
            }
            vm.formOnChange();
        };

        vm.callbackPeriod = function (type, position, value) {
            if (value) {
                vm.periodsValue = value;
            }
            vm.formOnChange();
        };

        vm.getPurchasedBeforeValue = function (value) {
            // vm.purchasedBeforePeriod = value;
            // console.log('Value ',vm.purchasedBeforePeriod);
        };

        vm.validateCrossSellForm = function () {

            var valid = true;
            if ($scope.trainingForm) {
                valid = $scope.trainingForm.$valid;
            }

            if (valid == true) {
                RatingsEngineStore.validation.training = true;
                RatingsEngineStore.validation.refine = true;
                vm.recordsCountReturned = false;
                vm.purchasesCountReturned = false;

                if (vm.repeatPurchaseRemodel) {

                    vm.purchasedBeforePeriodNum = Number(vm.purchasedBeforePeriod);
                    vm.configFilters.PURCHASED_BEFORE_PERIOD = {
                        "configName": "PURCHASED_BEFORE_PERIOD",
                        "criteria": "PRIOR_ONLY",
                        "value": vm.purchasedBeforePeriodNum
                    };
                    vm.ratingModel.advancedModelingConfig.cross_sell.filters = vm.configFilters;
                }

                if (vm.checkboxModel.spend) {
                    vm.configFilters.SPEND_IN_PERIOD = {
                        "configName": "SPEND_IN_PERIOD",
                        "criteria": vm.spendCriteria,
                        "value": vm.spendValue
                    };
                } else {
                    delete vm.configFilters.SPEND_IN_PERIOD;
                }

                if (vm.checkboxModel.quantity) {
                    vm.configFilters.QUANTITY_IN_PERIOD = {
                        "configName": "QUANTITY_IN_PERIOD",
                        "criteria": vm.quantityCriteria,
                        "value": vm.quantityValue
                    };
                } else {
                    delete vm.configFilters.QUANTITY_IN_PERIOD;
                }

                if (vm.checkboxModel.periods) {
                    vm.configFilters.TRAINING_SET_PERIOD = {
                        "configName": "TRAINING_SET_PERIOD",
                        "criteria": vm.periodsCriteria,
                        "value": vm.periodsValue
                    };
                } else {
                    delete vm.configFilters.TRAINING_SET_PERIOD;
                }

                vm.ratingEngine.latest_iteration.AI.advancedModelingConfig.cross_sell.filters = vm.configFilters;

                // console.log(vm.ratingEngine);
                // console.log(vm.engineId, vm.modelId, vm.ratingModel);

                $timeout(function () {
                    RatingsEngineStore.setConfigFilters(vm.configFilters);
                    vm.getRecordsCount(vm.engineId, vm.modelId, vm.ratingEngine);
                    vm.getPurchasesCount(vm.engineId, vm.modelId, vm.ratingEngine);
                }, 500);
            } else {
                RatingsEngineStore.validation.training = false;
                RatingsEngineStore.validation.refine = false;
            }
        };

        // Functions for Custom Event Models
        // ============================================================================================
        // ============================================================================================
        // ============================================================================================

        vm.checkForDisable = function () {
            if (vm.checkboxModel.datacloud == false && vm.checkboxModel.cdl == false) {
                RatingsEngineStore.setValidation("training", false);
            } else {
                RatingsEngineStore.setValidation("training", true);
            }
        };

        vm.validateCustomEventForm = function () {

            var valid = true;
            if ($scope.trainingForm) {
                valid = $scope.trainingForm.$valid;
            }

            if (valid == true) {
                // RatingsEngineStore.setConfigFilters(vm.configFilters);
                vm.dataStores = vm.configFilters.dataStores;

                if (vm.checkboxModel.datacloud) {
                    $timeout(function () {
                        if (vm.dataStores.indexOf('DataCloud') == -1) {
                            vm.configFilters.dataStores.push('DataCloud');
                        }
                    }, 200);
                } else {
                    var index = vm.dataStores.indexOf('DataCloud');
                    vm.dataStores.splice(index, 1);
                }

                if (vm.checkboxModel.cdl) {
                    $timeout(function () {
                        if (vm.dataStores.indexOf('CDL') == -1) {
                            vm.configFilters.dataStores.push('CDL');
                        }
                    }, 200);
                } else {
                    var index = vm.dataStores.indexOf('CDL');
                    vm.dataStores.splice(index, 1);
                }

                if (vm.checkboxModel.customFile) {
                    $timeout(function () {
                        if (vm.dataStores.indexOf('CustomFileAttributes') == -1) {
                            vm.configFilters.dataStores.push('CustomFileAttributes');
                        }
                    }, 200);
                } else {
                    var index = vm.dataStores.indexOf('CustomFileAttributes');
                    vm.dataStores.splice(index, 1);
                }

                if (vm.checkboxModel.deduplicationType) {
                    vm.configFilters.deduplicationType = 'ONELEADPERDOMAIN';
                } else {
                    vm.configFilters.deduplicationType = 'MULTIPLELEADSPERDOMAIN';
                }

                vm.configFilters.excludePublicDomains = vm.checkboxModel.excludePublicDomains ? false : true;

                if (!vm.checkboxModel.transformationGroup) {
                    vm.configFilters.transformationGroup = 'NONE';
                } else {
                    vm.configFilters.transformationGroup = 'ALL';
                }

                $timeout(function () {
                    RatingsEngineStore.setConfigFilters(vm.configFilters);
                    vm.ratingModel.advancedModelingConfig.custom_event = vm.configFilters;
                }, 500);
            } else {
                RatingsEngineStore.validation.training = false;
                RatingsEngineStore.validation.refine = false;
            }
        };

        vm.formOnChange = function () {
            $timeout(function () {
                if (vm.engineType === 'cross_sell') {
                    vm.validateCrossSellForm();
                } else {
                    vm.validateCustomEventForm();
                }
            }, 1500);
        };
    }]
});

/***/ }),

/***/ "./app/ratingsengine/content/training/training.index.js":
/*!**************************************************************!*\
  !*** ./app/ratingsengine/content/training/training.index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./training.component */ "./app/ratingsengine/content/training/training.component.js");

__webpack_require__(/*! ./customeventtraining.component */ "./app/ratingsengine/content/training/customeventtraining.component.js");

/***/ }),

/***/ "./app/ratingsengine/ratingsengine.index.js":
/*!**************************************************!*\
  !*** ./app/ratingsengine/ratingsengine.index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./content/activatescoring/activatescoring.index */ "./app/ratingsengine/content/activatescoring/activatescoring.index.js");

__webpack_require__(/*! ./content/ai/ai.index */ "./app/ratingsengine/content/ai/ai.index.js");

__webpack_require__(/*! ./content/attributes/attributes.index */ "./app/ratingsengine/content/attributes/attributes.index.js");

__webpack_require__(/*! ./content/creation/creation.index */ "./app/ratingsengine/content/creation/creation.index.js");

__webpack_require__(/*! ./content/creationhistory/creation-history.index */ "./app/ratingsengine/content/creationhistory/creation-history.index.js");

__webpack_require__(/*! ./content/dashboard/dashboard.index */ "./app/ratingsengine/content/dashboard/dashboard.index.js");

__webpack_require__(/*! ./content/prioritization/prioritization.index */ "./app/ratingsengine/content/prioritization/prioritization.index.js");

__webpack_require__(/*! ./content/products/products.index */ "./app/ratingsengine/content/products/products.index.js");

__webpack_require__(/*! ./content/ratingsenginetype/ratingengine-type.index */ "./app/ratingsengine/content/ratingsenginetype/ratingengine-type.index.js");

__webpack_require__(/*! ./content/ratingslist/ratingslist.index */ "./app/ratingsengine/content/ratingslist/ratingslist.index.js");

__webpack_require__(/*! ./content/segment/segment.index */ "./app/ratingsengine/content/segment/segment.index.js");

__webpack_require__(/*! ./content/summary/summary.index */ "./app/ratingsengine/content/summary/summary.index.js");

__webpack_require__(/*! ./content/remodel/remodel.index */ "./app/ratingsengine/content/remodel/remodel.index.js");

__webpack_require__(/*! ./content/training/training.index */ "./app/ratingsengine/content/training/training.index.js");

__webpack_require__(/*! ./ratingsengine.routes */ "./app/ratingsengine/ratingsengine.routes.js");

__webpack_require__(/*! ./ratingsengine.service */ "./app/ratingsengine/ratingsengine.service.js");

/***/ }),

/***/ "./app/ratingsengine/ratingsengine.routes.js":
/*!***************************************************!*\
  !*** ./app/ratingsengine/ratingsengine.routes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine', ['common.wizard', 'common.datacloud', 'lp.segments.segments', 'lp.ratingsengine.ratingsenginetabs', 'lp.ratingsengine.ratingslist', 'lp.ratingsengine.creationhistory', 'lp.ratingsengine.ratingsenginetype', 'lp.ratingsengine.dashboard', 'lp.ratingsengine.activatescoring', 'lp.ratingsengine.remodel', 'lp.notes', 'lp.ratingsengine.wizard.segment', 'lp.ratingsengine.wizard.attributes', 'lp.ratingsengine.wizard.products', 'lp.ratingsengine.wizard.prioritization', 'lp.ratingsengine.wizard.training', 'lp.ratingsengine.wizard.summary', 'lp.ratingsengine.wizard.creation']).config(["$stateProvider", "DataCloudResolvesProvider", function ($stateProvider, DataCloudResolvesProvider) {
    $stateProvider.state('home.ratingsengine', {
        url: '/ratings_engine',
        onExit: ["QueryStore", "FilterService", function onExit(QueryStore, FilterService) {
            QueryStore.clear();
            FilterService.clear();
        }],
        redirectTo: 'home.ratingsengine.list'
    }).state('home.ratingsengine.list', {
        url: '/list',
        resolve: {
            RatingList: ["$q", "RatingsEngineStore", function RatingList($q, RatingsEngineStore) {
                var deferred = $q.defer();

                RatingsEngineStore.getRatings().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: 'RatingsEngineTabsController',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/ratingslist/tabs/ratingsenginetabs.component.html'
            }
        },
        redirectTo: 'home.ratingsengine.list.ratings'
    }).state('home.ratingsengine.list.ratings', {
        url: '/ratings',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models'
        },
        views: {
            "main@": {
                controller: 'RatingsEngineListController',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/ratingslist/ratingslist.component.html'
            }
        }
    }).state('home.ratingsengine.list.history', {
        url: '/creationhistory',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models'
        },
        views: {
            "main@": {
                controller: 'RatingsEngineCreationHistory',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/creationhistory/creationhistory.component.html'
            }
        }
    }).state('home.ratingsengine.ratingsenginetype', {
        url: '/ratingsenginetype',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models',
            rating_id: ''
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'RatingsEngineType',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/ratingsenginetype/ratingsenginetype.component.html'
            }
        }
    }).state('home.ratingsengine.dashboard', {
        url: '/:rating_id/dashboard/:modelId',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Model',
            modelId: '',
            modelingJobStatus: null
        },
        onEnter: ['RatingEngine', 'BackStore', function (RatingEngine, BackStore) {
            BackStore.setBackLabel(RatingEngine.displayName);
            BackStore.setBackState('home.ratingsengine');
            BackStore.setHidden(false);
        }],
        resolve: {
            JobStatus: ["$q", "$stateParams", "RatingsEngineStore", function JobStatus($q, $stateParams, RatingsEngineStore) {
                var jobStatus = $stateParams.modelingJobStatus;
                var deferred = $q.defer();
                if (jobStatus == null) {
                    var ratingId = $stateParams.rating_id;
                    RatingsEngineStore.getModel(ratingId).then(function (model) {

                        if (model.AI) {
                            var jobStatus = model.AI.modelingJobStatus;
                            deferred.resolve({ modelingJobStatus: jobStatus });
                        } else {
                            deferred.resolve({ modelingJobStatus: 'Completed' });
                        }
                    });
                } else {
                    deferred.resolve({ modelingJobStatus: jobStatus });
                }
                return deferred.promise;
            }],
            Dashboard: ["$q", "$stateParams", "RatingsEngineStore", "ModelStore", function Dashboard($q, $stateParams, RatingsEngineStore, ModelStore) {
                var deferred = $q.defer();
                var rating_id = $stateParams.rating_id || RatingsEngineStore.getRatingId();
                RatingsEngineStore.getRatingDashboard(rating_id).then(function (data) {
                    ModelStore.setDashboardData(data);
                    deferred.resolve(data);
                });

                return deferred.promise;
            }],
            RatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function RatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer(),
                    id = $stateParams.rating_id;

                RatingsEngineStore.getRating(id).then(function (engine) {
                    deferred.resolve(engine);
                });

                return deferred.promise;
            }],
            Model: ["$q", "$stateParams", "ModelStore", "RatingEngine", function Model($q, $stateParams, ModelStore, RatingEngine) {
                var deferred = $q.defer(),
                    id = $stateParams.modelId;

                if (RatingEngine.type === 'RULE_BASED' || id === '') {
                    deferred.resolve(null);
                } else if (ModelStore.data != undefined) {
                    deferred.resolve(ModelStore.data);
                } else {
                    ModelStore.getModel(id).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            }],
            IsRatingEngine: ["Model", function IsRatingEngine(Model) {
                return true;
            }],
            IsPmml: ["Model", function IsPmml(Model) {
                return false;
            }],
            Products: ["$q", "$stateParams", "RatingsEngineStore", function Products($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                var params = {
                    max: 1000,
                    offset: 0
                };
                RatingsEngineStore.getProducts(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            TargetProducts: ["RatingEngine", "Products", function TargetProducts(RatingEngine, Products) {
                var ratingEngine = RatingEngine,
                    type = ratingEngine.type.toLowerCase();

                if (type != 'rule_based') {
                    var isPublishedOrScored = ratingEngine.published_iteration || ratingEngine.scoring_iteration ? true : false,
                        products = Products,
                        model = {},
                        targetProducts = [];

                    if (isPublishedOrScored) {
                        var model = ratingEngine.published_iteration ? ratingEngine.published_iteration.AI : ratingEngine.scoring_iteration.AI;
                    } else {
                        var model = ratingEngine.latest_iteration.AI;
                    }

                    var targetProducts = model.advancedModelingConfig[type].targetProducts;

                    if (targetProducts && targetProducts.length != 0) {
                        if (targetProducts.length == 1) {
                            return products.find(function (obj) {
                                return obj.ProductId === targetProducts[0].toString();
                            });
                        } else {
                            var targetProductNames = [];
                            angular.forEach(targetProducts, function (product) {
                                targetProductNames.push(products.find(function (obj) {
                                    return obj.ProductId === product.toString();
                                }));
                            });
                            return targetProductNames;
                        }
                    }
                } else {
                    return null;
                }
            }],
            TrainingProducts: ["RatingEngine", "Products", function TrainingProducts(RatingEngine, Products) {
                var ratingEngine = RatingEngine,
                    type = ratingEngine.type.toLowerCase();

                if (type != 'rule_based') {

                    var isPublishedOrScored = ratingEngine.published_iteration || ratingEngine.scoring_iteration ? true : false,
                        products = Products,
                        model = {},
                        trainingProducts = [];

                    if (isPublishedOrScored) {
                        var model = ratingEngine.published_iteration ? ratingEngine.published_iteration.AI : ratingEngine.scoring_iteration.AI;
                    } else {
                        var model = ratingEngine.latest_iteration.AI;
                    }

                    var trainingProducts = model.advancedModelingConfig[type].trainingProducts;

                    if (trainingProducts && trainingProducts.length != 0) {
                        if (trainingProducts.length == 1) {
                            return products.find(function (obj) {
                                return obj.ProductId === trainingProducts[0].toString();
                            });
                        } else {
                            var trainingProductNames = [];
                            angular.forEach(trainingProducts, function (product) {
                                trainingProductNames.push(products.find(function (obj) {
                                    return obj.ProductId === product.toString();
                                }));
                            });
                            return trainingProductNames;
                        }
                    }
                } else {
                    return null;
                }
            }]
        },
        views: {
            "summary@": {
                controller: 'ModelDetailController',
                template: '<div id="ModelDetailsArea"></div>'
            },
            "navigation@home": {
                controller: ["$scope", "$stateParams", "$state", "$rootScope", "RatingsEngineStore", "Dashboard", "RatingEngine", "Model", "JobStatus", function controller($scope, $stateParams, $state, $rootScope, RatingsEngineStore, Dashboard, RatingEngine, Model, JobStatus) {
                    $scope.rating_id = $stateParams.rating_id || '';
                    $scope.modelId = $stateParams.modelId || '';
                    $scope.isRuleBased = RatingEngine.type === 'RULE_BASED';

                    $scope.isRuleBased = RatingEngine.type === 'RULE_BASED' ? true : false;
                    $scope.isCustomEvent = RatingEngine.type === 'CUSTOM_EVENT' ? true : false;
                    if ($scope.isRuleBased || $scope.isCustomEvent) {
                        if ($scope.isRuleBased) {
                            $scope.typeContext = 'rule';
                        } else {
                            $scope.typeContext = 'AI';
                        }
                        $scope.modelingStrategy = RatingEngine.type;
                    } else {
                        var type = RatingEngine.type.toLowerCase();
                        $scope.typeContext = 'AI';

                        $scope.modelingStrategy = RatingEngine.activeModel.AI.advancedModelingConfig[type].modelingStrategy;
                    }

                    $scope.activeIteration = RatingEngine.activeModel[$scope.typeContext].iteration;
                    $scope.modelIsReady = RatingEngine.activeModel[$scope.typeContext].modelSummaryId !== null || RatingEngine.activeModel[$scope.typeContext].modelSummaryId !== undefined;

                    $scope.stateName = function () {
                        return $state.current.name;
                    };

                    $scope.isJobCompleted = function () {
                        switch (JobStatus.modelingJobStatus) {
                            case 'Completed':
                                {
                                    return true;
                                }
                            default:
                                return false;
                        }
                    };
                }],
                templateUrl: 'app/ratingsengine/content/dashboard/sidebar/sidebar.component.html'
            },
            'main@': {
                controller: 'RatingsEngineDashboard',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/dashboard/dashboard.component.html'
            },
            'header.back@': 'backNav'
        }
    }).state('home.ratingsengine.dashboard.segment', {
        url: '/segment',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models',
            section: 'wizard.ratingsengine_segment'
        },
        resolve: {
            Segments: ["SegmentService", function Segments(SegmentService) {
                return SegmentService.GetSegments();
            }],
            CurrentRatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function CurrentRatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                if (!$stateParams.rating_id) {
                    deferred.resolve(RatingsEngineStore.currentRating);
                } else {
                    RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            }]
        },
        views: {
            'main@': {
                controller: 'RatingsEngineSegment',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/segment/segment.component.html'
            }
        }
    }).state('home.ratingsengine.dashboard.segment.attributes', {
        url: '/attributes',
        params: {
            section: 'wizard.ratingsengine_segment',
            gotoNonemptyCategory: true
        },
        resolve: {
            // EnrichmentCount: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
            //     var deferred = $q.defer();

            //     DataCloudStore.setHost(ApiHost);

            //     DataCloudStore.getCount().then(function (result) {
            //         DataCloudStore.setMetadata('enrichmentsTotal', result.data);
            //         deferred.resolve(result.data);
            //     });

            //     return deferred.promise;
            // }],
            // Enrichments: ['$q', 'DataCloudStore', 'ApiHost', 'EnrichmentCount', function ($q, DataCloudStore, ApiHost, EnrichmentCount) {
            Enrichments: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                var deferred = $q.defer();

                DataCloudStore.setHost(ApiHost);

                DataCloudStore.getAllEnrichmentsConcurrently().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            EnrichmentTopAttributes: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                var deferred = $q.defer();

                DataCloudStore.setHost(ApiHost);

                DataCloudStore.getAllTopAttributes().then(function (result) {
                    deferred.resolve(result['Categories'] || result || {});
                });

                return deferred.promise;
            }],
            EnrichmentPremiumSelectMaximum: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                var deferred = $q.defer();

                DataCloudStore.setHost(ApiHost);

                DataCloudStore.getPremiumSelectMaximum().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            EnrichmentSelectMaximum: ['$q', 'DataCloudStore', function ($q, DataCloudStore) {
                var deferred = $q.defer();

                DataCloudStore.getSelectMaximum().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            // below resolves are needed. Do not removed
            // override at child state when needed
            LookupResponse: [function () {
                return { attributes: null };
            }],
            QueryRestriction: [function () {
                return null;
            }],
            CurrentConfiguration: [function () {
                return null;
            }],
            // end duplicates
            RatingsEngineModels: ["$q", "$stateParams", "DataCloudStore", "RatingsEngineStore", function RatingsEngineModels($q, $stateParams, DataCloudStore, RatingsEngineStore) {
                var deferred = $q.defer();

                DataCloudStore.getRatingsEngineAttributes($stateParams.rating_id).then(function (data) {
                    var model = data && data[0] ? data[0] : {};

                    if (!model.rule.ratingRule.bucketToRuleMap) {
                        model.rule.ratingRule.bucketToRuleMap = RatingsEngineStore.generateRatingsBuckets();
                    }

                    RatingsEngineStore.checkRatingsBuckets(model.rule.ratingRule.bucketToRuleMap);

                    deferred.resolve(model);
                });

                return deferred.promise;
            }]
        },
        views: {
            'main@': {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            }
        }
    }).state('home.ratingsengine.dashboard.segment.attributes.add', {
        url: '/add',
        params: {
            pageIcon: 'ico-performance',
            pageTitle: 'Rules',
            section: 'wizard.ratingsengine_segment',
            gotoNonemptyCategory: true
        },
        views: {
            'main@': {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            }
        }
    }).state('home.ratingsengine.dashboard.segment.attributes.rules', {
        url: '/rules',
        params: {
            pageIcon: 'ico-performance',
            pageTitle: 'Rules',
            section: 'wizard.ratingsengine_segment',
            gotoNonemptyCategory: true
        },
        resolve: {
            JobStatus: ["$q", "$stateParams", function JobStatus($q, $stateParams) {
                var jobStatus = $stateParams.modelingJobStatus;
                var deferred = $q.defer();
                if (jobStatus == null) {
                    deferred.resolve({ modelingJobStatus: 'Completed' });
                } else {
                    deferred.resolve({ modelingJobStatus: jobStatus });
                }
                return deferred.promise;
            }],
            CurrentRatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function CurrentRatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                if (!$stateParams.rating_id) {
                    deferred.resolve(RatingsEngineStore.currentRating);
                } else {
                    RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            }],
            Cube: ["$q", "DataCloudStore", function Cube($q, DataCloudStore) {
                var deferred = $q.defer();

                DataCloudStore.getCube().then(function (result) {
                    deferred.resolve(result.data);
                });

                return deferred.promise;
            }],
            RatingEngineModel: ["DataCloudStore", "RatingsEngineModels", function RatingEngineModel(DataCloudStore, RatingsEngineModels) {
                var selectedAttributes = DataCloudStore.getCurrentRatingsEngineAttributes();

                if (selectedAttributes) {
                    RatingsEngineModels.rule.selectedAttributes = selectedAttributes;
                }

                return RatingsEngineModels;
            }]
        },
        onEnter: ['$stateParams', 'RatingsEngineService', 'QueryStore', function ($stateParams, RatingsEngineService, QueryStore) {
            QueryStore.clear();
            var id = $stateParams.rating_id;
            RatingsEngineService.GetRatingEnginesDependenciesModelView(id);
        }],
        views: {
            "navigation@home": {
                controller: ["$scope", "$stateParams", "$state", "$rootScope", "Dashboard", "RatingEngine", "JobStatus", function controller($scope, $stateParams, $state, $rootScope, Dashboard, RatingEngine, JobStatus) {
                    $scope.rating_id = $stateParams.rating_id || '';
                    $scope.modelId = $stateParams.modelId || '';
                    $scope.isRuleBased = RatingEngine.type === 'RULE_BASED';
                    $scope.stateName = function () {
                        return $state.current.name;
                    };
                    $scope.isJobCompleted = function () {
                        switch (JobStatus.modelingJobStatus) {
                            case 'Completed':
                                {
                                    return true;
                                }
                            default:
                                return false;
                        }
                    };
                }],
                templateUrl: 'app/ratingsengine/content/dashboard/sidebar/sidebar.component.html'
            },
            'main@': {
                controller: 'AdvancedQueryCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/advanced/advanced.component.html'
            }
        }
    }).state('home.ratingsengine.dashboard.segment.attributes.rules.picker', {
        url: '/picker/:entity/:fieldname',
        params: {
            mode: 'dashboardrules'
        },
        resolve: {
            Segment: ['$q', '$stateParams', 'RatingsEngineStore', function ($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                if (!$stateParams.rating_id) {
                    deferred.resolve(RatingsEngineStore.currentRating.segment);
                } else {
                    RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                        deferred.resolve(result.segment);
                    });
                }

                return deferred.promise;
            }],
            PickerBuckets: ['$q', '$stateParams', 'QueryTreeService', 'DataCloudStore', function ($q, $stateParams, QueryTreeService, DataCloudStore) {
                var deferred = $q.defer();
                var entity = $stateParams.entity;
                var fieldname = $stateParams.fieldname;

                QueryTreeService.getPickerCubeData(entity, fieldname).then(function (result) {
                    deferred.resolve(result.data);
                });

                return deferred.promise;
            }]
        },
        views: {
            'main@': {
                controller: 'ValuePickerController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/picker/picker.component.html'
            }
        }
    }).state('home.ratingsengine.dashboard.notes', {
        url: '/notes',
        resolve: {
            JobStatus: ["$q", "$stateParams", "RatingsEngineStore", function JobStatus($q, $stateParams, RatingsEngineStore) {
                var jobStatus = $stateParams.modelingJobStatus;
                var deferred = $q.defer();
                if (jobStatus == null) {
                    var ratingId = $stateParams.rating_id;
                    RatingsEngineStore.getModel(ratingId).then(function (model) {

                        if (model.AI) {
                            var jobStatus = model.AI.modelingJobStatus;
                            deferred.resolve({ modelingJobStatus: jobStatus });
                        } else {
                            deferred.resolve({ modelingJobStatus: 'Completed' });
                        }
                    });
                } else {
                    deferred.resolve({ modelingJobStatus: jobStatus });
                }
                return deferred.promise;
            }],
            Rating: ["$q", "$stateParams", "RatingsEngineStore", function Rating($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            Notes: ["$q", "$stateParams", "NotesService", function Notes($q, $stateParams, NotesService) {
                var deferred = $q.defer(),
                    id = $stateParams.rating_id;

                NotesService.GetNotes(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            Model: [function () {
                return null;
            }]
        },
        params: {
            pageIcon: 'ico-notes',
            pageTitle: 'Notes',
            section: 'dashboard.notes',
            rating_id: '',
            modelId: '',
            modelingJobStatus: null
        },
        views: {
            "navigation@home": {
                controller: ["$scope", "$stateParams", "$state", "$rootScope", "Dashboard", "RatingEngine", "JobStatus", function controller($scope, $stateParams, $state, $rootScope, Dashboard, RatingEngine, JobStatus) {
                    $scope.rating_id = $stateParams.rating_id || '';
                    $scope.modelId = $stateParams.modelId || '';
                    $scope.isRuleBased = RatingEngine.type === 'RULE_BASED';

                    $scope.isRuleBased = RatingEngine.type === 'RULE_BASED' ? true : false;
                    $scope.isCustomEvent = RatingEngine.type === 'CUSTOM_EVENT' ? true : false;
                    if ($scope.isRuleBased || $scope.isCustomEvent) {
                        if ($scope.isRuleBased) {
                            $scope.typeContext = 'rule';
                        } else {
                            $scope.typeContext = 'AI';
                        }
                        $scope.modelingStrategy = RatingEngine.type;
                    } else {
                        var type = RatingEngine.type.toLowerCase();
                        $scope.typeContext = 'AI';

                        $scope.modelingStrategy = RatingEngine.activeModel.AI.advancedModelingConfig[type].modelingStrategy;
                    }
                    $scope.activeIteration = RatingEngine.activeModel[$scope.typeContext].iteration;
                    $scope.modelIsReady = RatingEngine.activeModel[$scope.typeContext].modelSummaryId !== null || RatingEngine.activeModel[$scope.typeContext].modelSummaryId !== undefined;

                    $scope.stateName = function () {
                        return $state.current.name;
                    };

                    $scope.isJobCompleted = function () {
                        switch (JobStatus.modelingJobStatus) {
                            case 'Completed':
                                {
                                    return true;
                                }
                            default:
                                return false;
                        }
                    };
                }],
                templateUrl: 'app/ratingsengine/content/dashboard/sidebar/sidebar.component.html'
            },
            "main@": {
                controller: 'NotesController',
                controllerAs: 'vm',
                templateUrl: 'app/notes/NotesView.html'
            }
        }
    }).state('home.ratingsengine.dashboard.activatescoring', {
        url: '/activatescoring',
        resolve: {
            CurrentConfiguration: ["$q", "$stateParams", "ModelRatingsService", function CurrentConfiguration($q, $stateParams, ModelRatingsService) {
                var deferred = $q.defer(),
                    ratingId = $stateParams.rating_id;

                ModelRatingsService.MostRecentConfigurationRatingEngine(ratingId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            RatingsSummary: ["$q", "$stateParams", "ModelRatingsService", function RatingsSummary($q, $stateParams, ModelRatingsService) {
                var deferred = $q.defer(),
                    ratingId = $stateParams.rating_id,
                    modelId = $stateParams.ratingEngine.activeModel.AI.id;

                ModelRatingsService.GetBucketedScoresSummaryRatingEngine(ratingId, modelId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            HistoricalABCDBuckets: ["$q", "$stateParams", "ModelRatingsService", function HistoricalABCDBuckets($q, $stateParams, ModelRatingsService) {
                var deferred = $q.defer(),
                    ratingId = $stateParams.rating_id;

                ModelRatingsService.HistoricalABCDBucketsRatingEngine(ratingId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        params: {
            pageIcon: 'ico-ratings',
            pageTitle: 'Ratings',
            section: 'dashboard.scoring',
            ratingEngine: null
        },
        views: {
            "main@": {
                // controller: 'RatingsEngineActivateScoring',
                // controllerAs: 'vm',
                // templateUrl: 'app/ratingsengine/content/activatescoring/activatescoring.component.html'
                controller: 'ModelRatingsController',
                controllerAs: 'vm',
                templateUrl: 'app/models/views/ModelRatingsView.html'
            }
        }
    }).state('home.ratingsengine.rulesprospects', {
        url: '/rules/:rating_id/:wizard_steps',
        params: {
            rating_id: '',
            wizard_steps: 'rulesprospects'
        },
        onExit: ["$state", "RatingsEngineStore", function onExit($state, RatingsEngineStore) {
            if (!$state.params.wizard_steps) {
                RatingsEngineStore.clear();
            }
        }],
        resolve: {
            WizardValidationStore: ["RatingsEngineStore", function WizardValidationStore(RatingsEngineStore) {
                return RatingsEngineStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'ratingsengine.rulesprospects';
            },
            WizardProgressItems: ["$stateParams", "RatingsEngineStore", function WizardProgressItems($stateParams, RatingsEngineStore) {
                var rating_id = $stateParams.rating_id || '',
                    wizard_steps = $stateParams.wizard_steps || 'rulesprospects';

                return RatingsEngineStore.getWizardProgressItems(wizard_steps, rating_id);
            }],
            WizardContainerId: function WizardContainerId() {
                return 'ratingsengine';
            },
            WizardHeaderTitle: function WizardHeaderTitle() {
                return 'Create Model';
            },
            WizardCustomHeaderSteps: function WizardCustomHeaderSteps() {
                return ['segment.attributes', 'segment.attributes.add', 'segment.attributes.rules'];
            },
            WizardControlsOptions: ["RatingsEngineStore", function WizardControlsOptions(RatingsEngineStore) {
                return {
                    backState: 'home.ratingsengine.ratingsenginetype',
                    nextState: 'home.ratingsengine.dashboard'
                };
            }]
        },
        onEnter: ["QueryStore", function onEnter(QueryStore) {
            QueryStore.clear();
        }],
        views: {
            'summary@': {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'ImportWizard',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/wizard.component.html'
            },
            'wizard_header@home.ratingsengine.rulesprospects': {
                controller: 'WizardHeader',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/header/header.component.html'
            },
            'wizard_progress@home.ratingsengine.rulesprospects': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'

            },
            'wizard_controls@home.ratingsengine.rulesprospects': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.ratingsengine.rulesprospects.segment'
    }).state('home.ratingsengine.rulesprospects.segment', {
        url: '/segment',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models - Select Segment'
        },
        resolve: {
            Segments: ["SegmentService", function Segments(SegmentService) {
                return SegmentService.GetSegments();
            }],
            CurrentRatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function CurrentRatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                if (!$stateParams.rating_id) {
                    deferred.resolve(RatingsEngineStore.currentRating);
                } else {
                    RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.rulesprospects': {
                controller: 'RatingsEngineSegment',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/segment/segment.component.html'
            }
        }
    }).state('home.ratingsengine.rulesprospects.segment.attributes', {
        url: '/attributes',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models - Add Attributes',
            section: 'wizard.ratingsengine_segment',
            gotoNonemptyCategory: true
        },
        //resolve: angular.extend({}, DataCloudResolvesProvider.$get().main, {
        /**
         * for now we're ducplciating these here from datacloud.routes because when minified the resolves fail
         */
        resolve: {
            // EnrichmentCount: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
            //     var deferred = $q.defer();

            //     DataCloudStore.setHost(ApiHost);

            //     DataCloudStore.getCount().then(function (result) {
            //         DataCloudStore.setMetadata('enrichmentsTotal', result.data);
            //         deferred.resolve(result.data);
            //     });

            //     return deferred.promise;
            // }],
            // Enrichments: ['$q', 'DataCloudStore', 'ApiHost', 'EnrichmentCount', function ($q, DataCloudStore, ApiHost, EnrichmentCount) {
            Enrichments: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                var deferred = $q.defer();

                DataCloudStore.setHost(ApiHost);

                DataCloudStore.getAllEnrichmentsConcurrently().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            EnrichmentTopAttributes: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                var deferred = $q.defer();

                DataCloudStore.setHost(ApiHost);

                DataCloudStore.getAllTopAttributes().then(function (result) {
                    deferred.resolve(result['Categories'] || result || {});
                });

                return deferred.promise;
            }],
            EnrichmentPremiumSelectMaximum: ['$q', 'DataCloudStore', 'ApiHost', function ($q, DataCloudStore, ApiHost) {
                var deferred = $q.defer();

                DataCloudStore.setHost(ApiHost);

                DataCloudStore.getPremiumSelectMaximum().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            EnrichmentSelectMaximum: ['$q', 'DataCloudStore', function ($q, DataCloudStore) {
                var deferred = $q.defer();

                DataCloudStore.getSelectMaximum().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            // below resolves are needed. Do not removed
            // override at child state when needed
            LookupResponse: [function () {
                return { attributes: null };
            }],
            QueryRestriction: [function () {
                return null;
            }],
            CurrentConfiguration: [function () {
                return null;
            }],
            // end duplicates
            RatingsEngineModels: ["$q", "$stateParams", "DataCloudStore", "RatingsEngineStore", function RatingsEngineModels($q, $stateParams, DataCloudStore, RatingsEngineStore) {
                var deferred = $q.defer();

                DataCloudStore.getRatingsEngineAttributes($stateParams.rating_id).then(function (data) {
                    var model = data && data[0] ? data[0] : {};

                    if (!model.rule.ratingRule.bucketToRuleMap) {
                        model.rule.ratingRule.bucketToRuleMap = RatingsEngineStore.generateRatingsBuckets();
                    }

                    // console.log(model);

                    RatingsEngineStore.checkRatingsBuckets(model.rule.ratingRule.bucketToRuleMap);

                    deferred.resolve(model);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.rulesprospects': {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            }
        }
    }).state('home.ratingsengine.rulesprospects.segment.attributes.add', {
        url: '/add',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models - Add Attributes',
            section: 'wizard.ratingsengine_segment',
            gotoNonemptyCategory: true
        },
        views: {
            'wizard_content@home.ratingsengine.rulesprospects': {
                controller: 'DataCloudController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/explorer/explorer.component.html'
            }
        }
    }).state('home.ratingsengine.rulesprospects.segment.attributes.rules', {
        url: '/rules',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models - Create Rules'
        },
        onEnter: ['$stateParams', 'RatingsEngineService', function ($stateParams, RatingsEngineService) {
            var id = $stateParams.rating_id;
            RatingsEngineService.GetRatingEnginesDependenciesModelView(id);
        }],
        resolve: {
            Cube: ["$q", "DataCloudStore", function Cube($q, DataCloudStore) {
                var deferred = $q.defer();

                DataCloudStore.getCube().then(function (result) {
                    deferred.resolve(result.data);
                });

                return deferred.promise;
            }],
            RatingEngineModel: ["DataCloudStore", "RatingsEngineModels", function RatingEngineModel(DataCloudStore, RatingsEngineModels) {
                var selectedAttributes = DataCloudStore.getCurrentRatingsEngineAttributes();

                // console.log(RatingsEngineModels);

                if (selectedAttributes) {
                    RatingsEngineModels.rule.selectedAttributes = selectedAttributes;
                }

                return RatingsEngineModels;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.rulesprospects': {
                controller: 'AdvancedQueryCtrl',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/query/advanced/advanced.component.html'
            }
        }
    }).state('home.ratingsengine.rulesprospects.segment.attributes.rules.picker', {
        url: '/picker/:entity/:fieldname',
        resolve: {
            PickerBuckets: ['$q', '$stateParams', 'QueryTreeService', 'DataCloudStore', function ($q, $stateParams, QueryTreeService, DataCloudStore) {
                var deferred = $q.defer();
                var entity = $stateParams.entity;
                var fieldname = $stateParams.fieldname;

                QueryTreeService.getPickerCubeData(entity, fieldname).then(function (result) {
                    deferred.resolve(result.data);
                });

                return deferred.promise;
            }],
            Segment: ['$q', '$stateParams', 'RatingsEngineStore', function ($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                if (!$stateParams.rating_id) {
                    deferred.resolve(RatingsEngineStore.currentRating.segment);
                } else {
                    RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                        deferred.resolve(result.segment);
                    });
                }

                return deferred.promise;
            }]
        },
        views: {
            "wizard_content@home.ratingsengine.rulesprospects": {
                controller: 'ValuePickerController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/picker/picker.component.html'
            }
        }
    }).state('home.ratingsengine.rulesprospects.segment.attributes.rules.summary', {
        url: '/summary',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models - Review Summary'
        },
        resolve: {
            Rating: ["$q", "$stateParams", "RatingsEngineStore", function Rating($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.rulesprospects': {
                controller: 'RatingsEngineSummary',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/summary/summary.component.html'
            }
        }
    }).state('home.ratingsengine.productpurchase', {
        url: '/product/:rating_id/:wizard_steps',
        params: {
            wizard_steps: 'productpurchase',
            engineType: '',
            displayName: '',
            rating_id: '',
            fromList: false
        },
        resolve: {
            WizardValidationStore: ["RatingsEngineStore", function WizardValidationStore(RatingsEngineStore) {
                return RatingsEngineStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'ratingsengine.productpurchase';
            },
            WizardProgressItems: ["$stateParams", "RatingsEngineStore", function WizardProgressItems($stateParams, RatingsEngineStore) {
                var rating_id = $stateParams.rating_id || '',
                    wizard_steps = 'productpurchase';

                return RatingsEngineStore.getWizardProgressItems(wizard_steps, rating_id);
            }],
            CurrentRatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function CurrentRatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer(),
                    ratingId = $stateParams.rating_id;

                if (ratingId !== '') {
                    RatingsEngineStore.getRating(ratingId).then(function (engine) {
                        deferred.resolve(engine);
                    });
                } else {
                    deferred.resolve();
                }

                return deferred.promise;
            }],
            WizardHeaderTitle: ["$stateParams", "CurrentRatingEngine", "RatingsEngineStore", function WizardHeaderTitle($stateParams, CurrentRatingEngine, RatingsEngineStore) {
                var engineType = $stateParams.engineType,
                    currentRating = CurrentRatingEngine,
                    fromList = $stateParams.fromList,
                    title = '';

                if (currentRating !== undefined && fromList) {
                    title = currentRating.displayName;
                } else if (engineType === 'CROSS_SELL_FIRST_PURCHASE') {
                    title = 'Create Model: Customers that will purchase a product for the first time';
                } else if (engineType === 'CROSS_SELL_REPEAT_PURCHASE') {
                    title = 'Create Model: Customers that will purchase again next quarter';
                }

                return title;
            }],
            WizardContainerId: function WizardContainerId() {
                return 'ratingsengine';
            },
            WizardControlsOptions: ["RatingsEngineStore", function WizardControlsOptions(RatingsEngineStore) {
                return {
                    backState: 'home.ratingsengine.ratingsenginetype',
                    secondaryLink: true,
                    nextState: 'home.ratingsengine.dashboard'
                };
            }]
        },
        views: {
            'summary@': {
                controller: ["$scope", "RatingsEngineStore", function controller($scope, RatingsEngineStore) {
                    $scope.$on('$destroy', function () {
                        RatingsEngineStore.clear();
                    });
                }],
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'ImportWizard',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/wizard.component.html'
            },
            'wizard_progress@home.ratingsengine.productpurchase': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'

            },
            'wizard_controls@home.ratingsengine.productpurchase': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.ratingsengine.productpurchase.segment'
    }).state('home.ratingsengine.productpurchase.segment', {
        url: '/segment',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models',
            section: 'wizard.ratingsengine_segment'
        },
        resolve: {
            Segments: ["SegmentService", function Segments(SegmentService) {
                return SegmentService.GetSegments();
            }],
            CurrentRatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function CurrentRatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();
                // console.log('========> ', $stateParams.rating_id);
                if (!$stateParams.rating_id) {
                    deferred.resolve(RatingsEngineStore.currentRating);
                } else {
                    RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.productpurchase': {
                controller: 'RatingsEngineSegment',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/segment/segment.component.html'
            }
        }
    }).state('home.ratingsengine.productpurchase.segment.products', {
        url: '/products',
        resolve: {
            Products: ["$q", "$stateParams", "RatingsEngineStore", function Products($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                var params = {
                    max: 1000,
                    offset: 0
                };
                RatingsEngineStore.getProducts(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }],
            PeriodType: ["$q", "QueryStore", function PeriodType($q, QueryStore) {
                var deferred = $q.defer();
                QueryStore.getCollectionStatus().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.productpurchase': {
                controller: 'RatingsEngineProducts',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/products/products.component.html'
            }
        }
    }).state('home.ratingsengine.productpurchase.segment.products.prioritization', {
        url: '/prioritization',
        resolve: {
            PredictionType: ["$q", "CurrentRatingEngine", function PredictionType($q, CurrentRatingEngine) {
                var deferred = $q.defer(),
                    engine = CurrentRatingEngine,
                    predictionType = engine.activeModel.AI.predictionType;

                deferred.resolve(predictionType);

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.productpurchase': {
                controller: 'RatingsEngineAIPrioritization',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/prioritization/prioritization.component.html'
            }
        }
    }).state('home.ratingsengine.productpurchase.segment.products.prioritization.training', {
        url: '/training',
        resolve: {
            ratingEngine: ['$q', '$stateParams', 'RatingsEngineStore', function ($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            segments: ['SegmentService', function (SegmentService) {
                return SegmentService.GetSegments();
            }],
            products: ['$q', '$stateParams', 'RatingsEngineStore', function ($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                var params = {
                    max: 1000,
                    offset: 0
                };
                RatingsEngineStore.getProducts(params).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            iteration: [function () {
                return null;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.productpurchase': 'ratingsEngineAITraining'
        }
    }).state('home.ratingsengine.productpurchase.segment.products.prioritization.training.creation', {
        url: '/creation',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models'
        },
        resolve: {
            ratingEngine: ["$q", "$stateParams", "RatingsEngineStore", function ratingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            products: ["$q", "$stateParams", "RatingsEngineStore", function products($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                var params = {
                    max: 1000,
                    offset: 0
                };
                RatingsEngineStore.getProducts(params).then(function (result) {
                    deferred.resolve(result);
                });
                return deferred.promise;
            }]
        },
        views: {
            'wizard_progress@home.ratingsengine.productpurchase': {
                resolve: {},
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'

            },
            'wizard_content@home.ratingsengine.productpurchase': 'ratingsEngineCreation'
        }
    }).state('home.ratingsengine.customevent', {
        url: '/custom/:rating_id/:wizard_steps',
        params: {
            rating_id: '',
            wizard_steps: 'customevent',
            fromList: false
        },
        resolve: {
            WizardValidationStore: ["RatingsEngineStore", function WizardValidationStore(RatingsEngineStore) {
                return RatingsEngineStore;
            }],
            WizardProgressContext: function WizardProgressContext() {
                return 'ratingsengine.customevent';
            },
            WizardProgressItems: ["$stateParams", "RatingsEngineStore", function WizardProgressItems($stateParams, RatingsEngineStore) {
                var rating_id = $stateParams.rating_id || '',
                    wizard_steps = $stateParams.wizard_steps || 'customevent';

                // console.log(wizard_steps);

                return RatingsEngineStore.getWizardProgressItems(wizard_steps, rating_id);
            }],
            CurrentRatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function CurrentRatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer(),
                    ratingId = $stateParams.rating_id;

                if (ratingId !== '') {
                    RatingsEngineStore.getRating(ratingId).then(function (engine) {
                        deferred.resolve(engine);
                    });
                } else {
                    deferred.resolve();
                }

                return deferred.promise;
            }],
            WizardHeaderTitle: ["$stateParams", "CurrentRatingEngine", function WizardHeaderTitle($stateParams, CurrentRatingEngine) {
                var engineType = $stateParams.engineType,
                    currentRating = CurrentRatingEngine,
                    fromList = $stateParams.fromList,
                    title = '';

                if (currentRating !== undefined && fromList) {
                    title = currentRating.displayName;
                } else {
                    title = 'Create Custom Event Model';
                }

                return title;
            }],
            WizardContainerId: function WizardContainerId() {
                return 'ratingsengine';
            },
            WizardControlsOptions: ["RatingsEngineStore", function WizardControlsOptions(RatingsEngineStore) {
                return {
                    backState: 'home.ratingsengine.ratingsenginetype',
                    secondaryLink: true,
                    nextState: 'home.ratingsengine.dashboard'
                };
            }]
        },
        views: {
            'summary@': {
                controller: ["$state", "$scope", "RatingsEngineStore", function controller($state, $scope, RatingsEngineStore) {
                    $scope.$on('$destroy', function () {
                        if (!$state.params.wizard_steps) {
                            RatingsEngineStore.clear();
                        }
                    });
                }],
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            'main@': {
                controller: 'ImportWizard',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/wizard.component.html'
            },
            'wizard_progress@home.ratingsengine.customevent': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'

            },
            'wizard_controls@home.ratingsengine.customevent': {
                controller: 'ImportWizardControls',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/controls/controls.component.html'
            }
        },
        redirectTo: 'home.ratingsengine.customevent.segment'
    }).state('home.ratingsengine.customevent.segment', {
        url: '/segment',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models',
            section: 'wizard.ratingsengine_segment'
        },
        resolve: {
            Segments: ["SegmentService", function Segments(SegmentService) {
                return SegmentService.GetSegments();
            }],
            CurrentRatingEngine: ["$q", "$stateParams", "RatingsEngineStore", function CurrentRatingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                if (!$stateParams.rating_id) {
                    deferred.resolve(RatingsEngineStore.currentRating);
                } else {
                    RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.customevent': {
                controller: 'RatingsEngineSegment',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/segment/segment.component.html'
            }
        }
    }).state('home.ratingsengine.customevent.segment.attributes', {
        url: '/attributes',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models',
            section: 'wizard.ratingsengine_segment'
        },
        resolve: {
            Rating: ["$q", "$stateParams", "RatingsEngineStore", function Rating($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.customevent': {
                controller: 'RatingsEngineAttributes',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/attributes/attributes.component.html'
            }
        }
    }).state('home.ratingsengine.customevent.segment.attributes.training', {
        url: '/training',
        views: {
            'wizard_content@home.ratingsengine.customevent': {
                controller: 'RatingsEngineCustomEventTraining',
                controllerAs: 'vm',
                templateUrl: 'app/ratingsengine/content/training/customeventtraining.component.html'
            }
        }
    }).state('home.ratingsengine.customevent.segment.attributes.training.mapping', {
        url: '/mapping',
        resolve: {
            FieldDocument: ["$q", "RatingsEngineStore", "ImportWizardService", "ImportWizardStore", function FieldDocument($q, RatingsEngineStore, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                var customEventModelingType = RatingsEngineStore.getCustomEventModelingType();
                ImportWizardService.GetFieldDocument(RatingsEngineStore.getCSVFileName(), '', customEventModelingType == 'CDL' ? 'Account' : 'SalesforceAccount').then(function (result) {
                    RatingsEngineStore.setFieldDocument(result.Result);
                    deferred.resolve(result.Result);
                });

                return deferred.promise;
            }],
            UnmappedFields: ["$q", "ImportWizardService", "ImportWizardStore", function UnmappedFields($q, ImportWizardService, ImportWizardStore) {
                var deferred = $q.defer();

                ImportWizardService.GetSchemaToLatticeFields(null).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'wizard_content@home.ratingsengine.customevent': {
                controllerAs: 'vm',
                controller: 'CustomFieldsController',
                templateUrl: 'app/create/customfields/CustomFieldsView.html'
            }
        }
    }).state('home.ratingsengine.customevent.segment.attributes.training.mapping.creation', {
        url: '/creation',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models'
        },
        resolve: {
            ratingEngine: ["$q", "$stateParams", "RatingsEngineStore", function ratingEngine($q, $stateParams, RatingsEngineStore) {
                var deferred = $q.defer();

                RatingsEngineStore.getRating($stateParams.rating_id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            products: function products() {
                return [];
            }
        },
        views: {
            'wizard_progress@home.ratingsengine.customevent': {
                controller: 'ImportWizardProgress',
                controllerAs: 'vm',
                templateUrl: '/components/wizard/progress/progress.component.html'

            },
            'wizard_content@home.ratingsengine.customevent': 'ratingsEngineCreation'
        }
    });
}]);

/***/ }),

/***/ "./app/ratingsengine/ratingsengine.service.js":
/*!****************************************************!*\
  !*** ./app/ratingsengine/ratingsengine.service.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ratingsengine').service('RatingsEngineStore', ["$q", "$state", "$stateParams", "$rootScope", "$timeout", "RatingsEngineService", "DataCloudStore", "BrowserStorageUtility", "SegmentStore", "ImportWizardService", "JobsStore", "Banner", function ($q, $state, $stateParams, $rootScope, $timeout, RatingsEngineService, DataCloudStore, BrowserStorageUtility, SegmentStore, ImportWizardService, JobsStore, Banner) {
    var RatingsEngineStore = this;

    this.current = {
        ratings: [],
        tileStates: {},
        bucketCountMap: {}
    };

    this.ratingsSet = false;

    this.init = function () {

        //         console.log('Test hot save');

        this.settings = {};

        this.validation = {
            segment: true,
            attributes: true,
            add: true,
            picker: true,
            rules: true,
            summary: true,
            prospect: false,
            products: false,
            prioritization: false,
            training: true,
            refine: false,
            model: false,
            mapping: false
        };

        this.segment_form = {
            segment_selection: ''
        };

        this.currentRating = {};
        this.remodelIteration = null;
        this.rule = null;
        this.rating = null;
        this.rating_id;
        this.coverage = {};
        this.savedSegment = "";
        this.productsSelected = {};
        this.modelingStrategy = '';
        this.predictionType = 'PROPENSITY';
        this.type = null;
        this.configFilters = {};
        this.trainingSegment = null;
        this.trainingProducts = null;
        this.dataStores = [];
        this.modelTrainingOptions = {
            "deduplicationType": "ONELEADPERDOMAIN",
            "excludePublicDomains": false,
            "transformationGroup": null
        }, this.customEventModelingType = "";
        this.FieldDocument = {};
        this.fileName = "";
        this.applicationId = "";
        this.displayFileName = "";
        this.availableFields = [];

        this.wizardProgressItems = {
            "rulesprospects": [{
                label: 'Segment',
                state: 'segment',
                progressDisabled: true,
                showNextSpinner: true,
                nextLabel: 'Next, Choose Attributes',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveRatingEngine(nextState);
                }
            }, {
                label: 'Attributes',
                state: 'segment.attributes',
                progressDisabled: true,
                nextLabel: 'Next, Set Rules',
                nextFn: function nextFn(nextState) {
                    var current = RatingsEngineStore.getRule();
                    if (current && current.rule) {
                        SegmentStore.sanitizeRuleBuckets(current.rule, true);
                    }

                    $state.go(nextState);
                }
            }, {
                hide: true,
                label: 'Add',
                state: 'segment.attributes.add',
                progressDisabled: true,
                nextLabel: 'Next, Rules',
                nextFn: function nextFn(nextState) {
                    var current = RatingsEngineStore.getRule();
                    if (current) {
                        SegmentStore.sanitizeRuleBuckets(current.rule, true);
                    }
                    $state.go(nextState);
                }
            }, {
                hide: true,
                hideBack: true,
                label: 'Picker',
                state: 'segment.attributes.rules.picker',
                progressDisabled: true,
                nextLabel: 'Back to Rules',
                nextFn: function nextFn(nextState) {
                    var current = RatingsEngineStore.getRule();
                    if (current) {
                        SegmentStore.sanitizeRuleBuckets(current.rule, true);
                    }
                    $state.go(nextState);
                }
            }, {
                hideBack: true,
                label: 'Rules',
                state: 'segment.attributes.rules',
                progressDisabled: true,
                nextLabel: 'Next, Summary',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveRules(nextState);
                }
            }, {
                label: 'Summary',
                state: 'segment.attributes.rules.summary',
                progressDisabled: true,
                nextLabel: 'Save',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveSummary(nextState);
                }
            }],
            "editrules": [{
                hide: true,
                hideBack: true,
                label: 'Add',
                state: 'segment.attributes.add',
                nextLabel: 'Back to Rules'
            }, {
                hide: true,
                hideBack: true,
                label: 'Picker',
                state: 'segment.attributes.rules.picker',
                nextLabel: 'Back to Rules'
            }, {
                label: 'Rules',
                hideBack: true,
                state: 'segment.attributes.rules',
                nextLabel: 'Back To Dashboard',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveRules(nextState);
                }
            }],
            "productpurchase": [{
                label: 'Segment',
                state: 'segment',
                progressDisabled: true,
                showNextSpinner: true,
                nextLabel: 'Next',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveRatingEngineAI(nextState);
                }
            }, {
                label: 'Products',
                state: 'segment.products',
                progressDisabled: true,
                nextLabel: 'Next',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveAIRatingModel(nextState);
                }
            }, {
                label: 'Prioritization',
                state: 'segment.products.prioritization',
                progressDisabled: true,
                nextLabel: 'Next',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveAIRatingModel(nextState);
                }
            }, {
                label: 'Training',
                state: 'segment.products.prioritization.training',
                progressDisabled: true,
                nextLabel: 'Next',
                showNextSpinner: true,
                afterNextValidation: true,
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextValidateTraining(nextState); // validate here
                }
            }, {
                label: 'Creation',
                state: 'segment.products.prioritization.training.creation',
                progressDisabled: true,
                hideBack: true,
                secondaryLinkLabel: 'Go to Model List',
                secondaryLink: 'home.ratingsengine',
                lastRoute: true,
                nextLabel: 'Create another Model',
                nextFn: function nextFn(nextState) {
                    $state.go('home.ratingsengine.ratingsenginetype');
                }
            }],
            "customevent": [{
                label: 'Segment',
                state: 'segment',
                progressDisabled: true,
                showNextSpinner: true,
                nextLabel: 'Next',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveCustomEventRatingEngine(nextState);
                }
            }, {
                label: 'Attributes',
                state: 'segment.attributes',
                progressDisabled: true,
                nextLabel: 'Next',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveCustomEventRatingModel(nextState);
                }
            }, {
                label: 'Training',
                state: 'segment.attributes.training',
                progressDisabled: true,
                showNextSpinner: true,
                nextLabel: 'Next',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.nextSaveCustomEventRatingModel(nextState);
                }
            }, {
                label: 'Field Mapping',
                state: 'segment.attributes.training.mapping',
                progressDisabled: true,
                nextLabel: 'Next',
                nextFn: function nextFn(nextState) {
                    RatingsEngineStore.saveFieldMapping(nextState);
                }
            }, {
                label: 'Model Creation',
                state: 'segment.attributes.training.mapping.creation',
                progressDisabled: true,
                hideBack: true,
                secondaryLinkLabel: 'Go to Model List',
                secondaryLink: 'home.ratingsengine',
                lastRoute: true,
                nextLabel: 'Create another Model',
                nextFn: function nextFn() {
                    $state.go('home.ratingsengine.ratingsenginetype', {}, { reload: true });
                }
            }]
        };
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.getValidation = function (type) {
        return this.validation[type];
    };

    this.setValidation = function (type, value) {
        this.validation[type] = value;
    };

    this.getWizardProgressItems = function (step) {
        return this.wizardProgressItems[step || 'rulesprospects'];
    };

    this.setSettings = function (obj) {
        var obj = obj || {};

        for (var i in obj) {
            var key = i,
                value = obj[i];
            this.settings[key] = value;
        }
    };

    this.setSegment = function (segment) {
        //console.log("set segment service", segment);
        this.savedSegment = segment;
        var currentRating = RatingsEngineStore.getCurrentRating();
        if (currentRating && segment && segment != null) {
            currentRating.segment = segment;
        }
    };

    this.getSegment = function () {
        return this.savedSegment;
    };

    var getRatingsEngineRule = function getRatingsEngineRule(RatingsEngineModels) {
        var data = RatingsEngineModels[0],
            rule = data && data.rule ? data.rule : {},
            rule = rule || {};

        return rule;
    };

    this.nextSaveGeneric = function (nextState) {
        var changed = false,
            opts = RatingsEngineStore.settings;

        $state.go(nextState, { rating_id: $stateParams.rating_id });
    };

    this.nextSaveRatingEngine = function (nextState) {
        var currentRating = RatingsEngineStore.getCurrentRating(),
            currentSegment = RatingsEngineStore.getSegment();

        if (currentRating.segment != null && currentSegment != null && currentRating.segment.name != currentSegment.name) {
            RatingsEngineStore.setRating({});
        }
        RatingsEngineStore.saveRating(currentRating).then(function (rating) {
            $state.go(nextState, { rating_id: rating.id });
        });
    };

    this.nextSaveRules = function (nextState) {
        var current = RatingsEngineStore.getRule(),
            opts = {
            rating_id: $stateParams.rating_id,
            model_id: current.rule.id,
            model: {
                rule: SegmentStore.sanitizeRuleBuckets(angular.copy(current.rule), true)
            }
        };

        RatingsEngineService.saveRules(opts).then(function (rating) {
            if (nextState) {
                $state.go(nextState, { rating_id: $stateParams.rating_id });
            } else {
                //console.log('!!!!!!!!!!!!!!!!!',rating);
            }
        });
    };

    this.nextSaveSummary = function (nextState) {
        var rating = RatingsEngineStore.getCurrentRating();

        RatingsEngineStore.saveRating(rating).then(function (result) {
            $state.go(nextState, { rating_id: rating.id });
        });
    };

    this.setRule = function (rule) {
        this.rule = rule;
    };

    this.getRule = function (rule) {
        return this.rule;
    };

    this.hasRules = function (rating) {
        try {
            if (Object.keys(rating.coverage).length) {
                return true;
            } else {
                return false;
            }
        } catch (err) {
            return false;
        }
    };

    this.setRating = function (rating) {
        this.currentRating = rating;
    };

    this.getRating = function (id) {
        var deferred = $q.defer();
        if (this.currentRating === {}) {
            deferred.resolve(this.currentRating);
        } else {
            RatingsEngineService.getRating(id).then(function (engine) {
                RatingsEngineStore.setRating(engine);
                deferred.resolve(engine);
            });
        }

        return deferred.promise;
    };

    this.getRatingDashboard = function (id) {
        var deferred = $q.defer();

        RatingsEngineService.getRatingDashboard(id).then(function (data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    this.getCurrentRating = function () {
        return this.currentRating;
    };

    this.saveRating = function (rating) {
        var deferred = $q.defer(),
            ClientSession = BrowserStorageUtility.getClientSession();

        var opts = {
            createdBy: rating.createdBy !== undefined ? rating.createdBy : ClientSession.EmailAddress,
            type: rating.type !== undefined ? rating.type : 'RULE_BASED',
            segment: rating.segment || RatingsEngineStore.getSegment(),
            displayName: $stateParams.opts !== undefined ? $stateParams.opts.displayName : rating.displayName,
            status: $stateParams.opts !== undefined ? $stateParams.opts.status : rating.status,
            id: rating.id,
            note: $stateParams.opts !== undefined ? $stateParams.opts.note : rating.note
        };

        var params = {};

        if (rating.type !== undefined && rating.type === 'CROSS_SELL') {
            opts.activeModel = {
                AI: {
                    advancedModelingConfig: {
                        cross_sell: {
                            modelingStrategy: rating.activeModel.AI.advancedModelingConfig.cross_sell.modelingStrategy
                        }
                    }
                }
            };
            opts.advancedRatingConfig = {
                cross_sell: {
                    modelingStrategy: rating.advancedRatingConfig.cross_sell.modelingStrategy
                }
            };
        } else if (rating.type != undefined && rating.type == 'CUSTOM_EVENT') {
            if ($stateParams.rating_id && RatingsEngineStore.getCustomEventModelingType() == 'LPI') {
                params = {
                    'unlink-segment': true
                };
            }
        }

        RatingsEngineService.saveRating(opts, params).then(function (data) {
            RatingsEngineStore.setRating(data);
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    this.setRatings = function (ratings, ignoreGetCoverage) {

        this.current.ratings = ratings;
        RatingsEngineStore.ratingsSet = true;

        if (!ignoreGetCoverage) {
            var ids = [];
            RatingsEngineStore.current.tileStates = {};
            angular.forEach(ratings, function (rating) {
                var id = rating.id;
                ids.push(id);
                RatingsEngineStore.current.tileStates[id] = {
                    showCustomMenu: false,
                    editRating: false,
                    saveEnabled: false
                };

                var coverage = [];
                for (var bucket in rating.coverage) {
                    coverage.push({ bucket: bucket, count: rating.coverage[bucket] });
                }

                RatingsEngineStore.current.bucketCountMap[id] = {
                    accountCount: rating.accountsInSegment,
                    contactCount: rating.contactsInSegment,
                    bucketCoverageCounts: coverage
                };
            });
        }
    };

    this.getRatings = function (active, cacheOnly) {

        this.ratingsSet = false;

        var deferred = $q.defer();

        if (this.current.ratings.length > 0) {
            deferred.resolve(this.current.ratings);

            if (cacheOnly) {
                return this.current;
            }
        }

        RatingsEngineService.getRatings(active).then(function (data) {
            RatingsEngineStore.setRatings(data);
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    this.getSegmentsCounts = function (segmentIds) {
        var deferred = $q.defer();

        RatingsEngineService.getSegmentsCounts(segmentIds).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getRatingsChartData = function (all) {
        var deferred = $q.defer();

        RatingsEngineService.getRatingsChartData({
            ratingEngineIds: all
        }).then(function (response) {
            //RatingsEngineStore.setCoverage(response);
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getCoverageMap = function (CurrentRatingsEngine, segmentId, CoverageMap) {
        var deferred = $q.defer();
        var rule = SegmentStore.sanitizeRuleBuckets(angular.copy(CurrentRatingsEngine.rule));

        CoverageMap = CoverageMap || {};

        CoverageMap.restrictNotNullSalesforceId = false;
        CoverageMap.segmentIdModelRules = [{
            segmentId: segmentId,
            ratingRule: {
                bucketToRuleMap: rule.ratingRule.bucketToRuleMap,
                defaultBucketName: rule.ratingRule.defaultBucketName
            }
        }];

        RatingsEngineService.getRatingsChartData(CoverageMap).then(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.getBucketRuleCounts = function (restrictions, segmentId) {
        var buckets = restrictions.map(function (bucket, index) {
            var label = bucket.bucketRestriction.attr,
                type = label.split('.')[0] == 'Contact' ? 'contact' : 'account',
                object = {
                "segmentId": segmentId,
                "responseKeyId": label + '_' + index
            };

            object[type + '_restriction'] = SegmentStore.sanitizeSegmentRestriction([bucket])[0];

            return object;
        });

        return {
            "restrictNotNullSalesforceId": false,
            "segmentIdAndSingleRules": buckets
        };
    };

    this.getCoverage = function () {
        return this.coverage;
    };

    this.setCoverage = function (bucketCountMap) {
        this.current.bucketCountMap = bucketCountMap;
    };
    this.setType = function (type, engineType) {
        this.type = {
            wizardType: type,
            engineType: engineType
        };
    };
    this.getType = function () {
        return this.type;
    };

    this.clearSelection = function () {
        this.productsSelected = {};
    };
    this.getProducts = function (params) {
        var deferred = $q.defer();
        RatingsEngineService.getProducts(params).then(function (data) {
            deferred.resolve(data.data);
        });
        return deferred.promise;
    };
    this.selectProduct = function (id, name) {
        if (this.productsSelected[id]) {
            delete this.productsSelected[id];
        } else {
            this.productsSelected[id] = name;
        }
    };
    this.selectAllProducts = function (allProducts) {
        allProducts.forEach(function (product) {
            if (product.Selected === false || product.Selected === undefined) {
                RatingsEngineStore.selectProduct(product.ProductId, product.ProductName);
            }
            product.Selected = true;
        });
    };
    this.getProductsSelected = function () {
        return this.productsSelected;
    };
    this.isProductSelected = function (id) {
        if (this.productsSelected[id]) {
            return true;
        } else {
            return false;
        }
    };
    this.getProductsSelectedCount = function () {
        return Object.keys(this.productsSelected).length;
    };

    this.checkRatingsBuckets = function (map) {
        var buckets = ['A', 'B', 'C', 'D', 'E', 'F'];
        var generated = this.generateRatingsBuckets();

        buckets.forEach(function (key, value) {
            var bucket = map[key];

            if (!bucket) {
                map[key] = generated[key];
            }
        });
    };

    this.generateRatingsBuckets = function () {
        var restriction = {
            logicalRestriction: {
                operator: "AND",
                restrictions: []
            }
        };

        var template = {
            account_restriction: angular.copy(restriction),
            contact_restriction: angular.copy(restriction)
        };

        return {
            "A": angular.copy(template),
            "B": angular.copy(template),
            "C": angular.copy(template),
            "D": angular.copy(template),
            "E": angular.copy(template),
            "F": angular.copy(template)
        };
    };

    this.getRatingId = function () {
        return this.rating_id;
    };

    this.setRatingId = function () {
        this.rating_id = $stateParams.rating_id;
    };

    this.getRatingEngine = function () {
        return this.rating;
    };
    this.setRatingEngine = function (rating) {
        this.rating = rating;
    };

    this.getProductsSelectedIds = function () {
        var ids = Object.keys(this.productsSelected);
        return ids;
    };

    this.deleteRating = function (ratingId) {
        var deferred = $q.defer();

        RatingsEngineService.deleteRating(ratingId).then(function (result) {
            if (result == true) {
                // immediately remove deleted rating from ratinglist
                RatingsEngineStore.setRatings(RatingsEngineStore.current.ratings.filter(function (rating) {
                    return rating.id != ratingId;
                }), true);
            }
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.getModelTrainingOptions = function () {
        return this.modelTrainingOptions;
    };

    this.setModelTrainingOptions = function (trainingOptions) {
        this.modelTrainingOptions = trainingOptions;
    };

    this.setDataStores = function (dataStores) {
        this.dataStores = dataStores;
    };

    this.getDataStores = function () {
        return this.dataStores;
    };

    this.setCustomEventModelingType = function (customEventModelingType) {
        this.customEventModelingType = customEventModelingType;
    };

    this.getCustomEventModelingType = function () {
        return this.customEventModelingType;
    };

    this.setModelingStrategy = function (modelingStrategy) {
        this.modelingStrategy = modelingStrategy;
    };
    this.getModelingStrategy = function () {
        return this.modelingStrategy;
    };
    this.setPredictionType = function (predictionType) {
        this.predictionType = predictionType;
    };
    this.getPredictionType = function () {
        return this.predictionType;
    };

    this.setFieldDocument = function (fieldDocument) {
        RatingsEngineStore.FieldDocument = fieldDocument;
    };

    this.getFieldDocument = function () {
        return RatingsEngineStore.FieldDocument;
    };

    this.setCSVFileName = function (fileName) {
        RatingsEngineStore.fileName = fileName;
    };

    this.getCSVFileName = function () {
        return RatingsEngineStore.fileName;
    };

    this.setDisplayFileName = function (fileName) {
        RatingsEngineStore.displayFileName = fileName;
    };

    this.getDisplayFileName = function () {
        return RatingsEngineStore.displayFileName;
    };

    this.setApplicationId = function (appId) {
        RatingsEngineStore.applicationId = appId;
    };

    this.getApplicationId = function () {
        return RatingsEngineStore.applicationId;
    };

    this.setConfigFilters = function (configFilters) {
        this.configFilters = configFilters;
    };
    this.getConfigFilters = function () {
        return this.configFilters;
    };

    this.setTrainingSegment = function (trainingSegment) {
        this.trainingSegment = trainingSegment;
    };
    this.getTrainingSegment = function () {
        return this.trainingSegment;
    };

    this.setTrainingProducts = function (trainingProducts) {
        this.trainingProducts = trainingProducts;
    };
    this.getTrainingProducts = function () {
        return this.trainingProducts;
    };

    this.nextSaveCustomEventRatingEngine = function (nextState) {

        var opts = {
            type: "CUSTOM_EVENT",
            id: $stateParams.rating_id ? $stateParams.rating_id : null
        };

        RatingsEngineStore.saveRating(opts, RatingsEngineStore.getCustomEventModelingType() == 'LPI').then(function (rating) {
            $state.go(nextState, { rating_id: rating.id });
        });
    };

    this.nextSaveCustomEventRatingModel = function (nextState) {
        var ratingId = $stateParams.rating_id;
        RatingsEngineStore.getRating(ratingId).then(function (rating) {
            var model = rating.activeModel,
                predictionType = RatingsEngineStore.getPredictionType(),
                dataStores = RatingsEngineStore.getDataStores(),
                customEventModelingType = RatingsEngineStore.getCustomEventModelingType();
            var modelTrainingOptions = RatingsEngineStore.getModelTrainingOptions();
            var fileName = RatingsEngineStore.getCSVFileName();
            var displayFileName = RatingsEngineStore.getDisplayFileName();
            var obj = {};

            obj = {
                AI: {
                    id: rating.activeModel.AI.id,
                    predictionType: predictionType,
                    advancedModelingConfig: {
                        'custom_event': {
                            customEventModelingType: customEventModelingType,
                            dataStores: dataStores,
                            sourceFileName: fileName,
                            sourceFileDisplayName: displayFileName,
                            deduplicationType: modelTrainingOptions['deduplicationType'],
                            excludePublicDomains: modelTrainingOptions['excludePublicDomains'],
                            transformationGroup: modelTrainingOptions['transformationGroup']
                        }
                    }
                }
            };

            RatingsEngineService.updateRatingModel(ratingId, obj.AI.id, obj).then(function (model) {
                $state.go(nextState, { rating_id: ratingId });
            });
        });
    };

    this.isUnmappedField = function (fieldMapping) {
        return !fieldMapping.mappedToLatticeField || this.availableFields.indexOf(fieldMapping.userField) >= 0;
    };

    this.saveFieldMapping = function (nextState) {

        var ratingId = $stateParams.rating_id;
        var FieldDocument = RatingsEngineStore.getFieldDocument();

        FieldDocument.fieldMappings.forEach(function (fieldMapping) {
            if (fieldMapping.ignored) {
                FieldDocument.ignoredFields.push(fieldMapping.userField);
                delete fieldMapping.ignored;
            } else if (RatingsEngineStore.isUnmappedField(fieldMapping)) {
                if (RatingsEngineStore.dataStores.indexOf('CustomFileAttributes') < 0) {
                    fieldMapping.mappedToLatticeField = false;
                    fieldMapping.mappedField = fieldMapping.userField;
                    fieldMapping.ignored = true;
                    FieldDocument.ignoredFields.push(fieldMapping.mappedField);
                }
            }
        });

        ImportWizardService.SaveFieldDocuments(RatingsEngineStore.getCSVFileName(), FieldDocument, { excludeCustomFileAttributes: RatingsEngineStore.getCustomEventModelingType() === 'CDL' }, true).then(function (result) {
            RatingsEngineStore.getRating(ratingId).then(function (rating) {
                RatingsEngineStore.nextLaunchAIModel(nextState, rating.activeModel);
            });
        });
    };

    this.nextSaveRatingEngineAI = function (nextState) {
        var ratingId = $stateParams.rating_id;
        // console.log('ID ', ratingId);
        var engineType = RatingsEngineStore.getModelingStrategy(),
            opts = {
            type: "CROSS_SELL",
            activeModel: {
                AI: {
                    advancedModelingConfig: {
                        cross_sell: {
                            modelingStrategy: engineType
                        }
                    }
                }
            },
            advancedRatingConfig: {
                cross_sell: {
                    modelingStrategy: engineType
                }
            }
        };
        if (ratingId) {
            opts.id = ratingId;
        }

        RatingsEngineStore.saveRating(opts).then(function (rating) {
            $state.go(nextState, { rating_id: rating.id });
        });
    };

    this.nextValidateTraining = function (nextState) {
        var ratingId = $stateParams.rating_id,
            modelId = $stateParams.modelId; // no model id here

        RatingsEngineStore.setValidation('training', false);

        RatingsEngineStore.getRating(ratingId).then(function (rating) {
            var modelAIId = rating.activeModel.AI.id; // use this instead of model id

            RatingsEngineService.validateModel(ratingId, modelAIId).then(function (result) {
                var success = !result.data.errorCode;
                if (success) {
                    RatingsEngineStore.nextSaveAIRatingModel(nextState, 'training');
                }
                RatingsEngineStore.setValidation('training', !success);
            });
        });
    };

    /**
     * [nextSaveAIRatingModel 
     * @param  {[string]} nextState [the next state]
     * @param  {[sting]} validate  [what you want to setValidation for, not a boolean]
     */
    this.nextSaveAIRatingModel = function (nextState, validate) {
        var ratingId = $stateParams.rating_id;

        RatingsEngineStore.getRating(ratingId).then(function (rating) {

            var model = rating.activeModel.AI,
                targetProducts = model.targetProducts === [] ? [] : RatingsEngineStore.getProductsSelectedIds(),
                predictionType = RatingsEngineStore.getPredictionType(),
                configFilters = RatingsEngineStore.getConfigFilters(),
                modelingStrategy = $stateParams.engineType,
                trainingSegment = RatingsEngineStore.getTrainingSegment(),
                trainingProducts = RatingsEngineStore.getTrainingProducts(),
                obj = {};

            obj = {
                AI: {
                    id: rating.activeModel.AI.id,
                    predictionType: predictionType,
                    trainingSegment: trainingSegment,
                    advancedModelingConfig: {
                        cross_sell: {
                            targetProducts: targetProducts,
                            trainingProducts: trainingProducts,
                            modelingStrategy: modelingStrategy,
                            filters: configFilters
                        }
                    }
                }
            };

            // console.log("GET RATING & MODEL CREATE OBJECT", obj.AI);

            RatingsEngineService.updateRatingModel(ratingId, obj.AI.id, obj).then(function (model) {

                // console.log("MODEL", model.AI);

                var route = nextState,
                    lastRoute = route.split(/[\.]+/);

                if (validate) {
                    RatingsEngineService.validateModel(ratingId, obj.AI.id).then(function (result) {
                        var success = !result.data.errorCode;
                        if (success) {
                            if (lastRoute[lastRoute.length - 1] === 'creation') {
                                // console.log("Model Updated & Launch", model);
                                RatingsEngineStore.nextLaunchAIModel(nextState, model);
                            } else {
                                // console.log("Model Updated", model);
                                if (nextState) {
                                    $state.go(nextState, { rating_id: ratingId });
                                }
                            }
                        }
                        RatingsEngineStore.setValidation(validate, !success);
                    });
                } else {
                    if (lastRoute[lastRoute.length - 1] === 'creation') {
                        // console.log("Model Updated & Launch", model);
                        RatingsEngineStore.nextLaunchAIModel(nextState, model);
                    } else {
                        // console.log("Model Updated", model);
                        if (nextState) {
                            $state.go(nextState, { rating_id: ratingId });
                        }
                    }
                }
            });
        });
    };

    this.setAvailableFields = function (availableFields) {
        this.availableFields = availableFields;
    };

    this.getAvailableFields = function () {
        return this.availableFields;
    };

    this.getRatingModel = function (engineId, modelId) {
        var deferred = $q.defer();

        RatingsEngineService.getRatingModel(engineId, modelId).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.getTrainingCounts = function (engineId, modelId, ratingEngine, queryType) {
        var deferred = $q.defer();

        RatingsEngineService.getTrainingCounts(engineId, modelId, ratingEngine, queryType).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.nextLaunchAIModel = function (nextState, model) {
        var currentRating = RatingsEngineStore.getCurrentRating(),
            obj = model.AI;

        RatingsEngineStore.tmpId = obj.id;

        // console.log('Launching the model', obj);
        RatingsEngineService.createAIModel(currentRating.id, obj.id).then(function (applicationid) {
            RatingsEngineStore.setApplicationId(applicationid);
            JobsStore.inProgressModelJobs[currentRating.id] = null;

            var id = applicationid;
            // console.log('Model Launched', id, nextState);
            if (nextState) {
                $state.go(nextState, { ai_model_job_id: id });
            }
        });
    };

    this.formatTrainingAttributes = function (type) {
        switch (type) {
            case 'DataCloud':
                return 'Lattice Data Cloud';
            case 'CDL':
                return 'Lattice Database';
            case 'CustomFileAttributes':
                return 'Training File';
        }
    };

    this.getModel = function (ratingId) {
        var deferred = $q.defer();
        RatingsEngineStore.getRating(ratingId).then(function (engine) {
            RatingsEngineStore.setRating(engine);
            if (engine.activeModel.AI) {
                RatingsEngineStore.getRatingModel(ratingId, engine.activeModel.AI.id).then(function (model) {
                    deferred.resolve(model);
                });
            } else {
                deferred.resolve(engine.activeModel);
            }
        });
        return deferred.promise;
    };

    this.saveRatingStatus = function (rating_id, status, action) {

        var deferred = $q.defer();
        var newRating = {
            id: rating_id,
            status: status
        };
        RatingsEngineService.saveRating(newRating, {}, action).then(function (data) {
            deferred.resolve({ success: true });
        });
        return deferred.promise;
    };
}]).service('RatingsEngineService', ["$q", "$http", "$state", function ($q, $http, $state) {
    this.getRatings = function (active) {
        var deferred = $q.defer(),
            result,
            url = '/pls/ratingengines' + (active ? '?status=ACTIVE' : '');

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }
            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.reject(errorMsg);
        });

        return deferred.promise;
    };

    this.getSegmentsCounts = function (segmentIds) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/ratingengines/coverage',
            data: {
                segmentIds: segmentIds
            },
            cache: true
        }).then(function onSuccess(response) {
            result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }
            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.reject(errorMsg);
        });

        return deferred.promise;
    };

    this.getRatingsChartData = function (CoverageRequest) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/ratingengines/coverage',
            data: CoverageRequest,
            cache: true
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.deleteRating = function (ratingName) {
        var deferred = $q.defer(),
            result,
            url = '/pls/ratingengines/' + ratingName;

        $http({
            method: 'DELETE',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.saveRating = function (opts, params, action) {
        var deferred = $q.defer(),
            createAction = action ? action : 'true';

        $http({
            method: 'POST',
            url: '/pls/ratingengines?create-action=' + createAction,
            data: opts,
            params: params || {}
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getProducts = function (params) {
        var deferred = $q.defer(),
            max = params.max,
            offset = params.offset,
            data = [],
            url = '/pls/products/data';

        $http({
            method: 'GET',
            url: url,
            params: {
                max: params.max || 1000,
                offset: params.offset || 0
            },
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.saveRules = function (opts) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/ratingengines/' + opts.rating_id + '/ratingmodels/' + opts.model_id,
            data: opts.model
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getRating = function (id) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/ratingengines/' + id
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getRatingModels = function (id) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/ratingengines/' + id + '/ratingmodels'
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getRatingDashboard = function (id) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/ratingengines/' + id + '/dashboard'
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.createAIModel = function (ratingid, modelid) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/ratingengines/' + ratingid + '/ratingmodels/' + modelid + '/model',
            headers: {
                'Accept': 'text/plain'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
    this.updateRatingModel = function (ratingid, modelid, opts) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/ratingengines/' + ratingid + '/ratingmodels/' + modelid,
            data: opts
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
    this.getRatingModel = function (ratingId, modelId) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/ratingengines/' + ratingId + '/ratingmodels/' + modelId
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getTrainingCounts = function (ratingId, modelId, ratingEngine, queryType) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/ratingengines/' + ratingId + '/ratingmodels/' + modelId + '/modelingquery/count',
            params: {
                querytype: queryType
            },
            data: ratingEngine
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.validateModel = function (ratingId, modelId) {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/ratingengines/' + ratingId + '/ratingmodels/' + modelId + '/model/validate',
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            deferred.resolve(response);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }
            deferred.resolve(response);
        });

        return deferred.promise;
    };

    this.GetRatingEnginesDependenciesModelView = function (id, errorDisplayCallback) {
        var deferred = $q.defer(),
            result,
            url = '/pls/ratingengines/' + id + '/dependencies/modelAndView';

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json',
                'ErrorDisplayCallback': errorDisplayCallback
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/routes.js":
/*!***********************!*\
  !*** ./app/routes.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* jshint -W014 */
angular.module('mainApp').service('StateHistory', function () {
    this.states = {
        from: [],
        fromParams: [],
        to: [],
        toParams: []
    };

    this.lastTo = function () {
        return this.states.to[this.states.to.length - 1];
    };

    this.lastToParams = function () {
        return this.states.toParams[this.states.toParams.length - 1];
    };

    this.lastFrom = function () {
        return this.states.from[this.states.from.length - 1];
    };

    this.lastFromParams = function () {
        return this.states.fromParams[this.states.fromParams.length - 1];
    };

    this.isTo = function (name) {
        return this.lastTo().name == name;
    };

    this.isFrom = function (name) {
        return this.lastFrom().name == name;
    };

    this.setTo = function (state, params) {
        this.states.to.push(state);
        this.states.toParams.push(params);
    };

    this.setFrom = function (state, params) {
        this.states.from.push(state);
        this.states.fromParams.push(params);
    };
}).run(["$transitions", function ($transitions) {
    // setup StateHistory service and close any error banners left open
    $transitions.onStart({}, function (trans) {
        var StateHistory = trans.injector().get('StateHistory'),
            Banner = trans.injector().get('Banner'),
            from = trans.$from(),
            to = trans.$to();

        StateHistory.setFrom(from, trans.params('from'));
        StateHistory.setTo(to, trans.params('to'));

        if (from.name !== to.name) {
            var fromSplit = from.name.split('.');
            var toSplit = to.name.split('.');
            var fromCheck = fromSplit.splice(1, toSplit.length >> 1 || 1).join('.');
            var toCheck = toSplit.splice(1, toSplit.length >> 1 || 1).join('.');
            var delay = fromCheck === toCheck ? 7500 : 0;

            Banner.reset(delay);
        }
    });

    // when user hits browser Back button after app instantiate, send back to login
    $transitions.onStart({
        to: 'home',
        from: function from(state) {
            return state.name == 'home.models' || state.name == 'home.datacloud';
        }
    }, function (trans) {
        window.open("/login", "_self");
    });

    // ShowSpinner when transitioning states that alter main ui-view
    $transitions.onStart({
        to: function to(state) {
            return state.views['main'] || state.views['main@'];
        }
    }, function (trans) {
        var params = trans.params('to') || {},
            from = trans.$from(),
            to = trans.$to();

        if (to.name !== from.name && params.LoadingSpinner !== false) {
            ShowSpinner(params.LoadingText || '');
        }
    });

    $transitions.onBefore({}, function (trans) {
        var BrowserStorageUtility = trans.injector().get('BrowserStorageUtility'),
            ClientSession = BrowserStorageUtility.getClientSession(),
            stateService = trans.router.stateService,
            params = Object.assign({}, trans.params('to')),
            tenant = ClientSession.Tenant;

        if (params.tenantName === '') {
            params.tenantName = tenant.DisplayName;

            return stateService.target(trans.to(), params);
        }
    });

    $transitions.onSuccess({ to: 'home' }, function (trans) {
        var BrowserStorageUtility = trans.injector().get('BrowserStorageUtility'),
            ClientSession = BrowserStorageUtility.getClientSession(),
            stateService = trans.router.stateService,
            tenant = ClientSession.Tenant;

        if (trans.$to().params.tenantName != tenant.DisplayName) {
            var FeatureFlags = trans.injector().get('FeatureFlagService');

            FeatureFlags.GetAllFlags().then(function (result) {
                var flags = FeatureFlags.Flags(),
                    sref = FeatureFlags.FlagIsEnabled(flags.ENABLE_CDL) ? 'home.segment.explorer.attributes' : 'home.models';

                trans.router.stateService.go(sref, {
                    tenantName: tenant.DisplayName,
                    segment: 'Create'
                });
            });
        }
    });
}]).config(["$stateProvider", "$urlRouterProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $locationProvider) {
    $locationProvider.html5Mode(true);
    $urlRouterProvider.otherwise('/tenant/');

    $stateProvider.state('home', {
        url: '/tenant/:tenantName',
        onEnter: ["SidebarStore", function onEnter(SidebarStore) {
            SidebarStore.set(null);
        }],
        params: {
            tenantName: { dynamic: true, value: '' }
        },
        resolve: {
            ClientSession: ["BrowserStorageUtility", function ClientSession(BrowserStorageUtility) {
                return BrowserStorageUtility.getClientSession();
            }],
            WidgetConfig: ["$q", "ConfigService", function WidgetConfig($q, ConfigService) {
                var deferred = $q.defer();

                ConfigService.GetWidgetConfigDocument().then(function (result) {
                    deferred.resolve();
                });

                return deferred.promise;
            }],
            FeatureFlags: ["$q", "FeatureFlagService", function FeatureFlags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function () {
                    deferred.resolve();
                });

                return deferred.promise;
            }],
            ResourceStrings: ["$q", "ResourceStringsService", "ClientSession", function ResourceStrings($q, ResourceStringsService, ClientSession) {
                var deferred = $q.defer();

                ResourceStringsService.GetInternalResourceStringsForLocale(ClientSession.Locale).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            // placeholder for when this is set to /ulysses in insights iframe
            ApiHost: function ApiHost() {
                return '/pls'; // don't remove this. -Lazarus
            },
            CollectionStatus: ["$q", "FeatureFlags", "FeatureFlagService", "QueryStore", function CollectionStatus($q, FeatureFlags, FeatureFlagService, QueryStore) {
                var deferred = $q.defer(),
                    flags = FeatureFlagService.Flags();

                if (FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL)) {
                    QueryStore.getCollectionStatus().then(function (result) {
                        deferred.resolve(result);
                    });

                    return deferred.promise;
                }
            }]
        },
        views: {
            "sidebar": {
                templateUrl: 'app/navigation/sidebar/sidebar.component.html'
            },
            "navigation@home": {
                templateUrl: 'app/navigation/sidebar/root/root.component.html'
            },
            "header": {
                controller: 'HeaderController',
                templateUrl: 'app/navigation/header/views/MainHeaderView.html'
            },
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "banner": "bannerMessage",
            "notice": "noticeMessage"
        }
    }).state('home.models', {
        url: '/models',
        onEnter: ["$state", "FilterService", function onEnter($state, FilterService) {
            if (['home.models'].indexOf($state.current.name) < 0) {
                FilterService.clear();
            }
        }],
        params: {
            pageTitle: 'Models',
            pageIcon: 'ico-model'
        },
        resolve: {
            ModelList: ["$q", "ModelStore", function ModelList($q, ModelStore) {
                var deferred = $q.defer();

                ModelStore.getModels(true).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: 'ModelListController',
                controllerAs: 'vm',
                templateUrl: 'app/navigation/summary/ModelListView.html'
            },
            "main@": {
                controller: 'ModelListController',
                controllerAs: 'vm',
                templateUrl: 'app/models/views/ModelListView.html'
            }
        }
    }).state('home.models.history', {
        url: '/history',
        params: {
            pageIcon: 'ico-model',
            pageTitle: 'Models > Creation History'
        },
        views: {
            "summary@": {
                controller: 'ModelListController',
                controllerAs: 'vm',
                templateUrl: 'app/navigation/summary/ModelListView.html'
            },
            "main@": {
                templateUrl: 'app/models/views/ModelCreationHistoryView.html'
            }
        }
    }).state('home.model', {
        url: '/model/:modelId/:rating_id',
        params: {
            modelId: '',
            rating_id: '',
            viewingIteration: false,
            toggleRatings: false
        },
        onEnter: ['$stateParams', 'IsCdl', 'Model', 'RatingEngine', 'BackStore', function ($stateParams, IsCdl, Model, RatingEngine, BackStore) {
            if ($stateParams.viewingIteration) {
                var backState = 'home.ratingsengine.dashboard',
                    backParams = {
                    "rating_id": $stateParams.rating_id,
                    "modelId": $stateParams.modelId,
                    "viewingIteration": false
                },
                    displayName = 'Dashboard';

                BackStore.setBackLabel(displayName);
                BackStore.setBackState(backState);
                BackStore.setBackParams(backParams);
            } else {
                var displayName = Model.ModelDetails.DisplayName;
                var backState = 'home.models';

                if (IsCdl === true) {
                    backState = 'home.ratingsengine';
                    displayName = RatingEngine.displayName;
                }
                BackStore.setBackLabel(displayName);
                BackStore.setBackState(backState);
            }
        }],
        resolve: {
            IsCdl: ["FeatureFlagService", function IsCdl(FeatureFlagService) {
                var flags = FeatureFlagService.Flags();
                var cdl = FeatureFlagService.FlagIsEnabled(flags.ENABLE_CDL);
                return cdl;
            }],
            RatingEngine: ["$q", "$stateParams", "RatingsEngineStore", "IsCdl", function RatingEngine($q, $stateParams, RatingsEngineStore, IsCdl) {
                if (IsCdl) {
                    var deferred = $q.defer(),
                        id = $stateParams.rating_id;

                    RatingsEngineStore.getRating(id).then(function (engine) {
                        deferred.resolve(engine);
                    });

                    return deferred.promise;
                } else {
                    return null;
                }
            }],
            Model: ["$q", "$stateParams", "ModelStore", function Model($q, $stateParams, ModelStore) {
                var deferred = $q.defer(),
                    id = $stateParams.modelId;

                ModelStore.getModel(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            IsRatingEngine: ["Model", function IsRatingEngine(Model) {
                return Model.ModelDetails.Name.substring(0, 2) == 'ai';
            }],
            IsPmml: ["Model", function IsPmml(Model) {
                return Model.ModelDetails.ModelType == 'PmmlModel';
            }],
            loadAlaSQL: ["$ocLazyLoad", function loadAlaSQL($ocLazyLoad) {
                return $ocLazyLoad.load('lib/js/alasql.min.js');
            }],
            HasRatingsAvailable: ["$q", "$stateParams", "ModelRatingsService", function HasRatingsAvailable($q, $stateParams, ModelRatingsService) {

                var deferred = $q.defer(),
                    id = $stateParams.modelId;

                ModelRatingsService.HistoricalABCDBuckets(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "navigation@home": {
                controller: 'SidebarModelController',
                controllerAs: 'vm',
                templateUrl: 'app/navigation/sidebar/model/model.component.html'
            },
            "summary@": {
                controller: 'ModelDetailController',
                template: '<div id="ModelDetailsArea"></div>'
            },
            "main@": {
                template: ''
            },
            'header.back@': 'backNav'
        }
    }).state('home.segment.import', {
        url: '/mydata',
        params: {
            pageIcon: 'ico-attributes',
            pageTitle: 'My Data'
        },
        views: {
            "main@": {
                templateUrl: 'app/create/mydata/UploadMyDataView.html'
            }
        }
    }).state('home.model.attributes', {
        url: '/attributes',
        params: {
            pageIcon: 'ico-attributes',
            pageTitle: 'Attributes'
        },
        views: {
            "main@": {
                controller: ["$scope", "$stateParams", "$compile", "$rootScope", "Model", "ModelStore", "RatingEngine", "StateHistory", function controller($scope, $stateParams, $compile, $rootScope, Model, ModelStore, RatingEngine, StateHistory) {

                    $scope.data = ModelStore.data;
                    $compile($('#modelDetailContainer').html('<div id="modelDetailsAttributesTab" class="tab-content" data-top-predictor-widget></div>'))($scope);
                }],
                template: '<div id="modelDetailContainer" class="model-details"></div>'
            }
        }
    }).state('home.model.performance', {
        url: '/performance',
        params: {
            pageIcon: 'ico-performance',
            pageTitle: 'Performance'
        },
        views: {
            "main@": {
                controller: ["$scope", "$compile", "ModelStore", function controller($scope, $compile, ModelStore) {
                    $scope.data = ModelStore.data;
                    $compile($('#modelDetailContainer').html('<div id="performanceTab" class="tab-content" data-performance-tab-widget></div>'))($scope);
                }],
                template: '<div id="modelDetailContainer" class="model-details"></div>'
            },
            'header.back@': 'backNav'
        }
    }).state('home.model.ratings', {
        url: '/ratings',
        resolve: {
            CurrentConfiguration: ["$q", "$stateParams", "ModelRatingsService", function CurrentConfiguration($q, $stateParams, ModelRatingsService) {
                var deferred = $q.defer(),
                    id = $stateParams.modelId;

                ModelRatingsService.MostRecentConfiguration(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            RatingsSummary: ["$q", "$stateParams", "ModelRatingsService", function RatingsSummary($q, $stateParams, ModelRatingsService) {
                var deferred = $q.defer(),
                    id = $stateParams.modelId;

                ModelRatingsService.GetBucketedScoresSummary(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            HistoricalABCDBuckets: ["$q", "$stateParams", "ModelRatingsService", function HistoricalABCDBuckets($q, $stateParams, ModelRatingsService) {
                var deferred = $q.defer(),
                    id = $stateParams.modelId;

                ModelRatingsService.HistoricalABCDBuckets(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        params: {
            pageIcon: 'ico-ratings',
            pageTitle: 'Ratings',
            section: null
        },
        views: {
            "main@": {
                controller: 'ModelRatingsController',
                controllerAs: 'vm',
                templateUrl: 'app/models/views/ModelRatingsView.html'
            }
        }
    }).state('home.model.ratings.history', {
        url: '/history',
        resolve: {
            FeatureFlags: ["$q", "FeatureFlagService", function FeatureFlags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            ScoringHistory: ["$q", "$stateParams", "FeatureFlags", "ModelRatingsService", function ScoringHistory($q, $stateParams, FeatureFlags, ModelRatingsService) {

                var cdlIsEnabled = FeatureFlags.EnableCdl,
                    deferred = $q.defer();

                if (cdlIsEnabled) {
                    var id = $stateParams.rating_id;

                    ModelRatingsService.ScoringHistory(id).then(function (result) {
                        deferred.resolve(result);
                    });
                } else {
                    var id = $stateParams.modelId;

                    ModelRatingsService.HistoricalABCDBuckets(id).then(function (result) {
                        deferred.resolve(result);
                    });
                }

                return deferred.promise;
            }]
        },
        params: {
            pageIcon: 'ico-ratings',
            pageTitle: 'History'
        },
        views: {
            "main@": {
                controller: 'ModelRatingsHistoryController',
                controllerAs: 'vm',
                templateUrl: 'app/models/views/ModelRatingsHistoryView.html'
            }
        }
    }).state('home.model.ratings-demo', {
        url: '/ratings-demo',
        resolve: {
            FeatureFlags: ["$q", "FeatureFlagService", function FeatureFlags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        params: {
            pageIcon: 'ico-ratings',
            pageTitle: 'Ratings'
        },
        views: {
            "main@": {
                controller: ["FeatureFlags", function controller(FeatureFlags) {
                    this.cdlIsEnabled = FeatureFlags.EnableCdl; //vm.cdlIsEnabled
                }],
                controllerAs: 'vm',
                templateUrl: 'app/models/views/ModelRatingsDemoView.html'
            }
        }
    }).state('home.model.leads', {
        url: '/leads',
        params: {
            pageIcon: 'ico-leads',
            pageTitle: 'Leads'
        },
        views: {
            "main@": {
                controller: ["$scope", "$compile", "ModelStore", function controller($scope, $compile, ModelStore) {
                    $scope.data = ModelStore.data;
                    $compile($('#modelDetailContainer').html('<div id="modelDetailsLeadsTab" class="tab-content" data-leads-tab-widget></div>'))($scope);
                }],
                template: '<div id="modelDetailContainer" class="model-details"></div>'
            }
        }
    }).state('home.model.summary', {
        url: '/summary',
        params: {
            pageIcon: 'ico-datatable',
            pageTitle: 'Summary'
        },
        views: {
            "main@": {
                controller: ["$scope", "$compile", "ModelStore", "IsPmml", function controller($scope, $compile, ModelStore, IsPmml) {
                    $scope.data = ModelStore.data;
                    $scope.IsPmml = IsPmml;
                }],
                templateUrl: 'app/AppCommon/widgets/adminInfoSummaryWidget/AdminInfoSummaryWidgetTemplate.html'
            }
        }
    }).state('home.model.alerts', {
        url: '/alerts',
        params: {
            pageIcon: 'ico-alerts',
            pageTitle: ''
        },
        resolve: {
            ModelAlertsTmp: ["$q", "Model", "ModelService", function ModelAlertsTmp($q, Model, ModelService) {
                var deferred = $q.defer(),
                    data = Model,
                    id = data.ModelDetails.ModelID,
                    result = {};

                var suppressedCategories = data.SuppressedCategories;

                ModelService.GetModelAlertsByModelId(id).then(function (result) {
                    if (result !== null && result.success === true) {
                        data.ModelAlerts = result.resultObj;
                        data.SuppressedCategories = suppressedCategories;
                        deferred.resolve(result);
                    } else if (result !== null && result.success === false) {
                        data.ModelAlerts = result.resultObj;
                        data.SuppressedCategories = null;
                        deferred.reject('nope');
                    }
                });

                return deferred.promise;
            }]
        },
        views: {
            "main@": {
                controller: ["$scope", "Model", "ModelStore", function controller($scope, Model, ModelStore) {
                    $scope.data = ModelStore.data;
                }],
                templateUrl: 'app/AppCommon/widgets/adminInfoAlertsWidget/AdminInfoAlertsWidgetTemplate.html'
            }
        }
    }).state('home.model.refine', {
        url: '/refine',
        params: {
            pageIcon: 'ico-refine',
            pageTitle: 'Refine'
        },
        resolve: {
            loadKendo: ['$ocLazyLoad', function ($ocLazyLoad) {
                return $ocLazyLoad.load('lib/js/kendo.all.min.js');
            }]
        },
        views: {
            "main@": {
                controller: 'ManageFieldsController',
                templateUrl: 'app/setup/views/ManageFieldsView.html'
            }
        }
    }).state('home.model.review', {
        url: '/review',
        params: {
            pageIcon: 'ico-datatable',
            pageTitle: ''
        },
        resolve: {
            ReviewData: ["$q", "$stateParams", "$http", "Model", "ModelReviewStore", function ReviewData($q, $stateParams, $http, Model, ModelReviewStore) {
                var deferred = $q.defer(),
                    modelId = $stateParams.modelId,
                    eventTableName = Model.EventTableProvenance.EventTableName;

                ModelReviewStore.GetReviewData(modelId, eventTableName).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
            /*
            views: {
                "summary@": {
                    controller: 'RefineModelSummaryController',
                    controllerAs: 'vm',
                    templateUrl: 'app/navigation/summary/RefineModelSummaryView.html'
                },
                "main@": {
                    controller: 'ModelReviewRowController',
                    controllerAs: 'vm',
                    templateUrl: 'app/models/views/RefineModelRowsView.html'
                }
            }
            */
        } }).state('home.model.review.columns', {
        url: '/columns',
        params: {
            pageIcon: 'ico-datatable',
            pageTitle: ''
        },
        views: {
            "summary@": {
                controller: 'RefineModelSummaryController',
                controllerAs: 'vm',
                templateUrl: 'app/navigation/summary/RefineModelSummaryView.html'
            },
            "main@": {
                controller: 'ModelReviewColumnController',
                controllerAs: 'vm',
                templateUrl: 'app/models/views/RefineModelColumnsView.html'
            }
        }
    }).state('home.model.remodel', {
        url: '/remodel',
        params: {
            pageIcon: 'ico-remodel',
            pageTitle: 'Remodel'
        },
        resolve: {
            DataRules: ["$q", "$stateParams", "$http", "RemodelStore", function DataRules($q, $stateParams, $http, RemodelStore) {
                var deferred = $q.defer(),
                    modelId = $stateParams.modelId;

                RemodelStore.GetModelReviewDataRules(modelId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            Attributes: ["$q", "$stateParams", "RemodelStore", function Attributes($q, $stateParams, RemodelStore) {
                var deferred = $q.defer(),
                    modelId = $stateParams.modelId;

                RemodelStore.GetModelReviewAttributes(modelId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'RemodelController',
                controllerAs: 'vm',
                templateUrl: 'app/models/views/RemodelView.html'
            }
        }
    }).state('home.model.notes', {
        url: '/notes',
        resolve: {
            Notes: ["$q", "$stateParams", "NotesService", function Notes($q, $stateParams, NotesService) {
                var deferred = $q.defer(),
                    id = $stateParams.modelId;

                NotesService.GetNotes(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        params: {
            pageIcon: 'ico-notes',
            pageTitle: 'Notes'
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'NotesController',
                controllerAs: 'vm',
                templateUrl: 'app/notes/NotesView.html'
            }
        }
    }).state('home.marketosettings', {
        url: '/marketosettings',
        redirectto: 'home.marketosettings.apikey',
        resolve: {
            urls: ["$q", "$http", function urls($q, $http) {
                var deferred = $q.defer();

                $http({
                    'method': "GET",
                    'url': "/pls/sureshot/urls",
                    'params': {
                        'crmType': "marketo"
                    }
                }).then(function onSuccess(response) {
                    if (response.data.Success) {
                        deferred.resolve(response.data.Result);
                    } else {
                        deferred.reject(response.data.Errors);
                    }
                }, function onError(response) {
                    deferred.reject(response.data.Errors);
                });

                return deferred.promise;
            }]
        }
    }).state('home.marketosettings.apikey', {
        url: '/apikey',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles'
        },
        resolve: {
            FeatureFlags: ["$q", "FeatureFlagService", function FeatureFlags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function () {
                    deferred.resolve();
                });

                return deferred.promise;
            }],
            MarketoCredentials: ["$q", "MarketoService", function MarketoCredentials($q, MarketoService) {
                var deferred = $q.defer();

                MarketoService.GetMarketoCredentials().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "navigation@home": {
                controller: ["$scope", "$state", "FeatureFlagService", "ApiHost", "DataCloudStore", function controller($scope, $state, FeatureFlagService, ApiHost, DataCloudStore) {
                    DataCloudStore.setHost(ApiHost);

                    FeatureFlagService.GetAllFlags().then(function () {

                        var flags = FeatureFlagService.Flags();
                        $scope.latticeIsEnabled = FeatureFlagService.FlagIsEnabled(flags.LATTICE_MARKETO_PAGE);

                        if ($scope.latticeIsEnabled !== true) {
                            $state.go('home.marketosettings.credentials');
                        }
                    });
                }],
                templateUrl: 'app/navigation/sidebar/root/root.component.html'
            },
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'MarketoCredentialsController',
                controllerAs: 'vm',
                templateUrl: 'app/marketo/views/MarketoCredentialsView.html'
            }
        }
    }).state('home.marketosettings.create', {
        url: '/create',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles > Create New Marketo Profile'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_MARKETO_APIKEY';
            }
        },
        views: {
            "summary@": {
                controller: ["$scope", "$state", "ResourceUtility", function controller($scope, $state, ResourceUtility) {
                    $scope.isCreateForm = true;
                    $scope.ResourceUtility = ResourceUtility;
                }],
                templateUrl: 'app/navigation/summary/MarketoTabs.html'
            },
            "main@": {
                controller: 'MarketoCredentialSetupController',
                controllerAs: 'vm',
                templateUrl: 'app/marketo/views/AddCredentialFormView.html'
            }
        }
    }).state('home.marketosettings.edit', {
        url: '/edit/{id}',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles > Edit Profile'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_MARKETO_APIKEY';
            },
            FeatureFlags: ["$q", "FeatureFlagService", function FeatureFlags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            MarketoCredential: ["$q", "$stateParams", "MarketoService", function MarketoCredential($q, $stateParams, MarketoService) {
                var deferred = $q.defer();
                var id = $stateParams.id;

                MarketoService.GetMarketoCredentials(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: ["$scope", "$stateParams", "$state", "ResourceUtility", function controller($scope, $stateParams, $state, ResourceUtility) {
                    $scope.state = 'home.marketosettings.edit';
                    $scope.id = $stateParams.id;
                    $scope.ResourceUtility = ResourceUtility;
                }],
                templateUrl: 'app/navigation/summary/MarketoTabs.html'
            },
            "main@": {
                controller: 'MarketoCredentialsEditController',
                controllerAs: 'vm',
                templateUrl: 'app/marketo/views/AddCredentialFormView.html'
            }
        }
    }).state('home.marketosettings.enrichment', {
        url: '/enrichment/{id}',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles > Enrichment'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_MARKETO_APIKEY';
            },
            EnrichmentData: ["$q", "DataCloudStore", function EnrichmentData($q, DataCloudStore) {
                var deferred = $q.defer();

                DataCloudStore.getEnrichments().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            MarketoCredential: ["$q", "$stateParams", "MarketoService", function MarketoCredential($q, $stateParams, MarketoService) {
                var deferred = $q.defer();
                var id = $stateParams.id;

                MarketoService.GetMarketoCredentials(id).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            MarketoMatchFields: ["$q", "MarketoService", "MarketoCredential", function MarketoMatchFields($q, MarketoService, MarketoCredential) {
                var deferred = $q.defer();

                MarketoService.GetMarketoMatchFields(MarketoCredential).then(function (result) {
                    deferred.resolve(result.data);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: ["$scope", "$stateParams", "$state", "ResourceUtility", function controller($scope, $stateParams, $state, ResourceUtility) {
                    $scope.state = $state.current.name;
                    $scope.id = $stateParams.id;
                    $scope.ResourceUtility = ResourceUtility;
                }],
                templateUrl: 'app/navigation/summary/MarketoTabs.html'
            },
            "main@": {
                controller: 'MarketoEnrichmentController',
                controllerAs: 'vm',
                templateUrl: 'app/marketo/views/MarketoEnrichmentView.html'
            }
        }
    }).state('home.marketosettings.models', {
        url: '/models/{id}',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_MARKETO_MODELS';
            },
            FeatureFlags: ["$q", "FeatureFlagService", function FeatureFlags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        onEnter: ['FeatureFlags', '$state', '$stateParams', function (FeatureFlags, $state, $stateParams) {
            var useMarketoLatticeIntegration = FeatureFlags.LatticeMarketoScoring;
            if (useMarketoLatticeIntegration) {
                console.log('credential', $stateParams.id);
                $state.go('home.marketosettings.scoring', { credentialId: $stateParams.id });
            }
        }],
        views: {
            "summary@": {
                controller: ["$scope", "$stateParams", "$state", "ResourceUtility", "FeatureFlags", function controller($scope, $stateParams, $state, ResourceUtility, FeatureFlags) {
                    $scope.state = $state.current.name;
                    $scope.id = $stateParams.id;
                    $scope.ResourceUtility = ResourceUtility;
                    $scope.useMarketoLatticeIntegration = FeatureFlags.LatticeMarketoScoring;
                }],
                templateUrl: 'app/navigation/summary/MarketoTabs.html'
            },
            "main@": {
                controller: ["urls", "$scope", "$stateParams", function controller(urls, $scope, $stateParams) {
                    $scope.id = $stateParams.id;
                    $('#sureshot_iframe_container').html('<iframe src="' + urls.scoring_settings_url + '&credentialId=' + $scope.id + '"></iframe>');

                    changeIframeHeight();

                    function changeIframeHeight() {
                        var if_height;

                        window.addEventListener("message", function (event) {
                            // verify the origin is sureshot, if not just return
                            var origin = event.origin || event.originalEvent.origin;
                            //if (origin != "{sureshot_iframe_origin}")
                            //return false;

                            if (!event.data.contentHeight) {
                                return;
                            }

                            var h = event.data.contentHeight;

                            if (!isNaN(h) && h > 0 && h !== if_height) {
                                if_height = h;

                                $("#sureshot_iframe_container iframe").height(h);
                            }
                            return true;
                        }, false);
                    }
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    }).state('home.marketosettings.scoring', {
        url: '/{credentialId}/scoring',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles'
        },
        resolve: {
            ActiveModels: ["$q", "MarketoStore", "MarketoService", function ActiveModels($q, MarketoStore, MarketoService) {
                var deferred = $q.defer();

                var storedActiveModels = MarketoStore.getActiveModels();
                if (!storedActiveModels || storedActiveModels.length == 0) {
                    MarketoService.GetActiveModels().then(function (result) {
                        deferred.resolve(result);
                    });
                } else {
                    deferred.resolve(storedActiveModels);
                }

                return deferred.promise;
            }],
            ScoringRequestSummaries: ["$q", "$stateParams", "MarketoStore", function ScoringRequestSummaries($q, $stateParams, MarketoStore) {
                var deferred = $q.defer();

                MarketoStore.getScoringRequestList($stateParams.credentialId, false).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: ["$scope", "$stateParams", "$state", "ResourceUtility", function controller($scope, $stateParams, $state, ResourceUtility) {
                    $scope.state = $state.current.name;
                    $scope.id = $stateParams.credentialId;
                    $scope.ResourceUtility = ResourceUtility;
                    $scope.useMarketoLatticeIntegration = true;
                }],
                templateUrl: 'app/navigation/summary/MarketoTabs.html'
            },
            "main@": "marketoActiveModels"
        }
    }).state('home.marketosettings.setup', {
        url: '/{credentialId}/setup/{modelUuid}',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles'
        },
        resolve: {
            MarketoCredentials: ["$q", "$stateParams", "MarketoStore", "MarketoService", function MarketoCredentials($q, $stateParams, MarketoStore, MarketoService) {
                var deferred = $q.defer();

                MarketoStore.getMarketoCredential($stateParams.credentialId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            ScoringRequestSummaries: ["$q", "$stateParams", "MarketoStore", function ScoringRequestSummaries($q, $stateParams, MarketoStore) {
                var deferred = $q.defer();

                MarketoStore.getScoringRequestList($stateParams.credentialId, false).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            PrimaryAttributeFields: ["$q", "MarketoStore", "MarketoService", function PrimaryAttributeFields($q, MarketoStore, MarketoService) {
                var deferred = $q.defer();

                MarketoStore.getPrimaryAttributeFields().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            MarketoFields: ["$q", "MarketoService", "MarketoCredentials", function MarketoFields($q, MarketoService, MarketoCredentials) {
                var deferred = $q.defer();

                var params = {
                    soap_endpoint: MarketoCredentials.soap_endpoint,
                    soap_user_id: MarketoCredentials.soap_user_id,
                    soap_encryption_key: MarketoCredentials.soap_encryption_key
                };

                MarketoService.GetMarketoMatchFields(params).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            ScoringFields: ["$q", "$stateParams", "MarketoService", function ScoringFields($q, $stateParams, MarketoService) {
                var deferred = $q.defer();

                MarketoService.GetScoringFields($stateParams.modelUuid).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            ExistingScoringRequest: ["$q", "$stateParams", "MarketoStore", "ScoringRequestSummaries", function ExistingScoringRequest($q, $stateParams, MarketoStore, ScoringRequestSummaries) {
                var deferred = $q.defer();

                var existingScoringRequest = ScoringRequestSummaries ? ScoringRequestSummaries.find(function (x) {
                    return x.modelUuid === $stateParams.modelUuid;
                }) : null;

                if (existingScoringRequest) {
                    MarketoStore.getScoringRequest(false, $stateParams.credentialId, existingScoringRequest.configId).then(function (result) {
                        deferred.resolve(result);
                    });
                } else {
                    deferred.resolve(null);
                }

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: ["$scope", "$stateParams", "$state", "ResourceUtility", function controller($scope, $stateParams, $state, ResourceUtility) {
                    $scope.state = $state.current.name;
                    $scope.id = $stateParams.credentialId;
                    $scope.ResourceUtility = ResourceUtility;
                    $scope.useMarketoLatticeIntegration = true;
                }],
                templateUrl: 'app/navigation/summary/MarketoTabs.html'
            },
            "main@": "marketoSetupModel"
        }
    }).state('home.marketosettings.webhook', {
        url: '/{credentialId}/webhook/{configId}',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles'
        },
        resolve: {
            MarketoCredentials: ["$q", "$stateParams", "MarketoStore", "MarketoService", function MarketoCredentials($q, $stateParams, MarketoStore, MarketoService) {
                var deferred = $q.defer();

                MarketoStore.getMarketoCredential($stateParams.credentialId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            ScoringRequest: ["$q", "$stateParams", "MarketoStore", "StateHistory", function ScoringRequest($q, $stateParams, MarketoStore, StateHistory) {
                var deferred = $q.defer(),
                    useCache = false;

                if (StateHistory.isFrom('home.marketosettings.setup')) {
                    useCache = true;
                }

                MarketoStore.getScoringRequest(useCache, $stateParams.credentialId, $stateParams.configId).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            Model: ["$q", "$stateParams", "ScoringRequest", "ModelStore", function Model($q, $stateParams, ScoringRequest, ModelStore) {
                var deferred = $q.defer();

                ModelStore.getModel(ScoringRequest.modelUuid).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                controller: ["$scope", "$stateParams", "$state", "ResourceUtility", function controller($scope, $stateParams, $state, ResourceUtility) {
                    $scope.state = $state.current.name;
                    $scope.id = $stateParams.credentialId;
                    $scope.ResourceUtility = ResourceUtility;
                    $scope.useMarketoLatticeIntegration = true;
                }],
                templateUrl: 'app/navigation/summary/MarketoTabs.html'
            },
            "main@": "marketoWebhookSummary"
        }
    }).state('home.marketosettings.activemodels', {
        url: '/activemodels',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_MARKETO_MODELS';
            }
        },
        views: {
            "summary@": {
                controller: ["$scope", "$stateParams", "$state", function controller($scope, $stateParams, $state) {
                    $scope.state = $state.current.name;
                }],
                templateUrl: 'app/navigation/summary/SureShotTabs.html'
            },
            "main@": {
                controller: ["urls", function controller(urls) {
                    $('#sureshot_iframe_container').html('<iframe src="' + urls.scoring_settings_url + '"></iframe>');

                    changeIframeHeight();

                    function changeIframeHeight() {
                        var if_height;

                        window.addEventListener("message", function (event) {
                            // verify the origin is sureshot, if not just return
                            var origin = event.origin || event.originalEvent.origin;
                            //if (origin != "{sureshot_iframe_origin}")
                            //return false;

                            if (!event.data.contentHeight) {
                                return;
                            }

                            var h = event.data.contentHeight;

                            if (!isNaN(h) && h > 0 && h !== if_height) {
                                if_height = h;

                                $("#sureshot_iframe_container iframe").height(h);
                            }
                            return true;
                        }, false);
                    }
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    }).state('home.marketosettings.credentials', {
        url: '/credentials',
        params: {
            pageIcon: 'ico-marketo',
            pageTitle: 'Marketo Profiles'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_MARKETO_APIKEY';
            }
        },
        views: {
            "summary@": {
                controller: ["$scope", "$state", function controller($scope, $state) {
                    $scope.state = 'home.marketosettings.edit';
                }],
                templateUrl: 'app/navigation/summary/SureShotTabs.html'
            },
            "main@": {
                controller: ["urls", function controller(urls) {
                    $('#sureshot_iframe_container').html('<iframe src="' + urls.creds_url + '"></iframe>');

                    changeIframeHeight();

                    function changeIframeHeight() {
                        var if_height;

                        window.addEventListener("message", function (event) {
                            // verify the origin is sureshot, if not just return
                            var origin = event.origin || event.originalEvent.origin;
                            //if (origin != "{sureshot_iframe_origin}")
                            //return false;

                            if (!event.data.contentHeight) {
                                return;
                            }

                            var h = event.data.contentHeight;

                            if (!isNaN(h) && h > 0 && h !== if_height) {
                                if_height = h;

                                $("#sureshot_iframe_container iframe").height(h);
                            }
                            return true;
                        }, false);
                    }
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    }).state('home.eloquasettings', {
        url: '/eloquasettings',
        params: {
            pageIcon: 'ico-eloqua',
            pageTitle: 'Eloqua Settings'
        },
        redirectto: 'eloquasettings.apikey',
        resolve: {
            urls: ["$q", "$http", function urls($q, $http) {
                var deferred = $q.defer();

                $http({
                    'method': "GET",
                    'url': "/pls/sureshot/urls",
                    'params': {
                        'crmType': "eloqua"
                    }
                }).then(function onSuccess(response) {
                    if (response.data.Success) {
                        deferred.resolve(response.data.Result);
                    } else {
                        deferred.reject(response.data.Errors);
                    }
                }, function onError(response) {
                    deferred.reject(response.data.Errors);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                template: ''
            },
            "main@": {
                template: ''
            }
        }
    }).state('home.eloquasettings.apikey', {
        url: '/apikey',
        params: {
            pageIcon: 'ico-eloqua',
            pageTitle: 'Eloqua Settings'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_ELOQUA_APIKEY';
            }
        },
        views: {
            "summary@": {
                /*
                controller: 'OneLineController',
                templateUrl: 'app/navigation/summary/OneLineView.html'
                -- ben::bookmark
                */
                templateUrl: 'app/navigation/summary/EloquaTabs.html'
            },
            "main@": {
                controller: ["urls", function controller(urls) {
                    if (urls && urls.creds_url) {
                        $('#sureshot_iframe_container').html('<iframe src="' + urls.creds_url + '"></iframe>');

                        changeIframeHeight();
                    }

                    function changeIframeHeight() {
                        var if_height;

                        window.addEventListener("message", function (event) {
                            // verify the origin is sureshot, if not just return
                            var origin = event.origin || event.originalEvent.origin;
                            //if (origin != "{sureshot_iframe_origin}")
                            //return false;

                            if (!event.data.contentHeight) {
                                return;
                            }

                            var h = event.data.contentHeight;

                            if (!isNaN(h) && h > 0 && h !== if_height) {
                                if_height = h;

                                $("#sureshot_iframe_container iframe").height(h);
                            }
                            return true;
                        }, false);
                    }
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    }).state('home.eloquasettings.models', {
        url: '/models',
        params: {
            pageIcon: 'ico-eloqua',
            pageTitle: 'Eloqua Settings'
        },
        resolve: {
            ResourceString: function ResourceString() {
                return 'SUMMARY_ELOQUA_MODELS';
            }
        },
        views: {
            "summary@": {
                /*
                controller: 'OneLineController',
                templateUrl: 'app/navigation/summary/OneLineView.html'
                -- ben::bookmark
                */
                templateUrl: 'app/navigation/summary/EloquaTabs.html'
            },
            "main@": {
                controller: ["urls", function controller(urls) {
                    if (urls && urls.scoring_settings_url) {
                        $('#sureshot_iframe_container').html('<iframe src="' + urls.scoring_settings_url + '"></iframe>');

                        changeIframeHeight();
                    }

                    function changeIframeHeight() {
                        var if_height;

                        window.addEventListener("message", function (event) {
                            // verify the origin is sureshot, if not just return
                            var origin = event.origin || event.originalEvent.origin;
                            //if (origin != "{sureshot_iframe_origin}")
                            //return false;

                            if (!event.data.contentHeight) {
                                return;
                            }

                            var h = event.data.contentHeight;

                            if (!isNaN(h) && h > 0 && h !== if_height) {
                                if_height = h;

                                $("#sureshot_iframe_container iframe").height(h);
                            }
                            return true;
                        }, false);
                    }
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    }).state('home.eloquasettings.enrichment', {
        url: '/enrichment',
        params: {
            pageIcon: 'ico-eloqua',
            pageTitle: 'Eloqua Settings'
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/EloquaTabs.html'
            },
            "main@": {
                controller: ["urls", function controller(urls) {
                    if (urls && urls.enrichment_settings_url) {
                        $('#sureshot_iframe_container').html('<iframe src="' + urls.enrichment_settings_url + '"></iframe>');
                        changeIframeHeight();
                    }

                    function changeIframeHeight() {
                        var if_height;

                        window.addEventListener("message", function (event) {
                            // verify the origin is sureshot, if not just return
                            var origin = event.origin || event.originalEvent.origin;
                            //if (origin != "{sureshot_iframe_origin}")
                            //return false;

                            if (!event.data.contentHeight) {
                                return;
                            }

                            var h = event.data.contentHeight;

                            if (!isNaN(h) && h > 0 && h !== if_height) {
                                if_height = h;

                                $("#sureshot_iframe_container iframe").height(h);
                            }
                            return true;
                        }, false);
                    }
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    }).state('home.sfdcsettings', {
        url: '/salesforce-settings',
        params: {
            pageIcon: 'ico-salesforce',
            pageTitle: ''
        },
        resolve: {
            featureflags: ["$q", "FeatureFlagService", function featureflags($q, FeatureFlagService) {
                var deferred = $q.defer();

                FeatureFlagService.GetAllFlags().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            externaltypes: ["$q", "SfdcStore", function externaltypes($q, SfdcStore) {
                var deferred = $q.defer();

                SfdcStore.getExternalTypes().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            accountids: ["$q", "SfdcStore", "externaltypes", function accountids($q, SfdcStore, externaltypes) {
                var deferred = $q.defer();

                SfdcStore.getAccountIds(externaltypes).then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            orgs: ["$q", "SfdcService", "SfdcStore", "accountids", "externaltypes", function orgs($q, SfdcService, SfdcStore, accountids, externaltypes) {
                var deferred = $q.defer(),
                    orgs = [];

                SfdcStore.getOrgs().then(function (result) {
                    externaltypes.forEach(function (type) {
                        if (result[type] != undefined) {
                            orgs = orgs.concat(result[type]);
                        }
                    });
                    deferred.resolve(orgs);
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": 'sales'
        }
    }).state('home.apiconsole', {
        url: '/apiconsole',
        params: {
            pageIcon: 'ico-api-console',
            pageTitle: 'API Console'
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                templateUrl: 'app/apiConsole/views/APIConsoleView.html'
            }
        }
    }).state('home.signout', {
        url: '/signout',
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: ["LoginService", function controller(LoginService) {
                    ShowSpinner('Logging Out...');
                    LoginService.Logout();
                }]
            }
        }
    })
    // .state('home.updatepassword', {
    //     url: '/updatepassword',
    //     params: {
    //         pageIcon: 'ico-user',
    //         pageTitle: 'User Settings'
    //     },
    //     views: {
    //         "navigation@home": {
    //             templateUrl: 'app/navigation/sidebar/root/root.component.html'
    //         },
    //         "summary@": {
    //             templateUrl: 'app/navigation/summary/BlankLine.html'
    //         },
    //         "main@": {
    //             templateUrl: 'app/login/views/UpdatePasswordView.html'
    //         }
    //     }
    // })
    // .state('passwordsuccess', {
    //     url: '/passwordsuccess',
    //     views: {
    //         "summary@": {
    //             templateUrl: 'app/navigation/summary/BlankLine.html'
    //         },
    //         "main@": {
    //             templateUrl: 'app/login/views/UpdatePasswordSuccessView.html'
    //         }
    //     }
    // })
    // .state('home.deploymentwizard', {
    //     url: '/deploymentwizard',
    //     views: {
    //         "navigation@": {
    //             templateUrl: 'app/navigation/sidebar/root/root.component.html'
    //         },
    //         "summary@": {
    //             templateUrl: 'app/navigation/summary/BlankLine.html'
    //         },
    //         "main@": {
    //             controller: 'DeploymentWizardController',
    //             templateUrl: 'app/setup/views/DeploymentWizardView.html'
    //         }
    //     }
    // })
    // .state('home.activate', {
    //     url: '/activate',
    //     views: {
    //         "navigation@home": {
    //             templateUrl: 'app/navigation/sidebar/root/root.component.html'
    //         },
    //         "summary@": {
    //             resolve: {
    //                 ResourceString: function() {
    //                     return 'ACTIVATE_MODEL_TITLE';
    //                 }
    //             },
    //             controller: 'OneLineController',
    //             templateUrl: 'app/navigation/summary/OneLineView.html'
    //         },
    //         "main@": {
    //             templateUrl: 'app/models/views/ActivateModelView.html'
    //         }
    //     }
    // })
    .state('home.users', {
        url: '/users',
        params: {
            pageIcon: 'ico-user',
            pageTitle: 'Manage Users'
        },
        resolve: {
            UserList: ["$q", "UserManagementService", function UserList($q, UserManagementService) {
                var deferred = $q.defer();

                UserManagementService.GetUsers().then(function (result) {
                    if (result.Success) {
                        deferred.resolve(result.ResultObj);
                    } else {
                        deferred.reject(result);
                    }
                });

                return deferred.promise;
            }]
        },
        views: {
            "summary@": {
                templateUrl: 'app/navigation/summary/BlankLine.html'
            },
            "main@": {
                controller: 'UserManagementWidgetController',
                templateUrl: 'app/AppCommon/widgets/userManagementWidget/UserManagementWidgetTemplate.html'
            }
        }
    })
    // .state('home.setup', {
    //     url: '/setup',
    //     views: {
    //         "navigation@home": {
    //             templateUrl: 'app/navigation/sidebar/root/root.component.html'
    //         },
    //         "summary@": {
    //             resolve: {
    //                 ResourceString: function() {
    //                     return 'SYSTEM_SETUP_TITLE';
    //                 }
    //             },
    //             controller: 'OneLineController',
    //             templateUrl: 'app/navigation/summary/OneLineView.html'
    //         },
    //         "main@": {
    //             templateUrl: 'app/config/views/ManageCredentialsView.html'
    //         }
    //     }
    // })
    // .state('home.fields', {
    //     url: '/fields',
    //     views: {
    //         "navigation@home": {
    //             templateUrl: 'app/navigation/sidebar/root/root.component.html'
    //         },
    //         "summary@": {
    //             resolve: {
    //                 ResourceString: function() {
    //                     return 'SETUP_NAV_NODE_MANAGE_FIELDS';
    //                 }
    //             },
    //             controller: 'OneLineController',
    //             templateUrl: 'app/navigation/summary/OneLineView.html'
    //         },
    //         "main@": {
    //             controller: 'SetupController',
    //             templateUrl: 'app/setup/views/SetupView.html'
    //         }
    //     }
    // })
    .state('home.insights', {
        url: '/insights',
        params: {
            pageIcon: 'ico-enrichment',
            pageTitle: 'BIS Insights iFrame Testing',
            iframe: true
        },
        views: {
            "summary@": {
                template: '<br><br>'
            },
            "main@": {
                controller: 'LookupController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/lookup/lookup.component.html'
            }
        }
    }).state('home.insights.iframe', {
        url: '/iframe',
        params: {
            pageIcon: 'ico-enrichment',
            pageTitle: 'BIS Insights Test'
        },
        views: {
            "summary@": {
                template: '<br><div class="lookup-summary ten columns offset-one"><div class="lookup-back" ui-sref="home.insights"><ico class="fa fa-arrow-left"></ico>NEW LOOKUP</div></div></div>'
            },
            "main@": {
                controller: ["$scope", "LookupStore", "$stateParams", function controller($scope, LookupStore, $stateParams) {
                    var host = "/insights/";

                    $('#sureshot_iframe_container').html('<iframe id="insights_iframe" src="' + host + '" style="border: 1px inset"></iframe>');

                    var childWindow = document.getElementById('insights_iframe').contentWindow;

                    window.addEventListener('message', handleMessage, false);

                    function handleMessage(event) {
                        console.log('receiving from Insights:', event.data);
                        if (event.data == 'init') {
                            var json = {};

                            json.Authentication = LookupStore.get('Authentication');
                            json.request = LookupStore.get('request');
                            //json.request.record = $stateParams.record;

                            console.log('posting to Insights:', json);
                            childWindow.postMessage(json, '*');
                        }
                    }

                    $scope.$on('$destroy', function () {
                        window.removeEventListener('message', handleMessage);
                    });
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    }).state('home.dante', {
        url: '/dante',
        params: {
            pageIcon: 'ico-enrichment',
            pageTitle: 'BIS Dante iFrame Testing',
            iframe: true
        },
        views: {
            "summary@": {
                template: '<br><br>'
            },
            "main@": {
                controller: 'LookupController',
                controllerAs: 'vm',
                templateUrl: '/components/datacloud/lookup/lookup.component.html'
            }
        }
    }).state('home.dante.iframe', {
        url: '/iframe',
        params: {
            pageIcon: 'ico-playbook',
            pageTitle: 'Dante Migration Testbed'
        },
        views: {
            "summary@": {
                template: '<br>'
            },
            "main@": {
                controller: ["$scope", "LookupStore", "$stateParams", function controller($scope, LookupStore, $stateParams) {
                    // var sin  = '?sin=33b905c6-faa8-42f8-af3a-4e2eaf64ca61';
                    // var surl = '&serverurl=https://internal-public-lpi-b-507116299.us-east-1.elb.amazonaws.com';
                    // var rec  = '&Recommendation=df0b96b0-4f22-4854-9b95-e8e98e379fc6';
                    // var ulnk = '&userlink=ACCT0002';
                    // var hsp  = '&HasSalesprism=false&CustomSettings=';
                    // var settings = {
                    //     ShowScore: false,
                    //     ShowLift: false,
                    //     ShowPurchaseHistory: false,
                    //     NoPlaysMessage: 'No Plays Found.',
                    //     NoDataMessage: 'No Data Found.',
                    //     hideNavigation: true,
                    //     HideTabs: true,
                    //     HideHeader: true,
                    //     DefaultTab: '',
                    //     SupportEmail: 'smeng@lattice-engines.com'
                    // };

                    // var host = '/dante' + sin + surl + rec + ulnk + hsp + 
                    //                     JSON.stringify(settings);

                    var host = '/dante?sin=806262c0-3053-458e-8fb8-0128416e7c82&serverurl=https://testapi.lattice-engines.com&Directory=salesforce&userlink=00561000002sfm8AAA&Recommendation=76b4a228-ba12-4c47-801d-dc8aeb3365fd&HasSalesprism=false&CustomSettings=%7B"SupportEmail"%3A"pliu%40lattice-engines.com"%2C"ShowScore"%3A%20false%2C"ShowLift"%3A%20false%2C"ShowPurchaseHistory"%3A%20true%2C"NoPlaysMessage"%3A"No%20Plays%20Found."%2C"NoDataMessage"%3A"No%20Data%20Found."%2C"hideNavigation"%3A%20false%2C"HideTabs"%3A%20false%2C"HideHeader"%3A%20true%2C"DefaultTab"%3A"TalkingPoints"%7D&PurchaseHistoryAccount=0016100001RU35QAAT';
                    //var host = '/dante?sin=806262c0-3053-458e-8fb8-0128416e7c82&serverurl=https://testapi.lattice-engines.com&Directory=salesforce&userlink=00561000002sfm8AAA&Recommendation=cf5132a2-6212-4f81-ba43-1783be7f695c&HasSalesprism=false&CustomSettings=%7B%22SupportEmail%22%3A%22pliu%40lattice-engines.com%22%2C%22ShowScore%22%3A%20false%2C%22ShowLift%22%3A%20false%2C%22ShowPurchaseHistory%22%3A%20true%2C%22NoPlaysMessage%22%3A%22No%20Plays%20Found.%22%2C%22NoDataMessage%22%3A%22No%20Data%20Found.%22%2C%22hideNavigation%22%3A%20false%2C%22HideTabs%22%3A%20false%2C%22HideHeader%22%3A%20false%2C%22DefaultTab%22%3A%22TalkingPoints%22%7D&PurchaseHistoryAccount=0016100001RU35QAAT';
                    var host = '/dante?sin=2b7200f2-ff35-4e46-9c27-01b2b25443b5&serverurl=https://api.lattice-engines.com&Directory=salesforce&userlink=00541000003kNLHAA2&Recommendation=b91b9612-06ef-48f7-b280-1b433e58f0d5&HasSalesprism=false&CustomSettings=%7B%22SupportEmail%22%3A%22pliu%40lattice-engines.com%22%2C%22ShowScore%22%3A%20false%2C%22ShowLift%22%3A%20false%2C%22ShowPurchaseHistory%22%3A%20true%2C%22NoPlaysMessage%22%3A%22No%20Plays%20Found.%22%2C%22NoDataMessage%22%3A%22No%20Data%20Found.%22%2C%22hideNavigation%22%3A%20true%2C%22HideTabs%22%3A%20true%2C%22HideHeader%22%3A%20true%2C%22DefaultTab%22%3A%22TalkingPoints%22%7D&PurchaseHistoryAccount=0014100001dHn4VAAS';

                    $('#sureshot_iframe_container').html("<iframe id='dante_iframe' src='" + host + "'></iframe>");

                    var childWindow = document.getElementById('dante_iframe').contentWindow;

                    window.addEventListener('message', handleMessage, false);

                    function handleMessage(event) {
                        var split = event.data.split('=');
                        console.log('receiving from Dante:', split);
                        // setTimeout(function() {
                        //     console.log('posting to Dante:', 'CrmTabSelectedEvent=TalkingPoints');
                        //     childWindow.postMessage('CrmTabSelectedEvent=TalkingPoints','*');
                        // },5000);
                        if (split[0] == 'IFrameResizeEvent') {
                            document.getElementById('dante_iframe').style.height = split[1] + 'px';
                        }
                    }

                    $scope.$on('$destroy', function () {
                        window.removeEventListener('message', handleMessage);
                    });
                }],
                templateUrl: 'app/marketo/views/SureshotTemplateView.html'
            }
        }
    });
}]);

window.HideSpinner = function (selector) {
    angular.element('.inactive-disabled').removeClass('inactive-disabled');
    angular.element(selector || "section.loading-spinner").remove();
};

window.ShowSpinner = function (LoadingString, selector) {
    // state change spinner
    selector = selector || '#mainContentView';
    LoadingString = LoadingString || '';

    var element = $(selector);

    // jump to top of page during state change
    angular.element(window).scrollTop(0, 0);

    element.children().addClass('inactive-disabled');

    element.css({
        position: 'relative'
    }).prepend($('<section class="loading-spinner lattice">' + '<h2 class="text-center">' + LoadingString + '</h2>' + '<div class="meter"><span class="indeterminate"></span></div>' + '</section>'));

    setTimeout(function () {
        $('section.loading-spinner').addClass('show-spinner');
    }, 1);
};

/***/ }),

/***/ "./app/segments/controllers/SegmentationListController.js":
/*!****************************************************************!*\
  !*** ./app/segments/controllers/SegmentationListController.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.segments.segments', ['common.modal', 'lp.tile.edit']).controller('SegmentationListController', ["$q", "$scope", "$rootScope", "$element", "$state", "$stateParams", "SegmentsList", "Enrichments", "Cube", "Modal", "Banner", "SegmentStore", "SegmentService", "RatingsEngineStore", "QueryTreeService", "DataCloudStore", "LookupResponse", "LookupStore", "PercentStore", "AttrConfigStore", function ($q, $scope, $rootScope, $element, $state, $stateParams, SegmentsList, Enrichments, Cube, Modal, Banner, SegmentStore, SegmentService, RatingsEngineStore, QueryTreeService, DataCloudStore, LookupResponse, LookupStore, PercentStore, AttrConfigStore) {
    var vm = this;

    angular.extend(vm, {
        modelId: $stateParams.modelId,
        tenantName: $stateParams.tenantName,
        segments: SegmentsList || [],
        enrichments: [],
        enrichmentsMap: DataCloudStore.getEnrichmentsMap(),
        segmentAttributesMap: {},
        cube: Cube,
        //count: QueryStore.getCounts(),
        filteredItems: [],
        totalLength: SegmentsList.length,
        tileStates: {},
        query: '',
        currentPage: 1,
        lookupMode: LookupResponse && LookupResponse.attributes !== null,
        lookupFiltered: LookupResponse.attributes,
        LookupResponse: LookupStore.response,
        header: {
            sort: {
                label: 'Sort By',
                icon: 'numeric',
                order: '-',
                property: 'updated',
                items: [{ label: 'Creation Date', icon: 'numeric', property: 'created' }, { label: 'Modified Date', icon: 'numeric', property: 'updated' }, { label: 'Author Name', icon: 'alpha', property: 'created_by' }, { label: 'Segment Name', icon: 'alpha', property: 'display_name' }]
            }
        },
        editConfig: {
            data: { id: 'name' },
            fields: {
                name: { fieldname: 'display_name', visible: true, maxLength: 50 },
                description: { fieldname: 'description', visible: true, maxLength: 1000 }
            }
        },
        invalidSegments: new Set()
    });

    vm.init = function () {
        vm.processEnrichments(Enrichments);

        vm.segmentIds = [];
        SegmentsList.forEach(function (segment) {
            vm.tileStates[segment.name] = {
                showCustomMenu: false,
                editSegment: false,
                saveEnabled: false
            };
            vm.segmentIds.push(segment.name);
            vm.segmentAttributesMap[segment.name] = vm.displayAttributes(segment, 5);
        });
        // RatingsEngineStore.getSegmentsCounts(vm.segmentIds).then(function(response){
        //     console.log(response);
        // });

        if ($stateParams.edit && vm.isValid($stateParams.edit)) {
            var tileState = vm.tileStates[$stateParams.edit];
            if (tileState) {
                tileState.editSegment = !tileState.editSegment;
                tileState.saveEnabled = true;
                // $stateParams.edit = null; TODO: Why are we updating this?
            }
        }
    };

    /**
     * 
     * @param {*} obj segment object
     * @param {*} newData object that containes the update values
     */
    vm.saveNameDescription = function (obj, newData) {
        var tileState = vm.tileStates[obj.name];
        if (!newData) {
            tileState.editSegment = !tileState.editSegment;
            vm.saveInProgress = false;
            vm.showAddSegmentError = false;
        } else {
            vm.saveInProgress = true;
            obj.display_name = newData.display_name;
            obj.description = newData.description;
            createOrUpdateSegment(obj).then(function (result) {
                if (result.success === true) {
                    vm.saveInProgress = false;
                }
            });
        }
        tileState.showCustomMenu = false;
    };

    vm.onInputFocus = function ($event) {
        $event.target.select();
    };

    vm.customMenuClick = function ($event, segment) {
        if ($event != null) {
            $event.stopPropagation();
        }
        var tileState = vm.tileStates[segment.name];
        tileState.showCustomMenu = !tileState.showCustomMenu;

        if (tileState.showCustomMenu) {
            $(document).bind('click', function (event) {
                var isClickedElementChildOfPopup = $element.find(event.target).length > 0;

                if (isClickedElementChildOfPopup) return;

                $scope.$apply(function () {
                    tileState.showCustomMenu = false;
                    $(document).unbind(event);
                });
            });
        }
    };

    vm.tileClick = function ($event, segment) {
        $event.preventDefault();
        if ($state.current.name == 'home.segments') {
            // $state.go('home.segment.accounts', {segment: segment.name}, { reload: true } );
            if (segment.is_master_segment) {
                $state.go('home.segment.explorer.attributes', { segment: "Create" }, { reload: true });
            } else if (!vm.invalidSegments.has(segment.name)) {
                $state.go('home.segment.explorer.builder', { segment: segment.name }, { reload: true });
            }
        } else {
            $state.go('home.model.analysis', { segment: segment.name }, { reload: true });
        };
    };

    vm.processEnrichments = function (enrichments) {
        if (vm.lookupFiltered !== null) {
            for (var i = 0, _enrichments = []; i < enrichments.length; i++) {
                if (vm.lookupFiltered && vm.lookupFiltered[enrichments[i].ColumnId]) {
                    _enrichments.push(enrichments[i]);
                }
            }
        } else {
            var _enrichments = enrichments;
        }

        for (var i = 0, enrichment; i < _enrichments.length; i++) {
            enrichment = _enrichments[i];

            if (!enrichment) {
                continue;
            }

            if (enrichment.IsInternal !== true) {
                enrichment.IsInternal = false;
            }

            vm.enrichmentsMap[enrichment.ColumnId] = i;
            vm.enrichments.push(enrichment);
        }

        DataCloudStore.setEnrichments(vm.enrichments);
        DataCloudStore.setEnrichmentsMap(vm.enrichmentsMap);
    };

    vm.editSegmentClick = function ($event, segment) {
        $event.stopPropagation();
        var tileState = vm.tileStates[segment.name];
        tileState.showCustomMenu = !tileState.showCustomMenu;
        tileState.editSegment = !tileState.editSegment;
    };

    vm.nameChanged = function (segment) {
        var tileState = vm.tileStates[segment.name];
        if (!segment.display_name || segment.display_name.trim().length == 0) {
            tileState.saveEnabled = false;
        } else {
            tileState.saveEnabled = !!(segment.display_name.length > 0);
        }
    };

    vm.addSegment = function () {
        if (vm.modelId) {
            $state.go('home.model.analysis');
        } else {
            $state.go('home.segment.explorer.attributes', { segment: 'Create' });
        }
    };

    vm.duplicateSegmentClick = function ($event, segment) {
        $event.preventDefault();
        $event.stopPropagation();

        vm.saveInProgress = true;
        segment.name = 'segment' + new Date().getTime();

        createOrUpdateSegment(segment);
    };

    vm.callbackModalWindow = function (args) {

        var modal = Modal.get('deleteSegmentWarning');

        if (args.action === 'cancel') {

            console.log("cancel");
            Modal.modalRemoveFromDOM(modal, args);
        } else if (args.action === 'ok') {

            var segmentName = vm.segment.name;
            if (modal) {
                modal.waiting(true);
            }

            SegmentService.DeleteSegment(segmentName).then(function (result) {
                if (result != null && result.success === true) {

                    Modal.modalRemoveFromDOM(modal, args);

                    $state.go('home.segments', {}, { reload: true });
                } else {
                    Banner.error({ message: result.errorMessage });
                }
            });
        }
    };

    vm.showDeleteSegmentModalClick = function ($event, segment) {
        $event.preventDefault();
        $event.stopPropagation();

        vm.segment = segment;

        Modal.warning({
            name: 'deleteSegmentWarning',
            title: "Delete Segment",
            message: "Are you sure you want to delete this segment?",
            confirmtext: "Delete Segment"
        }, vm.callbackModalWindow);
    };

    vm.isValid = function (segmentDisplayName) {
        if (!segmentDisplayName || segmentDisplayName.trim().length == 0) {
            return false;
        } else {
            return true;
        }
    };

    vm.displayAttributes = function (segment, n) {
        var attrs = [];
        var restrictions = SegmentStore.getTopNAttributes(segment, n);

        restrictions = SegmentStore.sortAttributesByCnt(restrictions);

        restrictions.forEach(function (restriction) {
            var bucketEntity = restriction.bucketRestriction.attr.split('.')[0],
                bucketColumnId = restriction.bucketRestriction.attr.split('.')[1],
                enrichment = vm.enrichments[vm.enrichmentsMap[bucketColumnId]];

            if (enrichment && vm.cube[bucketEntity] != undefined) {
                var cube = vm.cube[bucketEntity].Stats[bucketColumnId];

                if (cube.Bkts) {
                    var operatorType = cube.Bkts.Type;

                    switch (operatorType) {
                        case 'Enum':
                            var vals = QueryTreeService.getOperationValue(restriction.bucketRestriction, operatorType);

                            if (vals.length > 1) {
                                attrs.push({ label: enrichment.DisplayName + ': ', value: vals.length + ' Values Selected' });
                            } else {
                                attrs.push({ label: enrichment.DisplayName + ': ', value: vals[0] });
                            }

                            break;

                        case 'Numerical':
                            if (QueryTreeService.two_inputs.indexOf(restriction.bucketRestriction.bkt.Cmp) < 0) {
                                var label = QueryTreeService.numerical_labels[restriction.bucketRestriction.bkt.Cmp];
                                var operation = QueryTreeService.getOperationValue(restriction.bucketRestriction, operatorType, 0);
                                // console.log('LABEL ',label, ' OPERATION ', operation);
                                attrs.push({
                                    label: enrichment.DisplayName + ': ',
                                    value: QueryTreeService.numerical_labels[restriction.bucketRestriction.bkt.Cmp] + ('' + (operation ? operation : '')) });
                            } else {
                                attrs.push({
                                    label: enrichment.DisplayName + ': ',
                                    value: QueryTreeService.getOperationValue(restriction.bucketRestriction, operatorType, 0) + '-' + QueryTreeService.getOperationValue(restriction.bucketRestriction, operatorType, 1) });
                            }

                            break;

                        case 'Boolean':
                            attrs.push({ label: enrichment.DisplayName + ': ', value: QueryTreeService.getOperationValue(restriction.bucketRestriction, operatorType) });

                            break;

                        case 'TimeSeries':
                            var value = QueryTreeService.getOperationValue(restriction.bucketRestriction, 'Boolean') ? 'True' : 'False';
                            attrs.push({ label: enrichment.DisplayName + ' (' + enrichment.Subcategory + '): ', value: value });

                            break;
                        case 'PercentChange':
                            var value = PercentStore.getDirectionRedable(restriction.bucketRestriction) + ' ' + PercentStore.getCmpRedable(restriction.bucketRestriction).toLowerCase() + ' ' + PercentStore.getValuesFormatted(restriction.bucketRestriction);
                            attrs.push({ label: enrichment.DisplayName + ': ', value: value });

                            break;
                    }
                } else {
                    // for pure string attributes
                    var value = QueryTreeService.getOperationLabel('String', restriction.bucketRestriction);
                    if (QueryTreeService.hasInputs('String', restriction.bucketRestriction)) {
                        value += " '" + QueryTreeService.getOperationValue(restriction.bucketRestriction, 'String') + "'";
                    }
                    attrs.push({ label: enrichment.DisplayName + ': ', value: value });
                }
            } else {
                vm.invalidSegments.add(segment.name);
            }
        });

        return attrs;
    };

    function createOrUpdateSegment(segment) {
        var deferred = $q.defer();
        SegmentService.CreateOrUpdateSegment(segment).then(function (result) {
            var errorMsg = result.errorMsg;

            if (result.success) {
                var tileState = vm.tileStates[segment.name];

                if (tileState) {
                    tileState.editSegment = !tileState.editSegment;
                    $state.go('home.segments', { edit: null }, { reload: false });
                    deferred.resolve({ success: true });
                } else {
                    $state.go('home.segments', {}, { reload: true });
                }

                vm.saveInProgress = false;
                vm.showAddSegmentError = false;
            } else {
                vm.saveInProgress = false;
                vm.addSegmentErrorMessage = errorMsg;
                vm.showAddSegmentError = true;
            }
        });
        return deferred.promise;
    }

    vm.init();
}]);

/***/ }),

/***/ "./app/segments/modals/AddSegmentModal.js":
/*!************************************************!*\
  !*** ./app/segments/modals/AddSegmentModal.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.segments.modals.AddSegmentModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.models.services.ModelService']).service('AddSegmentService', ["StringUtility", function (StringUtility) {

    this.GetLowestPriorityAvailable = function (segments) {
        if (segments == null || segments.length === 0) {
            return 1;
        }
        var lowestPriority = null;
        for (var i = 0; i < segments.length; i++) {
            if (lowestPriority == null) {
                lowestPriority = segments[i].Priority + 1;
            } else if (segments[i].Priority <= lowestPriority) {
                lowestPriority = segments[i].Priority + 1;
            }
        }
        return lowestPriority;
    };

    this.ValidateSegmentName = function (name, segments) {
        if (StringUtility.IsEmptyString(name)) {
            return false;
        }

        if (segments == null || segments.length === 0) {
            return true;
        }

        for (var i = 0; i < segments.length; i++) {
            var segmentName = segments[i].Name.trim();
            if (segmentName.toLowerCase() == name.toLowerCase()) {
                return false;
            }
        }

        return true;
    };
}]).service('AddSegmentModal', ["$compile", "$templateCache", "$rootScope", "$http", function ($compile, $templateCache, $rootScope, $http) {
    this.show = function (segments, models, successCallback) {
        $http.get('app/segments/modals/AddSegmentView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.segments = segments;
            scope.models = models;
            scope.successCallback = successCallback;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('AddSegmentController', ["$scope", "$rootScope", "ResourceUtility", "ModelService", "AddSegmentService", function ($scope, $rootScope, ResourceUtility, ModelService, AddSegmentService) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.saveInProgress = false;
    $scope.showAddSegmentError = false;
    $scope.addSegmentErrorMessage = "";

    var segments = $scope.segments;
    $scope.filteredModels = $scope.models;

    // Add the empty model so they don't have to choose one
    var hasEmptyModel = false;
    for (var i = 0; i < $scope.models.length; i++) {
        if ($scope.models[i].Id == "FAKE_MODEL") {
            hasEmptyModel = true;
            break;
        }
    }
    if (!hasEmptyModel) {
        var emptyModel = {
            Id: "FAKE_MODEL",
            DisplayName: "Select"
        };
        $scope.models.unshift(emptyModel);
    }

    $scope.newSegment = {
        Name: null,
        Priority: AddSegmentService.GetLowestPriorityAvailable(segments),
        ModelId: null,
        ModelName: null
    };

    $scope.addSegmentClick = function () {
        $scope.addSegmentErrorMessage = "";
        $scope.showAddSegmentError = false;
        var isValid = AddSegmentService.ValidateSegmentName($scope.newSegment.Name, segments);
        if (isValid) {
            $scope.saveInProgress = true;

            var modelId = $(".js-model-select").val();
            var secondSegment = null;
            if (modelId != "FAKE_MODEL") {
                $scope.newSegment.ModelId = modelId;
                $scope.newSegment.ModelName = $(".js-model-select option:selected").text();

                for (var i = 0; i < segments.length; i++) {
                    if (segments[i].ModelId == modelId) {
                        secondSegment = $scope.segments[i];
                        break;
                    }
                }
            }

            if (secondSegment != null) {
                secondSegment.ModelId = "FAKE_MODEL";
                secondSegment.ModelName = "";
                ModelService.UpdateSegment(secondSegment).then(function (result) {
                    if (result != null && result.success === true) {
                        addSegment();
                    } else {
                        $scope.saveInProgress = false;
                        $scope.showAddSegmentError = true;
                        $scope.addSegmentErrorMessage = ResourceUtility.getString("ACTIVATE_MODEL_UPDATE_SEGMENT_ERROR", [secondSegment.Name]);
                    }
                });
            } else {
                addSegment();
            }
        } else {
            $scope.addSegmentErrorMessage = ResourceUtility.getString('ACTIVATE_MODEL_ADD_SEGMENT_NAME_ERROR');
            $scope.showAddSegmentError = true;
        }
    };

    function addSegment() {
        ModelService.AddSegment($scope.newSegment).then(function (result) {
            $scope.saveInProgress = false;
            if (result && result.success === true) {
                $("#modalContainer").modal('hide');
                if ($scope.successCallback) {
                    $scope.successCallback($scope.newSegment);
                }
            } else {
                $scope.addSegmentErrorMessage = result.resultErrors;
                $scope.showAddSegmentError = true;
            }
        });
    }

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/segments/modals/DeleteSegmentModal.js":
/*!***************************************************!*\
  !*** ./app/segments/modals/DeleteSegmentModal.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.segments.modals.DeleteSegmentModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.core.utilities.NavUtility']).service('DeleteSegmentModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", "SegmentService", function ($compile, $templateCache, $rootScope, $http, ResourceUtility, SegmentService) {
    var self = this;
    this.show = function (segment, inModel) {
        $http.get('app/segments/modals/DeleteSegmentConfirmView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.segmentName = segment.name;
            scope.inModel = inModel;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DeleteSegmentController', ["$scope", "$stateParams", "$rootScope", "$state", "ResourceUtility", "NavUtility", "SegmentService", function ($scope, $stateParams, $rootScope, $state, ResourceUtility, NavUtility, SegmentService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deleteSegmentClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        deleteSegment($scope.segmentName);
    };

    function deleteSegment(segmentName) {

        $stateParams.edit = null;
        $("#deleteSegmentError").hide();

        SegmentService.DeleteSegment(segmentName).then(function (result) {
            if (result != null && result.success === true) {
                $("#modalContainer").modal('hide');
                if ($scope.inModel) {
                    $state.go('home.model.segmentation', {}, { reload: true });
                } else {
                    $state.go('home.segments', {}, { reload: true });
                }
            } else {
                $scope.deleteSegmentErrorMessage = result.errorMessage;
                $("#modalContainer").modal('hide');
            }
        });
    }

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/segments/segments.index.js":
/*!****************************************!*\
  !*** ./app/segments/segments.index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/SegmentationListController */ "./app/segments/controllers/SegmentationListController.js");

__webpack_require__(/*! ./modals/AddSegmentModal */ "./app/segments/modals/AddSegmentModal.js");

__webpack_require__(/*! ./modals/DeleteSegmentModal */ "./app/segments/modals/DeleteSegmentModal.js");

__webpack_require__(/*! ./services/SegmentService */ "./app/segments/services/SegmentService.js");

/***/ }),

/***/ "./app/segments/services/SegmentService.js":
/*!*************************************************!*\
  !*** ./app/segments/services/SegmentService.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('lp.segments.segments').service('SegmentStore', ["$q", "$rootScope", "$state", "SegmentService", function ($q, $rootScope, $state, SegmentService) {
    var SegmentStore = this;

    this.segments = [];

    this.setSegments = function (segments) {
        this.segments = segments;
    };

    this.getSegments = function () {
        return this.segments;
    };

    this.modalEditSegment = function (config) {
        if (config.action === 'cancel') {
            $state.go('home.segments');
        }
        return true;
    };

    this.modalSetTileEditSegment = function (config) {
        $rootScope.$broadcast('tileEditSegment:' + config.action);
        return true; // modal will hide itself
    };

    this.flattenSegmentRestrictions = function (segment) {
        var restrictions = [];
        if (segment.account_restriction != null && segment.account_restriction.restriction !== null && segment.account_restriction.restriction.logicalRestriction && segment.contact_restriction != null && segment.contact_restriction.restriction !== null && segment.contact_restriction.restriction.logicalRestriction) {
            segment.account_restriction.restriction.logicalRestriction.restrictions.forEach(function (restriction) {
                SegmentStore.flattenRestriction(restriction, restrictions);
            });
            segment.contact_restriction.restriction.logicalRestriction.restrictions.forEach(function (restriction) {
                SegmentStore.flattenRestriction(restriction, restrictions);
            });
        }

        return restrictions;
    };

    this.flattenRestriction = function (restriction, array) {
        if (restriction.bucketRestriction) {
            array.push(restriction);
        } else if (restriction.logicalRestriction) {
            restriction.logicalRestriction.restrictions.forEach(function (restriction) {
                SegmentStore.flattenRestriction(restriction, array);
            });
        }
    };

    this.getTopNAttributes = function (segment, n) {
        var restrictions = SegmentStore.flattenSegmentRestrictions(segment);

        if (n > restrictions.length) {
            return restrictions;
        }
        var minIndex = 0,
            i;

        for (i = n; i < restrictions.length; i++) {
            minIndex = 0;
            for (var j = 0; j < n; j++) {
                if (restrictions[minIndex].bucketRestriction.bkt.Cnt > restrictions[j].bucketRestriction.bkt.Cnt) {
                    minIndex = j;
                    restrictions[minIndex] = restrictions[j];
                }
            }
            if (restrictions[minIndex].bucketRestriction.bkt.Cnt < restrictions[i].bucketRestriction.bkt.Cnt) {
                SegmentStore.swap(restrictions, minIndex, i);
            }
        }

        var result = restrictions.splice(0, n); // unsorted list of top n attributes by volume
        return result;
    };

    this.sortAttributesByCnt = function (restrictions) {
        var counts = restrictions.map(function (restriction, idx) {
            return { index: idx, count: restriction.bucketRestriction.bkt.Cnt };
        });
        counts.sort(function (a, b) {
            return b.count - a.count;
        });
        restrictions = counts.map(function (restriction) {
            return restrictions[restriction.index];
        });
        return restrictions;
    };

    this.swap = function (array, i, j) {
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    };

    this.getSegmentByName = function (segmentName) {
        var deferred = $q.defer(),
            found = false;

        for (var i = 0; i < this.segments.length; i++) {
            var segment = this.segments[i];

            if (segment.name === segmentName) {
                deferred.resolve(segment);
                found = true;

                break;
            }
        }

        if (!found) {
            SegmentService.GetSegmentByName(segmentName).then(function (result) {
                deferred.resolve(result ? result : null);
            });
        }

        return deferred.promise;
    };

    this.CreateOrUpdateSegment = function (segment, restriction) {
        var ts = new Date().getTime();

        if (!segment) {
            segment = {
                'name': 'segment' + ts,
                'display_name': 'segment' + ts,
                'account_restriction': restriction,
                'page_filter': {
                    'row_offset': 0,
                    'num_rows': 10
                }
            };
        } else {
            segment = {
                'name': segment.name,
                'display_name': segment.display_name,
                'account_restriction': restriction || segment.account_restriction,
                'page_filter': {
                    'row_offset': 0,
                    'num_rows': 10
                }
            };
        }

        // remove Advanced Query Builder-specific temp properties
        this.sanitizeSegment(segment);

        return SegmentService.CreateOrUpdateSegment(segment);
    };

    this.sanitizeSegment = function (segment) {
        var aRestriction = segment.account_restriction ? segment.account_restriction.restriction : {};

        var cRestriction = segment.contact_restriction ? segment.contact_restriction.restriction : {};

        this.sanitizeSegmentRestriction([aRestriction]);
        this.sanitizeSegmentRestriction([cRestriction]);

        return segment;
    };

    this.sanitizeRuleBuckets = function (rule, keepEmptyBuckets) {
        var map = rule.ratingRule.bucketToRuleMap,
            prune = [];

        if (!keepEmptyBuckets) {
            Object.keys(map).forEach(function (bucketName) {
                var account = map[bucketName].account_restriction.logicalRestriction.restrictions;
                var contact = map[bucketName].contact_restriction.logicalRestriction.restrictions;

                if (account.length + contact.length == 0) {
                    prune.push(bucketName);
                }
            });

            for (var i = prune.length - 1; i >= 0; i--) {
                delete map[prune[i]];
            }
        }

        Object.keys(map).forEach(function (bucketName) {
            var bucket = map[bucketName];

            if (bucket) {
                if (!keepEmptyBuckets) {
                    SegmentStore.removeEmptyBuckets([bucket.account_restriction]);
                    SegmentStore.removeEmptyBuckets([bucket.contact_restriction]);
                }

                SegmentStore.sanitizeSegmentRestriction([bucket.account_restriction]);
                SegmentStore.sanitizeSegmentRestriction([bucket.contact_restriction]);
            }
        });

        return rule;
    };

    this.sanitizeSegmentRestriction = function (tree) {
        tree.forEach(function (branch) {
            if (branch && _typeof(branch.labelGlyph) !== undefined) {
                delete branch.labelGlyph;
            }

            if (branch && _typeof(branch.collapsed) !== undefined) {
                delete branch.collapsed;
            }

            if (branch && branch.logicalRestriction) {
                SegmentStore.sanitizeSegmentRestriction(branch.logicalRestriction.restrictions);
            }
        });
        return tree;
    };

    this.removeEmptyBuckets = function (tree) {
        for (var branch, i = tree.length - 1; i >= 0; i--) {
            branch = tree[i];

            if (branch && branch.bucketRestriction && (!branch.bucketRestriction.bkt || !branch.bucketRestriction.bkt.Id)) {
                tree.splice(i, 1);
            }

            if (branch && branch.logicalRestriction) {
                SegmentStore.removeEmptyBuckets(branch.logicalRestriction.restrictions);
            }
        }
    };
    this.modalCallback = function (args) {
        if (args.action === "ok") {
            return true;
        } else if (args.action === "closedForced") {
            return false;
        }
    };
}]).service('SegmentService', ["$http", "$q", "$state", function ($http, $q, $state) {
    this.GetSegments = function () {
        var deferred = $q.defer(),
            result,
            url = '/pls/datacollection/segments';

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.GetSegmentByName = function (name) {
        var deferred = $q.defer(),
            result,
            url = '/pls/datacollection/segments/' + name;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.CreateOrUpdateSegment = function (segment) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: '/pls/datacollection/segments',
            data: segment,
            headers: {
                'Content-Type': 'application/json'
                // 'ErrorDisplayMethod': 'none' // segment:demo:fixme
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.DeleteSegment = function (segmentName) {
        var deferred = $q.defer(),
            result = {},
            url = '/pls/datacollection/segments/' + segmentName + '/modelAndView';

        $http({
            method: 'DELETE',
            url: url,
            headers: {
                'Accept': 'application/json',
                'ErrorDisplayCallback': 'SegmentStore.modalCallback'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }
            var result = {
                data: {},
                errorMessage: response.data.errorMsg || 'unspecified error',
                success: false
            };

            // var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetSegmentExports = function () {
        var deferred = $q.defer(),
            result,
            url = '/pls/datacollection/segments/export';

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.GetSegmentExportByExportId = function (exportID) {
        var deferred = $q.defer(),
            result,
            url = '/pls/datacollection/segments/export/' + exportID;

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.CreateOrUpdateSegmentExport = function (segment) {
        var deferred = $q.defer(),
            result = {},
            url = '/pls/datacollection/segments/export';

        $http({
            method: 'POST',
            url: url,
            data: segment,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.DeleteExpiredSegmentExports = function () {
        var deferred = $q.defer(),
            result = {},
            url = '/pls/datacollection/segments/export/cleanup';

        $http({
            method: 'DELETE',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = {
                data: response.data,
                success: true
            };
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.DownloadExportedSegment = function (id) {
        var deferred = $q.defer(),
            result,
            url = '/pls/datacollection/segments/export/' + id + '/download';

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function onSuccess(response) {
            deferred.resolve(response);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };

    this.GetSegmentDependenciesModelView = function (segmentId, errorDisplayCallback) {
        var deferred = $q.defer(),
            result,
            url = '/pls/datacollection/segments/' + segmentId + '/dependencies/modelAndView';

        $http({
            method: 'GET',
            url: url,
            headers: {
                'Accept': 'application/json',
                'ErrorDisplayCallback': errorDisplayCallback
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });
        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/setup/controllers/ManageFieldsController.js":
/*!*********************************************************!*\
  !*** ./app/setup/controllers/ManageFieldsController.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.managefields', ['mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.setup.utilities.SetupUtility', 'mainApp.setup.services.MetadataService', 'mainApp.setup.controllers.DiscardEditFieldsModel', 'mainApp.setup.modals.UpdateFieldsModal', 'mainApp.setup.modals.FieldMappingSettingsModal']).controller('ManageFieldsController', ["$scope", "$rootScope", "$timeout", "$state", "StringUtility", "ResourceUtility", "SetupUtility", "NavUtility", "MetadataService", "DiscardEditFieldsModel", "UpdateFieldsModal", "FieldMappingSettingsModal", "Model", "HealthService", function ($scope, $rootScope, $timeout, $state, StringUtility, ResourceUtility, SetupUtility, NavUtility, MetadataService, DiscardEditFieldsModel, UpdateFieldsModal, FieldMappingSettingsModal, Model, HealthService) {

    $scope.ResourceUtility = ResourceUtility;
    $scope.saveInProgress = false;
    $scope.showFieldDetails = false;
    $scope.fieldAttributes = [];
    $scope.eventTableName = Model.EventTableProvenance.EventTableName;
    $scope.modelId = Model.ModelId;
    $scope.dirtyRows = {};
    $scope.indexToOldFieldsForSingleFieldPage = {};
    $scope.indexToOldFieldsForListFieldsPage = {};
    $scope.oneLeadPerDomain = Model.EventTableProvenance.Is_One_Lead_Per_Domain == null ? false : Model.EventTableProvenance.Is_One_Lead_Per_Domain == "true";
    $scope.includePersonalEmailDomains = Model.EventTableProvenance.Exclude_Public_Domains == null ? true : Model.EventTableProvenance.Exclude_Public_Domains == "false";
    $scope.useLatticeAttributes = Model.EventTableProvenance.Exclude_Propdata_Columns == null ? true : Model.EventTableProvenance.Exclude_Propdata_Columns == "false";
    $scope.enableTransformations = Model.EventTableProvenance.Transformation_Group_Name == "none" || Model.ModelDetails.TransformationGroupName == "none" ? false : true;
    $scope.sourceType = Model.ModelDetails.SourceSchemaInterpretation;

    getOptionsAndFields();

    function getOptionsAndFields() {
        $scope.loading = true;
        MetadataService.GetOptions().then(function (result) {
            if (result.Success) {
                var options = result.ResultObj;
                $scope.CategoryOptions = options.CategoryOptions;
                $scope.ApprovedUsageOptions = options.ApprovedUsageOptions;
                $scope.StatisticalTypeOptions = options.StatisticalTypeOptions;
                $scope.FundamentalTypeOptions = options.FundamentalTypeOptions;

                loadFields();
            } else {
                $scope.showLoadingError = true;
                $scope.loadingError = result.ResultErrors;
                $scope.loading = false;
            }
        });
    }

    function getFieldsToDisplay(metadataFields) {
        var fields = [];
        $scope.fieldsNotDisplayed = [];
        for (var i = 0; i < metadataFields.length; i++) {
            var dataItem = metadataFields[i];
            if (dataItem == null) {
                continue;
            }

            if (dataItem.ApprovedUsage == null || dataItem.ApprovedUsage.toLowerCase() == "none") {
                dataItem.ApprovedUsage = "None";
            }

            if (dataItem.ApprovedUsage != "None" || !MetadataService.IsLatticeAttribute(dataItem)) {
                fields.push(dataItem);
            } else {
                $scope.fieldsNotDisplayed.push(dataItem);
            }
        }
        return fields;
    }

    function loadFields() {
        $scope.loading = true;
        MetadataService.GetMetadataForModel($scope.modelId).then(function (result) {
            $scope.fields = getFieldsToDisplay(result.ResultObj);
            renderSelects($scope.fields);
            renderGrid($scope.fields);

            if ($scope.fields != null && $scope.fields.length > 0) {
                $scope.fieldAttributes = [];
                for (var attr in $scope.fields[0]) {
                    $scope.fieldAttributes.push(attr);
                }
            }
            $scope.loading = false;
        });
    }

    function renderSelects(fields) {
        var obj = MetadataService.GetOptionsForSelects(fields);
        $scope.categoriesToSelect = obj.categoriesToSelect;
        $scope.allOptions = obj.allOptions;
    }

    function renderGrid(fields) {
        var grid = $("#fieldsGrid").data("kendoGrid");
        if (grid != null && grid.dataSource != null) {
            var state = kendo.stringify({
                page: grid.dataSource.page(),
                pageSize: grid.dataSource.pageSize(),
                sort: grid.dataSource.sort(),
                filter: grid.dataSource.filter()
            });

            grid.dataSource.data(fields);

            state = JSON.parse(state);
            if (state.page > 1 || state.sort != null || state.filter != null) {
                grid.dataSource.query(state);
            }
        } else {
            var pageSize = fields.length;
            if (pageSize > 50) {
                pageSize = 50;
            }
            var dataSource = new kendo.data.DataSource({
                data: fields,
                schema: {
                    model: {
                        fields: {
                            DisplayName: { type: "string" },
                            ColumnName: { type: "string" },
                            Category: { type: "string" },
                            ApprovedUsage: { type: "string" },
                            FundamentalType: { type: "string" }
                        }
                    }
                },
                pageSize: pageSize
            });

            $scope.gridOptions = {
                dataSource: dataSource,
                scrollable: false,
                sortable: { mode: "single", allowUnsort: false },
                pageable: {
                    messages: {
                        first: "",
                        previous: "",
                        next: "",
                        last: "",
                        display: "{0} - {1} of {2}",
                        empty: "No data"
                    }
                },
                columns: [{
                    field: "DisplayName", title: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GRID_DISPLAY_NAME'),
                    template: kendo.template($("#displayNameTemplate").html()),
                    width: 150
                }, {
                    field: "ColumnName", title: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GRID_COLUMN_NAME'),
                    template: kendo.template($("#columnNameTemplate").html()),
                    width: 150
                }, {
                    field: "Category", title: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GRID_CATEGORY'),
                    template: kendo.template($("#categoryTemplate").html()),
                    width: 120
                }, {
                    field: "ApprovedUsage", title: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GRID_APPROVED_USAGE'),
                    template: kendo.template($("#approvedUsageTemplate").html()),
                    width: 128
                }, {
                    field: "FundamentalType", title: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GRID_ATTRIBUTES_TYPE'),
                    template: kendo.template($("#fundamentalTypeTemplate").html()),
                    width: 128
                }]
            };
        }
    }

    $scope.categoryEditable = function (dataItem) {
        return MetadataService.CategoryEditable(dataItem);
    };

    $scope.isLatticeAttribute = function (dataItem) {
        return MetadataService.IsLatticeAttribute(dataItem);
    };

    $scope.categoryWarning = function (dataItem) {
        return $scope.isEmpty(dataItem.Category) && dataItem.ApprovedUsage !== "None" && dataItem.ApprovedUsage !== "Model";
    };

    $scope.selectChanged = function ($event, filerColumn) {
        if (filerColumn == "source") {
            sourceSelectChanged();
        }

        $scope.filterFields($event);
    };

    function sourceSelectChanged() {
        var objects = [];
        var categories = [];
        var allOptions = $scope.allOptions;
        var selectedSource = $scope.source;
        var sourceIsEmpty = StringUtility.IsEmptyString(selectedSource);
        for (var j = 0; j < allOptions.length; j++) {
            if (sourceIsEmpty || allOptions[j][0] == selectedSource) {
                var category = allOptions[j][1];
                if (!StringUtility.IsEmptyString(category) && categories.indexOf(category) < 0) {
                    categories.push(category);
                }
            }
        }
        $scope.categoriesToSelect = categories.sort();
        if ($scope.categoriesToSelect.indexOf($scope.category) < 0) {
            $scope.category = "";
        }
    }

    $scope.keyEnterFilter = function ($event) {
        if ($event.keyCode === 13) {
            $scope.filterFields($event);
        }
    };

    $scope.filterFields = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        var orFilters = [];
        if (!StringUtility.IsEmptyString($scope.field)) {
            var nameFiler = {
                logic: "or",
                filters: [{ field: "DisplayName", operator: "contains", value: $scope.field }, { field: "ColumnName", operator: "contains", value: $scope.field }]
            };
            orFilters.push(nameFiler);
        }

        var andFilters = [];
        if (!StringUtility.IsEmptyString($scope.category)) {
            andFilters.push({ field: "Category", operator: "eq", value: $scope.category });
        }

        var errorFilters = [];
        if ($scope.onlyShowErrorFields) {
            var columns = $scope.gridOptions.columns;
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].field === "Category") {
                    errorFilters.push({
                        logic: "and",
                        filters: [{ field: "ApprovedUsage", operator: "neq", value: "None" }, { field: "ApprovedUsage", operator: "neq", value: "Model" }, { field: columns[i].field, operator: "eq", value: "" }]
                    });
                } else {
                    errorFilters.push({ field: columns[i].field, operator: "eq", value: "" });
                }
            }
        }

        var filter;
        if (orFilters.length > 0 && andFilters.length > 0) {
            filter = {
                logic: "and",
                filters: [{ logic: "or", filters: orFilters }, { logic: "and", filters: andFilters }]
            };
            if (errorFilters.length > 0) {
                filter.filters.push({ logic: "or", filters: errorFilters });
            }
        } else if (orFilters.length > 0) {
            if (errorFilters.length > 0) {
                filter = {
                    logic: "and",
                    filters: [{ logic: "or", filters: orFilters }, { logic: "or", filters: errorFilters }]
                };
            } else {
                filter = { logic: "or", filters: orFilters };
            }
        } else if (andFilters.length > 0) {
            if (errorFilters.length > 0) {
                filter = {
                    logic: "and",
                    filters: [{ logic: "and", filters: andFilters }, { logic: "or", filters: errorFilters }]
                };
            } else {
                filter = { logic: "and", filters: andFilters };
            }
        } else {
            if (errorFilters.length > 0) {
                filter = { logic: "or", filters: errorFilters };
            } else {
                filter = {};
            }
        }
        $("#fieldsGrid").data("kendoGrid").dataSource.filter(filter);
    };

    $scope.editClicked = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.showEditFieldsError = false;
        $scope.batchEdit = true;
    };

    $scope.saveClicked = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.batchEdit = false;
        $scope.showEditFieldsError = false;
        $scope.saveInProgress = false;
    };

    $scope.discardChangesClicked = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.batchEdit = false;
        $scope.showEditFieldsError = false;
        $scope.saveInProgress = false;
        $scope.discardAllChanges();
    };

    $scope.resetSettingsClicked = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        if ($scope.saveInProgress) {
            return;
        }

        var editedData = getAllEditedData();
        if (editedData != null && editedData.length > 0 || advancedSettingsFlagsChanged()) {
            DiscardEditFieldsModel.show($scope);
        } else {
            $scope.showEditFieldsError = true;
            $scope.editFieldsErrorMessage = "No fields changed. Cannot discard changes.";
        }
    };

    $scope.advancedSettingsClicked = function () {
        FieldMappingSettingsModal.show($scope.oneLeadPerDomain, $scope.includePersonalEmailDomains, $scope.useLatticeAttributes, $scope.enableTransformations, $scope.sourceType);
    };

    $scope.$on(NavUtility.MANAGE_FIELDS_ADVANCED_SETTINGS_EVENT, function (event, oneLeadPerDomain, includePersonalEmailDomains, useLatticeAttributes, enableTransformations) {
        $scope.oneLeadPerDomain = oneLeadPerDomain;
        $scope.includePersonalEmailDomains = includePersonalEmailDomains;
        $scope.enableTransformations = enableTransformations;

        if ($scope.useLatticeAttributes != useLatticeAttributes) {
            if (!useLatticeAttributes) {
                disableAllLatticeAttributes();
            } else {
                enableAllLatticeAttributes();
                loadFields();
            }
        }
        $scope.useLatticeAttributes = useLatticeAttributes;
    });

    function disableAllLatticeAttributes() {
        for (var i = 0; i < $scope.fields.length; i++) {
            var field = $scope.fields[i];
            if ($scope.isLatticeAttribute(field) && field.ApprovedUsage != 'None') {
                field.ApprovedUsage = 'None';
                $scope.indexToOldFieldsForListFieldsPage[i] = field;
                $scope.fields[i] = field;
            }
        }

        renderGrid($scope.fields);
    }

    function enableAllLatticeAttributes() {
        for (var index in $scope.indexToOldFieldsForListFieldsPage) {
            if ($scope.isLatticeAttribute($scope.indexToOldFieldsForListFieldsPage[index]) && $scope.indexToOldFieldsForListFieldsPage[index].ApprovedUsage == 'None') {
                delete $scope.indexToOldFieldsForListFieldsPage[index];
            }
        }
    }

    function advancedSettingsFlagsChanged() {
        if ($scope.oneLeadPerDomain.toString() != Model.EventTableProvenance.Is_One_Lead_Per_Domain || $scope.includePersonalEmailDomains.toString() == Model.EventTableProvenance.Exclude_Public_Domains || $scope.useLatticeAttributes.toString() == Model.EventTableProvenance.Exclude_Propdata_Columns || enableTransformationsChanged()) {
            return true;
        }
        return false;
    }

    function enableTransformationsChanged() {
        var transformationGroupName = Model.EventTableProvenance.Transformation_Group_Name ? Model.EventTableProvenance.Transformation_Group_Name : Model.ModelDetails.TransformationGroupName;

        if (transformationGroupName == "none" && $scope.enableTransformations) {
            return true;
        } else if (transformationGroupName != "none" && !$scope.enableTransformations) {
            return true;
        }
        return false;
    }

    $scope.remodelClicked = function ($event) {
        if ($scope.saveInProgress) {
            return;
        }
        $scope.showEditFieldsError = false;
        if (allFieldsDisabled()) {
            $scope.showEditFieldsError = true;
            $scope.editFieldsErrorMessage = ResourceUtility.getString("SETUP_MANAGE_FIELDS_ALL_FIELDS_DISABLED_ERROR");
            return;
        }

        HealthService.checkSystemStatus().then(function () {
            $scope.remodel();
        });
    };

    $scope.remodel = function () {
        UpdateFieldsModal.show($scope.oneLeadPerDomain, $scope.includePersonalEmailDomains, $scope.useLatticeAttributes, $scope.enableTransformations, $scope.modelId, $scope.fields.concat($scope.fieldsNotDisplayed), Model.ModelDetails.DisplayName);
        $scope.saveInProgress = false;
    };

    function allFieldsDisabled() {
        for (var i = 0; i < $scope.fields.length; i++) {
            if ($scope.fields[i].ApprovedUsage.toLowerCase() != "none") {
                return false;
            }
        }

        return true;
    }

    function discardChangesOnPage() {
        $("#fieldsGrid").data("kendoGrid").cancelChanges();
        $scope.showEditFieldsError = false;
        $scope.batchEdit = false;
        $scope.oneLeadPerDomain = Model.EventTableProvenance.Is_One_Lead_Per_Domain == null ? false : Model.EventTableProvenance.Is_One_Lead_Per_Domain == "true";
        $scope.includePersonalEmailDomains = Model.EventTableProvenance.Exclude_Public_Domains == null ? true : Model.EventTableProvenance.Exclude_Public_Domains == "false";
        $scope.useLatticeAttributes = Model.EventTableProvenance.Exclude_Propdata_Columns == null ? true : Model.EventTableProvenance.Exclude_Propdata_Columns == "false";
        $scope.enableTransformations = Model.EventTableProvenance.Transformation_Group_Name == "none" || Model.ModelDetails.TransformationGroupName == "none" ? false : true;
        $scope.dirtyRows = {};

        $scope.indexToOldFieldsForListFieldsPage = {};
        $scope.indexToOldFieldsForSingleFieldPage = {};
    };

    $scope.discardAllChanges = function () {
        discardChangesOnPage();

        loadFields();
    };

    $scope.textboxClicked = function ($event) {
        $scope.showEditFieldsError = false;
        if ($scope.activeTextbox != $event.target) {
            $event.target.select();
            $scope.activeTextbox = $event.target;
        }
    };

    function getFieldIndexInFields(field) {
        for (var i = 0; i < $scope.fields.length; i++) {
            if ($scope.fields[i]['ColumnName'] == field['ColumnName']) {
                return i;
            }
        }
    }

    function hasFieldChanged(oldField, newField) {
        for (var i = 0; i < attributesEditable.length; i++) {
            if (oldField[attributesEditable[i]] != newField[attributesEditable[i]]) {
                return true;
            }
        }
        return false;
    }

    $scope.valueChanged = function ($event, dataItem, field, originalValue) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.showEditFieldsError = false;
        var index = getFieldIndexInFields(dataItem);
        if ($scope.indexToOldFieldsForListFieldsPage[index] == null) {
            $scope.indexToOldFieldsForListFieldsPage[index] = $scope.fields[index];
        } else {
            // this means user has chagned the value but decided to change it back
            // and we should not be submit this field to clone & remodel
            if (!hasFieldChanged($scope.indexToOldFieldsForListFieldsPage[index], dataItem)) {
                delete $scope.indexToOldFieldsForListFieldsPage[index];
            }
        }
        if (dataItem[field] != originalValue) {
            $scope.fields[index] = dataItem;
        }

        var dirtyRow = $scope.dirtyRows[dataItem.uid] || {};
        if (dirtyRow[field] == null) {
            dirtyRow[field] = { dirty: true, ov: originalValue };
        } else {
            var newValue = dataItem[field];
            dirtyRow[field].dirty = newValue != dirtyRow[field].ov;
        }
        $scope.dirtyRows[dataItem.uid] = dirtyRow;

        dataItem.dirty = false;
        for (var f in dirtyRow) {
            if (dirtyRow[f].dirty) {
                dataItem.dirty = true;
                break;
            }
        }
    };

    function getEditedDataOnPage() {
        var editedData = [];
        for (var index in $scope.indexToOldFieldsForListFieldsPage) {
            editedData.push($scope.fields[index]);
        }
        return editedData;
    }

    function getAllEditedData() {
        var editedData = getEditedDataOnPage();

        for (var index in $scope.indexToOldFieldsForSingleFieldPage) {
            editedData.push($scope.fields[index]);
        }

        return editedData;
    }

    $scope.isChanged = function (uid, field) {
        var row = $scope.dirtyRows[uid];
        return row && row[field] && row[field].dirty;
    };

    var attributesEditable = ['DisplayName', 'Description', 'ApprovedUsage', 'DisplayDiscretization', 'FundamentalType', 'StatisticalType'];

    $scope.$on(SetupUtility.LOAD_FIELDS_EVENT, function (event, oldField, newField) {
        $scope.loading = true;

        if (hasFieldChanged(oldField, newField)) {
            var index = getFieldIndexInFields(newField);
            if ($scope.indexToOldFieldsForSingleFieldPage[index] != null && !hasFieldChanged(newField, $scope.indexToOldFieldsForSingleFieldPage[index])) {
                // this is when user changed the field value and then decide to change it back
                delete $scope.indexToOldFieldsForSingleFieldPage[index];
            } else {
                $scope.indexToOldFieldsForSingleFieldPage[index] = oldField;
            }

            $scope.fields[index] = newField;
        }

        renderGrid($scope.fields);
        $scope.loading = false;
    });

    $scope.isEmpty = function (value) {
        return value == null || value === '';
    };
}]);

/***/ }),

/***/ "./app/setup/modals/DiscardEditFieldsModel.js":
/*!****************************************************!*\
  !*** ./app/setup/modals/DiscardEditFieldsModel.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.setup.controllers.DiscardEditFieldsModel', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.setup.utilities.SetupUtility']).service('DiscardEditFieldsModel', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", function ($compile, $templateCache, $rootScope, $http, ResourceUtility) {

    this.show = function ($manageFieldsScope) {
        $http.get('app/setup/views/DiscardEditFieldsView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.manageFieldsScope = $manageFieldsScope;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('DiscardEditFieldsController', ["$scope", "$rootScope", "ResourceUtility", "SetupUtility", "ModelService", function ($scope, $rootScope, ResourceUtility, SetupUtility, ModelService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.yesClicked = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.manageFieldsScope.discardAllChanges();
        $("#modalContainer").modal('hide');
    };

    $scope.noClicked = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/setup/modals/FieldMappingSettingsModal.js":
/*!*******************************************************!*\
  !*** ./app/setup/modals/FieldMappingSettingsModal.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.setup.modals.FieldMappingSettingsModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.NavUtility']).service('FieldMappingSettingsModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", function ($compile, $templateCache, $rootScope, $http, ResourceUtility) {
    var self = this;
    this.show = function (oneLeadPerDomain, includePersonalEmailDomains, useLatticeAttributes, enableTransformations, sourceType) {
        $http.get('app/setup/views/FieldMappingSettingsView.html', { cache: $templateCache }).success(function (html) {
            var scope = $rootScope.$new();
            scope.oneLeadPerDomain = oneLeadPerDomain;
            scope.includePersonalEmailDomains = includePersonalEmailDomains;
            scope.useLatticeAttributes = useLatticeAttributes;
            scope.enableTransformations = enableTransformations;
            scope.sourceType = sourceType;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };

    this.showForModelCreation = function (oneLeadPerDomain, includePersonalEmailDomains, useLatticeAttributes, enableTransformations, sourceType) {
        $http.get('app/setup/views/FieldMappingSettingsView.html', { cache: $templateCache }).success(function (html) {
            var scope = $rootScope.$new();
            scope.oneLeadPerDomain = oneLeadPerDomain;
            scope.includePersonalEmailDomains = includePersonalEmailDomains;
            scope.useLatticeAttributes = useLatticeAttributes;
            scope.enableTransformations = enableTransformations;
            scope.sourceType = sourceType;
            scope.modelCreation = true;

            var infoAccount = "Excludes all the duplicate lead records that belong to the same account within a country and keeps one which has a positive event. Maintains a ratio of positive to negative events desired for better model training",
                infoLead = "Excludes all the duplicate records that belong to the same account within a country and keeps one which has a positive event. Maintains a ratio of positive to negative events desired for better model training";
            scope.sourceTypeInfoTemplate = "<div class='row'><div class='twelve columns'><p>" + (sourceType != 'SalesforceAccount' ? infoAccount : infoLead) + "</p></div></div>";

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('FieldMappingSettingsController', ["$scope", "$rootScope", "$state", "ResourceUtility", "NavUtility", "ImportStore", function ($scope, $rootScope, $state, ResourceUtility, NavUtility, ImportStore) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.saveSettingsClicked = function () {
        if (!$scope.modelCreation) {
            $rootScope.$broadcast(NavUtility.MANAGE_FIELDS_ADVANCED_SETTINGS_EVENT, $scope.oneLeadPerDomain, $scope.includePersonalEmailDomains, $scope.useLatticeAttributes, $scope.enableTransformations);
            $("#modalContainer").modal('hide');
        } else {
            ImportStore.SetAdvancedSettings('oneLeadPerDomain', $scope.oneLeadPerDomain);
            ImportStore.SetAdvancedSettings('includePersonalEmailDomains', $scope.includePersonalEmailDomains);
            ImportStore.SetAdvancedSettings('useLatticeAttributes', $scope.useLatticeAttributes);
            ImportStore.SetAdvancedSettings('enableTransformations', $scope.enableTransformations);
            $("#modalContainer").modal('hide');
        }
    };

    $scope.cancelClicked = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/setup/modals/UpdateFieldsModal.js":
/*!***********************************************!*\
  !*** ./app/setup/modals/UpdateFieldsModal.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.setup.modals.UpdateFieldsModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.setup.services.MetadataService', 'mainApp.appCommon.utilities.StringUtility']).service('UpdateFieldsModal', ["$compile", "$templateCache", "$rootScope", "$http", "ResourceUtility", function ($compile, $templateCache, $rootScope, $http, ResourceUtility) {
    var self = this;
    this.show = function (oneLeadPerDomain, includePersonalEmailDomains, useLatticeAttributes, enableTransformations, modelSummaryId, allMetadataFields, oldModelDisplayName, notesContent, dataRules) {
        $http.get('app/setup/views/UpdateFieldsView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.modelSummaryId = modelSummaryId;
            scope.allMetadataFields = allMetadataFields;
            scope.dataRules = dataRules;
            scope.includePersonalEmailDomains = includePersonalEmailDomains;
            scope.useLatticeAttributes = useLatticeAttributes;
            scope.enableTransformations = enableTransformations;
            var copy_text = " (copy)";
            scope.modelDisplayName = oldModelDisplayName + (oldModelDisplayName.length + copy_text.length <= 50 ? copy_text : '');
            scope.notesContent = notesContent;
            var deduplicationTypes = ["ONELEADPERDOMAIN", "MULTIPLELEADSPERDOMAIN"];
            if (oneLeadPerDomain) {
                scope.dedupType = deduplicationTypes[0];
            } else {
                scope.dedupType = deduplicationTypes[1];
            }

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);
            $("#deleteModelError").hide();

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]).controller('UpdateFieldsController', ["$scope", "$rootScope", "$state", "ResourceUtility", "StringUtility", "MetadataService", function ($scope, $rootScope, $state, ResourceUtility, StringUtility, MetadataService) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.updateClicked = false;
    $scope.saveInProgress = false;
    $scope.cloneError = false;

    $scope.updateFieldsClicked = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        var modelName = StringUtility.SubstituteAllSpecialCharsWithDashes($scope.modelDisplayName);

        if ($scope.updateClicked) {
            return;
        }
        $scope.cloneError = false;
        $scope.updateClicked = true;

        $scope.saveInProgress = true;

        MetadataService.UpdateAndCloneFields($scope.dedupType, $scope.includePersonalEmailDomains, $scope.useLatticeAttributes, $scope.enableTransformations, modelName, $scope.modelDisplayName, $scope.notesContent, $scope.modelSummaryId, $scope.allMetadataFields, $scope.dataRules).then(function (result) {

            if (result.Success) {
                $("#modalContainer").modal('hide');

                $state.go('home.jobs.status', { 'jobCreationSuccess': true });
            } else {
                if (result.ResultErrors != null) {
                    $scope.updateFieldsErrorMessage = result.ResultErrors;
                } else {
                    $scope.updateFieldsErrorMessage = ResourceUtility.getString('UPDATE_FIELDS_ERROR_MESSAGE');
                }
                $scope.saveInProgress = false;
                $scope.cloneError = true;
                $scope.updateClicked = false;
                $("#updateFieldsError").fadeIn();
            }
        });
    };

    $scope.cancelClicked = function () {
        $scope.isCancelClicked = true;
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/setup/services/MetadataService.js":
/*!***********************************************!*\
  !*** ./app/setup/services/MetadataService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('mainApp.setup.services.MetadataService', ['mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.services.SessionService']).service('MetadataStore', ["$q", "MetadataService", function ($q, MetadataService) {
    var MetadataStore = this;
    this.metadataMap = {};

    this.GetMetadataForModel = function (modelId) {
        var deferred = $q.defer(),
            metadata = this.metadataMap[modelId];
        if ((typeof metadata === 'undefined' ? 'undefined' : _typeof(metadata)) == 'object') {
            deferred.resolve(metadata);
        } else {
            MetadataService.GetMetadataForModelId(modelId).then(function (result) {
                if (result != null && result.Success === true) {
                    MetadataStore.SetMetadataForModel(modelId, result.ResultObj);
                    deferred.resolve(result.ResultObj);
                } else {
                    deferred.resolve(result);
                }
            });
        }

        return deferred.promise;
    };

    this.SetMetadataForModel = function (modelId, metadata) {
        this.metadataMap[modelId] = metadata;
    };
}]).service('MetadataService', ["$http", "$q", "_", "BrowserStorageUtility", "RightsUtility", "ResourceUtility", "StringUtility", "SessionService", function ($http, $q, _, BrowserStorageUtility, RightsUtility, ResourceUtility, StringUtility, SessionService) {

    this.GetOptionsForSelects = function (fields) {
        var allSources = [];
        var allCategories = [];
        var allOptions = [];
        for (var i = 0; i < fields.length; i++) {
            var field = fields[i];
            if (!StringUtility.IsEmptyString(field.SourceToDisplay) && allSources.indexOf(field.SourceToDisplay) < 0) {
                allSources.push(field.SourceToDisplay);
            }
            if (!StringUtility.IsEmptyString(field.Category) && allCategories.indexOf(field.Category) < 0) {
                allCategories.push(field.Category);
            }

            var exist = false;
            for (var j = 0; j < allOptions.length; j++) {
                if (allOptions[j][0] == field.SourceToDisplay && allOptions[j][1] == field.Category) {
                    exist = true;
                    break;
                }
            }
            if (!exist) {
                allOptions.push([field.SourceToDisplay, field.Category]);
            }
        }

        var obj = {};
        obj.sourcesToSelect = allSources.sort();
        obj.categoriesToSelect = allCategories.sort();
        obj.allOptions = allOptions;
        return obj;
    };

    this.CategoryEditable = function (dataItem) {
        return dataItem != null && dataItem.Tags != null && dataItem.Tags.toLowerCase() === "internal";
    };

    this.IsLatticeAttribute = function (dataItem) {
        if (dataItem == null) {
            return false;
        }
        if (dataItem.Tags == null) {
            return false;
        }
        return dataItem.Tags.toLowerCase() === "external" || dataItem.Tags.toLowerCase() == "externaltransform";
    };

    this.GetOptions = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/vdbmetadata/options?' + new Date().getTime(),
            headers: {
                'Content-Type': "application/json"
            }
        }).success(function (data) {
            var result = {
                Success: true,
                ResultObj: data,
                ResultErrors: null
            };
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GET_OPTIONS_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.GetMetadataForModel = function (modelId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/modelsummaries/metadata/' + modelId,
            headers: {
                'Content-Type': "application/json"
            }
        }).success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data !== null) {
                result.Success = true;
                result.ResultObj = data;
            } else {
                result.ResultErrors = ResourceUtility.getString('SETUP_MANAGE_FIELDS_GET_FIELDS_ERROR');
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GET_FIELDS_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.UpdateAndCloneFields = function (dedupType, includePersonalEmailDomains, useLatticeAttributes, enableTransformations, modelName, modelDisplayName, notesContent, originalModelSummaryId, fields, dataRules) {
        var deferred = $q.defer();

        var cloneParams = {
            name: modelName,
            displayName: modelDisplayName,
            notesContent: notesContent,
            description: 'cloned from model: ' + originalModelSummaryId,
            attributes: fields || [],
            sourceModelSummaryId: originalModelSummaryId,
            deduplicationType: dedupType,
            excludePublicDomain: includePersonalEmailDomains ? false : true,
            //excludeDataCloudAttrs ??
            excludePropDataAttributes: useLatticeAttributes ? false : true,
            //transformationGroup ??
            enableTransformations: enableTransformations ? true : false,
            dataRules: dataRules
        };

        $http({
            method: 'POST',
            url: '/pls/models/' + originalModelSummaryId + '/clone',
            headers: {
                'Content-Type': "application/json"
            },
            data: cloneParams
        }).success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data !== null) {
                result.Success = true;
                result.ResultObj = data;
            } else {
                result.ResultErrors = ResourceUtility.getString('UPDATE_FIELDS_ERROR_MESSAGE');
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('UPDATE_FIELDS_ERROR_MESSAGE')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/setup/setup.index.js":
/*!**********************************!*\
  !*** ./app/setup/setup.index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/ManageFieldsController */ "./app/setup/controllers/ManageFieldsController.js");

__webpack_require__(/*! ./modals/DiscardEditFieldsModel */ "./app/setup/modals/DiscardEditFieldsModel.js");

__webpack_require__(/*! ./modals/FieldMappingSettingsModal */ "./app/setup/modals/FieldMappingSettingsModal.js");

__webpack_require__(/*! ./modals/UpdateFieldsModal */ "./app/setup/modals/UpdateFieldsModal.js");

__webpack_require__(/*! ./services/MetadataService */ "./app/setup/services/MetadataService.js");

__webpack_require__(/*! ./utilities/SetupUtility */ "./app/setup/utilities/SetupUtility.js");

/***/ }),

/***/ "./app/setup/utilities/SetupUtility.js":
/*!*********************************************!*\
  !*** ./app/setup/utilities/SetupUtility.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.setup.utilities.SetupUtility', []).service('SetupUtility', function () {

    // Event Constants
    this.LOAD_FIELDS_EVENT = "LoadFieldsEvent";

    // Tenant Deployment Constants
    this.STEP_ENTER_CREDENTIALS = "ENTER_CREDENTIALS";
    this.STEP_IMPORT_DATA = "IMPORT_SFDC_DATA";
    this.STEP_ENRICH_DATA = "ENRICH_DATA";
    this.STEP_VALIDATE_METADATA = "VALIDATE_METADATA";
    this.STATUS_IN_PROGRESS = "IN_PROGRESS";
    this.STATUS_SUCCESS = "SUCCESS";
    this.STATUS_FAIL = "FAIL";
    this.STATUS_WARNING = "WARNING";
});

/***/ }),

/***/ "./app/sfdc/sfdcsettings.component.js":
/*!********************************************!*\
  !*** ./app/sfdc/sfdcsettings.component.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.sfdc.credentials', ['ngAnimate', 'lp.sfdc', 'common.modal', 'mainApp.core.utilities.BrowserStorageUtility']).component('sales', {
    templateUrl: 'app/sfdc/sfdcsettings.component.html',
    bindings: {
        featureflags: '<',
        orgs: '<',
        accountids: '<',
        externaltypes: '<'
    },
    controller: ["$q", "$scope", "$state", "$timeout", "ResourceUtility", "BrowserStorageUtility", "SfdcService", "Modal", "SfdcStore", "Banner", "Notice", function controller($q, $scope, $state, $timeout, ResourceUtility, BrowserStorageUtility, SfdcService, Modal, SfdcStore, Banner, Notice) {
        var vm = this;

        vm.initModalWindow = function () {
            vm.config = {
                'name': "leave-with-unsaved-changes",
                'type': 'md',
                'title': 'Save before leaving?',
                'titlelength': 100,
                'dischargetext': 'CANCEL (go back & save)',
                'dischargeaction': 'cancel',
                'confirmtext': 'Yes, proceed to another page.',
                'confirmaction': 'ok',
                'icon': 'fa fa-exclamation-triangle',
                'iconstyle': { 'color': 'white' },
                'confirmcolor': 'blue-button',
                'showclose': true,
                'headerconfig': { 'background-color': '#FDC151', 'color': 'white' },
                'confirmstyle': { 'background-color': '#FDC151' }
            };

            vm.toggleModal = function () {
                var modal = Modal.get(vm.config.name);
                if (modal) {
                    modal.toggle();
                }
            };

            $scope.$on("$destroy", function () {
                Modal.remove(vm.config.name);
            });
        };

        vm.$onInit = function () {
            if (!vm.featureflags.EnableCdl) {
                $state.go('.', { pageTitle: 'Salesforce Settings' }, { notify: false });
            } else {
                $state.go('.', { pageTitle: 'Application Settings' }, { notify: false });
            }

            vm.accountIDMap = {};
            var ids = [];
            vm.externaltypes.forEach(function (type) {
                if (vm.accountids[type] != undefined) {
                    vm.accountids[type].forEach(function (account) {
                        vm.accountIDMap[account.fieldName] = type;
                        ids.push(account);
                    });
                }
            });
            vm.accountids = ids;

            vm.cdlIsEnabled = vm.featureflags.EnableCdl;
            vm.generateAuthTokenButtonLabel = vm.cdlIsEnabled ? 'Email One-time Authentication Token' : 'Generate Salesforce Access Token';

            vm.initModalWindow();
        };

        vm.originalData = angular.copy(vm.orgs);

        vm.uiCanExit = function () {

            vm.showSuccess = false;

            var deferred = $q.defer();

            if (!angular.equals(vm.orgs, vm.originalData)) {

                vm.toggleModal();
                vm.modalCallback = function (args) {
                    if (vm.config.dischargeaction === args.action) {
                        vm.toggleModal();
                        deferred.resolve(false);
                    } else if (vm.config.confirmaction === args.action) {
                        vm.toggleModal();
                        deferred.resolve(true);
                    }
                };
            } else {
                deferred.resolve(true);
            }
            return deferred.promise;
        };

        vm.generateAuthToken = function () {
            var clientSession = BrowserStorageUtility.getClientSession(),
                emailAddress = clientSession.EmailAddress,
                tenantId = clientSession.Tenant.Identifier;

            SfdcService.generateAuthToken(emailAddress, tenantId).then(function (result) {
                // console.log(result);
                if (result.Success == true) {
                    if (vm.cdlIsEnabled) {
                        Notice.success({
                            delay: 5000,
                            title: 'Email sent to ' + emailAddress,
                            message: 'Your one-time authentication token has been sent to your email.'
                        });
                    } else {
                        Notice.success({
                            delay: 5000,
                            message: 'We have sent you an email with an access token and instructions for authenticating with Salesforce.'
                        });
                    }
                } else {
                    if (vm.cdlIsEnabled) {
                        Banner.error({ message: result.Errors[0] });
                    } else {
                        Banner.error({ message: 'Failed to Generate Salesforce Access Token.' });
                    }
                }
            });
        };

        vm.saveOrgs = function () {
            var orgs = vm.orgs;
            angular.forEach(orgs, function (value, key) {
                SfdcService.saveOrgs(value.configId, value).then(function (result) {
                    console.log(result);
                    Notice.success({ message: 'Your changes have been saved.' });
                });
            });

            SfdcStore.setOrgs(vm.orgs);
            vm.originalData = angular.copy(vm.orgs);
        };

        vm.saveOrg = function (org) {
            if (org.accountId != '') {
                // FIXME - ng-change is called twice when setting accountId to blank option 
                SfdcService.saveOrgs(org.configId, org).then(function (result) {
                    console.log(result);
                    Notice.success({ message: 'Your changes have been saved.' });
                });
                SfdcStore.setOrgs(vm.orgs);
                vm.originalData = angular.copy(vm.orgs);
            }
        };

        vm.closeStatusMessage = function () {
            vm.showSuccess = false;
        };
    }]
});

/***/ }),

/***/ "./app/sfdc/sfdcsettings.service.js":
/*!******************************************!*\
  !*** ./app/sfdc/sfdcsettings.service.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.sfdc', []).service('SfdcStore', ["$q", "$state", "$stateParams", "$rootScope", "SfdcService", function ($q, $state, $stateParams, $rootScope, SfdcService) {
    var SfdcStore = this;

    this.init = function () {
        this.accountids = [];
        this.orgs = [];
    };

    this.init();

    this.clear = function () {
        this.init();
    };

    this.getExternalTypes = function () {
        var deferred = $q.defer();

        SfdcService.getExternalTypes().then(function (data) {
            deferred.resolve(data);
        });

        return deferred.promise;
    };

    this.getAccountIds = function (externalSystemTypes) {
        var deferred = $q.defer();

        SfdcService.getAccountIds(externalSystemTypes).then(function (data) {
            SfdcStore.setAccountIds(data);
            deferred.resolve(data);
        });

        return deferred.promise;
    };
    this.setAccountIds = function (accountids) {
        this.accountids = accountids;
    };

    this.getOrgs = function () {
        var deferred = $q.defer();

        SfdcService.getOrgs().then(function (data) {
            SfdcStore.setOrgs(data);
            deferred.resolve(data);
        });

        return deferred.promise;
    };
    this.setOrgs = function (orgs) {
        this.orgs = orgs;
    };
}]).service('SfdcService', ["$q", "$http", "$state", function ($q, $http, $state) {

    this.generateAuthToken = function (emailAddress, tenantId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/bisaccesstoken',
            params: {
                username: emailAddress,
                tenantId: tenantId
            },
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getExternalTypes = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/lookup-id-mapping/all-external-system-types'
        }).then(function onSuccess(response) {
            console.log(response);
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            console.log('response', response);
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getAccountIds = function (externalSystemTypes) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/lookup-id-mapping/available-lookup-ids',
            params: {
                "externalSystemType[]": externalSystemTypes
            }
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.getOrgs = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/lookup-id-mapping/'
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };

    this.saveOrgs = function (configid, org) {
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: '/pls/lookup-id-mapping/config/' + configid,
            data: org
        }).then(function onSuccess(response) {
            var result = response.data;
            deferred.resolve(result);
        }, function onError(response) {
            if (!response.data) {
                response.data = {};
            }

            var errorMsg = response.data.errorMsg || 'unspecified error';
            deferred.resolve(errorMsg);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/sfdc/sfsc.index.js":
/*!********************************!*\
  !*** ./app/sfdc/sfsc.index.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./sfdcsettings.component */ "./app/sfdc/sfdcsettings.component.js");

__webpack_require__(/*! ./sfdcsettings.service */ "./app/sfdc/sfdcsettings.service.js");

/***/ }),

/***/ "./app/ssoconfig/content/ssoconfig.component.js":
/*!******************************************************!*\
  !*** ./app/ssoconfig/content/ssoconfig.component.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ssoconfig.configure', []).component('ssoConfig', {
    templateUrl: 'app/ssoconfig/content/ssoconfig.component.html',
    controller: ["$q", "$state", "$stateParams", "$scope", "$location", "$timeout", "BrowserStorageUtility", "SSOConfigStore", "ImportStore", "Banner", function controller($q, $state, $stateParams, $scope, $location, $timeout, BrowserStorageUtility, SSOConfigStore, ImportStore, Banner) {
        var vm = this,
            resolve = $scope.$parent.$resolve,
            SSOConfiguration = resolve.SSOConfiguration,
            ServiceProviderURLs = resolve.ServiceProviderURLs;

        angular.extend(vm, {
            configuration: SSOConfiguration,
            canEdit: BrowserStorageUtility.getClientSession().AvailableRights.PLS_SSO_Config.MayEdit,
            isConfigured: SSOConfiguration && typeof SSOConfiguration.config_id != 'undefined',
            configId: SSOConfiguration ? SSOConfiguration.config_id : '',
            samlVersion: 'n/a',
            status: 'n/a',
            metadataUploadDate: 'n/a',
            metadataXMLLabel: 'n/a',
            metadata: {},
            startURL: ServiceProviderURLs['assertionConsumerServiceURL'],
            acsURL: ServiceProviderURLs['assertionConsumerServiceURL'],
            entityID: ServiceProviderURLs['serviceProviderEntityId'],
            logoutURL: 'http://app.lattice-engines.com/logoutApp',
            iconURL: '',
            uploading: false,
            canSubmit: false,
            isValidMetadata: false,
            isTouched: false,
            params: {
                compressed: true,
                importError: false,
                importErrorMsg: ''
            }
        });

        vm.init = function () {
            var parser = document.createElement('a');
            parser.href = vm.startURL;
            vm.iconURL = parser.protocol + '//' + parser.hostname + '/images/lattice-logo.png';
            vm.setConfigTable(vm.configuration);
        };

        vm.setConfigTable = function (configuration) {
            if (vm.isConfigured) {
                vm.samlVersion = 'V 2.0';
                vm.status = 'Success';
                vm.metadataUploadDate = configuration.created;
                vm.metadataXMLLabel = 'Download File';
            }
        };

        vm.copyLink = function (link) {
            var element = $('#' + link);
            var $temp = $("<input>");
            $("body").append($temp);
            $temp.val($(element).text()).select();
            document.execCommand("copy");
            $temp.remove();
        };

        vm.downloadMetadata = function () {
            var data, filename, link;
            filename = 'metadata.xml';

            var xml = vm.configuration.metadata;
            if (!xml.match(/^data:text\/xml/i)) {
                xml = 'data:text/xml;charset=utf-8,' + xml;
            }
            data = encodeURI(xml);

            link = document.createElement('a');
            link.setAttribute('href', data);
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };

        vm.fileLoad = function (headers) {
            vm.uploading = true;
            vm.isTouched = true;
        };

        vm.fileSelect = function (fileName) {};

        vm.fileDone = function (result) {
            vm.uploading = false;
        };

        vm.fileCancel = function () {
            vm.uploading = false;
            var xhr = ImportStore.Get('cancelXHR', true);

            if (xhr) {
                xhr.abort();
            }
        };

        vm.fileValidation = function (result) {
            Banner.reset();
            return vm.validateMetadata({ metadata: result });
        };

        vm.validateMetadata = function (config) {
            var deferred = $q.defer();
            SSOConfigStore.validateSAMLConfig(config).then(function (validation) {
                vm.isValidMetadata = vm.canSubmit = validation.valid;
                vm.metadata = validation.valid ? config : {};
                if (!validation.valid) {
                    Banner.error({ message: "Failed! Your metadata has unexpected errors" });
                }
                deferred.resolve(validation.valid);
            });
            return deferred.promise;
        };

        vm.submitMetadata = function () {
            if (vm.configId && vm.isValidMetadata) {
                SSOConfigStore.deleteSAMLConfig(vm.configId).then(function (result) {
                    SSOConfigStore.createSAMLConfig(vm.metadata).then(function (result) {
                        if (typeof result.errorCode == 'undefined') {
                            Banner.success({ title: 'Success!', message: 'Your SAML is configured.' });
                        }
                        vm.updateConfigTable();
                    });
                });
            } else {
                SSOConfigStore.createSAMLConfig(vm.metadata).then(function (result) {
                    if (typeof result.errorCode == 'undefined') {
                        Banner.success({ title: 'Success!', message: 'Your SAML is configured.' });
                    }
                    vm.updateConfigTable();
                });
            }
        };

        vm.updateConfigTable = function () {
            SSOConfigStore.getSAMLConfig().then(function (result) {
                vm.isConfigured = result && typeof result.config_id != 'undefined';
                vm.configId = vm.isConfigured ? result.config_id : '';
                vm.configuration = result ? result : {};
                if (vm.configId) {
                    vm.setConfigTable(result);
                } else {
                    vm.samlVersion = 'V 2.0';
                    vm.status = 'Failed';
                    vm.metadataUploadDate = result && result.created ? result.created : 'n/a';
                    vm.metadataXMLLabel = result && result.metadata ? 'Download File' : 'n/a';
                    vm.params.scope.cancel();
                    vm.canSubmit = false;
                }
            });
        };

        vm.init();
    }]
});

/***/ }),

/***/ "./app/ssoconfig/ssocinfig.index.js":
/*!******************************************!*\
  !*** ./app/ssoconfig/ssocinfig.index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./content/ssoconfig.component */ "./app/ssoconfig/content/ssoconfig.component.js");

__webpack_require__(/*! ./ssoconfig.routes */ "./app/ssoconfig/ssoconfig.routes.js");

__webpack_require__(/*! ./ssoconfig.service */ "./app/ssoconfig/ssoconfig.service.js");

/***/ }),

/***/ "./app/ssoconfig/ssoconfig.routes.js":
/*!*******************************************!*\
  !*** ./app/ssoconfig/ssoconfig.routes.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ssoconfig', ['lp.ssoconfig.configure']).config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home.ssoconfig', {
        url: '/ssoconfig',
        onEnter: ['BrowserStorageUtility', function (BrowserStorageUtility) {
            if (!BrowserStorageUtility.getClientSession().AvailableRights.PLS_SSO_Config.MayView) {
                $state.go("home");
            }
        }],
        params: {
            pageIcon: 'ico-cog',
            pageTitle: 'SSO Configuration'
        },
        resolve: {
            SSOConfiguration: ["$q", "SSOConfigStore", function SSOConfiguration($q, SSOConfigStore) {
                var deferred = $q.defer();

                SSOConfigStore.getSAMLConfig().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }],
            ServiceProviderURLs: ["$q", "SSOConfigStore", function ServiceProviderURLs($q, SSOConfigStore) {
                var deferred = $q.defer();

                SSOConfigStore.getURIInfo().then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;
            }]
        },
        views: {
            'main@': 'ssoConfig'
        }
    });
}]);

/***/ }),

/***/ "./app/ssoconfig/ssoconfig.service.js":
/*!********************************************!*\
  !*** ./app/ssoconfig/ssoconfig.service.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('lp.ssoconfig').service('SSOConfigStore', ["$q", "SSOConfigService", function ($q, SSOConfigService) {
    var DeleteDataStore = this;

    this.SAMLconfig = null;

    this.init = function () {};

    this.init();

    this.clear = function () {
        this.init();
    };

    this.getSAMLConfig = function (cacheOnly) {
        var deferred = $q.defer();

        SSOConfigService.GetSAMLConfig().then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.getURIInfo = function (cacheOnly) {
        var deferred = $q.defer();

        SSOConfigService.GetURIInfo().then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.validateSAMLConfig = function (metadataObject) {
        var deferred = $q.defer();

        SSOConfigService.ValidateSAMLConfig(metadataObject).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.createSAMLConfig = function (metadataObject) {
        var deferred = $q.defer();

        SSOConfigService.CreateSAMLConfig(metadataObject).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.deleteSAMLConfig = function (configID) {
        var deferred = $q.defer();

        SSOConfigService.DeleteSAMLConfig(configID).then(function (result) {
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]).service('SSOConfigService', ["$q", "$http", function ($q, $http) {

    this.GetSAMLConfig = function () {

        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/saml-config'
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.reject(error);
        });

        return deferred.promise;
    };

    this.GetURIInfo = function () {

        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '/pls/saml-config/sp-uri-info'
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.resolve(error);
        });

        return deferred.promise;
    };

    this.ValidateSAMLConfig = function (metadataObject) {

        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/saml-config/validate',
            data: metadataObject
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.resolve(error);
        });

        return deferred.promise;
    };

    this.CreateSAMLConfig = function (metadataObject) {

        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: '/pls/saml-config',
            data: metadataObject,
            headers: {
                ErrorDisplayMethod: 'banner',
                ErrorDisplayOptions: '{"title": "", "message":"Failed! Your metadata has unexpected errors"}'
            }
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.resolve(error);
        });

        return deferred.promise;
    };

    this.DeleteSAMLConfig = function (configID) {
        var deferred = $q.defer();

        var deferred = $q.defer();
        $http({
            method: 'DELETE',
            url: '/pls/saml-config/' + configID
        }).success(function (result, status) {
            deferred.resolve(result);
        }).error(function (error, status) {
            console.log(error);
            deferred.resolve(error);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/userManagement/controllers/UserManagementController.js":
/*!********************************************************************!*\
  !*** ./app/userManagement/controllers/UserManagementController.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('mainApp.userManagement.controllers.UserManagementController', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.userManagement.services.UserManagementService']).controller('UserManagementController', ["$scope", function ($scope) {}]);

/***/ }),

/***/ "./app/userManagement/modals/AddUserModal.js":
/*!***************************************************!*\
  !*** ./app/userManagement/modals/AddUserModal.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var app = angular.module('mainApp.userManagement.modals.AddUserModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.PasswordUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.userManagement.services.UserManagementService']);

app.service('AddUserModal', ["$compile", "$templateCache", "$rootScope", "$http", function ($compile, $templateCache, $rootScope, $http) {
    this.show = function (emails) {
        $http.get('app/userManagement/views/AddUserView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.emails = emails;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]);

app.controller('AddUserController', ["$scope", "$rootScope", "$state", "_", "ResourceUtility", "BrowserStorageUtility", "StringUtility", "PasswordUtility", "NavUtility", "RightsUtility", "UserManagementService", function ($scope, $rootScope, $state, _, ResourceUtility, BrowserStorageUtility, StringUtility, PasswordUtility, NavUtility, RightsUtility, UserManagementService) {
    $scope.ResourceUtility = ResourceUtility;
    // get rid of external admin per Tejas. will add it back when PLS 2.1 is released
    //$scope.levelsToSelect = [RightsUtility.accessLevel.EXTERNAL_USER.name, RightsUtility.accessLevel.EXTERNAL_ADMIN.name];
    var makeLevels = function makeLevels(email) {
        var email = email || '';
        $scope.levelsToSelect = [];
        if (isLatticeEmail(email)) {
            //$scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_USER.name);
        }
        if (!isLatticeEmail(email)) {
            $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_USER.name);
        }

        var currentLevel = RightsUtility.getAccessLevel(BrowserStorageUtility.getClientSession().AccessLevel);
        if (currentLevel && currentLevel.ordinal == 4) {
            if (isLatticeEmail(email)) {
                $scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_ADMIN.name);
                $scope.levelsToSelect.push(RightsUtility.accessLevel.SUPER_ADMIN.name);
            }
            if (!isLatticeEmail(email)) {
                $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_ADMIN.name);
            }
        } else if (currentLevel && currentLevel.ordinal == 3) {
            if (!isLatticeEmail(email)) {
                $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_ADMIN.name);
            }
            if (isLatticeEmail(email)) {
                $scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_ADMIN.name);
            }
        }
        if ($scope.user && $scope.user.AccessLevel) {
            $scope.user.AccessLevel = $scope.levelsToSelect[0];
        }
    };
    makeLevels();

    $scope.emailChange = function () {
        var email = $scope.user && $scope.user.Email && $scope.user.Email.length ? $scope.user.Email : '';
        if (email) {
            makeLevels(email);
        }
    };
    $scope.allowAccessSelect = function () {
        if ($scope.user && $scope.user.Email && $scope.user.Email.length) {
            return true;
        }
    };

    $scope.saveInProgress = false;
    $scope.addUserErrorMessage = "";
    $scope.showAddUserError = false;

    $scope.user = { AccessLevel: RightsUtility.accessLevel.EXTERNAL_USER.name };

    function isLatticeEmail(email) {
        var domain = 'lattice-engines.com';
        return email.substring(email.length - domain.length).toLowerCase() === domain;
    }

    function validateNewUser() {
        if ($scope.form.$error.required) {
            $scope.addUserErrorMessage = ResourceUtility.getString("ADD_USER_REQUIERD");
            return false;
        }

        if ($scope.form.$error.email) {
            $scope.addUserErrorMessage = ResourceUtility.getString("ADD_USER_INVALID_EMAIL");
            return false;
        }

        if (_.contains($scope.emails, $scope.user.Email)) {
            $scope.addUserErrorMessage = ResourceUtility.getString("ADD_USER_CONFLICT_EMAIL");
            return false;
        }

        var targetLevel = RightsUtility.getAccessLevel($scope.user.AccessLevel);

        // only lattice email can be assigned to levels higher than INTERNAL_USER
        if (targetLevel.ordinal === 0 && isLatticeEmail($scope.user.Email)) {
            targetLevel = RightsUtility.accessLevel.INTERNAL_USER;
            $scope.user.AccessLevel = targetLevel.name;
        }

        if (targetLevel.ordinal >= 2 && !isLatticeEmail($scope.user.Email)) {
            $scope.addUserErrorMessage = ResourceUtility.getString("ADD_USER_EXTERNAL_EMAIL_INTERNAL_ROLE");
            return false;
        } else if (targetLevel.ordinal < 2 && isLatticeEmail($scope.user.Email)) {
            $scope.addUserErrorMessage = ResourceUtility.getString("ADD_USER_INTERNAL_EMAIL_EXTERNAL_ROLE");
            return false;
        }

        return true;
    }

    $scope.addUserClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        if ($scope.saveInProgress) {
            return;
        }
        $scope.saveInProgress = true;
        $scope.showAddUserError = false;
        $scope.showAddUserSuccess = false;

        if (!validateNewUser()) {
            $scope.saveInProgress = false;
            $scope.showAddUserError = true;
            $event.target.blur();
            return;
        }

        UserManagementService.AddUser($scope.user).then(function (result) {
            if (result.Success) {
                $scope.showAddUserSuccess = true;
                var levelString = ResourceUtility.getString('ACCESS_LEVEL_' + result.ResultObj.AccessLevel);
                $scope.addUserSuccessMessage = ResourceUtility.getString("ADD_USER_SUCCESS", [result.ResultObj.Username, levelString]);
                $scope.saveInProgress = false;
                $scope.showExistingUser = false;
                $event.target.blur();
            } else {
                if (result.ResultObj.ConflictingUser != null) {
                    $scope.existingUser = result.ResultObj.ConflictingUser;
                    $scope.showExistingUser = true;
                } else {
                    if (result.ResultErrors === ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')) {
                        $scope.addUserErrorMessage = ResourceUtility.getString("ADD_USER_GENERAL_ERROR");
                    } else {
                        $scope.addUserErrorMessage = result.ResultErrors;
                    }
                    $scope.showAddUserSuccess = false;
                    $scope.showAddUserError = true;
                    $scope.saveInProgress = false;
                    $scope.showExistingUser = false;
                    $event.target.blur();
                }
            }
        });
    };

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };

    $scope.refreshClick = function () {
        $("#modalContainer").modal('hide');
        $state.go('home.users', {}, { reload: true });
    };

    $scope.yesClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        $scope.showExistingUser = false;
        $scope.user.FirstName = $scope.existingUser.FirstName;
        $scope.user.LastName = $scope.existingUser.LastName;
        $scope.user.Email = $scope.existingUser.Email;
        $scope.user.Username = $scope.existingUser.Username;

        UserManagementService.AssignAccessLevel($scope.user.Username, $scope.user.AccessLevel).then(function (result) {
            if (result.Success) {
                $scope.showAddUserSuccess = true;
                $scope.addUserSuccessMessage = ResourceUtility.getString("ADD_EXSITING_USER_SUCCESS", [$scope.user.Username, ResourceUtility.getString('ACCESS_LEVEL_' + $scope.user.AccessLevel)]);
            } else {
                $scope.addUserErrorMessage = ResourceUtility.getString("ADD_USER_GENERAL_ERROR");
                $scope.showAddUserSuccess = false;
                $scope.showAddUserError = true;
            }
            $scope.saveInProgress = false;
            $event.target.blur();
        });
    };

    $scope.noClick = function () {
        $scope.saveInProgress = false;
        $scope.showExistingUser = false;
    };
}]);

/***/ }),

/***/ "./app/userManagement/modals/DeleteUserModal.js":
/*!******************************************************!*\
  !*** ./app/userManagement/modals/DeleteUserModal.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var app = angular.module('mainApp.userManagement.modals.DeleteUserModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.PasswordUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.userManagement.services.UserManagementService']);

app.service('DeleteUserModal', ["$compile", "$templateCache", "$rootScope", "$http", function ($compile, $templateCache, $rootScope, $http) {
    this.show = function (userToBeDeleted) {
        $http.get('app/userManagement/views/DeleteUserView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.user = userToBeDeleted;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]);

app.controller('DeleteUserController', ["$scope", "$rootScope", "$state", "_", "ResourceUtility", "BrowserStorageUtility", "StringUtility", "PasswordUtility", "NavUtility", "RightsUtility", "UserManagementService", function ($scope, $rootScope, $state, _, ResourceUtility, BrowserStorageUtility, StringUtility, PasswordUtility, NavUtility, RightsUtility, UserManagementService) {
    $scope.ResourceUtility = ResourceUtility;

    $scope.deleteInProgress = false;
    $scope.deleteLoadingMsg = ResourceUtility.getString('DELETE_USER_WAIT', [$scope.user.Username]);

    $scope.noClick = function () {
        $("#modalContainer").modal('hide');
    };

    $scope.yesClick = function () {
        if ($scope.deleteInProgress) {
            return;
        }
        $scope.deleteInProgress = true;

        UserManagementService.DeleteUser($scope.user).then(function (result) {
            if (result.Success) {
                $("#modalContainer").modal('hide');
                $state.go('home.users', {}, { reload: true });
            } else {
                if (result.ResultErrors === ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')) {
                    $scope.deleteUserErrorMessage = ResourceUtility.getString("DELETE_USER_GENERAL_ERROR");
                } else {
                    $scope.deleteUserErrorMessage = result.ResultErrors;
                }
                $scope.showDeleteUserError = true;
            }
            $scope.deleteInProgress = false;
        });
    };

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };
}]);

/***/ }),

/***/ "./app/userManagement/modals/EditUserModal.js":
/*!****************************************************!*\
  !*** ./app/userManagement/modals/EditUserModal.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var app = angular.module('mainApp.userManagement.modals.EditUserModal', ['mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.StringUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.PasswordUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.core.utilities.NavUtility', 'mainApp.userManagement.services.UserManagementService']);

app.service('EditUserModal', ["$compile", "$templateCache", "$rootScope", "$http", function ($compile, $templateCache, $rootScope, $http) {
    this.show = function (userToBeEdited) {
        $http.get('app/userManagement/views/EditUserView.html', { cache: $templateCache }).success(function (html) {

            var scope = $rootScope.$new();
            scope.user = userToBeEdited;

            var modalElement = $("#modalContainer");
            $compile(modalElement.html(html))(scope);

            var options = {
                backdrop: "static"
            };
            modalElement.modal(options);
            modalElement.modal('show');

            // Remove the created HTML from the DOM
            modalElement.on('hidden.bs.modal', function (evt) {
                modalElement.empty();
            });
        });
    };
}]);

app.controller('EditUserController', ["$scope", "$rootScope", "$state", "_", "ResourceUtility", "BrowserStorageUtility", "StringUtility", "PasswordUtility", "NavUtility", "RightsUtility", "UserManagementService", function ($scope, $rootScope, $state, _, ResourceUtility, BrowserStorageUtility, StringUtility, PasswordUtility, NavUtility, RightsUtility, UserManagementService) {
    $scope.ResourceUtility = ResourceUtility;
    $scope.user = $scope.$parent.user;

    var currentLevel = RightsUtility.getAccessLevel(BrowserStorageUtility.getClientSession().AccessLevel);
    var userLevel = RightsUtility.getAccessLevel($scope.user.AccessLevel) || {};

    var hasLatticeEmail = $scope.user.Email.toLowerCase().includes('@lattice-engines.com');

    if (userLevel.ordinal <= 1) {
        // get rid of external admin per Tejas. will add it back when PLS 2.1 is released
        //$scope.levelsToSelect = [RightsUtility.accessLevel.EXTERNAL_USER.name, RightsUtility.accessLevel.EXTERNAL_ADMIN.name];
        $scope.levelsToSelect = [];
        if (hasLatticeEmail) {
            //$scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_USER.name);
        }
        if (!hasLatticeEmail) {
            $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_ADMIN.name);
            $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_USER.name);
        }
    } else if (currentLevel.ordinal == 3) {
        $scope.levelsToSelect = [];
        if (hasLatticeEmail) {
            //$scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_USER.name); 
            $scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_ADMIN.name);
        }
        if (!hasLatticeEmail) {
            $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_USER.name);
            $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_ADMIN.name);
        }
    } else if (currentLevel.ordinal == 4) {
        $scope.levelsToSelect = [];
        if (hasLatticeEmail) {
            //$scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_USER.name);
            $scope.levelsToSelect.push(RightsUtility.accessLevel.INTERNAL_ADMIN.name);
            $scope.levelsToSelect.push(RightsUtility.accessLevel.SUPER_ADMIN.name);
        }
        if (!hasLatticeEmail) {
            $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_USER.name);
            $scope.levelsToSelect.push(RightsUtility.accessLevel.EXTERNAL_ADMIN.name);
        }
    }

    $scope.saveInProgress = false;
    $scope.editUserErrorMessage = "";
    $scope.showEditUserError = false;

    $scope.targetLevel = { AccessLevel: userLevel.name };

    $scope.editUserClick = function ($event) {
        if ($event != null) {
            $event.preventDefault();
        }

        if ($scope.saveInProgress) {
            return;
        }
        $scope.saveInProgress = true;
        $scope.showEditUserError = false;
        $scope.showEditUserSuccess = false;

        UserManagementService.AssignAccessLevel($scope.user.Username, $scope.targetLevel.AccessLevel).then(function (result) {
            if (result.Success) {
                $scope.showEditUserSuccess = true;
                $scope.editUserSuccessMessage = ResourceUtility.getString("EDIT_USER_SUCCESS", [result.ResultObj.Username, ResourceUtility.getString("ACCESS_LEVEL_" + result.ResultObj.AccessLevel)]);
                $scope.saveInProgress = false;
                $event.target.blur();
            } else {
                if (result.ResultErrors === ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')) {
                    $scope.editUserErrorMessage = ResourceUtility.getString("EDIT_USER_GENERAL_ERROR");
                } else {
                    $scope.editUserErrorMessage = result.ResultErrors;
                }
                $scope.showEditUserSuccess = false;
                $scope.showEditUserError = true;
                $scope.saveInProgress = false;
                $event.target.blur();
            }
        });
    };

    $scope.cancelClick = function () {
        $("#modalContainer").modal('hide');
    };

    $scope.refreshClick = function () {
        $("#modalContainer").modal('hide');
        $state.go('home.users', {}, { reload: true });
    };
}]);

/***/ }),

/***/ "./app/userManagement/modals/modals.index.js":
/*!***************************************************!*\
  !*** ./app/userManagement/modals/modals.index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./AddUserModal */ "./app/userManagement/modals/AddUserModal.js");

__webpack_require__(/*! ./DeleteUserModal */ "./app/userManagement/modals/DeleteUserModal.js");

__webpack_require__(/*! ./EditUserModal */ "./app/userManagement/modals/EditUserModal.js");

/***/ }),

/***/ "./app/userManagement/services/UserManagementService.js":
/*!**************************************************************!*\
  !*** ./app/userManagement/services/UserManagementService.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var app = angular.module('mainApp.userManagement.services.UserManagementService', ['mainApp.core.utilities.BrowserStorageUtility', 'mainApp.core.utilities.RightsUtility', 'mainApp.appCommon.utilities.ResourceUtility', 'mainApp.appCommon.utilities.UnderscoreUtility', 'mainApp.core.services.SessionService']);

app.service('UserManagementService', ["$http", "$q", "_", "BrowserStorageUtility", "ResourceUtility", "RightsUtility", "SessionService", function ($http, $q, _, BrowserStorageUtility, ResourceUtility, RightsUtility, SessionService) {

    this.AssignAccessLevel = function (username, accessLevel) {
        var deferred = $q.defer();
        var result = {
            Success: false,
            ResultObj: null,
            ResultErrors: null
        };
        $http({
            method: 'PUT',
            url: '/pls/users/' + JSON.stringify(username) + '/',
            data: {
                AccessLevel: accessLevel
            },
            headers: { "Content-Type": "application/json" }
        }).success(function (data) {
            result.Success = data.Success;
            result.ResultObj = { Username: username, AccessLevel: accessLevel };
            deferred.resolve(result);
        }).error(function (data, status) {
            SessionService.HandleResponseErrors(data, status);
            result.ResultErrors = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
            deferred.resolve(result);
        });
        return deferred.promise;
    };

    this.GetUsers = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/users?' + new Date().getTime(),
            headers: {
                'ErrorDisplayMethod': 'modal|home.models'
            }
        }).success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = _.sortBy(data.Result, 'Username');
            } else {
                result.ResultErrors = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
            }
            deferred.resolve(result);
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ReportErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.AddUser = function (newUser) {
        var deferred = $q.defer();

        var user = {
            Username: newUser.Email,
            FirstName: newUser.FirstName,
            LastName: newUser.LastName,
            Email: newUser.Email,
            AccessLevel: newUser.AccessLevel
        };

        var creds = {
            Username: user.Username,
            Password: "WillBeResetImmediately"
        };

        var registration = {
            User: user,
            Credentials: creds
        };

        $http({
            method: 'POST',
            url: '/pls/users',
            headers: {
                'Content-Type': "application/json"
            },
            data: registration
        }).success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: {},
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = { Username: user.Username, AccessLevel: user.AccessLevel, Password: data.Result.Password };
                deferred.resolve(result);
            } else {
                result.ResultErrors = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
                if (data.Result.hasOwnProperty("ConflictingUser")) {
                    result.ResultObj.ConflictingUser = data.Result.ConflictingUser;
                    result.ResultErrors = ResourceUtility.getString('ADD_USER_CONFLICT_EMAIL');
                }
                deferred.resolve(result);
            }
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ReportErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.DeleteUser = function (user) {
        var deferred = $q.defer();

        var result = {
            Success: false,
            ResultObj: {},
            ResultErrors: null
        };

        $http({
            method: 'DELETE',
            url: '/pls/users/' + JSON.stringify(user.Username) + '/',
            headers: {
                'Content-Type': "application/json"
            }
        }).success(function (data, status, headers, config) {
            if (data.Success) {
                result.Success = true;
                deferred.resolve(result);
            } else {
                result.ResultErrors = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
                //TODO:song handle different error messages
                if (_.some(data.Errors, function (err) {
                    return err.indexOf("email conflicts") > -1;
                })) {
                    result.ResultObj.ConflictingUser = data.Result.ConflictingUser;
                    result.ResultErrors = ResourceUtility.getString('ADD_USER_CONFLICT_EMAIL');
                }
                deferred.resolve(result);
            }
        }).error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ReportErrors: ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
}]);

/***/ }),

/***/ "./app/userManagement/user-management.index.js":
/*!*****************************************************!*\
  !*** ./app/userManagement/user-management.index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./controllers/UserManagementController */ "./app/userManagement/controllers/UserManagementController.js");

__webpack_require__(/*! ./modals/modals.index */ "./app/userManagement/modals/modals.index.js");

__webpack_require__(/*! ./services/UserManagementService */ "./app/userManagement/services/UserManagementService.js");

/***/ }),

/***/ "./assets/styles/main.scss":
/*!*********************************!*\
  !*** ./assets/styles/main.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./help.index.js":
/*!***********************!*\
  !*** ./help.index.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var product_code = "AP-PUJQ09NPTAAO-2",
    disable_aptrinsic = false;

if (['app.lattice-engines.com'].indexOf(window.location.host) >= 0) {
    // production
    product_code = "AP-RR8EQLTW2VP9-2";
} else if (['localhost:3000', 'localhost:3001'].indexOf(window.location.host) >= 0) {
    // dev
    disable_aptrinsic = true;
}

if (!disable_aptrinsic) {
    (function (n, t, a, e) {
        var i = "aptrinsic";n[i] = n[i] || function () {
            (n[i].q = n[i].q || []).push(arguments);
        }, n[i].p = e;var r = t.createElement("script");r.async = !0, r.src = a + "?a=" + e;var c = t.getElementsByTagName("script")[0];c.parentNode.insertBefore(r, c);
    })(window, document, "https://web-sdk.aptrinsic.com/api/aptrinsic.js", product_code);
}

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__(/*! ../common/assets/sass/lattice.scss */ "../common/assets/sass/lattice.scss");

__webpack_require__(/*! ./assets/styles/main.scss */ "./assets/styles/main.scss");

__webpack_require__(/*! ../common/app/utilities/utilities.index */ "../common/app/utilities/utilities.index.js");

__webpack_require__(/*! ../common/app/services/services.index */ "../common/app/services/services.index.js");

__webpack_require__(/*! ../common/app/directives/directives.index */ "../common/app/directives/directives.index.js");

__webpack_require__(/*! ../common/components/wizard/wizard.index */ "../common/components/wizard/wizard.index.js");

__webpack_require__(/*! ../common/components/forms/forms.index */ "../common/components/forms/forms.index.js");

__webpack_require__(/*! ../common/components/components.index */ "../common/components/components.index.js");

__webpack_require__(/*! ./app/sfdc/sfsc.index */ "./app/sfdc/sfsc.index.js");

__webpack_require__(/*! ./app/config/services/ConfigService */ "./app/config/services/ConfigService.js");

__webpack_require__(/*! ./app/AppCommon/widgets/widgets.index */ "./app/AppCommon/widgets/widgets.index.js");

__webpack_require__(/*! ./app/jobs/jobs.index */ "./app/jobs/jobs.index.js");

__webpack_require__(/*! ./app/create/create.index */ "./app/create/create.index.js");

__webpack_require__(/*! ./app/models/models.index */ "./app/models/models.index.js");

__webpack_require__(/*! ./app/AppCommon/modules/modules.index */ "./app/AppCommon/modules/modules.index.js");

__webpack_require__(/*! ./app/AppCommon/utilities/utilities.index */ "./app/AppCommon/utilities/utilities.index.js");

__webpack_require__(/*! ./app/userManagement/user-management.index */ "./app/userManagement/user-management.index.js");

__webpack_require__(/*! ../common/components/datacloud/datacloud.index */ "../common/components/datacloud/datacloud.index.js");

__webpack_require__(/*! ./app/navigation/navigation.index */ "./app/navigation/navigation.index.js");

__webpack_require__(/*! ./app/login/login.index */ "./app/login/login.index.js");

__webpack_require__(/*! ./app/ratingsengine/ratingsengine.index */ "./app/ratingsengine/ratingsengine.index.js");

__webpack_require__(/*! ./app/segments/segments.index */ "./app/segments/segments.index.js");

__webpack_require__(/*! ./app/notes/notes.index */ "./app/notes/notes.index.js");

__webpack_require__(/*! ./app/setup/setup.index */ "./app/setup/setup.index.js");

__webpack_require__(/*! ./app/marketo/marketo.index */ "./app/marketo/marketo.index.js");

__webpack_require__(/*! ./app/apiConsole/api-console.index */ "./app/apiConsole/api-console.index.js");

__webpack_require__(/*! ./app/campaigns/campaigns.index */ "./app/campaigns/campaigns.index.js");

__webpack_require__(/*! ./app/playbook/playbook.index */ "./app/playbook/playbook.index.js");

__webpack_require__(/*! ./app/cgtalkingpoint/cg-talking-point.index */ "./app/cgtalkingpoint/cg-talking-point.index.js");

__webpack_require__(/*! ./app/import/import.index */ "./app/import/import.index.js");

__webpack_require__(/*! ./app/delete/delete.index */ "./app/delete/delete.index.js");

__webpack_require__(/*! ./app/configureattributes/configure-attributes.index */ "./app/configureattributes/configure-attributes.index.js");

__webpack_require__(/*! ./app/ssoconfig/ssocinfig.index */ "./app/ssoconfig/ssocinfig.index.js");

__webpack_require__(/*! ./templates-main */ "./templates-main.js");

__webpack_require__(/*! ./app/app */ "./app/app.js");

__webpack_require__(/*! ./app/routes */ "./app/routes.js");

__webpack_require__(/*! ./help.index */ "./help.index.js");

__webpack_require__(/*! ./zendesk.index */ "./zendesk.index.js");

/**
 * Common 
 */

/********* Styles ****************************/
exports.default = angular.module("com.le.lpi", ['com.le.common.services', "templates-main", "mainApp"]);
/************ This scss files should be removed from this path **************/

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./templates-main.js":
/*!***************************!*\
  !*** ./templates-main.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
// console.log("Templates-main module atlas");
// import angular from "angular";

exports.default = angular.module("templates-main", []);

/***/ }),

/***/ "./zendesk.index.js":
/*!**************************!*\
  !*** ./zendesk.index.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var disable_zendesk = false;

if (['app.lattice-engines.com'].indexOf(window.location.host) < 0) {
    // production
    disable_zendesk = true;
}

if (!disable_zendesk) {
    window.zE || function (e, t, s) {
        var n = window.zE = window.zEmbed = function () {
            n._.push(arguments);
        },
            a = n.s = e.createElement(t),
            r = e.getElementsByTagName(t)[0];n.set = function (e) {
            n.set._.push(e);
        }, n._ = [], n.set._ = [], a.async = true, a.setAttribute("charset", "utf-8"), a.src = "https://static.zdassets.com/ekr/asset_composer.js?key=" + s, n.t = +new Date(), a.type = "text/javascript", r.parentNode.insertBefore(a, r);
    }(document, "script", "7b73cc63-fb76-4deb-9df8-09130f1d9931");
    var loginDocument = $.jStorage.get('GriotLoginDocument');

    window.zE(function () {
        var userName = loginDocument.FirstName + ' ' + loginDocument.LastName;
        var userEmail = loginDocument.UserName;
        zE.identify({ name: userName, email: userEmail });
    });
}

/***/ })

/******/ });
//# sourceMappingURL=atlas.bundle.js.map