angular.module('mainApp.appCommon.directives.charts.ArcChartDirective', [])
.directive('arcChart', function ($window) {
    return {
        restrict: 'EA',
        scope: {},
        link: function (scope, element, attrs) {
            var chartSize = attrs.chartSize;
            var color = attrs.chartColor;
            var value = attrs.chartValue;
            var total = attrs.chartTotal;
            var label = attrs.chartLabel;
            // Browser onresize event
            window.onresize = function() {
                scope.$apply();
            };
            
            // Watch for resize event
            scope.$watch(function () {
                return angular.element($window)[0].innerWidth;
            }, function () {
                scope.render();
            });
            
            scope.render = function () {
                
                var twoPi = 2 * Math.PI;
                $(element[0]).empty();
                var svg = d3.select(element[0]).append("svg")
                    .attr("width", chartSize)
                    .attr("height", chartSize)
                    .append("g")
                    .attr("transform", "translate(" + chartSize / 2 + "," + chartSize / 2 + ")");
                var arc = d3.svg.arc()
                    .startAngle(0)
                    .innerRadius((chartSize/2)-9)
                    .outerRadius(chartSize/2);
                
                // Add the background arc, from 0 to 100% (Ï„).
                var background = svg.append("path")
                    .datum({endAngle: twoPi})
                    .style("fill", "#DDDDDD")
                    .attr("d", arc);
                
                // Add the foreground arc
                var foreground = svg.append("path")
                    .datum({endAngle: 0})
                    .style("fill", color)
                    .attr("d", arc);
                
                function arcTween(transition, newAngle) {
                    transition.attrTween("d", function(d) {
                        var interpolate = d3.interpolate(d.endAngle, newAngle);
                        return function(t) {
                            d.endAngle = interpolate(t);
                            return arc(d);
                        };
                    });
                }
                
                foreground
                    .transition()
                    .duration(1000)
                    .call(arcTween, (value/total) * twoPi);
                
                // Add value to the middle of the arc
                svg.append("text")
                    .attr("class", "arc-chart-value")
                    .style("fill", "#555555")
                    .attr("dy", ".20em")
                    .text(value);
                
                // Add a label below the arc if it exists
                if (label != null) {
                    svg.append("text")
                        .attr("class", "arc-chart-label")
                        .attr("dy", "1.85em")
                        .style("fill", "#BBBBBB")
                        .text(label);
                }
            };
        }
    };
});
angular.module('mainApp.appCommon.directives.helperMarkDirective', [
    'mainApp.appCommon.directives.ngQtipDirective'
])
.directive('helperMark', function () {
    return {
        restrict: 'E',
        scope: {help: '@'},
        template: '<span class="has-tooltip" ng-qtip title="{{help}}"><i class="fa fa-question-circle"></i></span>'
    };
});

angular.module('mainApp.appCommon.directives.ngEnterDirective', [])
.directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEnter);
                });
 
                event.preventDefault();
            }
        });
    };
});
angular.module('mainApp.appCommon.directives.ngQtipDirective', [])
    .directive('ngQtip', function () {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                return $(element).qtip({
                    content: attrs.title,
                    style: 'qtip-bootstrap'
                });
            }
        };
    });
angular.module('mainApp.appCommon.utilities.AuthenticationUtility', [
    'mainApp.appCommon.utilities.URLUtility'
])
.service('AuthenticationUtility', function (URLUtility) {
    
    this.AppendHttpHeaders = function ($http) {
        if ($http == null) {
            return;
        }
        //Default timeout
        $http.defaults.timeout = 120000;
        
        var type = URLUtility.GetSSOType();
        switch (type) {
            case URLUtility.SALESFORCE:
                if (URLUtility.Directory() != null) {
                    $http.defaults.headers.common.Directory = URLUtility.Directory();
                }
                $http.defaults.headers.common.sessionid = URLUtility.CrmSessionID();
                $http.defaults.headers.common.serverurl = URLUtility.CrmServerURL();
                $http.defaults.headers.common.userlink = URLUtility.CrmUser();
                break;

            case URLUtility.SAML:
                if (URLUtility.SamlDirectoryValue() != null) {
                    $http.defaults.headers.common.Directory = URLUtility.SamlDirectoryValue();
                }
                $http.defaults.headers.common.LESAMLUserLookup = URLUtility.SamlResponseValue();
                break;

            case URLUtility.LEA:
                if (URLUtility.Directory() != null) {
                    $http.defaults.headers.common.Directory = URLUtility.Directory();
                }
                $http.defaults.headers.common.LEAuthenticatedLookup = URLUtility.LeaResponse();
                break;
            case URLUtil.ORACLE:
                $http.defaults.headers.common.Directory = URLUtility.Directory();
                $http.defaults.headers.common.ssoToken = URLUtility.CrmSessionID();
                $http.defaults.headers.common.hostName = URLUtility.CrmServerURL();
                $http.defaults.headers.common.userlink = URLUtility.CrmUser();
                break;
        }
    };
});
angular.module('mainApp.core.utilities.BrowserStorageUtility', [])                                                                                                                                                                        
.service('BrowserStorageUtility', function () {
    
    this.CacheTimeout = 28800000; // 8 hours in Milliseconds

    this._tokenDocumentStorageKey = "GriotTokenDocument";
    this._tokenDocument = null; // document containing the authentication token
    
    this._loginDocumentStorageKey = "GriotLoginDocument";
    this._loginDocument = null; // document containing basic information about the Bard deployment
    
    this._sessionDocumentStorageKey = "GriotSessionDocument";
    this._sessionDocument = null; // actual session object

    this._clientSessionStorageKey = "GriotClientSession";
    this._clientSession = null; // actual client session object

    this._currentTabStorageKey = "GriotCurrentTab";
    this._currentTab = null; // currently selected tab in the main header
    
    this._configDocumentStorageKey = "GriotConfigDocument";
    this._configDocument = null; // actual client session object
    
    this._widgetConfigDocumentStorageKey = "GriotWidgetConfigDocument";
    this._widgetConfigDocument = null; // actual client session object

    this._featureFlagsDocumentStorageKey = "GriotFeatureFlagsDocument";
    this._featureFlagsDocument = null; // actual client session object
    
    this._sessionLastActiveTimestampStorageKey = "GriotSessionLastActiveTimestamp";
    this._sessionShouldShowJobCompleteMessage = "GriotSessionShowJobCompleteMessage";
    
    this.setSessionLastActiveTimestamp = function(timeStamp) {
        $.jStorage.set(this._sessionLastActiveTimestampStorageKey, timeStamp);
    };
    
    this.getSessionLastActiveTimestamp = function() {
        $.jStorage.reInit();
        return $.jStorage.get(this._sessionLastActiveTimestampStorageKey);
    };
    
    this.setSessionShouldShowJobCompleteMessage = function(shouldShow) {
        $.jStorage.set(this._sessionShouldShowJobCompleteMessage, shouldShow);
    };
    
    this.getSessionShouldShowJobCompleteMessage = function() {
        return $.jStorage.get(this._sessionShouldShowJobCompleteMessage);
    };
    
    this.setTokenDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_tokenDocument", "_tokenDocumentStorageKey");
    };

    this.getTokenDocument = function () {
        return this._getProperty("_tokenDocument", "_tokenDocumentStorageKey");
    };

    this.setLoginDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_loginDocument", "_loginDocumentStorageKey");
    };

    this.getLoginDocument = function () {
        return this._getProperty("_loginDocument", "_loginDocumentStorageKey");
    };

    this.setFeatureFlagsDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_featureFlagsDocument", "_featureFlagsDocumentStorageKey");
    };

    this.getFeatureFlagsDocument = function () {
        var featureFlags = this._getProperty("_featureFlagsDocument", "_featureFlagsDocumentStorageKey");
        return featureFlags || {};
    };

    this.setSessionDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_sessionDocument", "_sessionDocumentStorageKey");
    };

    this.getSessionDocument = function () {
        return this._getProperty("_sessionDocument", "_sessionDocumentStorageKey");
    };

    this.setClientSession = function (data, successHandler) {
        var availableRightsDictionary = {};
        if (data != null && data.AvailableRights != null) {
            $.each(data.AvailableRights, function(key, availableRight) {
                        availableRightsDictionary[availableRight.Key] = availableRight.Value;
                    });
            data.availableRightsDictionary= availableRightsDictionary;
        }

        this._setProperty(data, successHandler, "_clientSession", "_clientSessionStorageKey");
    };

    this.getClientSession = function () {
        return this._getProperty("_clientSession", "_clientSessionStorageKey");
    };

    this.setCurrentTab = function (data, successHandler) {
        this._setProperty(data, successHandler, "_currentTab", "_currentTabStorageKey");
    };
    
    this.getCurrentTab = function () {
        return this._getProperty("_currentTab", "_currentTabStorageKey");
    };
    
    this.setConfigDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_configDocument", "_configDocumentStorageKey");
    };

    this.getConfigDocument = function () {
        return this._getProperty("_configDocument", "_configDocumentStorageKey");
    };
    
    this.setWidgetConfigDocument = function (data, successHandler) {
        this._setProperty(data, successHandler, "_widgetConfigDocument", "_widgetConfigDocumentStorageKey");
    };

    this.getWidgetConfigDocument = function () {
        return this._getProperty("_widgetConfigDocument", "_widgetConfigDocumentStorageKey");
    };

    // Helper method to set a property
    // by adding it to local storage and then calling a success handler.
    this._setProperty = function (data, successHandler, propStorageObjName, propStorageKeyName) {
        if (this[propStorageKeyName]) {
            if (data != null) {
                data.Timestamp = new Date().getTime() + this.CacheTimeout;
            } else {
                $.jStorage.deleteKey(this[propStorageKeyName]);
            }
            $.jStorage.set(this[propStorageKeyName], data);
            this[propStorageObjName] = data;
            if (successHandler && typeof(successHandler) === "function") {
                successHandler();
            }
        }
    };

    // Helper method to get a property
    // by grabbing it from local storage.
    this._getProperty = function (propStorageObjName, propStorageKeyName) {
        if (propStorageObjName && propStorageKeyName) {
            if (this[propStorageObjName] == null) {
                $.jStorage.reInit();
                var fromStorage = $.jStorage.get(this[propStorageKeyName]);
                this[propStorageObjName] = fromStorage || null;
            }
            return this[propStorageObjName];
        } else {
            return null;
        }
    };

    //This method will be used to clear out stored data on logout 
    //and possibly reset system cache
    this.clear = function(keepAuthentication) {
        keepAuthentication = typeof keepAuthentication === 'boolean' ? keepAuthentication : false;
        var clientSession;

        if (keepAuthentication) clientSession = this.getClientSession();

        $.jStorage.flush();

        if (keepAuthentication) this.setClientSession(clientSession);
    };
});
angular.module('mainApp.appCommon.utilities.ConfigConstantUtility', [])
.service('ConfigConstantUtility', function () {
    // View Keys used for Navigation
    this.ViewAccount = "VIEW_ACCOUNT";
    this.ViewActionItems = "VIEW_ACTION_ITEMS";
    this.ViewAdmin = "VIEW_ADMIN";
    this.ViewBard = "VIEW_LEAD_SCORING";
    this.ViewMessages = "VIEW_INVITATION";
    this.ViewPlay = "VIEW_PLAY";
    this.ViewSales = "VIEW_SALES";
    this.ViewDashboardCenter = "VIEW_DASHBOARDCENTER";
    this.ViewChangePassword = "VIEW_CHANGE_PASSWORD";
    this.ViewProductHierarchy = "VIEW_PRODUCTHIERARCHY";

    // Hashes used for navigation
    // salesPRISM hashes
    this.ActionCenterHash = "#ActionCenter";
    this.SalesListHash = "#SalesList";
    this.PlayListHash = "#PlayList";
    this.LaunchMetricsHash = "#LaunchMetrics";
    this.LaunchRulesHash = "#LaunchRules";
    this.LaunchFiltersHash = "#LaunchFilters";
    this.PlayQuestionsHash = "#PlayQuestions";
    this.HoldoutsHash = "#Holdouts";
    this.ConfigConsoleHash = "#ConfigConsole";
    this.AdminConsoleHash = "#AdminConsole";
    this.UsersHash = "#Users";
    this.UserGroupsHash = "#UserGroups";
    this.AlertsHash = "#Alerts";
    this.PreviewAlertsHash = "#PreviewAlerts";
    this.FileTemplatesHash = "#FileTemplates";
    this.MailTemplatesHash = "#MailTemplates";
    this.FileUploadHash = "#FileUpload";
    this.ExternalDataHash = "#ExternalData";
    this.InvitationsHash = "#Invitations";
    this.ProductHierarchyHash = "#ProductHierarchy";

    // PLS hashes
    this.BardStatusHash = "#BardStatus";
    this.BardConfigHash = "#BardConfig";
    this.BardReportHash = "#BardReport";
    this.BardModelHash = "#BardModel";

    // Dante hashes
    this.DantePlayHash = "#DantePlays";
    this.DantePurchaseTrendsHash = "#DantePurchaseTrends";
    this.DanteCompanyDetailsHash = "#DanteCompanyDetails";
    this.DanteContactsHash = "#DanteContacts";


    // Right Keys used for Permission
    this.Play = "Play";
    this.ApprovePlay = "Approve_Play";

    // Currently Supported Error Code Descriptions
    this.DetailedDescriptionDataKey = "DetailedDescription";
    this.ImpersonationWriteError = "IMPERSONATION_WRITE_ERROR";
    this.ValidationInProgressError = "VALIDATION_ALREADY_IN_PROGRESS";
    this.ModelScoreErrorTargetFilterNoTargets = "MODELSCORE_TARGET_FILTERS_NO_ACCOUNTS";
    this.ModelScoreErrorTrainingFilterNoTargets = "MODELSCORE_TRAINING_FILTERS_NO_ACCOUNTS";

    // Online Help
    this.SalesHelp = "/Help/Sales_Help/index.html";
    this.PlayHelp = "/Help/PlayMaker_Help/index.html";
    this.AdminHelp = "/Help/Admin_Help/index.html";

    // ScoreSourceID
    this.ScoreSourceAnalytic = "Analytics";
    this.ScoreSourceUploaded = "Uploaded";
    this.ScoreSourceRuleBased = "RuleBased";
    this.ScoreSourceUnspecified = "Unspecified";

    // Field Length Validations
    this.StringShort = 150;
    this.StringInternalName = 50;
    // if we ever add maxRequestLength in web.config, please change this to match
    this.FileUploadMaxBytes = 4194304; // 4MB (default for .aspx)
    this.NumericFieldMaxLength = 9;
    this.MonetaryFieldMaxLength = 12;

    // PlayStage enum values
    this.PlayStageDetails = "Details";
    this.PlayStageTargets = "Targets";
    this.PlayStageRules = "Rules";
    this.PlayStageScore = "Score";
    this.PlayStageContent = "Content";
    this.PlayStageComplete = "Complete";

    // PlayScore enum values
    this.PlayScoreNone = "None";
    this.PlayScoreError = "Error";
    this.PlayScoreCanceled = "Canceled";
    this.PlayScoreProcessing = "Processing";
    this.PlayScoreComplete = "Complete";

    // Target Filter Relation values
    this.Contains = "CONTAINS";
    this.Equal = "EQUAL";
    this.GreaterThan = "GREATER_THAN";
    this.GreaterOrEqual = "GREATER_OR_EQUAL";
    this.LessThan = "LESS_THAN";
    this.LessOrEqual = "LESS_OR_EQUAL";
    this.GreaterThanSymbol = ">";
    this.GreaterOrEqualSymbol = "â‰¥";
    this.LessThanSymbol = "<";
    this.LessOrEqualSymbol = "â‰¤";
    this.NotEqual = "NOT_EQUAL";
    this.StartsWith = "STARTS_WITH";
    this.AfterNowOffsetMinutes = "AFTER_NOW_OFFSET_MINUTES";
    this.BeforeNowOffsetMinutes = "BEFORE_NOW_OFFSET_MINUTES";
    this.Ever = "EVER";
    this.Before = "BEFORE";
    this.After = "AFTER";
    this.Between = "BETWEEN";
    this.InCurrentPeriod = "IN_CURRENT_PERIOD";
    this.InSamePeriod = "IN_SAME_PERIOD";
    this.InNextPeriod = "IN_NEXT_PERIOD";
    this.Sum = "Sum";
    this.Each = "Each";
    this.AtLeastOnce = "AtLeastOnce";
    this.Average = "Average";
    this.HavePurchased = "HavePurchased";
    this.HaveNotPurchased = "HaveNotPurchased";
    this.Spent = "Spent";
    this.Units = "Units";
    this.Revenue = "Revenue";
    this.IsNull = "IS_NULL";
    this.IsNotNull = "IS_NOT_NULL";
    this.IsEmpty = "IS_EMPTY";
    this.IsNotEmpty = "IS_NOT_EMPTY";

    // Filter Target Type
    this.FilterTargetTypeStandard = "STANDARD";
    this.FilterTargetTypeProductPurchase = "PRODUCT_PURCHASE";

    // Filter Category Type
    this.FilterCategoryStatic = "STATIC";
    FilterCategoryTimesSeries = "TIMES_SERIES";

    // Target Build Type
    this.TargetBuildTypeNone = "None";
    this.TargetBuildTypeBuilder = "Builder";
    this.TargetBuildTypeUpload = "Upload";

    // Upload Algorithms
    this.UploadAccountAndProbabilityList = "UploadAccountAndProbabilityList";
    this.UploadAccountList = "UploadAccountList";
    this.UploadHoldoutList = "UploadHoldoutList";
    this.UploadPlayAccountProducts = "UploadPlayAccountProducts";

    // Upload Managers
    this.FileUploadManagerPlay = "PlayAccountList";
    this.FileUploadManagerPlayAccountProducts = "PlayAccountProducts";

    // TrainingBuildType
    this.TrainingBuildTypeCopyTargetFilter = "CopyTargetFilter";
    this.TrainingBuildTypeExplicitlyDefined = "ExplicitlyDefined";
    this.TrainingBuildTypeEmpty = "Empty";

    // EventBuildType
    this.EventBuildTypeExplicitlyDefined = "ExplicitlyDefined";
    EventBuildTypeDefaultFilter = "DefaultFilter";

    //Launch Rule Type
    this.PlaysWithExistingLeads = "PlaysWithExistingLeads";

    //Launch Destinations
    this.LeadLaunchDestination = {
        SalesPrism: "salesprism",
        Salesforce: "salesforce",
        SalesPrismAndCRM: "salesprism_and_CRM"
    };

    // Export Constants
    this.ExportPlayCustomerList = "PlayCustomerListExport";
    this.ExportPlayCustomerListContacts = "PlayCustomerListContactsExport";
    this.ExportPlayCustomerListWithContacts = "PlayCustomerListWithContactsExport";
    this.ExportHoldoutAccounts = "HoldoutAccountsExport";

    // PriorityType enum
    // These strings defines LikelihoodBuckets[i].ScoringMethodID.
    // And corresponds to LECore enum LeadScoringSourceType in PlayData.cs
    this.LikelihoodScoringMethodProbability = "Probability";
    this.LikelihoodScoringMethodLift = "Lift";
    this.LikelihoodScoringMethodManual = "Manual";
    this.LikelihoodScoringMethodNumValues = "NumValues";

    this.ScoringMethodSuffixLift = "x";
    this.ScoringMethodSuffixProbability = "%";

    // Model Health Score Categories =
    this.ModelHealthScoreExcellent = "EXCELLENT";
    this.ModelHealthScoreGood = "GOOD";
    this.ModelHealthScoreAverage = "AVERAGE";
    this.ModelHealthScoreError = "ERROR";

    this.ModelStatusActive = "Active";
    this.ModelStatusInactive = "Inactive";

    // ComplexFilterTypes:
    this.ComplexFilterType = {
        Training: "TRAINING",
        Target: "TARGET",
        Event: "EVENT",
        RuleBased: "RULE_BASED"
    };

    // Change Password service methods
    this.SalesprismChangePasswordMethod = "./WebLEApplicationServiceHost.svc/RegisterPendingLogAnchorIDs";
    this.SalesprismPasswordEncryptionType = "rsa";
    this.BardChangePasswordMethod = "./BardService.svc/ChangePassword";
    this.BardChangePasswordUponLoginMethod = "./LoginService.svc/ChangePasswordUponLogin";

    // Encryption algorthims
    this.SHA256 = "SHA-256";
    this.Base64 = "Base64";
    this.RSA = "rsa";

    // RSA public key
    this.rsa = {
        n: "BEB87612E3BBEFCFE80F58578A54D58DA46EB5B34D15D5F1B66F0C6040467D9910B434876F4730EAC92A9618C1B9B69CAFB3C4CA6ABC93ACEB018D8A8FA90E53301E6DA68A2D0E059654F0605769E60E7B366990AB55E65B7489C7A79A38F3CE0ECF26DF51401C16702D5811D354F1ED64B22919EFBE67332022C1AE75FDB5CFDE0CB45761AB9D26AFA301581CF06F76BF99CCF466B98836E6752E162FAEE550BE9ADCE5125063F9FAF37ECB5E206A830CE64B97A362260EF99582B4B1D3A3A2334261EDA281C112B478C32E609EDA9408BC3AD518F7F49C71236947D9F7677FD62655958349894AFD079595A7DC0D835A23D6F06A995C17EA254DE0961710B1",
        e: "10001"
    };

    // Corresponds to RuntimeEnums.cs: GeneralCRMInterfaceNames
    this.CrmType = {
        None: "None",
        Salesforce: "Salesforce",
        Siebel: "Siebel",
        Oracle: "Oracle"
    };
});
angular.module('mainApp.appCommon.utilities.DateTimeFormatUtility', [])
.service('DateTimeFormatUtility', function () {
   
    this.OneDayInMS = 86400000;
    /*
    * Formats date according to specified format type..
    * @param {jsonDate} date in JSON format "/Date(XXXXXXXXXX-XXXX)/".
    * @param {formatType} format to find in the list of formats.
    */
    this.FormatJsonDateCSharpFormat = function (jsonDate, formatType) {
        var datetime = this.ParseJsonDate(jsonDate);
        var dtformat = this.ConvertCSharpFormat(formatType);
        if (datetime == null || isNaN(datetime) || dtformat == null) {
            return "";
        }

        return dateFormat(new Date(datetime), dtformat);
    };

    /*
    * Formats date according to specified format type..
    * @param {jsonDate} date in JSON format "/Date(XXXXXXXXXX)/".
    * @param {formatType} format to find in the list of formats.
    */
    this.FormatCSharpDate = function (jsonDate, formatType) {
        var datetime = this.ConvertCSharpDateTimeOffsetToJSDate(jsonDate);
        var dtformat = this.ConvertCSharpFormat(formatType);
        if (datetime == null || isNaN(datetime) || dtformat == null) {
            return "";
        }

        return dateFormat(new Date(datetime), dtformat);
    };
    
    this.ConvertCSharpDateTimeOffsetToJSDate = function (csDate) {
        if (csDate == null || csDate.DateTime == null || csDate.OffsetMinutes == null) {
            return null;
        }
        //DateTime will look like "/Date(XXXXXXXXXX)/"
        var csDateTime = csDate.DateTime;
        var startParenIndex = csDateTime.indexOf("(");
        var endParenIndex = csDateTime.indexOf(")");
        if (startParenIndex === -1 || endParenIndex === -1) {
            return null;
        }

        var dateTimeInt = parseInt(csDateTime.substring(startParenIndex+1, endParenIndex));
        if (dateTimeInt == null || isNaN(dateTimeInt)) {
            return null;
        }
        
        return new Date(dateTimeInt);
    };
    
    this.CalculateDaysBetweenDates = function (startDate, endDate) {
        if (startDate == null || endDate == null) {
            return null;
        }
        
        var timeInMS = endDate.getTime() - startDate.getTime();
        
        return Math.floor(timeInMS / this.OneDayInMS);
    };

    /*
    * Extract and return date in milliseconds.
    * @param {jsonDate} date in JSON format "/Date(XXXXXXXXXX-XXXX)/".
    */
    this.ParseJsonDate = function (jsonDate) {
        // extract date portion
        var txt = $.trim(jsonDate);
        if (txt.length === 0) {
            return null;
        }
        var start = txt.indexOf("(");
        var end = txt.indexOf("-");
        if (start == -1 || end == -1 || start >= end) {
            return null;
        }
        var dt = txt.substring(start + 1, end);

        return Number(dt);
    };

    /*
     * Converts a JavaScript Date to the DateTimeOffset format that C# expects,
     * i.e.: for sending datetimeoffsets from the front end to the back end.
     * @param {jsDate}: Javascript Date object
     */
    this.ConvertJSDateToCSharpDateTimeOffset = function (jsDate, isEndDate) {
        if (!(jsDate instanceof Date)) {
            return jsDate;
        }

        // For an End Date, set its time to absolute latest
        // so that comparisons will also account for things on that day (DEF-5695)
        if (isEndDate === true) {
            jsDate.setHours(23, 59, 59, 999);
        } else if (isEndDate === false) { // Start Date - set its time to absolute earliest
            jsDate.setHours(0, 0, 0, 0);
        }

        var utcMsec = jsDate.getTime(); // milliseconds since 1970/01/01
        var cSharpDateTimeOffset = {
            DateTime: '/Date(' + utcMsec + ')/',
            OffsetMinutes : -1 * jsDate.getTimezoneOffset() // js does utc minus local, so need to negate
        };
        return cSharpDateTimeOffset;
    };

    /*
     * Convert a simple Date representation from C# (e.g. {Year:2013, Month:9, Day:1})
     * to a JavaScript Date object.
     */
    this.ConvertCSharpSimpleDateToJSDate = function (simpleDate) {
        var jsDate = new Date(
            simpleDate.Year,
            simpleDate.Month - 1, // JavaScript months go from 0-11
            simpleDate.Day
        );
        return jsDate;
    };

    /*
     * Converts minutes into an object with hours and minutes
     */
    this.MinutesToHoursAndMinutes = function (minutes) {
        if (isNaN(minutes)) {
            return null;
        }

        var toReturn = {};
        toReturn.Hours = parseInt(minutes / 60);
        toReturn.Minutes = (minutes % 60);
        return toReturn;
    };

    /*
    * Extract datetime format and converts it to the JavaScript format expected by date.format.js.
    * @param {formatType} format to find in the list of formats.
    */
    //TODO:pierce Whoever is using this needs to change the paramaters to not require BrowserStorage
    this.ConvertCSharpFormat = function (formatType, dateTimeFormatList) {

        // Bard has no getAppModelDoc, so return some default
        if (dateTimeFormatList == null) {
            return "m/d/yyyy h:MM tt Z";
        }
        
        var dateFormatValue = null;
        for (var i = 0; i < dateFormatList.length; i++) {
            if (dateFormatList[i].Key == formatType) {
                dateFormatValue = dateFormatList[i].Value;
                break;
            }
        }
        if (dateFormatValue == null || dateFormatValue.length === 0) {
            return null;
        }
        // replace all lower case 'm' with upper case 'M' to convert minutes format;
        // replace all 'M' to 'm' for month conversion;
        // replace 'z','zz','zzz' with single 'o'
        // replace 'K' with 'Z'
        var str = dateFormatValue.split('');

        for (i = 0; i < str.length; i++) {
            switch (str[i]) {
                case 'M': str[i] = 'm'; break;
                case 'm': str[i] = 'M'; break;
                case 'z':
                    str[i] = 'o';
                    // see if more than one z
                    for (var j = i + 1; j < str.length; j++) {
                        if (str[j] == 'z') {
                            str[j] = '';
                        }
                    }
                    break;
                case 'K': str[i] = 'Z'; break;
                default: break;
            }

        }
        dateFormatValue = str.join('');
        return dateFormatValue;
    };


    /* return right now in the format requested*/

    this.Now = function (formatType) {
    
        var dtformat = this.ConvertCSharpFormat(formatType);
        if(dtformat == null) {
            return "";
        }

        return dateFormat(new Date(), dtformat);
    };
    
    this.FormatStringDate = function(dateString, includeTime) {
        includeTime = includeTime != null && typeof includeTime === "boolean" ? includeTime : false;
        if (dateString == null || dateString === "") {
            return "";
        }
        
        var dateObj = new Date(dateString);
        if (dateObj == "Invalid Date") {
            return "";
        }
        
        if (includeTime) {
            return dateObj.toLocaleDateString() + " " + dateObj.toLocaleTimeString();
        } else {
            return dateObj.toLocaleDateString();
        }
    };
    
    this.FormatEpochDate = function (dateString) {
        if (dateString == null || dateString === "") {
            return "";
        }
        
        if(isNaN(dateString)) {
            return ""; 
        }
        
        var epochTime = parseInt(dateString) * 1000;
        var dateObj = new Date();
        dateObj.setTime(epochTime);
        
        return dateObj.toUTCString();
    };
    
    this.FormatShortDate = function (dateString) {
        return dateFormat(new Date(dateString), "m/d/yyyy");
    };
    
});
angular.module('mainApp.appCommon.utilities.EvergageUtility', [])                                                                                                                                                                        
.service('EvergageUtility', function () {
    // This will create a global variable used for Evergage tracking and 
    // add the Evergage tracking JavaScript
    this.Initialize = function (options) {
        if (options == null) {
            return;
        }
        var dataset = 'lp_multitenant_production';
        var evergageAccount = 'latticeengines';
        var userName = '';

        if (options.company != null) {
            userName += options.company + "-";
        }        
        
        // Add title if available
        if (options.title != null) {
            userName += options.title + "-";
        }
        
        if (options.userID != null) {
            userName += options.userID;
        } else {
            userName += Math.floor((Math.random()*1000)+1);
        }

        //TODO: entry point for Evergage user title story.
        // _aaq is created on the salesprism.aspx page so it becomes a global variable.
        // This is required by Evergage and has to be name _aaq.
        _aaq.push(['setEvergageAccount', evergageAccount], 
                  ['setDataset', dataset], 
                  ['setUseSiteConfig', true],
                  ['setUser', userName],
                  ['setCompany', options.company],
                  ['setAccountType', 'Standard'],
                  ['setLoggingLevel', 'NONE']);

        var d = document, g = d.createElement('script'), s = d.getElementsByTagName('script')[0];
        g.type = 'text/javascript'; g.defer = true; g.async = true;
        g.src = document.location.protocol + '//cdn.evergage.com/beacon/' +
                evergageAccount + '/' + dataset + '/scripts/evergage.min.js';
        s.parentNode.insertBefore(g, s);
    };
    
    // Determine if instance is Production, DEP or Development
    this.GetEnvironment = function (hostName) {
        var toReturn = "development";
        if (hostName == null) {
            return toReturn;
        }
        
        if (hostName.toLowerCase().indexOf("dep") !== -1) {
            toReturn = "deployment";
        } else if (hostName.toLowerCase().indexOf("lattice-engines") !== -1) {
            toReturn = "production";
        }

        return toReturn;
    };
    
    // Return the Deployment name from the URL pathname in window.location
    this.GetDeploymentName = function (pathname) {
        var toReturn = 'DEV';
        if (pathname != null) {
            var lastSlashIndex = pathname.lastIndexOf("/");
            if (lastSlashIndex > 0) {
                toReturn = pathname.substring(1, lastSlashIndex);
            } else {
                toReturn = pathname.substring(1);
            }
        }
        return toReturn;
    };
    
    this.TrackAction = function (actionName) {
        if (_aaq != null && actionName != null) {
            _aaq.push(['trackAction', actionName]);
        }
    };
});
angular.module('exceptionOverride', [
])
.factory('$exceptionHandler', function () {
    return function (exception, cause) {
      exception.message += ' (caused by "' + cause + '")';
      if (console != null) {
          console.log("Error: "+ exception.message);
      }
    };
  });
angular.module('mainApp.appCommon.utilities.FaultUtility', [
    'mainApp.appCommon.utilities.ConfigConstantUtility',
    'mainApp.appCommon.utilities.ResourceUtility',
    'mainApp.core.utilities.BrowserStorageUtility',
    'mainApp.appCommon.modals.SimpleModal'
])                                                                                                                                                                        
.service('FaultUtility', function (ResourceUtility, BrowserStorageUtility, SimpleModal) {
    
    this.HandleServiceResponseFailure = function (response, faultTitle, failSilently) {
        failSilently = typeof failSilently !== 'undefined' ? failSilently : false;
        //Session Timeout?
        if (this.HandleSessionTimeout(response)) return;
        //Authentication Issue?
        if (this.HandleAuthenticationIssue(response)) return;
        
        if (!failSilently) {
            //Special Error?
            if (this.HandleSpecialErrors(response)) return;
            
            //Generic Error
            var message = this.GenerateErrorMessage(response.Errors);
            this.ShowFaultAlert(message, faultTitle);
        }
    };
    
    //This is used to handle calls that get no response from the server (i.e. server is down)
    this.HandleNoResponseFailure = function (response, settings) {
        faultTitle = settings.faultTitle;
        failSilently = settings.failSilently;
        failSilently = typeof failSilently !== 'undefined' ? failSilently : false;
        if (!failSilently) {
            
            var message = this.GetWebServiceFaultDetails(response, settings);
            this.ShowFaultAlert(message, settings.faultTitle);
        }
    };
    
    /*
     * Checks for a session timeout error in the list of errors
     * 
     */
    this.HandleSessionTimeout = function (response) {
        var result = false;
        var timeoutString = ResourceUtility.getString('USER_SESSION_TIMEOUT');
        if (this.GetUserDisplayableErrors(response).indexOf(timeoutString) != -1) {  
            this.ShowFaultAlert(timeoutString, ResourceUtility.getString('USER_SESSION_TIMEOUT_TITLE'), this.ResetApp);
            result = true;
        }
        
        return result;
    };
    
    this.HandleAuthenticationIssue = function (response) {
        var result = false;
        var expiredString = ResourceUtility.getString('LOGIN_EXPIRED_AUTHENTICATION_CREDENTIALS');
        var invalidString = ResourceUtility.getString('LOGIN_INVALID_AUTHENTICATION_CREDENTIALS');
        if (this.GetUserDisplayableErrors(response).indexOf(expiredString) != -1) {
            this.ResetApp();
            result = true;
        } else if (this.GetUserDisplayableErrors(response).indexOf(invalidString) != -1) {
            this.ShowFaultAlert(invalidString, ResourceUtility.getString('INVALID_AUTHENTICATION_CREDENTIALS_TITLE'), this.ResetApp);
            result = true;
        }
        
        return result;
    };
    
    this.HandleSpecialErrors = function (response) {
        if (response != null && response.Errors != null && response.Errors.length > 0) {
            for (var x = 0; x<response.Errors.length;x++) {
                var error = response.Errors[x];
                if (error.CodeString == ConfigConstantUtility.ImpersonationWriteError) {
                    this.ShowFaultAlert(ResourceUtility.getString(error.CodeString));
                    return true;
                } else if (error.CodeString == ConfigConstantUtility.ValidationInProgressError) {
                    var detailedDescription = null;
                    for (var y = 0; y<error.DataList.length;y++) {
                        var errorDetail = error.DataList[y];
                        if (errorDetail == ResourceUtility.getString(ConfigConstantUtility.DetailedDescriptionDataKey)) {
                            detailedDescription = errorDetail;
                            //this should only break out of the $.each() loop and not out of HandleSpecialErrors
                            break;
                        }
                    }
                    if (detailedDescription == null) {
                        detailedDescription = ResourceUtility.getString(error.CodeString);
                    }
                    this.ShowFaultAlert(detailedDescription, error.Message);
                    return true;
                }
            }
        }
        return false;
    };
    
    this.GetUserDisplayableErrors = function (response) {
        var result = "";
        
        if (response != null && response.Errors != null && response.Errors.length > 0) {
            for (var x = 0; x<response.Errors.length;x++) {
                var errorValue = response.Errors[x];
                var errorMessage = errorValue.Message;
                var fullErrorMessage = errorMessage.replace(errorValue.CodeString, ResourceUtility.getString(errorValue.CodeString));
                if (errorMessage === fullErrorMessage) {
                    result += ResourceUtility.getString(errorValue.CodeString) + " " + fullErrorMessage + " ";
                } else {
                    result += fullErrorMessage + " ";
                }
            }
        }
        
        return result;
    };
    
    this.GetWebServiceFaultDetails = function (response, settings) {
        var result = "";
        //Handle special faults
        switch (response.statusText) {
            case "timeout":
                var timeoutString = ResourceUtility.getString('REQUEST_TIMEOUT_BEGIN');
                var timeoutInSeconds = settings.timeout / 1000;
                var unitString = settings.timeout != 1000 ? ResourceUtility.getString('REQUEST_TIMEOUT_SECONDS') : ResourceUtility.getString('REQUEST_TIMEOUT_SECOND');
                if (timeoutString !== 'REQUEST_TIMEOUT_BEGIN') {
                    result = timeoutString + " " + timeoutInSeconds + " " + unitString + ".";
                } else {
                    unitString = " second" + (settings.timeout != 1000 ? "s." : ".");
                    result = "Request timed out after " + settings.timeout + unitString;
                }
                break;
        }
        if (result === "") {
            var message = ResourceUtility.getString('SERVER_UNAVAILABLE') != 'SERVER_UNAVAILABLE' ? 
                ResourceUtility.getString('SERVER_UNAVAILABLE') : 'Server temporarily unavailable. Please retry later.';  
            result = message;
            if(response.status !== 0) {
                result += "<br /><br />Status Code: " + response.status;
                //Report error to New Relic
                var loc = settings.url.indexOf('?');
                NewRelicWorker.SendActivity("Error: " + response.status + " " + settings.url.substring(0, loc), 1);
            }
            if(response.statusText != null) {
                result += "<br /><br />Fault Detail: " + response.statusText;
            }
        }
        return result;
    };
    
    this.GenerateErrorMessage = function (errors) {
        var toReturn = "";
        if(!$.isEmptyObject(errors)) {
            for(var x = 0; x<errors.length;x++) {
                var parentError = errors[x];
                var numChildErrors = 0;
                if(!$.isEmptyObject(parentError.InnerErrors)) {
                    numChildErrors = parentError.InnerErrors.length;
                }
                
                if (numChildErrors === 0 || (numChildErrors > 0 && parentError.CodeString != "VALIDATION_ERROR")) {
                    toReturn += this.GenerateSingleErrorMessage(parentError, (numChildErrors > 0));
                }
                
                if (numChildErrors > 0)
                {
                    toReturn += this.GenerateErrorMessage(parentError.InnerErrors);
                }
            }
        }
        return toReturn;
    };
    
    this.GenerateSingleErrorMessage = function (error, isParent) {
        isParent = typeof isParent !== 'undefined' ? isParent : false;
        if (!isParent) {
            return "ERROR: " + ResourceUtility.getString(error.CodeString) +"<br /><br />" + error.Message + "<br /><br /><br />";
        }
        return "PARENT ERROR: " + ResourceUtility.getString(error.CodeString) +"<br /><br />" + error.Message + "<br /><br /><br />";
    };
    
    this.ShowFaultAlert = function (faultMessage, faultTitle, callback) {
        SimpleModal.show({
            message: faultMessage, 
            title: faultTitle, 
            okCallback: callback
        });
    };
    
    this.ResetApp = function () {
        BrowserStorageUtility.clear(false);
        ResourceUtility.clearResourceStrings();
        window.location.hash = "/Initial";
    };
    
     //This is used to handle failures returned from our own rest calls and handle them without throwing a pop up
    this.HandleFriendlyServiceResponseErrors = function (response) {
        if (response == null) {
            return;
        }
        //Session Timeout?
        if (this.HandleSessionTimeout(response)) return;
        //Authentication Issue?
        if (this.HandleAuthenticationIssue(response)) return;
        
        return this.GenerateErrorMessage(response.Errors);
    };
});
var mod = angular.module('mainApp.core.services.FeatureFlagService', [
    'mainApp.core.utilities.RightsUtility',
    'mainApp.core.utilities.BrowserStorageUtility'
]);

mod.service('FeatureFlagService', function ($q, $http, BrowserStorageUtility, RightsUtility) {

    this.GetAllFlags = function() {
        var deferred = $q.defer();
        GetAllFlagsAsync(deferred);
        return deferred.promise;
    };

    this.FlagIsEnabled = GetFlag;

    // =======================================================
    // flag schema/hash ==> must in sync with backend schema
    // =======================================================
    var flags = {
        CHANGE_MODEL_NAME: 'ChangeModelNames',
        DELETE_MODEL: 'DeleteModels',
        UPLOAD_JSON: 'UploadSummaryJson',

        USER_MGMT_PAGE: 'UserManagementPage',
        ADD_USER: 'AddUsers',
        CHANGE_USER_ACCESS: 'ChangeUserAccess',
        DELETE_USER: 'DeleteUsers',

        ADMIN_PAGE: 'AdminPage',
        ADMIN_ALERTS_TAB: 'AdminAlertsTab',

        MODEL_HISTORY_PAGE: 'ModelCreationHistoryPage',
        SYSTEM_SETUP_PAGE: 'SystemSetupPage',
        ACTIVATE_MODEL_PAGE: 'ActivateModelPage',

        SETUP_PAGE: 'SetupPage',
        DEPLOYMENT_WIZARD_PAGE: 'DeploymentWizardPage',
        REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE: 'RedirectToDeploymentWizardPage',
        LEAD_ENRICHMENT_PAGE: 'LeadEnrichmentPage',
    };
    this.Flags = function(){ return flags; };

    var flagValues = {};

    function GetAllFlagsAsync(promise) {
        // feature flag cached
        if (flagValues.length > 0) {
            promise.resolve(flagValues);
            return;
        }

        // retrieve feature flag
        var sessionDoc = BrowserStorageUtility.getClientSession();
        if (sessionDoc === null || !sessionDoc.hasOwnProperty("Tenant")) {
            promise.resolve({}); // should not attempt to get flags before logging in a tenant
            return;
        }

        var tenantId = sessionDoc.Tenant.Identifier;

        $http({
            method: 'GET',
            url: '/pls/config/featureflags?tenantId=' + tenantId
        })
        .success(function(data) {
            for(var key in data) {
                flagValues[key] = data[key];
            }

            // update user-level flags
            UpdateFlagsBasedOnRights();

            promise.resolve(flagValues);
        })
        .error(function() {
            // if cannot get feature flags from backend
            SetFlag(flags.ADMIN_ALERTS_TAB, false);
            SetFlag(flags.SETUP_PAGE, false);
            SetFlag(flags.ACTIVATE_MODEL_PAGE, false);
            SetFlag(flags.SYSTEM_SETUP_PAGE, false);
            SetFlag(flags.DEPLOYMENT_WIZARD_PAGE, false);
            SetFlag(flags.REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE, false);
            SetFlag(flags.LEAD_ENRICHMENT_PAGE, false);

            // update user-level flags
            UpdateFlagsBasedOnRights();

            promise.resolve(flagValues);
        });
    }

    function SetFlag(flag, value) { flagValues[flag] = value; }
    function UpdateFlag(flag, value) { SetFlagUsingBooleanAnd(flag, value); }
    function SetFlagUsingBooleanAnd(flag, value) {
        if (flagValues.hasOwnProperty(flag)) {
            SetFlag(flag, flagValues[flag] && value);
        } else {
            SetFlag(flag, value);
        }
    }

    /**
     * @return {boolean}
     */
    function GetFlag(flag) { return flagValues[flag] || false; }

    function UpdateFlagsBasedOnRights() {
        UpdateFlag(flags.CHANGE_MODEL_NAME, RightsUtility.currentUserMay("Edit", "Models"));
        UpdateFlag(flags.DELETE_MODEL, RightsUtility.currentUserMay("Edit", "Models"));
        UpdateFlag(flags.UPLOAD_JSON, RightsUtility.currentUserMay("Create", "Models"));

        UpdateFlag(flags.USER_MGMT_PAGE, RightsUtility.currentUserMay("View", "Users"));
        UpdateFlag(flags.ADD_USER, RightsUtility.currentUserMay("Edit", "Users"));
        UpdateFlag(flags.CHANGE_USER_ACCESS, RightsUtility.currentUserMay("Edit", "Users"));
        UpdateFlag(flags.DELETE_USER, RightsUtility.currentUserMay("Edit", "Users"));

        UpdateFlag(flags.ADMIN_PAGE, RightsUtility.currentUserMay("View", "Reporting"));
        UpdateFlag(flags.MODEL_HISTORY_PAGE, RightsUtility.currentUserMay("View", "Reporting"));
        UpdateFlag(flags.SYSTEM_SETUP_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.ACTIVATE_MODEL_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));

        UpdateFlag(flags.SETUP_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.DEPLOYMENT_WIZARD_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.LEAD_ENRICHMENT_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
    }

});
angular.module('mainApp.core.services.HelpService', [
    'mainApp.appCommon.utilities.URLUtility'
])
.service('HelpService', function (URLUtility) {
    
    /*
    * Navigates to the Privacy Policy web page.
    */
    this.OpenPrivacyPolicy = function() {
        URLUtility.OpenNewWindow("./help/PrivacyPolicy.html");
    };
});
angular.module('mainApp.appCommon.utilities.MetadataUtility', [
    'mainApp.appCommon.utilities.SortUtility'
])
.service('MetadataUtility', function (SortUtility) {
    
    //Constants
    this.PropertyType = {
        INTEGER: "Int",
        INTEGER64: "Int64",
        DECIMAL: "Decimal",
        DOUBLE: "Double",
        BOOL: "Bool",
        STRING: "String",
        DATE_TIME_OFFSET: "DateTimeOffset",
        CURRENCY: "Currency",
        PROBABILITY: "Probability",
        PERCENTAGE: "Percentage",
        EPOCH_TIME: "EpochTime"
    };
    
    this.ApplicationContext = {
        Account: "LatticeForAccounts",
        Lead: "LatticeForLeads"
    };
    
    this.NotionNames = {
        Lead: "DanteLead"
    };
    
    this.GetNotionMetadata = function (notionName, metadata) {
        if (metadata == null || metadata.Notions == null || metadata.Notions.length === 0 || notionName == null || notionName === "") {
            return null;
        }
        for (var i = 0; i < metadata.Notions.length; i++) {
            var notion = metadata.Notions[i];
            if (notionName == notion.Key) {
                return notion.Value;
            }
        }
        return null;
    };
    
    this.GetNotionAssociationMetadata = function (notionName, associationNotionName, rootMetadata) {
        if (rootMetadata == null || notionName == null || associationNotionName == null || associationNotionName === "") {
            return null;
        }
        
        var metadata = this.GetNotionMetadata(notionName, rootMetadata);
        
        if (metadata == null || metadata.Associations == null) {
            return null;
        }
        
        for (var i = 0; i < metadata.Associations.length; i++) {
            var metadataAssociation = metadata.Associations[i];
            if (associationNotionName == metadataAssociation.TargetNotion) {
                return metadataAssociation;
            }
            
        }
        return null;
    };
    
    // Must pass in the relevant metadata object in order to get the correct property
    // e.g. Must pass in the DanteLead notion to get it's Name property
    this.GetNotionProperty = function (propertyName, notionMetadata) {
        if (notionMetadata == null || notionMetadata.Properties == null ||
            propertyName == null || propertyName === "") {
            return null;
        }

        for (var i = 0; i < notionMetadata.Properties.length; i++) {
            var metadataProperty = notionMetadata.Properties[i];
            if (propertyName == metadataProperty.Name) {
                return metadataProperty;
            }
            
        }
        return null;
    };

    this.GetCompareFunction = function (propertyTypeString) {
        switch (propertyTypeString) {
            // If you need to use custom compare functions 
            // for certain types (MetadataConstants.PropertyType),
            // put the cases here: 
            default:
                return SortUtility.DefaultCompare;
        }
    };
});
angular.module('mainApp.core.utilities.NavUtility', [])
.service('NavUtility', function () {

    // Hash Constants
    this.MANAGE_CREDENTIALS_HASH = "/ManageCredentials";
    this.UPDATE_PASSWORD_HASH = "/UpdatePassword";
    this.USER_MANAGEMENT_HASH = "/UserManagement";
    this.MODEL_LIST_HASH = "/ModelList";
    this.MODEL_DETAIL_HASH = "/ModelDetail";
    this.MODEL_CREATION_HISTORY_HASH = "/ModelCreationHistory";
    this.ACTIVATE_MODEL = "/ActivateModel";
    this.SETUP_HASH = "/ManageFields";
    this.DEPLOYMENT_WIZARD_HASH = "/DeploymentWizard";

    // Navigation Event Constants
    this.MANAGE_CREDENTIALS_NAV_EVENT = "ManageCredentialsNavEvent";
    this.UPDATE_PASSWORD_NAV_EVENT = "UpdatePasswordNavEvent";
    this.USER_MANAGEMENT_NAV_EVENT = "UserManagementNavEvent";
    this.MODEL_LIST_NAV_EVENT = "ModelListNavEvent";
    this.MODEL_DETAIL_NAV_EVENT = "ModelDetailNavEvent";
    this.MODEL_CREATION_HISTORY_NAV_EVENT = "ModelCreationHistoryNavEvent";
    this.SETUP_NAV_EVENT = "SetupNavEvent";
    this.LOAD_FIELDS_NAV_EVENT = "LoadFieldsEvent";
    this.DEPLOYMENT_WIZARD_NAV_EVENT = "DeploymentWizardNavEvent";
    this.LEAD_ENRICHMENT_NAV_EVENT = "LeadEnrichment";

    // General Event Constants
    this.SYSTEM_CONFIGURED_COMPLETE_EVENT = "SystemConfiguredCompleteEvent";
});
angular.module('mainApp.appCommon.utilities.NumberUtility', [])
.service('NumberUtility', function () {
   
    /*
        Purpose:        Given a number, will return the abbreviated version (e.g. 14000 becomes 14k)
        Parameters:     an integer
        Returns:        A string
    */
    this.AbbreviateLargeNumber = function (number, decPlaces) {
        if (number == null || typeof number != "number") {
            return null;
        }
        
        decPlaces = decPlaces != null && typeof decPlaces === 'number' ? decPlaces : 2;
        
        //Method acquired from: http://stackoverflow.com/questions/2685911/is-there-a-way-to-round-numbers-into-a-reader-friendly-format-e-g-1-1k
        
        // 2 decimal places => 100, 3 => 1000, etc
        decPlaces = Math.pow(10,decPlaces);

        // Enumerate number abbreviations
        var abbrev = [ "K", "M", "B", "T" ];
    
        // Go through the array backwards, so we do the largest first
        for (var i=abbrev.length-1; i>=0; i--) {
    
            // Convert array index to "1000", "1000000", etc
            var size = Math.pow(10,(i+1)*3);
    
            // If the number is bigger or equal do the abbreviation
            if(size <= number) {
                 // Here, we multiply by decPlaces, round, and then divide by decPlaces.
                 // This gives us nice rounding to a particular decimal place.
                 number = Math.round(number*decPlaces/size)/decPlaces;
    
                 // Handle special case where we round up to the next abbreviation
                 if((number == 1000) && (i < abbrev.length - 1)) {
                     number = 1;
                     i++;
                 }
    
                 // Add the letter for the abbreviation
                 number += abbrev[i];
    
                 // We are done... stop
                 break;
            }
        }
    
        return number;
    };
    
});
angular.module('mainApp.core.utilities.PasswordUtility', ['mainApp.appCommon.utilities.ResourceUtility',])
.service('PasswordUtility', function (ResourceUtility) {

    this.validPassword = function(password) {
        var result = {
            Valid: true,
            ErrorMsg: null
        };

        if (password.length < 8) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        var uppercase = /[A-Z]/;
        if (!uppercase.test(password)) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        var lowercase = /[a-z]/;
        if (!lowercase.test(password)) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        var number = /[0-9]/;
        if (!number.test(password)) {
            result.Valid = false;
            result.ErrorMsg = ResourceUtility.getString("CHANGE_PASSWORD_HELP");
            return result;
        }

        return result;
    };

});

angular.module('mainApp.core.services.ResourceStringsService', [
    'mainApp.appCommon.utilities.URLUtility',
    'mainApp.appCommon.utilities.ResourceUtility'
])
.service('ResourceStringsService', function ($http, $q, URLUtility, ResourceUtility) {
    
    this.DefaultLocale= "en-US";
    
    this.GetExternalResourceStringsForLocale = function (locale) {
        if (locale == null) {
            locale = this.DefaultLocale;
        }
        
        var webAddress = "assets/resources/" + locale + "/" + "ResourceStringsExternal.txt";
        return getResourceStringsAtWebAddress(webAddress);
    };

    this.GetInternalResourceStringsForLocale = function (locale) {
        if (locale == null) {
            locale = this.DefaultLocale;
        }
        
        var webAddress = "assets/resources/" + locale + "/" + "ResourceStrings.txt";
        return getResourceStringsAtWebAddress(webAddress);
    };

    function getResourceStringsAtWebAddress (webAddress) {
        
        var deferred = $q.defer();
        
        $http({
            method: 'GET', 
            url: webAddress
        })
        .success(function(data, status, headers, config) {
            if (data == null) return;
            
            var resourceStrings = {};
            var result = data.split("\r\n");
            for (var x=0;x<result.length;x++) {
                if (result[x] !== "") {
                    var resourceString = result[x].split("=");
                    resourceStrings[resourceString[0]] = resourceString[1];
                }
            }
            ResourceUtility.configStrings = resourceStrings;
            ResourceUtility.resourceStringsInitialized = true;
            deferred.resolve(true);
        })
        .error(function(data, status, headers, config) {
            deferred.resolve(true);
        });
        
        return deferred.promise;
    }
});
angular.module('mainApp.appCommon.utilities.ResourceUtility', [])                                                                                                                                                                        
.service('ResourceUtility', function () {
    
    this.DefaultLocale = "en-US";
    
    // key for config resource string object in local storage
    this.configStringsStorageKey = "ConfigStrings";
    this.configStringsKeyValueStorageKey = "ConfigStringKeyValues";
    this.configStringsLocaleStorageKey = "ConfigStringsLocale";

    // in memory dictionary of config resource string keys and values
    this.configStrings = null;
    
    // Indicator that somebody accessed the app without going through the proper channel
    this.resourceStringsInitialized = false;

    //This is needed for Flex so it can create it's StringLocator instance
    this.keyValuePairs = [];

    // get a config resource string value given its key
    this.getString = function (key, replacements) {
        if (this.configStrings == null) {
            this.populateConfigStrings();
        }
        var toReturn = this.configStrings[key] || key;
        if (replacements) {
            toReturn = this.replaceTokens(toReturn, replacements);
        }
        return toReturn;
    };
    
    this.clearResourceStrings = function () {
        $.jStorage.set(this.configStringsStorageKey, null);
        $.jStorage.set(this.configStringsKeyValueStorageKey, null);
        $.jStorage.set(this.configStringsLocaleStorageKey, null);
    };
    
    this.getResourceStrings = function () {
        return $.jStorage.get(this.configStringsStorageKey);
    };
    
    this.getResourceStringKeyValues = function () {
        return $.jStorage.get(this.configStringsKeyValueStorageKey);
    };
    
    this.setCurrentLocale = function (localeName) {
        $.jStorage.set(this.configStringsLocaleStorageKey, localeName);
    };
    
    this.getCurrentLocale = function () {
        return $.jStorage.get(this.configStringsLocaleStorageKey);
    };

    this.replaceTokens = function (key, replacements) {
        for (var i = 0; i < replacements.length; i++) {
            while (key.indexOf("{" + i + "}") != -1) {
                key = key.replace("{"+i+"}", replacements[i]);
            }
        }
        return key;
    };
    // populate in memory config resource strings dictionary from local storage
    this.populateConfigStrings = function () {
        var configStringsFromStorage = $.jStorage.get(
            this.configStringsStorageKey);

        this.configStrings = configStringsFromStorage || {};
    };

    // store a list of config resource string objects in local storage
    // set the config resource strings, e.g. if updating a subset for another locale
    // data should be a list of objects with "key" and a "value" properties
    this.storeStringList = function (stringList, successHandler) {
        //check if there is already anything in memory
        if (this.configStrings == null) {
            this.populateConfigStrings();
        }

        if (stringList != null) {
            for (var i = 0; i < stringList.length; i++) {
                var curPair = stringList[i];
                var curKey = curPair.Key;
                var curValue = curPair.Value;

                this.keyValuePairs.push(curPair);
                this.configStrings[curKey] = curValue;
            }
            this.resourceStringsInitialized = true;
        }

        // store updated set of strings back into local storage
        $.jStorage.set(this.configStringsStorageKey,
            this.configStrings);
            
        $.jStorage.set(this.configStringsKeyValueStorageKey,
            this.keyValuePairs);

        $(document).trigger('configStringsLoadedEvent');

        if (successHandler != null) {
            successHandler();
        }
    };

    //Preloads an image and return the preloaded image object
    this.PreloadImage = function (el, callback) {
        var img = new Image();
        img.onload = function () {
            callback(img);
        };
        img.src = el.attr("src");
    };

    this.SetBrowserTitle = function () {
        document.title = this.getString("BROWSER_TITLE");
    };
});
var app = angular.module('mainApp.core.utilities.RightsUtility',
    ['mainApp.appCommon.utilities.UnderscoreUtility',
    'mainApp.core.utilities.BrowserStorageUtility']);

app.service('RightsUtility', function (_, BrowserStorageUtility) {

    this.accessLevel = {
        EXTERNAL_USER: {name: 'EXTERNAL_USER', ordinal: 0},
        EXTERNAL_ADMIN: {name: 'EXTERNAL_ADMIN', ordinal: 1},
        INTERNAL_USER: {name: 'INTERNAL_USER', ordinal: 2},
        INTERNAL_ADMIN: {name: 'INTERNAL_ADMIN', ordinal: 3},
        SUPER_ADMIN: {name: 'SUPER_ADMIN', ordinal: 4}
    };

    this.getAccessLevel = function(s) {
        return _.findWhere(this.accessLevel, {name : s});
    };

    this.may = function(rightsDict, operation, category) {
        if (rightsDict.hasOwnProperty("PLS_" + category)) {
            var rights = rightsDict["PLS_" + category];
            return (rights['May' + operation]);
        }
        return false;
    };

    this.currentUserMay = function(operation, category) {
        var clientSession = BrowserStorageUtility.getClientSession();
        return this.may(clientSession.AvailableRights, operation, category);
    };

});

angular.module('mainApp.core.utilities.ServiceErrorUtility', [
    'mainApp.appCommon.utilities.ResourceUtility',
    'mainApp.appCommon.utilities.FaultUtility',
    'mainApp.appCommon.modals.SimpleModal'
])
.service('ServiceErrorUtility', function (FaultUtility, ResourceUtility, SimpleModal) {
    
    this.InvalidCredentials = "LOGIN_INVALID_AUTHENTICATION_CREDENTIALS";
    this.ExpiredCredentials = "LOGIN_EXPIRED_AUTHENTICATION_CREDENTIALS";
    this.ExpiredPassword = "LOGIN_EXPIRED_USER_PASSWORD";
    /*
     * This is used to handle failures returned from our own rest calls and handle them without throwing a pop up
     */
    this.HandleFriendlyServiceResponseErrors = function (response) {
        if (response == null) {
            return;
        }
        // Session Timeout?
        if (this.HandleSessionTimeout(response)) {
            return;
        }
        
        return this.GetUserDisplayableErrors(response);
    };
    
    this.HandleServiceResponseFailure = function (response, faultTitle, failSilently) {
        failSilently = typeof failSilently !== 'undefined' ? failSilently : false;
        
        if (!failSilently) {
            // Generic Error
            var message = this.HandleFriendlyServiceResponseErrors(response);
            FaultUtility.ShowFaultAlert(message, faultTitle);
        }
    };
    
    // Need to handle the scenario where a service is not responding at all
    this.HandleFriendlyNoResponseFailure = function () {
        // Need to show a better error message if it fails to get the resource strings
        var resultError = ResourceUtility.getString('UNEXPECTED_SERVICE_ERROR');
        if (resultError == "UNEXPECTED_SERVICE_ERROR") {
            resultError = "Unknown error occurred.";
        }
        var result = {
            success: false,
            resultObj: null,
            resultErrors: resultError
        };
        return result;
    };
    
    /*
     * Checks for a session timeout error in the list of errors
     */
    this.HandleSessionTimeout = function (response) {
        var result = false;
        if (this.ServiceResponseContainsError(response, this.ExpiredCredentials)) {
            SimpleModal.show({
                message: ResourceUtility.getString(this.ExpiredCredentials), 
                title: ResourceUtility.getString('EXPIRED_SESSION_TITLE'),
                showCloseButton: false
            });
            result = true;
        }
        
        return result;
    };
    
    this.GetUserDisplayableErrors = function (response) {
        var result = "";
        
        if (response != null && response.Errors != null && response.Errors.length > 0) {
            for (var x = 0; x < response.Errors.length; x++) {
                var errorValue = response.Errors[x].Key;
                var errorMessage = response.Errors[x].Value;
                var fullErrorMessage = errorMessage.replace(errorValue, ResourceUtility.getString(errorValue));
                result += fullErrorMessage;
            }
        }
        
        return result;
    };
    
    // Checks the Service Response for a specific error code
    this.ServiceResponseContainsError = function (response, errorCode) {
        var result = false;
        if (response != null && response.Errors != null && response.Errors.length > 0) {
            for (var x = 0; x < response.Errors.length; x++) {
                if (response.Errors[x].Key == errorCode) {
                    result = true;
                }
            }
        }
        return result;
    };
    
    this.ServiceResultError = "";
    
    this.ShowErrorView = function (response) {
        if (response == null) {
            this.ServiceResultError = this.HandleFriendlyNoResponseFailure();
        } else {
            this.ServiceResultError = response.resultErrors;
        }
        window.location.hash = '/ServiceError';
    };
});
angular.module('mainApp.core.services.SessionService', [
    'mainApp.core.utilities.BrowserStorageUtility',
    'mainApp.appCommon.utilities.ResourceUtility'
])
.service('SessionService', function (BrowserStorageUtility, ResourceUtility) {
    
    this.ClearSession = function () {
        BrowserStorageUtility.clear(false);
        ResourceUtility.clearResourceStrings();
        window.location.reload();
    };
    
    this.HandleResponseErrors = function (data, status) {
        if (status === 401) {
            this.ClearSession();
        }
    };
});
angular.module('mainApp.appCommon.utilities.SortUtility', [])                                                                                                                                                                        
.service('SortUtility', function () {
    
    // Sort a list of objects on multiple object properties
    // Each object in propsToSortOn should be something like:
    // { Name: "Quantity", IsAscending: true, CompareFunction: compareNumeric }
    this.MultiSort = function (objsToSort, propsToSortOn) {
        if (!(objsToSort instanceof Array)) {
            return;
        }

        if (objsToSort.length <= 0) {
            return;
        }

        var firstObj = objsToSort[0];
        var objType = typeof firstObj;
        // Just use default Array.sort for non-objects
        if (objType === "boolean" ||
            objType === "number" ||
            objType === "string") {
            objsToSort.sort();
        } else { // Sort objects using the properties to sort on
            var compareFunction = this.GetCompareFunction(propsToSortOn);
            if (typeof compareFunction === "function") {
                objsToSort.sort(compareFunction);
            }
        }
    };

    this.GetCompareFunction = function (propsToSortOn) {
        var self = this;

        // undefined means we don't know how to sort this
        var compareFunction;

        if (propsToSortOn instanceof Array &&
            propsToSortOn.length > 0) {

            compareFunction = function (a, b) {
                // compare a and b on each property
                // until you find one where they don't match
                for (var i = 0; i < propsToSortOn.length; i++) {
                    var prop = propsToSortOn[i];
                    var propName = prop.Name;
                    var propIsAscending = prop.IsAscending;
                    if (typeof propIsAscending !== "boolean") {
                        propIsAscending = true;
                    }
                    var propCompareFunction = prop.CompareFunction;

                    var compareResult = self.CompareObjectsByProperty(
                        a, b, propName, propIsAscending, propCompareFunction);
                    if (compareResult !== 0) {
                        return compareResult;
                    }
                }
                // a and b matched on all properties
                return 0;
            };

        }
        return compareFunction;
    };

    this.CompareObjectsByProperty = function (a, b, propName, propIsAscending, propCompareFunction) {

        var result = 0;

        if (a == null && b == null) {
            result = 0;
        } else if (a == null) {
            result = -1;
        } else if (b == null) {
            result = 1;
        } else {
            var propA = a[propName];
            var propB = b[propName];

            var compareFunction;
            if (typeof propCompareFunction === "function") {
                compareFunction = propCompareFunction;
            } else {
                compareFunction = this.DefaultCompare;
            }

            result = compareFunction(propA, propB);
        }
        return (propIsAscending ? result : -1 * result);
    };

    this.DefaultCompare = function (a, b) {
        if (a < b) {
            return -1;
        }
        if (a == b) {
            return 0;
        }
        if (a > b) {
            return 1;
        }
        return 0;
    };

    // true comes before false
    this.ReverseBooleanCompare = function (a, b) {
        if ((typeof a !== "boolean") || (typeof b !== "boolean")) {
            return 0;
        }
        if (a === b) {
            return 0;
        }
        if (a === false) { // b is true
            return 1;
        }
        if (a === true) { // b is false
            return -1;
        }
    };
});
angular.module('mainApp.appCommon.utilities.StringUtility', [])                                                                                                                                                                        
.service('StringUtility', function () {

    this.IsEmptyString = function (stringToCheck) {
        var isEmpty = true;
        if (stringToCheck != null && stringToCheck.trim() !== "") {
            isEmpty = false;
        }
        return isEmpty;
    };
    
    this.AddCommas = function (stringToChange) {
        if (stringToChange == null) {
            return null;
        }
        var parts = stringToChange.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    };
    
});
angular.module('mainApp.appCommon.utilities.TenantIdParsingUtility', [])
.service('TenantIdParsingUtility', function() {
    this.getDataLoaderTenantNameFromTenantId = function(tenantId) {
        tenantNameArray = tenantId.split("\.");
        if (tenantNameArray.length == 3) {
            return tenantNameArray[1];
        }
        return tenantNameArray[0];
    };
});
angular.module('mainApp.appCommon.utilities.TimestampIntervalUtility', [])
.service('TimestampIntervalUtility', function() {
    this.isTimestampFartherThanNinetyDaysAgo = function(timestamp) {
        if (!timestamp) {
            return false;
        }
        var MILLISECOND_PER_DAY = 24 * 60 * 60 * 1000;
        var numDaysAgoPasswordLastModified = Math.floor((Date.now() - timestamp) / MILLISECOND_PER_DAY) ;
        return numDaysAgoPasswordLastModified >= 90;
    };
});
angular.module('mainApp.appCommon.utilities.TrackingConstantsUtility', [
])
.service('TrackingConstantsUtility', function () {
    
    // Play Tracking actions
    this.PLAY_TAB_CLICKED = 'PlayTabClicked';
    this.PLAY_LIST_TILE_CLICKED = 'PlayListTileClicked';
    this.PLAY_DETAIL_TILE_CLICKED = 'PlayDetailTileClicked';
    this.TALKING_POINT_EXPANDED = 'TalkingPointExpanded';
    this.TALKING_POINT_COLLAPSED = 'TalkingPointCollapsed';
    
    // Company Snapshot actions
    this.COMPANY_SNAPSHOT_TAB_CLICKED = 'CompanySnapshotTabClicked';
});
angular.module('mainApp.appCommon.utilities.URLUtility', [
    'mainApp.appCommon.utilities.ConfigConstantUtility'
])
.service('URLUtility', function () {
    /**
    * Returns the location of the web server based on the main page
    */
    this.GetWebServerAddress = function (mainPage) {
        if (mainPage == null) {
            return null;
        }
        var pathname = location.pathname;
        var pageIndex = pathname.indexOf(mainPage);

        if (pageIndex != -1) {
            pathname = pathname.substring(0, pageIndex);
        }
        else {
            pathname = pathname.substring(0, pathname.length - 1);
        }

        return location.protocol + "//" + location.host + pathname;
    };
    
    this.GetBaseUrl = function () {
        return location.protocol + "//" + location.host + location.pathname;
    };
    
    this.GetUrlQueryStrings = function (url) {
        if (url == null) {
            return "";
        }
        var result = "";

        //First remove the hash if it is found
        var hashIndex = url.indexOf("#");
        if (hashIndex != -1) {
            url = url.substring(0, hashIndex);
        }

        //Find the beginning of the query string and remove everything before it
        var qIndex = url.indexOf("?");
        if (qIndex != -1) {
            result = url.substring(qIndex, url.length);
        }
        return result;
    };
    
    this.GetUrlWithQueryStrings = function (baseUrl) {
        if (baseUrl == null) {
            return null;
        }
        var url = this.HandleProtocol(baseUrl);
        var queryStringParameters = this.GetUrlQueryStrings(window.location.href);
        if (queryStringParameters != null && queryStringParameters != "?") {
            url += queryStringParameters;
        }
        return url;
    };

    this.RemoveQueryStringParameter = function (url, parameter) {
        var urlHash = "";
        var hashIndex = url.indexOf("#");
        var qIndex = url.indexOf('?');

        if (hashIndex > -1) {
            if (hashIndex < qIndex) {
                // hash is before the query string parameters
                urlHash = url.substring(hashIndex, qIndex);
            } else {
                // hash is at the end
                urlHash = url.substring(hashIndex);
                url = url.replace(urlHash, "");
            }
        }

        var urlparts = url.split('?');

        if (urlparts.length >= 2) {
            var prefix = encodeURIComponent(parameter) + '=';
            var pars = urlparts[1].split(/[&;]/g);
            for (var i = pars.length; i-- > 0; )               // reverse iteration as may be destructive
                if (pars[i].lastIndexOf(prefix, 0) !== -1)   // idiom for string.startsWith
                    pars.splice(i, 1);
            if (pars.length === 0) {
                url = urlparts[0];
            } else {
                url = urlparts[0] + '?' + pars.join('&');
            }
        }

        if (hashIndex > -1 && hashIndex < qIndex) {
            return url;
        } else {
            return url + urlHash;
        }
    };

    this.GetSalesPrismWebServerAddress = function (salesPrismURL) {
        if (salesPrismURL == null) {
            return null;
        }

        return this.HandleProtocol(salesPrismURL.replace(/\/salesprism.aspx/gi, ""));
    };

    this.GetSalesPrismMainPageAddress = function (salesPrismURL) {
        if (salesPrismURL == null) {
            return null;
        }
        var hasPage = salesPrismURL.indexOf("salesprism.aspx") !== -1;
        if (hasPage) {
            return this.HandleProtocol(salesPrismURL);
        }
        if (salesPrismURL.charAt(salesPrismURL.length - 1) === "/") {
            salesPrismURL += "salesprism.aspx";
        } else {
            salesPrismURL += "/salesprism.aspx";
        }

        return this.HandleProtocol(salesPrismURL);
    };

    this.GetBardWebServerAddress = function (bardUrl) {
        if (bardUrl == null) {
            return null;
        }

        return this.HandleProtocol(bardUrl.replace(/\/index.aspx/gi, ""));
    };

    this.GetBardMainPageAddress = function (bardUrl) {
        if (bardUrl == null) {
            return null;
        }
        var hasPage = bardUrl.indexOf("index.aspx") !== -1;
        if (hasPage) {
            return this.HandleProtocol(bardUrl);
        }
        if (bardUrl.charAt(bardUrl.length - 1) === "/") {
            bardUrl += "index.aspx";
        } else {
            bardUrl += "/index.aspx";
        }

        return this.HandleProtocol(bardUrl);
    };

    this.GetBardMainPageAddressWithHash = function (bardUrl) {
        if (bardUrl == null) {
            return null;
        }
        var currentLocation = window.location.href;
        var urlHash = "";
        var hashIndex = currentLocation.indexOf("#");
        var qIndex = currentLocation.indexOf('?');

        if (hashIndex > -1) {
            if (hashIndex < qIndex) {
                // hash is before the query string parameters
                urlHash = currentLocation.substring(hashIndex, qIndex);
            } else {
                // hash is at the end
                urlHash = currentLocation.substring(hashIndex);
            }
        }
        return this.GetBardMainPageAddress(bardUrl) + urlHash;
    };

    this.OpenWindow = function (url, location) {
        if (url == null || location == null) {
            return;
        }
        window.open(url, location);
    };

    this.OpenNewWindow = function (url) {
        this.OpenWindow(url, '_blank');
    };

    this.OpenPostWindow = function (target, url, data, fetchType) {
        var content = this.ConstructPostContent(url, data, fetchType);
        var win = window.open("about:blank", target);
        if (win) {
            win.document.write(content);
        }

        return win;
    };

    this.OpenPostIframe = function (target, url, data, fetchType) {
        var content = this.ConstructPostContent(url, data, fetchType);
        $("#" + target).html(content);
    };

    this.ConstructPostContent = function (url, data, fetchType) {
        fetchType = typeof fetchType !== 'undefined' ? fetchType : 'POST';
        var content = "<!DOCTYPE html><html><head></head><body>";
        content += "<form id=\"postForm\" method='" + fetchType + "' action='" + url + "'>";
        $.each(data, function (name, value) {
            content += "<input type='hidden' name='" + name + "' value='" + value + "'></input>";
        });
        content += "</form>";
        content += "<script type='text/javascript'>document.getElementById(\"postForm\").submit();</script>";
        content += "</body></html>";

        return content;
    };

    this.GetQueryStringValue = function (key, keepHash) {
        keepHash = typeof keepHash === 'boolean' ? keepHash : false;
        var result = null;
        var payload = window.location.href;
        var qIndex = payload.indexOf("?");
        if (qIndex != -1) {
            var queryString = payload.substring(qIndex + 1);

            var pair = null;
            var params = queryString.split("&");
            for (i = 0; i < params.length; i++) {

                pair = params[i].split("=");

                if (pair.length == 2 && pair[0] == key) {
                    result = pair[1];
                    break;
                }
            }
        }

        //cleanup: if the result contains a hash "#"
        //remove the hash and anything after
        if (result != null && !keepHash) {
            var hashIndex = result.indexOf("#");
            if (hashIndex != -1) {
                result = result.substring(0, hashIndex);
            }
        }

        return (result != null ? this.Decode(result) : null);
    };

    this.Decode = function (value) {
        var result = value;

        var matches = result.match(new RegExp("%..", "gi"));
        if (matches != null) {
            for (i = 0; i < matches.length; i++) {
                var charCode = parseInt("0x" + matches[i].substring(1));
                var character = String.fromCharCode(charCode);
                result = result.replace(matches[i], character);
            }
        }

        return result;
    };

    this.ExtractTabFromHash = function (hash) {
        var toReturn = null;
        switch (hash) {
            case ConfigConstantUtility.BardModelHash:
            case ConfigConstantUtility.BardStatusHash:
            case ConfigConstantUtility.BardConfigHash:
            case ConfigConstantUtility.BardReportHash:
                toReturn = ConfigConstantUtility.ViewBard;
                break;
            case ConfigConstantUtility.ActionCenterHash:
                toReturn = ConfigConstantUtility.ViewActionItems;
                break;
            case ConfigConstantUtility.SalesListHash:
                toReturn = ConfigConstantUtility.ViewSales;
                break;
            case ConfigConstantUtility.PlayListHash:
            case ConfigConstantUtility.LaunchMetricsHash:
            case ConfigConstantUtility.LaunchRulesHash:
            case ConfigConstantUtility.LaunchFiltersHash:
            case ConfigConstantUtility.PlayQuestionsHash:
            case ConfigConstantUtility.HoldoutsHash:
                toReturn = ConfigConstantUtility.ViewPlay;
                break;
            case ConfigConstantUtility.ConfigConsoleHash:
            case ConfigConstantUtility.AdminConsoleHash:
            case ConfigConstantUtility.UsersHash:
            case ConfigConstantUtility.UserGroupsHash:
            case ConfigConstantUtility.AlertsHash:
            case ConfigConstantUtility.PreviewAlertsHash:
            case ConfigConstantUtility.FileTemplatesHash:
            case ConfigConstantUtility.MailTemplatesHash:
            case ConfigConstantUtility.FileUploadHash:
            case ConfigConstantUtility.ExternalDataHash:
                toReturn = ConfigConstantUtility.ViewAdmin;
                break;
            case ConfigConstantUtility.InvitationsHash:
                toReturn = ConfigConstantUtility.ViewMessages;
                break;
            case ConfigConstantUtility.DashboardCenterHash:
                toReturn = ConfigConstantUtility.ViewDashboardCenter;
                break;
            case ConfigConstantUtility.ChangePasswordHash:
                toReturn = ConfigConstantUtility.ViewChangePassword;
                break;
            case ConfigConstantUtility.ProductHierarchyHash:
                toReturn = ConfigConstantUtility.ViewProductHierarchy;
                break;
            // Dante hashes     
            case ConfigConstantUtility.DantePlayHash:
                toReturn = ConfigConstantUtility.DantePlayHash;
                break;
            case ConfigConstantUtility.DantePurchaseTrendsHash:
                toReturn = ConfigConstantUtility.DantePurchaseTrendsHash;
                break;
            case ConfigConstantUtility.DanteCompanyDetailsHash:
                toReturn = ConfigConstantUtility.DanteCompanyDetailsHash;
                break;
            case ConfigConstantUtility.DanteContactsHash:
                toReturn = ConfigConstantUtility.DanteContactsHash;
                break;
        }

        return toReturn;
    };

    this.ExtractSubViewFromHash = function (hash) {
        var toReturn = null;

        switch (hash) {
            case ConfigConstantUtility.PlayListHash:
                toReturn = "Plays";
                break;
            case ConfigConstantUtility.LaunchMetricsHash:
                toReturn = "LaunchMetrics";
                break;
            case ConfigConstantUtility.LaunchRulesHash:
                toReturn = "LaunchRules";
                break;
            case ConfigConstantUtility.LaunchFiltersHash:
                toReturn = "FilterRules";
                break;
            case ConfigConstantUtility.PlayQuestionsHash:
                toReturn = "PlayQuestions";
                break;
            case ConfigConstantUtility.HoldoutsHash:
                toReturn = "UploadHoldouts";
                break;
            case ConfigConstantUtility.ConfigConsoleHash:
                toReturn = "ConfigConsole";
                break;
            case ConfigConstantUtility.AdminConsoleHash:
                toReturn = "AdminConsole";
                break;
            case ConfigConstantUtility.UsersHash:
                toReturn = "Users";
                break;
            case ConfigConstantUtility.UserGroupsHash:
                toReturn = "UserGroups";
                break;
            case ConfigConstantUtility.AlertsHash:
                toReturn = "Alerts";
                break;
            case ConfigConstantUtility.PreviewAlertsHash:
                toReturn = "PreviewAlerts";
                break;
            case ConfigConstantUtility.FileTemplatesHash:
                toReturn = "FeedTemplates";
                break;
            case ConfigConstantUtility.MailTemplatesHash:
                toReturn = "MailMerge";
                break;
            case ConfigConstantUtility.FileUploadHash:
                toReturn = "FileUpload";
                break;
            case ConfigConstantUtility.ExternalDataHash:
                toReturn = "ExternalData";
                break;
            case ConfigConstantUtility.BardStatusHash:
                toReturn = "BardStatus";
                break;
            case ConfigConstantUtility.BardConfigHash:
                toReturn = "BardConfig";
                break;
            case ConfigConstantUtility.BardReportHash:
                toReturn = "BardReport";
                break;
            case ConfigConstantUtility.BardModelHash:
                toReturn = "BardModel";
                break;
        }

        return toReturn;
    };

    this.HandleProtocol = function (url) {
        if (url == null) {
            return null;
        }
        var httpIncluded = url.indexOf("http://") === 0;
        var httpsIncluded = url.indexOf("https://") === 0;
        if (httpIncluded || httpsIncluded) {
            return url;
        } else {
            return location.protocol + "//" + url;
        }

    };

    /**
    * Query String/Navigator Property helpers 
    */

    //Different SSO query string parameters
    this.SALESFORCE = "salesforce";
    this.SAML = "saml";
    this.LEA = "lea";
    this.ORACLE = "oracle";

    this.Directory = function () {
        return this.GetQueryStringValue("Directory");
    };

    this.SamlResponseValue = function () {
        return this.GetQueryStringValue("LESAMLUserLookup");
    };

    this.SamlDirectoryValue = function () {
        return this.GetQueryStringValue("LESAMLDirectoryKey");
    };

    this.LeaResponse = function () {
        return this.GetQueryStringValue("LEAuthenticatedLookup");
    };

    /**
    * @return Current SSO type, or null if not using SSO 
    */
    this.GetSSOType = function () {
        if (this.Directory() == this.ORACLE) {
            return this.ORACLE;
        } else if (this.CrmSessionID() != null && this.CrmServerURL() != null) {
            return this.SALESFORCE;
        } else if (this.SamlResponseValue() != null) {
            return this.SAML;
        } else if (this.LeaResponse() != null) {
            return this.LEA;
        } else {
            return null;
        }
    };

    this.CrmSessionID = function () {
        var secretSessionId = this.GetQueryStringValue("sin");
        if (secretSessionId != null) {
            return secretSessionId;
        }
        return this.GetQueryStringValue("sessionid");
    };

    this.CrmServerURL = function () {
        return this.GetQueryStringValue("serverurl");
    };

    this.CrmUser = function () {
        var result = null;

        var rawValue = this.GetQueryStringValue("userlink");
        if (rawValue != null) {
            var sIndex = rawValue.lastIndexOf("/");
            if (sIndex != -1) {
                result = rawValue.substring(sIndex + 1);
            } else {
                result = rawValue;
            }
        }

        // Strip last 3 case-encoding characters
        if (result != null && result.length > 15) {
            result = result.substr(0, 15);
        }

        return result;
    };

    this.CrmType = function () {
        var crmType = this.GetQueryStringValue("crmtype");
        crmType = crmType.toLowerCase();
        crmType = StringUtil.CapitalizeFirstLetter(crmType);
        var crmTypes = ConfigConstantUtility.CrmType;
        switch (crmType) {
            case crmTypes.None:
            case crmTypes.Salesforce:
            case crmTypes.Siebel:
            case crmTypes.Oracle:
                return crmType;
            default:
                return crmTypes.None;
        }
    };

    this.CrmAccount = function () {
        return this.GetQueryStringValue("Account");
    };
    
    this.CrmLead = function () {
        return this.GetQueryStringValue("Lead");
    };
    
    this.CrmContact = function () {
        return this.GetQueryStringValue("Contact");
    };
    
    this.CrmIntegrationServer = function () {
        var result = null;

        var rawValue = this.GetQueryStringValue("userlink");
        if (rawValue != null) {
            var sIndex = rawValue.lastIndexOf("/");
            if (sIndex != -1) result = rawValue.substring(0, sIndex);
        }

        return result;
    };

    this.IntegrationServer = function () {
        var result = null;

        if (this.CrmServerURL() != null)
            result = this.CrmIntegrationServer();

        return (result != null ? result : "");
    };

    // Get the external ID of the Application's Directory
    // e.g. "default", "development", "salesforce", "saml", ...
    // code is currently based on DirectoryHelper.as: GetDirectory()
    this.GetApplicationDirectory = function () {
        var result = this.Directory();
        if (result == null) {
            result = this.SamlDirectoryValue();
        }
        return result;
    };
});
angular.module('mainApp.appCommon.utilities.UnderscoreUtility', [
])
.factory('_', function() {
    return window._; // assumes underscore has already been loaded on the page
});
angular.module('mainApp.config.services.ConfigService', [
    'mainApp.core.utilities.ServiceErrorUtility',
    'mainApp.core.utilities.BrowserStorageUtility',
    'mainApp.appCommon.utilities.ResourceUtility',
    'mainApp.appCommon.utilities.URLUtility',
    'mainApp.core.services.SessionService'
])
.service('ConfigService', function ($http, $q, BrowserStorageUtility, ServiceErrorUtility, ResourceUtility, URLUtility, SessionService) {
    this.GetCurrentTopology = function () {
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;
        
        var credentialUrl = "/pls/config/topology?tenantId=" + tenant;
        var result;
        $http({
            method: "GET", 
            url: credentialUrl
        })
        .success(function(data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data.Topology,
                    resultErrors: null
                };
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: data.errorMsg
                };
            }
            deferred.resolve(result);
        })
        .error(function(data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var errorMessage;
            if (data != null && data !== "") {
                errorMessage = data.errorMsg;
            } else {
                errorMessage = ResourceUtility.getString("SYSTEM_ERROR");
            }
            
            result = {
                success: false,
                resultObj: null,
                resultErrors: errorMessage
            };
            deferred.resolve(result);
        });
        
        return deferred.promise;
    };
    
    this.GetCurrentCredentials = function (topologyType, isProduction) {
        isProduction = typeof isProduction !== 'undefined' ? isProduction : true;
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;
        
        var credentialUrl = "/pls/credentials/" + topologyType + "?tenantId=" + tenant;
        if (topologyType === "sfdc") {
            credentialUrl += "&isProduction=" + isProduction;
        }
        var result;
        $http({
            method: "GET", 
            url: credentialUrl
        })
        .success(function(data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            } else {
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: data.errorMsg
                };
            }
            deferred.resolve(result);
        })
        .error(function(data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString("SYSTEM_ERROR")
                };
            deferred.resolve(result);
        });
        
        return deferred.promise;
    };
    
    //If a user forgets their password, this will reset it and notify them
    this.ValidateApiCredentials = function (topologyType, apiObj, isProduction) {
        if (apiObj == null) {
            return null;
        }
        isProduction = typeof isProduction !== 'undefined' ? isProduction : true;
        var deferred = $q.defer();
        var tenant = BrowserStorageUtility.getClientSession().Tenant.Identifier;
        var credentialUrl = "/pls/credentials/" + topologyType + "/?tenantId=" + tenant;
        if (topologyType === "sfdc") {
            credentialUrl += "&isProduction=" + isProduction;
        }
        var result;
        $http({
            method: "POST", 
            url: credentialUrl,
            data: JSON.stringify(apiObj),
            timeout: 60000
        })
        .success(function(data, status, headers, config) {
            if (status === 200) {
                result = {
                    success: true,
                    resultObj: data,
                    resultErrors: null
                };
            } else {
                SessionService.HandleResponseErrors(data, status);
                result = {
                    success: false,
                    resultObj: null,
                    resultErrors: ResourceUtility.getString("VALIDATE_CREDENTIALS_FAILURE")
                };
            }
            deferred.resolve(result);
        })
        .error(function(data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var errorMessage;
            if (status === 0) {
                errorMessage = ResourceUtility.getString("VALIDATE_CREDENTIALS_TIMEOUT");
            } else if ( data.errorCode === "LEDP_18030" ) {
                errorMessage = ResourceUtility.getString("VALIDATE_CREDENTIALS_FAILURE");
            } else {
                errorMessage = ResourceUtility.getString("SYSTEM_ERROR");
                console.error(data.errorMsg);
            }
            result = {
                success: false,
                resultObj: null,
                resultErrors: errorMessage
            };
            deferred.resolve(result);
        });
        
        return deferred.promise;
    };
});
var mod = angular.module('mainApp.core.services.FeatureFlagService', [
    'mainApp.core.utilities.RightsUtility',
    'mainApp.core.utilities.BrowserStorageUtility'
]);

mod.service('FeatureFlagService', function ($q, $http, BrowserStorageUtility, RightsUtility) {

    this.GetAllFlags = function() {
        var deferred = $q.defer();
        GetAllFlagsAsync(deferred);
        return deferred.promise;
    };

    this.FlagIsEnabled = GetFlag;

    // =======================================================
    // flag schema/hash ==> must in sync with backend schema
    // =======================================================
    var flags = {
        CHANGE_MODEL_NAME: 'ChangeModelNames',
        DELETE_MODEL: 'DeleteModels',
        UPLOAD_JSON: 'UploadSummaryJson',

        USER_MGMT_PAGE: 'UserManagementPage',
        ADD_USER: 'AddUsers',
        CHANGE_USER_ACCESS: 'ChangeUserAccess',
        DELETE_USER: 'DeleteUsers',

        ADMIN_PAGE: 'AdminPage',
        ADMIN_ALERTS_TAB: 'AdminAlertsTab',

        MODEL_HISTORY_PAGE: 'ModelCreationHistoryPage',
        SYSTEM_SETUP_PAGE: 'SystemSetupPage',
        ACTIVATE_MODEL_PAGE: 'ActivateModelPage',

        SETUP_PAGE: 'SetupPage',
        DEPLOYMENT_WIZARD_PAGE: 'DeploymentWizardPage',
        REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE: 'RedirectToDeploymentWizardPage',
        LEAD_ENRICHMENT_PAGE: 'LeadEnrichmentPage',
    };
    this.Flags = function(){ return flags; };

    var flagValues = {};

    function GetAllFlagsAsync(promise) {
        // feature flag cached
        if (flagValues.length > 0) {
            promise.resolve(flagValues);
            return;
        }

        // retrieve feature flag
        var sessionDoc = BrowserStorageUtility.getClientSession();
        if (sessionDoc === null || !sessionDoc.hasOwnProperty("Tenant")) {
            promise.resolve({}); // should not attempt to get flags before logging in a tenant
            return;
        }

        var tenantId = sessionDoc.Tenant.Identifier;

        $http({
            method: 'GET',
            url: '/pls/config/featureflags?tenantId=' + tenantId
        })
        .success(function(data) {
            for(var key in data) {
                flagValues[key] = data[key];
            }

            // update user-level flags
            UpdateFlagsBasedOnRights();

            promise.resolve(flagValues);
        })
        .error(function() {
            // if cannot get feature flags from backend
            SetFlag(flags.ADMIN_ALERTS_TAB, false);
            SetFlag(flags.SETUP_PAGE, false);
            SetFlag(flags.ACTIVATE_MODEL_PAGE, false);
            SetFlag(flags.SYSTEM_SETUP_PAGE, false);
            SetFlag(flags.DEPLOYMENT_WIZARD_PAGE, false);
            SetFlag(flags.REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE, false);
            SetFlag(flags.LEAD_ENRICHMENT_PAGE, false);

            // update user-level flags
            UpdateFlagsBasedOnRights();

            promise.resolve(flagValues);
        });
    }

    function SetFlag(flag, value) { flagValues[flag] = value; }
    function UpdateFlag(flag, value) { SetFlagUsingBooleanAnd(flag, value); }
    function SetFlagUsingBooleanAnd(flag, value) {
        if (flagValues.hasOwnProperty(flag)) {
            SetFlag(flag, flagValues[flag] && value);
        } else {
            SetFlag(flag, value);
        }
    }

    /**
     * @return {boolean}
     */
    function GetFlag(flag) { return flagValues[flag] || false; }

    function UpdateFlagsBasedOnRights() {
        UpdateFlag(flags.CHANGE_MODEL_NAME, RightsUtility.currentUserMay("Edit", "Models"));
        UpdateFlag(flags.DELETE_MODEL, RightsUtility.currentUserMay("Edit", "Models"));
        UpdateFlag(flags.UPLOAD_JSON, RightsUtility.currentUserMay("Create", "Models"));

        UpdateFlag(flags.USER_MGMT_PAGE, RightsUtility.currentUserMay("View", "Users"));
        UpdateFlag(flags.ADD_USER, RightsUtility.currentUserMay("Edit", "Users"));
        UpdateFlag(flags.CHANGE_USER_ACCESS, RightsUtility.currentUserMay("Edit", "Users"));
        UpdateFlag(flags.DELETE_USER, RightsUtility.currentUserMay("Edit", "Users"));

        UpdateFlag(flags.ADMIN_PAGE, RightsUtility.currentUserMay("View", "Reporting"));
        UpdateFlag(flags.MODEL_HISTORY_PAGE, RightsUtility.currentUserMay("View", "Reporting"));
        UpdateFlag(flags.SYSTEM_SETUP_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.ACTIVATE_MODEL_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));

        UpdateFlag(flags.SETUP_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.DEPLOYMENT_WIZARD_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.REDIRECT_TO_DEPLOYMENT_WIZARD_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
        UpdateFlag(flags.LEAD_ENRICHMENT_PAGE, RightsUtility.currentUserMay("Edit", "Configurations"));
    }

});
angular.module('mainApp.core.services.HelpService', [
    'mainApp.appCommon.utilities.URLUtility'
])
.service('HelpService', function (URLUtility) {
    
    /*
    * Navigates to the Privacy Policy web page.
    */
    this.OpenPrivacyPolicy = function() {
        URLUtility.OpenNewWindow("./help/PrivacyPolicy.html");
    };
});
angular.module('mainApp.login.services.LoginService', [
    'mainApp.core.utilities.ServiceErrorUtility',
    'mainApp.core.utilities.BrowserStorageUtility',
    'mainApp.appCommon.utilities.UnderscoreUtility',
    'mainApp.appCommon.utilities.ResourceUtility',
    'mainApp.appCommon.utilities.StringUtility',
    'mainApp.core.services.SessionService'
])
.service('LoginService', function ($http, $q, $location, BrowserStorageUtility, ServiceErrorUtility, ResourceUtility, StringUtility, SessionService) {
    
    this.Login = function (username, password) {
        var deferred = $q.defer();
        
        var passwordHash = CryptoJS.SHA256(password);
        var httpHeaders = {
        };
        
        $http({
            method: 'POST', 
            url: '/pls/login',
            data: JSON.stringify({ Username: username, Password: passwordHash.toString() })
         }).then(
            function onSuccess(response) {
                var result = response.data;
                if (result != null && result !== "") {
                    BrowserStorageUtility.setTokenDocument(result.Uniqueness + "." + result.Randomness);
                    result.Result.UserName = username;
                    BrowserStorageUtility.setLoginDocument(result.Result);
                }
                deferred.resolve(result);
            }, function onError(response) {
                var result = {
                    Success: false,
                    errorMessage: ResourceUtility.getString('LOGIN_UNKNOWN_ERROR')
                };
                if (response.data.errorCode == 'LEDP_18001') result.errorMessage = ResourceUtility.getString('DEFAULT_LOGIN_ERROR_TEXT');
                deferred.resolve(result);
            });
        
        return deferred.promise;
    };
    
    this.GetSessionDocument = function (tenant) {
        if (tenant == null) {
            return null;
        }
        var deferred = $q.defer();
        
        $http({
            method: 'POST', 
            url: '/pls/attach',
            data: angular.toJson(tenant)
        })
        .success(function(data, status, headers, config) {
            var result = false;
            if (data != null && data.Success === true) {
                BrowserStorageUtility.setSessionDocument(data.Result);
                data.Result.User.Tenant = tenant;
                result = data;
                BrowserStorageUtility.setClientSession(data.Result.User, function(){
                    deferred.resolve(result);
                });
            }
            if (result.Result.User.AccessLevel === null) {
                status = 401;
                SessionService.HandleResponseErrors(data, status);
                deferred.resolve(result);
            }
        })
        .error(function(data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            deferred.resolve(data);
        });
        
        return deferred.promise;
    };

    // If a user forgets their password, this will reset it and notify them
    this.ResetPassword = function (username) {
        if (username == null) {
            return null;
        }
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: "/pls/forgotpassword/",
            data: {Username: username, Product: "Lead Prioritization", HostPort: this.getHostPort()},
            headers: {"Content-Type": "application/json"}
        })
        .success(function(data, status, headers, config) {
            var result = { Success: false };

            if (data === true || data === 'true') {
                result.Success = true;
            } else {
                SessionService.HandleResponseErrors(data, status);
            }
            deferred.resolve(result);
        })
        .error(function(data, status, headers, config) {
            var result = { Success: false, Error: data };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
    
    this.Logout = function () {
        var deferred = $q.defer();
        
        $http({
            method: 'GET', 
            data: '',
            url: "/pls/logout",
            headers: {
               "Content-Type": "application/json"
            }
        })
        .success(function(data, status, headers, config) {
            if (data != null && data.Success === true) {
                BrowserStorageUtility.clear(false);
                ResourceUtility.clearResourceStrings();
                window.location.reload();
            } else {
                SessionService.HandleResponseErrors(data, status);
            }
            deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
            deferred.resolve(data);
        });
        
        return deferred.promise;
    };
    
    this.ChangePassword = function (oldPassword, newPassword, confirmNewPassword) {
        var deferred = $q.defer();
        
        if (StringUtility.IsEmptyString(oldPassword) || StringUtility.IsEmptyString(newPassword) || StringUtility.IsEmptyString(confirmNewPassword)) {
            deferred.resolve(null);
            return deferred.promise;
        }

        var creds = {
            OldPassword : CryptoJS.SHA256(oldPassword).toString(),
            NewPassword : CryptoJS.SHA256(newPassword).toString()
        };

        var username = BrowserStorageUtility.getLoginDocument().UserName;
        $http({
            method: 'PUT',
            url: '/pls/users/' + username + '/creds',
            data: creds,
            headers: {
                "Content-Type": "application/json"
            }
        })
        .success(function(data, status, headers, config) {
            var result = {
                Success:    true,
                Status:     status
            };

            if (!data.Success) {
                result.Success = false;
            }

            deferred.resolve(result);
        })
        .error(function(data, status, headers, config) {
            var result = {
                    Success:    false,
                    Status:     status
                };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.getHostPort = function() {
        var host = $location.host();
        var protocal = $location.protocol();
        var port = $location.port();
        if (port == 80) {
            return protocal + "://" + host;
        } else {
            return protocal + "://" + host + ":" + port;
        }
    };

});

angular.module('mainApp.setup.services.MetadataService', [
    'mainApp.appCommon.utilities.UnderscoreUtility',
    'mainApp.core.utilities.BrowserStorageUtility',
    'mainApp.core.utilities.RightsUtility',
    'mainApp.appCommon.utilities.ResourceUtility',
    'mainApp.core.services.SessionService'
])

.service('MetadataService', function ($http, $q, _, BrowserStorageUtility, RightsUtility, ResourceUtility, SessionService) {

    this.GetFields = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: '/pls/vdbmetadata/fields?' + new Date().getTime(),
            headers: {
                'Content-Type': "application/json"
            }
        })
        .success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = data.Result;
            } else {
                result.ResultErrors = ResourceUtility.getString('SETUP_MANAGE_FIELDS_GET_FIELDS_ERROR');
            }
            deferred.resolve(result);
        })
        .error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_GET_FIELDS_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.UpdateField = function (field) {
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: '/pls/vdbmetadata/fields/' + field.ColumnName,
            headers: {
                'Content-Type': "application/json"
            },
            data: field
        })
        .success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = data.Result;
            } else {
                result.ResultErrors = ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELD_ERROR');
            }
            deferred.resolve(result);
        })
        .error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELD_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };

    this.UpdateFields = function (fields) {
        var deferred = $q.defer();

        $http({
            method: 'PUT',
            url: '/pls/vdbmetadata/fields',
            headers: {
                'Content-Type': "application/json"
            },
            data: fields
        })
        .success(function (data, status, headers, config) {
            var result = {
                Success: false,
                ResultObj: null,
                ResultErrors: null
            };
            if (data.Success) {
                result.Success = true;
                result.ResultObj = data.Result;
            } else {
                result.ResultErrors = ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELDS_ERROR');
            }
            deferred.resolve(result);
        })
        .error(function (data, status, headers, config) {
            SessionService.HandleResponseErrors(data, status);
            var result = {
                Success: false,
                ResultErrors: ResourceUtility.getString('SETUP_MANAGE_FIELDS_UPDATE_FIELD_ERROR')
            };
            deferred.resolve(result);
        });

        return deferred.promise;
    };
});
angular.module('mainApp.core.services.ResourceStringsService', [
    'mainApp.appCommon.utilities.URLUtility',
    'mainApp.appCommon.utilities.ResourceUtility'
])
.service('ResourceStringsService', function ($http, $q, URLUtility, ResourceUtility) {
    
    this.DefaultLocale= "en-US";
    
    this.GetExternalResourceStringsForLocale = function (locale) {
        if (locale == null) {
            locale = this.DefaultLocale;
        }
        
        var webAddress = "assets/resources/" + locale + "/" + "ResourceStringsExternal.txt";
        return getResourceStringsAtWebAddress(webAddress);
    };

    this.GetInternalResourceStringsForLocale = function (locale) {
        if (locale == null) {
            locale = this.DefaultLocale;
        }
        
        var webAddress = "assets/resources/" + locale + "/" + "ResourceStrings.txt";
        return getResourceStringsAtWebAddress(webAddress);
    };

    function getResourceStringsAtWebAddress (webAddress) {
        
        var deferred = $q.defer();
        
        $http({
            method: 'GET', 
            url: webAddress
        })
        .success(function(data, status, headers, config) {
            if (data == null) return;
            
            var resourceStrings = {};
            var result = data.split("\r\n");
            for (var x=0;x<result.length;x++) {
                if (result[x] !== "") {
                    var resourceString = result[x].split("=");
                    resourceStrings[resourceString[0]] = resourceString[1];
                }
            }
            ResourceUtility.configStrings = resourceStrings;
            ResourceUtility.resourceStringsInitialized = true;
            deferred.resolve(true);
        })
        .error(function(data, status, headers, config) {
            deferred.resolve(true);
        });
        
        return deferred.promise;
    }
});
angular.module('mainApp.core.services.SessionService', [
    'mainApp.core.utilities.BrowserStorageUtility',
    'mainApp.appCommon.utilities.ResourceUtility'
])
.service('SessionService', function (BrowserStorageUtility, ResourceUtility) {
    
    this.ClearSession = function () {
        BrowserStorageUtility.clear(false);
        ResourceUtility.clearResourceStrings();
        window.location.reload();
    };
    
    this.HandleResponseErrors = function (data, status) {
        if (status === 401) {
            this.ClearSession();
        }
    };
});
angular.module('mainApp.appCommon.modals.SimpleModal', [
    'mainApp.appCommon.utilities.ResourceUtility'
])
.service('SimpleModal', function (ResourceUtility) {
    
    this.show = function (overrides, okCallback) {
        
        var options = {
            showCloseButton: true,
            height: 250,
            width: 500,
            title: "",
            message: "",
            okButtonLabel: ResourceUtility.getString("BUTTON_OK_LABEL")
        };
        
        angular.extend(options, overrides);
        
        var modalClass = "no-close-button";
        var modalElement = $('<div></div>');
        modalElement.html(options.message);
        modalElement.dialog({
            height: options.height,
            width: options.width,
            autoOpen: false,
            closeOnEscape: false,
            modal: true,
            title: options.title,
            dialogClass: options.showCloseButton === true ? '' : modalClass,
            buttons: [
                {
                    text: options.okButtonLabel,
                    click: function () {
                        if (okCallback != null && typeof okCallback === 'function') {
                            okCallback();
                        }
                        modalElement.dialog("close");
                    }
                }
            ],
            close: function (evt, ui) {
                modalElement.remove();
            }
       });
       
       modalElement.dialog("open" );
    };
});