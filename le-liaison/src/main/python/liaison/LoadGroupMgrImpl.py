
#
# $LastChangedBy$
# $LastChangedDate$
# $Rev$
#

try:
  from lxml import etree
except ImportError as ie:
  print ''
  print '!!! Module \'lxml\' is necessary for parsing DataLoader configurations in \'liaison\' !!!'
  print ''
  raise ie

import getpass
from .exceptions import UnknownDataLoaderObject
from .LoadGroupMgr import LoadGroupMgr

class LoadGroupMgrImpl( LoadGroupMgr ):

  def __init__( self, conn_mgr, configstr ):
    
    super( LoadGroupMgrImpl, self ).__init__( conn_mgr )
    self.initFromConfig( configstr )


  def createDataProvider( self, config ):
    
    d_new = etree.fromstring( config.encode('ascii', 'xmlcharrefreplace') )
    if d_new.tag != 'dataProvider':
      raise UnknownDataLoaderObject( 'Unknown Functionality \'{0}\''.format(d_new.tag) )

    dataProviders = self._config.find(".//dataProviders")
    dataProviders.append( d_new )


  def createLoadGroup( self, groupName, groupPath, groupAlias, autoClear, isNestedGroup ):
    
    createdBy = 'liaison:{0}'.format( getpass.getuser() )
    
    autoClearOnFailure = 'False'
    if autoClear:
      autoClearOnFailure = 'True'
    
    ng = 'False'
    if isNestedGroup:
      ng = 'True'

    g = etree.Element( 'group'
                      ,name=groupName
                      ,alias=groupAlias
                      ,w='Workspace'
                      ,type='1'
                      ,scheduleType='0'
                      ,allowUserChangeScheduleType='False'
                      ,visibleForEndUser='True'
                      ,threshold='10000'
                      ,launchExpiredDays='7'
                      ,createdBy=createdBy
                      ,autoGenerated='False'
                      ,validationValidMinutes='120'
                      ,autoClearOnFailure=autoClearOnFailure
                      ,mergeRulesSaved='True'
                      ,ng=ng
                    )
    if groupPath is not None and groupPath != '':
      groupPath.replace( '/', '\\' )
      g.set( 'path', groupPath )

    g.append( etree.Element('schemas') )
    g.append( etree.Element('visiDBConfigurationWithMacros') )
    g.append( etree.Element('targetQueries') )
    g.append( etree.Element('targetQuerySequences') )
    g.append( etree.Element('rdss') )
    g.append( etree.Element('validationExtracts') )
    g.append( etree.Element('ces') )
    g.append( etree.Element('extractQueries') )
    g.append( etree.Element('extractQuerySequences') )
    g.append( etree.Element('pdmatches') )
    g.append( etree.Element('leadscroings') )
    g.append( etree.Element('lssbardins') )
    g.append( etree.Element('lssbardouts') )
    g.append( etree.Element('lds') )
    g.append( etree.Element('ecs') )

    self._groups[groupName] = g


  def deleteLoadGroup( self, groupName ):
    if groupName in self._groups:
      del self._groups[groupName]


  def getLoadGroup( self, groupName ):

    if groupName not in self._groups:
      raise UnknownDataLoaderObject( 'Unknown Load Group \'{0}\''.format(groupName) )

    g = self._groups[groupName]
    return etree.tostring( g )


  def setLoadGroup( self, config ):

    g_new = etree.fromstring( config.encode('ascii', 'xmlcharrefreplace') )
    if g_new.tag != 'group':
      raise UnknownDataLoaderObject( 'Unknown Functionality \'{0}\''.format(g_new.tag) )

    self._groups[g_new.get("name")] = g_new


  def hasLoadGroup( self, groupName ):
    return (groupName in self._groups)


  def getLoadGroupFunctionality( self, groupName, functionality ):

    if groupName not in self._groups:
      raise UnknownDataLoaderObject( 'Unknown Load Group \'{0}\''.format(groupName) )
    
    if functionality not in self._functionalities:
      raise UnknownDataLoaderObject( 'Unknown Functionality \'{0}\''.format(functionality) )

    g = self._groups[groupName]
    fstr = '<{0} />'.format( functionality )
    f = g.find(functionality)
    if f is not None:
      fstr = etree.tostring( f )
    return fstr


  def setLoadGroupFunctionality( self, groupName, config ):
    
    if groupName not in self._groups:
      raise UnknownDataLoaderObject( 'Unknown Load Group \'{0}\''.format(groupName) )

    f_new = etree.fromstring( config.encode('ascii', 'xmlcharrefreplace') )

    functionality = f_new.tag

    if functionality not in self._functionalities:
      raise UnknownDataLoaderObject( 'Unknown Functionality \'{0}\''.format(functionality) )

    g = self._groups[groupName]
    f_old = g.find(functionality)
    if f_old is not None:
      g.replace( f_old, f_new )
    else:
      g.append( f_new )


  def commit( self ):

    g_old = self._config.find(".//groups")
    g_new = etree.Element( 'groups' )
    for name, g in self._groups.iteritems():
      g_new.append( g )
    self._config.replace( g_old, g_new )
    self._conn_mgr.installDLConfigFile( etree.tostring(self._config) )


  def initFromConfig( self, configstr ):

    self._functionalities = set(['schemas','ngs','visiDBConfigurationWithMacros','targetQueries',
                                 'targetQuerySequences','rdss','validationExtracts','ces','extractQueries',
                                 'extractQuerySequences','leafExtracts','launchExtracts','jobs', 'pdmatches','leadscroings',
                                 'lssbardins','lssbardouts','lds','ecs','gCs'])

    self._config = etree.fromstring( configstr.encode('ascii', 'xmlcharrefreplace') )
    dataProviders = self._config.find(".//dataProviders")
    self._config.remove( dataProviders )
    self._config.append( etree.Element( 'dataProviders' ) )

    self._groups = {}

    groupdefns = self._config.find(".//groups")

    for g in groupdefns:
      self._groups[g.get("name")] = g
